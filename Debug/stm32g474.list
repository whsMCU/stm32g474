
stm32g474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015060  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d2c  08015240  08015240  00025240  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f6c  08015f6c  0003037c  2**0
                  CONTENTS
  4 .ARM          00000008  08015f6c  08015f6c  00025f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015f74  08015f74  0003037c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015f74  08015f74  00025f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015f78  08015f78  00025f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000037c  20000000  08015f7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000041ac  2000037c  080162f8  0003037c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004528  080162f8  00034528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003037c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000303ac  2**0
                  CONTENTS, READONLY
 13 .debug_line   0002949e  00000000  00000000  000303ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000043  00000000  00000000  0005988d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00022ae1  00000000  00000000  000598d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00005800  00000000  00000000  0007c3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001c48  00000000  00000000  00081bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011833c  00000000  00000000  00083800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001588  00000000  00000000  0019bb3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00030e60  00000000  00000000  0019d0c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000088a0  00000000  00000000  001cdf24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000037c 	.word	0x2000037c
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015228 	.word	0x08015228

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000380 	.word	0x20000380
 800021c:	08015228 	.word	0x08015228

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff33 	bl	8000b3c <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fca9 	bl	8000658 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc2a 	bl	8000564 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fca0 	bl	8000658 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff fae2 	bl	80002e8 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001002:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001004:	f00a fd40 	bl	800ba88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <LoopForever+0x6>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	; (8001040 <LoopForever+0xa>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <LoopForever+0xe>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	; (800104c <LoopForever+0x16>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f012 f8a5 	bl	801317c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001032:	f010 fee7 	bl	8011e04 <main>

08001036 <LoopForever>:

LoopForever:
    b LoopForever
 8001036:	e7fe      	b.n	8001036 <LoopForever>
  ldr   r0, =_estack
 8001038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	2000037c 	.word	0x2000037c
  ldr r2, =_sidata
 8001044:	08015f7c 	.word	0x08015f7c
  ldr r2, =_sbss
 8001048:	2000037c 	.word	0x2000037c
  ldr r4, =_ebss
 800104c:	20004528 	.word	0x20004528

08001050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_2_IRQHandler>

08001052 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f95d 	bl	800131c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001062:	200f      	movs	r0, #15
 8001064:	f000 f80e 	bl	8001084 <HAL_InitTick>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	e001      	b.n	8001078 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001074:	f00a fbbe 	bl	800b7f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001078:	79fb      	ldrb	r3, [r7, #7]

}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_InitTick+0x68>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d022      	beq.n	80010de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_InitTick+0x6c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <HAL_InitTick+0x68>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f976 	bl	800139e <HAL_SYSTICK_Config>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10f      	bne.n	80010d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b0f      	cmp	r3, #15
 80010bc:	d809      	bhi.n	80010d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010be:	2200      	movs	r2, #0
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	f04f 30ff 	mov.w	r0, #4294967295
 80010c6:	f000 f934 	bl	8001332 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_InitTick+0x70>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e007      	b.n	80010e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e004      	b.n	80010e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e001      	b.n	80010e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000004 	.word	0x20000004
 80010f0:	2000000c 	.word	0x2000000c
 80010f4:	20000000 	.word	0x20000000

080010f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_IncTick+0x1c>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_IncTick+0x20>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4413      	add	r3, r2
 8001106:	4a03      	ldr	r2, [pc, #12]	; (8001114 <HAL_IncTick+0x1c>)
 8001108:	6013      	str	r3, [r2, #0]
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	20000398 	.word	0x20000398
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	20000398 	.word	0x20000398

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800115c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	db12      	blt.n	800120c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	f003 021f 	and.w	r2, r3, #31
 80011ec:	490a      	ldr	r1, [pc, #40]	; (8001218 <__NVIC_DisableIRQ+0x44>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	095b      	lsrs	r3, r3, #5
 80011f4:	2001      	movs	r0, #1
 80011f6:	fa00 f202 	lsl.w	r2, r0, r2
 80011fa:	3320      	adds	r3, #32
 80011fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001200:	f3bf 8f4f 	dsb	sy
}
 8001204:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001206:	f3bf 8f6f 	isb	sy
}
 800120a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800120c:	bf00      	nop
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	e000e100 	.word	0xe000e100

0800121c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800121c:	b480      	push	{r7}
 800121e:	b083      	sub	sp, #12
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	6039      	str	r1, [r7, #0]
 8001226:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db0a      	blt.n	8001246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	490c      	ldr	r1, [pc, #48]	; (8001268 <__NVIC_SetPriority+0x4c>)
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	0112      	lsls	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	440b      	add	r3, r1
 8001240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001244:	e00a      	b.n	800125c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4908      	ldr	r1, [pc, #32]	; (800126c <__NVIC_SetPriority+0x50>)
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	f003 030f 	and.w	r3, r3, #15
 8001252:	3b04      	subs	r3, #4
 8001254:	0112      	lsls	r2, r2, #4
 8001256:	b2d2      	uxtb	r2, r2
 8001258:	440b      	add	r3, r1
 800125a:	761a      	strb	r2, [r3, #24]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr
 8001268:	e000e100 	.word	0xe000e100
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b480      	push	{r7}
 8001272:	b089      	sub	sp, #36	; 0x24
 8001274:	af00      	add	r7, sp, #0
 8001276:	60f8      	str	r0, [r7, #12]
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	f1c3 0307 	rsb	r3, r3, #7
 800128a:	2b04      	cmp	r3, #4
 800128c:	bf28      	it	cs
 800128e:	2304      	movcs	r3, #4
 8001290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	3304      	adds	r3, #4
 8001296:	2b06      	cmp	r3, #6
 8001298:	d902      	bls.n	80012a0 <NVIC_EncodePriority+0x30>
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3b03      	subs	r3, #3
 800129e:	e000      	b.n	80012a2 <NVIC_EncodePriority+0x32>
 80012a0:	2300      	movs	r3, #0
 80012a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	f04f 32ff 	mov.w	r2, #4294967295
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43da      	mvns	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	401a      	ands	r2, r3
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012b8:	f04f 31ff 	mov.w	r1, #4294967295
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa01 f303 	lsl.w	r3, r1, r3
 80012c2:	43d9      	mvns	r1, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c8:	4313      	orrs	r3, r2
         );
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3724      	adds	r7, #36	; 0x24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
	...

080012d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012e8:	d301      	bcc.n	80012ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ea:	2301      	movs	r3, #1
 80012ec:	e00f      	b.n	800130e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ee:	4a0a      	ldr	r2, [pc, #40]	; (8001318 <SysTick_Config+0x40>)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3b01      	subs	r3, #1
 80012f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012f6:	210f      	movs	r1, #15
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f7ff ff8e 	bl	800121c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <SysTick_Config+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001306:	4b04      	ldr	r3, [pc, #16]	; (8001318 <SysTick_Config+0x40>)
 8001308:	2207      	movs	r2, #7
 800130a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	e000e010 	.word	0xe000e010

0800131c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ff05 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}

08001332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001332:	b580      	push	{r7, lr}
 8001334:	b086      	sub	sp, #24
 8001336:	af00      	add	r7, sp, #0
 8001338:	4603      	mov	r3, r0
 800133a:	60b9      	str	r1, [r7, #8]
 800133c:	607a      	str	r2, [r7, #4]
 800133e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001340:	f7ff ff1c 	bl	800117c <__NVIC_GetPriorityGrouping>
 8001344:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	6978      	ldr	r0, [r7, #20]
 800134c:	f7ff ff90 	bl	8001270 <NVIC_EncodePriority>
 8001350:	4602      	mov	r2, r0
 8001352:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001356:	4611      	mov	r1, r2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff5f 	bl	800121c <__NVIC_SetPriority>
}
 800135e:	bf00      	nop
 8001360:	3718      	adds	r7, #24
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001366:	b580      	push	{r7, lr}
 8001368:	b082      	sub	sp, #8
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001370:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff0f 	bl	8001198 <__NVIC_EnableIRQ>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	4603      	mov	r3, r0
 800138a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800138c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff1f 	bl	80011d4 <__NVIC_DisableIRQ>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff96 	bl	80012d8 <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80013ba:	f00a f9af 	bl	800b71c <HAL_SYSTICK_Callback>
}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
	...

080013c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e08d      	b.n	80014f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_DMA_Init+0x138>)
 80013de:	429a      	cmp	r2, r3
 80013e0:	d80f      	bhi.n	8001402 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b45      	ldr	r3, [pc, #276]	; (8001500 <HAL_DMA_Init+0x13c>)
 80013ea:	4413      	add	r3, r2
 80013ec:	4a45      	ldr	r2, [pc, #276]	; (8001504 <HAL_DMA_Init+0x140>)
 80013ee:	fba2 2303 	umull	r2, r3, r2, r3
 80013f2:	091b      	lsrs	r3, r3, #4
 80013f4:	009a      	lsls	r2, r3, #2
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a42      	ldr	r2, [pc, #264]	; (8001508 <HAL_DMA_Init+0x144>)
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
 8001400:	e00e      	b.n	8001420 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	4b40      	ldr	r3, [pc, #256]	; (800150c <HAL_DMA_Init+0x148>)
 800140a:	4413      	add	r3, r2
 800140c:	4a3d      	ldr	r2, [pc, #244]	; (8001504 <HAL_DMA_Init+0x140>)
 800140e:	fba2 2303 	umull	r2, r3, r2, r3
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	009a      	lsls	r2, r3, #2
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a3c      	ldr	r2, [pc, #240]	; (8001510 <HAL_DMA_Init+0x14c>)
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2202      	movs	r2, #2
 8001424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800143a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001444:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001450:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a1b      	ldr	r3, [r3, #32]
 8001462:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4313      	orrs	r3, r2
 8001468:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f000 fa84 	bl	8001980 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001480:	d102      	bne.n	8001488 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800149c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d010      	beq.n	80014c8 <HAL_DMA_Init+0x104>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	2b04      	cmp	r3, #4
 80014ac:	d80c      	bhi.n	80014c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 faa4 	bl	80019fc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	e008      	b.n	80014da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2200      	movs	r2, #0
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2201      	movs	r2, #1
 80014e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2200      	movs	r2, #0
 80014ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40020407 	.word	0x40020407
 8001500:	bffdfff8 	.word	0xbffdfff8
 8001504:	cccccccd 	.word	0xcccccccd
 8001508:	40020000 	.word	0x40020000
 800150c:	bffdfbf8 	.word	0xbffdfbf8
 8001510:	40020400 	.word	0x40020400

08001514 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <HAL_DMA_Start_IT+0x20>
 8001530:	2302      	movs	r3, #2
 8001532:	e066      	b.n	8001602 <HAL_DMA_Start_IT+0xee>
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b01      	cmp	r3, #1
 8001546:	d155      	bne.n	80015f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	2202      	movs	r2, #2
 800154c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	2200      	movs	r2, #0
 8001554:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0201 	bic.w	r2, r2, #1
 8001564:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	68b9      	ldr	r1, [r7, #8]
 800156c:	68f8      	ldr	r0, [r7, #12]
 800156e:	f000 f9c9 	bl	8001904 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	2b00      	cmp	r3, #0
 8001578:	d008      	beq.n	800158c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f042 020e 	orr.w	r2, r2, #14
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	e00f      	b.n	80015ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f022 0204 	bic.w	r2, r2, #4
 800159a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 020a 	orr.w	r2, r2, #10
 80015aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d007      	beq.n	80015ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015c8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d007      	beq.n	80015e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	e005      	b.n	8001600 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	2200      	movs	r2, #0
 80015f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015fc:	2302      	movs	r3, #2
 80015fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001600:	7dfb      	ldrb	r3, [r7, #23]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800160a:	b480      	push	{r7}
 800160c:	b085      	sub	sp, #20
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d005      	beq.n	800162e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2204      	movs	r2, #4
 8001626:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	e037      	b.n	800169e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f022 020e 	bic.w	r2, r2, #14
 800163c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800164c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0201 	bic.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	f003 021f 	and.w	r2, r3, #31
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166a:	2101      	movs	r1, #1
 800166c:	fa01 f202 	lsl.w	r2, r1, r2
 8001670:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800167a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001680:	2b00      	cmp	r3, #0
 8001682:	d00c      	beq.n	800169e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800168e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001692:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800169c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80016ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d00d      	beq.n	80016f0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2204      	movs	r2, #4
 80016d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
 80016ee:	e047      	b.n	8001780 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 020e 	bic.w	r2, r2, #14
 80016fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0201 	bic.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800171a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800171e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172c:	2101      	movs	r1, #1
 800172e:	fa01 f202 	lsl.w	r2, r1, r2
 8001732:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800173c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001750:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001754:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800175e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001774:	2b00      	cmp	r3, #0
 8001776:	d003      	beq.n	8001780 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	4798      	blx	r3
    }
  }
  return status;
 8001780:	7bfb      	ldrb	r3, [r7, #15]
}
 8001782:	4618      	mov	r0, r3
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a6:	f003 031f 	and.w	r3, r3, #31
 80017aa:	2204      	movs	r2, #4
 80017ac:	409a      	lsls	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d026      	beq.n	8001804 <HAL_DMA_IRQHandler+0x7a>
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d021      	beq.n	8001804 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0320 	and.w	r3, r3, #32
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d107      	bne.n	80017de <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f022 0204 	bic.w	r2, r2, #4
 80017dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f003 021f 	and.w	r2, r3, #31
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	2104      	movs	r1, #4
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d071      	beq.n	80018de <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001802:	e06c      	b.n	80018de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	f003 031f 	and.w	r3, r3, #31
 800180c:	2202      	movs	r2, #2
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d02e      	beq.n	8001876 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d029      	beq.n	8001876 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	2b00      	cmp	r3, #0
 800182e:	d10b      	bne.n	8001848 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 020a 	bic.w	r2, r2, #10
 800183e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184c:	f003 021f 	and.w	r2, r3, #31
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001854:	2102      	movs	r1, #2
 8001856:	fa01 f202 	lsl.w	r2, r1, r2
 800185a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001868:	2b00      	cmp	r3, #0
 800186a:	d038      	beq.n	80018de <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001874:	e033      	b.n	80018de <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f003 031f 	and.w	r3, r3, #31
 800187e:	2208      	movs	r2, #8
 8001880:	409a      	lsls	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d02a      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	f003 0308 	and.w	r3, r3, #8
 8001890:	2b00      	cmp	r3, #0
 8001892:	d025      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 020e 	bic.w	r2, r2, #14
 80018a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a8:	f003 021f 	and.w	r2, r3, #31
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	2101      	movs	r1, #1
 80018b2:	fa01 f202 	lsl.w	r2, r1, r2
 80018b6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2201      	movs	r2, #1
 80018bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2201      	movs	r2, #1
 80018c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d004      	beq.n	80018e0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018de:	bf00      	nop
 80018e0:	bf00      	nop
}
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018f6:	b2db      	uxtb	r3, r3
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr

08001904 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800191a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800192c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f003 021f 	and.w	r2, r3, #31
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	2101      	movs	r1, #1
 800193c:	fa01 f202 	lsl.w	r2, r1, r2
 8001940:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b10      	cmp	r3, #16
 8001950:	d108      	bne.n	8001964 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	68ba      	ldr	r2, [r7, #8]
 8001960:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001962:	e007      	b.n	8001974 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68ba      	ldr	r2, [r7, #8]
 800196a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	60da      	str	r2, [r3, #12]
}
 8001974:	bf00      	nop
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001990:	429a      	cmp	r2, r3
 8001992:	d802      	bhi.n	800199a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001994:	4b15      	ldr	r3, [pc, #84]	; (80019ec <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e001      	b.n	800199e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800199a:	4b15      	ldr	r3, [pc, #84]	; (80019f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800199c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	3b08      	subs	r3, #8
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80019ac:	fba2 2303 	umull	r2, r3, r2, r3
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	089b      	lsrs	r3, r3, #2
 80019ba:	009a      	lsls	r2, r3, #2
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4413      	add	r3, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80019ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 031f 	and.w	r3, r3, #31
 80019d2:	2201      	movs	r2, #1
 80019d4:	409a      	lsls	r2, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80019da:	bf00      	nop
 80019dc:	371c      	adds	r7, #28
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40020407 	.word	0x40020407
 80019ec:	40020800 	.word	0x40020800
 80019f0:	40020820 	.word	0x40020820
 80019f4:	cccccccd 	.word	0xcccccccd
 80019f8:	40020880 	.word	0x40020880

080019fc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	4b0b      	ldr	r3, [pc, #44]	; (8001a3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001a10:	4413      	add	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	461a      	mov	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001a1e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	f003 031f 	and.w	r3, r3, #31
 8001a28:	2201      	movs	r2, #1
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001a30:	bf00      	nop
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	1000823f 	.word	0x1000823f
 8001a40:	40020940 	.word	0x40020940

08001a44 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e147      	b.n	8001ce6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f00e fa78 	bl	800ff60 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	699a      	ldr	r2, [r3, #24]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f022 0210 	bic.w	r2, r2, #16
 8001a7e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a80:	f7ff fb4c 	bl	800111c <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a86:	e012      	b.n	8001aae <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a88:	f7ff fb48 	bl	800111c <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b0a      	cmp	r3, #10
 8001a94:	d90b      	bls.n	8001aae <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9a:	f043 0201 	orr.w	r2, r3, #1
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2203      	movs	r2, #3
 8001aa6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e11b      	b.n	8001ce6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b08      	cmp	r3, #8
 8001aba:	d0e5      	beq.n	8001a88 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	699a      	ldr	r2, [r3, #24]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001acc:	f7ff fb26 	bl	800111c <HAL_GetTick>
 8001ad0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ad2:	e012      	b.n	8001afa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001ad4:	f7ff fb22 	bl	800111c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b0a      	cmp	r3, #10
 8001ae0:	d90b      	bls.n	8001afa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae6:	f043 0201 	orr.w	r2, r3, #1
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2203      	movs	r2, #3
 8001af2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e0f5      	b.n	8001ce6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0e5      	beq.n	8001ad4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	699a      	ldr	r2, [r3, #24]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f042 0202 	orr.w	r2, r2, #2
 8001b16:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a74      	ldr	r2, [pc, #464]	; (8001cf0 <HAL_FDCAN_Init+0x2ac>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d103      	bne.n	8001b2a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001b22:	4a74      	ldr	r2, [pc, #464]	; (8001cf4 <HAL_FDCAN_Init+0x2b0>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7c1b      	ldrb	r3, [r3, #16]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d108      	bne.n	8001b44 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	699a      	ldr	r2, [r3, #24]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b40:	619a      	str	r2, [r3, #24]
 8001b42:	e007      	b.n	8001b54 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699a      	ldr	r2, [r3, #24]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b52:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	7c5b      	ldrb	r3, [r3, #17]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d108      	bne.n	8001b6e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b6a:	619a      	str	r2, [r3, #24]
 8001b6c:	e007      	b.n	8001b7e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699a      	ldr	r2, [r3, #24]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b7c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7c9b      	ldrb	r3, [r3, #18]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d108      	bne.n	8001b98 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699a      	ldr	r2, [r3, #24]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b94:	619a      	str	r2, [r3, #24]
 8001b96:	e007      	b.n	8001ba8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	699a      	ldr	r2, [r3, #24]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ba6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699a      	ldr	r2, [r3, #24]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001bcc:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 0210 	bic.w	r2, r2, #16
 8001bdc:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d108      	bne.n	8001bf8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	699a      	ldr	r2, [r3, #24]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0204 	orr.w	r2, r2, #4
 8001bf4:	619a      	str	r2, [r3, #24]
 8001bf6:	e02c      	b.n	8001c52 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d028      	beq.n	8001c52 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d01c      	beq.n	8001c42 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	699a      	ldr	r2, [r3, #24]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c16:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	691a      	ldr	r2, [r3, #16]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0210 	orr.w	r2, r2, #16
 8001c26:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	68db      	ldr	r3, [r3, #12]
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d110      	bne.n	8001c52 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	699a      	ldr	r2, [r3, #24]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0220 	orr.w	r2, r2, #32
 8001c3e:	619a      	str	r2, [r3, #24]
 8001c40:	e007      	b.n	8001c52 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	699a      	ldr	r2, [r3, #24]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f042 0220 	orr.w	r2, r2, #32
 8001c50:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69db      	ldr	r3, [r3, #28]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c62:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001c6a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c7a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c7c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c86:	d115      	bne.n	8001cb4 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c92:	3b01      	subs	r3, #1
 8001c94:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c96:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001ca0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001cb0:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001cb2:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f000 fdac 	bl	8002828 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40006400 	.word	0x40006400
 8001cf4:	40006500 	.word	0x40006500

08001cf8 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b087      	sub	sp, #28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d08:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d002      	beq.n	8001d16 <HAL_FDCAN_ConfigFilter+0x1e>
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d13d      	bne.n	8001d92 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d119      	bne.n	8001d52 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001d2a:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001d32:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	4413      	add	r3, r2
 8001d48:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	e01d      	b.n	8001d8e <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	075a      	lsls	r2, r3, #29
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	079a      	lsls	r2, r3, #30
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	695b      	ldr	r3, [r3, #20]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3304      	adds	r3, #4
 8001d86:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e006      	b.n	8001da0 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d96:	f043 0202 	orr.w	r2, r3, #2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
  }
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	371c      	adds	r7, #28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]
 8001db8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d116      	bne.n	8001df4 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dce:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	011a      	lsls	r2, r3, #4
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	431a      	orrs	r2, r3
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	431a      	orrs	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	430a      	orrs	r2, r1
 8001dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e006      	b.n	8001e02 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df8:	f043 0204 	orr.w	r2, r3, #4
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
  }
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b085      	sub	sp, #20
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d108      	bne.n	8001e38 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	0219      	lsls	r1, r3, #8
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8001e34:	2300      	movs	r3, #0
 8001e36:	e006      	b.n	8001e46 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e3c:	f043 0204 	orr.w	r2, r3, #4
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
  }
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3714      	adds	r7, #20
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d109      	bne.n	8001e7a <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e74:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	e006      	b.n	8001e88 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	f043 0204 	orr.w	r2, r3, #4
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
  }
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d110      	bne.n	8001eca <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	699a      	ldr	r2, [r3, #24]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0201 	bic.w	r2, r2, #1
 8001ebe:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e006      	b.n	8001ed8 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ece:	f043 0204 	orr.w	r2, r3, #4
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
  }
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d156      	bne.n	8001faa <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001f0c:	e011      	b.n	8001f32 <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2b0a      	cmp	r3, #10
 8001f12:	d90b      	bls.n	8001f2c <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f18:	f043 0201 	orr.w	r2, r3, #1
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2203      	movs	r2, #3
 8001f24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e045      	b.n	8001fb8 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	3301      	adds	r3, #1
 8001f30:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0e6      	beq.n	8001f0e <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8001f40:	2300      	movs	r3, #0
 8001f42:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	699a      	ldr	r2, [r3, #24]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0210 	bic.w	r2, r2, #16
 8001f52:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001f54:	e011      	b.n	8001f7a <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2b0a      	cmp	r3, #10
 8001f5a:	d90b      	bls.n	8001f74 <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f60:	f043 0201 	orr.w	r2, r3, #1
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e021      	b.n	8001fb8 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3301      	adds	r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d0e6      	beq.n	8001f56 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f042 0202 	orr.w	r2, r2, #2
 8001f96:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	e006      	b.n	8001fb8 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fae:	f043 0208 	orr.w	r2, r3, #8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
  }
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d12c      	bne.n	8002036 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ff0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e023      	b.n	8002044 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002004:	0c1b      	lsrs	r3, r3, #16
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	68f8      	ldr	r0, [r7, #12]
 8002014:	f000 fc74 	bl	8002900 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2101      	movs	r1, #1
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002028:	2201      	movs	r2, #1
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	409a      	lsls	r2, r3
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	e006      	b.n	8002044 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203a:	f043 0208 	orr.w	r2, r3, #8
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
  }
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800204c:	b480      	push	{r7}
 800204e:	b08b      	sub	sp, #44	; 0x2c
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
 8002058:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002064:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002066:	7efb      	ldrb	r3, [r7, #27]
 8002068:	2b02      	cmp	r3, #2
 800206a:	f040 80e8 	bne.w	800223e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b40      	cmp	r3, #64	; 0x40
 8002072:	d137      	bne.n	80020e4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207c:	f003 030f 	and.w	r3, r3, #15
 8002080:	2b00      	cmp	r3, #0
 8002082:	d107      	bne.n	8002094 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002088:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0db      	b.n	800224c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	0e1b      	lsrs	r3, r3, #24
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d10a      	bne.n	80020bc <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ae:	0a5b      	lsrs	r3, r3, #9
 80020b0:	f003 0301 	and.w	r3, r3, #1
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d101      	bne.n	80020bc <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80020b8:	2301      	movs	r3, #1
 80020ba:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	69fa      	ldr	r2, [r7, #28]
 80020cc:	4413      	add	r3, r2
 80020ce:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80020d4:	69fa      	ldr	r2, [r7, #28]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	440b      	add	r3, r1
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
 80020e2:	e036      	b.n	8002152 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020ec:	f003 030f 	and.w	r3, r3, #15
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d107      	bne.n	8002104 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e0a3      	b.n	800224c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800210c:	0e1b      	lsrs	r3, r3, #24
 800210e:	f003 0301 	and.w	r3, r3, #1
 8002112:	2b01      	cmp	r3, #1
 8002114:	d10a      	bne.n	800212c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800211e:	0a1b      	lsrs	r3, r3, #8
 8002120:	f003 0301 	and.w	r3, r3, #1
 8002124:	2b01      	cmp	r3, #1
 8002126:	d101      	bne.n	800212c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002128:	2301      	movs	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0303 	and.w	r3, r3, #3
 800213a:	69fa      	ldr	r2, [r7, #28]
 800213c:	4413      	add	r3, r2
 800213e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8002144:	69fa      	ldr	r2, [r7, #28]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	440b      	add	r3, r1
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d107      	bne.n	8002176 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	0c9b      	lsrs	r3, r3, #18
 800216c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e005      	b.n	8002182 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8002182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	3304      	adds	r3, #4
 800219e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	0c1b      	lsrs	r3, r3, #16
 80021b0:	f003 020f 	and.w	r2, r3, #15
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	0e1b      	lsrs	r3, r3, #24
 80021d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	0fda      	lsrs	r2, r3, #31
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80021e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ea:	3304      	adds	r3, #4
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80021ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f0:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	623b      	str	r3, [r7, #32]
 80021f6:	e00a      	b.n	800220e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	441a      	add	r2, r3
 80021fe:	6839      	ldr	r1, [r7, #0]
 8002200:	6a3b      	ldr	r3, [r7, #32]
 8002202:	440b      	add	r3, r1
 8002204:	7812      	ldrb	r2, [r2, #0]
 8002206:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002208:	6a3b      	ldr	r3, [r7, #32]
 800220a:	3301      	adds	r3, #1
 800220c:	623b      	str	r3, [r7, #32]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	4a11      	ldr	r2, [pc, #68]	; (8002258 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	461a      	mov	r2, r3
 8002218:	6a3b      	ldr	r3, [r7, #32]
 800221a:	4293      	cmp	r3, r2
 800221c:	d3ec      	bcc.n	80021f8 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	2b40      	cmp	r3, #64	; 0x40
 8002222:	d105      	bne.n	8002230 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800222e:	e004      	b.n	800223a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e006      	b.n	800224c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002242:	f043 0208 	orr.w	r2, r3, #8
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
  }
}
 800224c:	4618      	mov	r0, r3
 800224e:	372c      	adds	r7, #44	; 0x2c
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	08015a14 	.word	0x08015a14

0800225c <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226c:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	f003 0207 	and.w	r2, r3, #7
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	0a1b      	lsrs	r3, r3, #8
 800227c:	f003 0207 	and.w	r2, r3, #7
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f003 0218 	and.w	r2, r3, #24
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	095b      	lsrs	r3, r3, #5
 8002292:	f003 0201 	and.w	r2, r3, #1
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	f003 0201 	and.w	r2, r3, #1
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	09db      	lsrs	r3, r3, #7
 80022aa:	f003 0201 	and.w	r2, r3, #1
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	0adb      	lsrs	r3, r3, #11
 80022b6:	f003 0201 	and.w	r2, r3, #1
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	0b1b      	lsrs	r3, r3, #12
 80022c2:	f003 0201 	and.w	r2, r3, #1
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	0b5b      	lsrs	r3, r3, #13
 80022ce:	f003 0201 	and.w	r2, r3, #1
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	0b9b      	lsrs	r3, r3, #14
 80022da:	f003 0201 	and.w	r2, r3, #1
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	0c1b      	lsrs	r3, r3, #16
 80022e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return function status */
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_FDCAN_GetErrorCounters>:
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(const FDCAN_HandleTypeDef *hfdcan,
                                             FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	b2da      	uxtb	r2, r3
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	0a1b      	lsrs	r3, r3, #8
 800231a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	0bdb      	lsrs	r3, r3, #15
 8002326:	f003 0201 	and.w	r2, r3, #1
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	0c1b      	lsrs	r3, r3, #16
 8002332:	b2da      	uxtb	r2, r3
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 8002346:	b480      	push	{r7}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 800235c:	68fb      	ldr	r3, [r7, #12]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800236a:	b480      	push	{r7}
 800236c:	b087      	sub	sp, #28
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800237c:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800237e:	7dfb      	ldrb	r3, [r7, #23]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d003      	beq.n	800238c <HAL_FDCAN_ActivateNotification+0x22>
 8002384:	7dfb      	ldrb	r3, [r7, #23]
 8002386:	2b02      	cmp	r3, #2
 8002388:	f040 80c8 	bne.w	800251c <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002392:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	2b00      	cmp	r3, #0
 800239c:	d004      	beq.n	80023a8 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d03b      	beq.n	8002420 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d031      	beq.n	8002420 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d027      	beq.n	8002420 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d004      	beq.n	80023e4 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01d      	beq.n	8002420 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d013      	beq.n	8002420 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d004      	beq.n	800240c <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f003 0320 	and.w	r3, r3, #32
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00c      	beq.n	8002430 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800241c:	2b00      	cmp	r3, #0
 800241e:	d107      	bne.n	8002430 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f042 0201 	orr.w	r2, r2, #1
 800242e:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f003 0307 	and.w	r3, r3, #7
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d13b      	bne.n	80024bc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800244a:	2b00      	cmp	r3, #0
 800244c:	d004      	beq.n	8002458 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d131      	bne.n	80024bc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800245e:	2b00      	cmp	r3, #0
 8002460:	d004      	beq.n	800246c <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d127      	bne.n	80024bc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8002472:	2b00      	cmp	r3, #0
 8002474:	d004      	beq.n	8002480 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d11d      	bne.n	80024bc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002486:	2b00      	cmp	r3, #0
 8002488:	d004      	beq.n	8002494 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	f003 0310 	and.w	r3, r3, #16
 8002490:	2b00      	cmp	r3, #0
 8002492:	d113      	bne.n	80024bc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800249a:	2b00      	cmp	r3, #0
 800249c:	d004      	beq.n	80024a8 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f003 0320 	and.w	r3, r3, #32
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d00c      	beq.n	80024cc <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f042 0202 	orr.w	r2, r2, #2
 80024ca:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d009      	beq.n	8002508 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	430a      	orrs	r2, r1
 8002504:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	430a      	orrs	r2, r1
 8002516:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	e006      	b.n	800252a <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002520:	f043 0202 	orr.w	r2, r3, #2
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
  }
}
 800252a:	4618      	mov	r0, r3
 800252c:	371c      	adds	r7, #28
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b08c      	sub	sp, #48	; 0x30
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002544:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002552:	4013      	ands	r3, r2
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800255c:	f003 0307 	and.w	r3, r3, #7
 8002560:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800256a:	4013      	ands	r3, r2
 800256c:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002574:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002582:	4013      	ands	r3, r2
 8002584:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800258c:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8002590:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002598:	6a3a      	ldr	r2, [r7, #32]
 800259a:	4013      	ands	r3, r2
 800259c:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025a4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80025a8:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	4013      	ands	r3, r2
 80025b4:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025bc:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c4:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00b      	beq.n	80025e8 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d006      	beq.n	80025e8 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2240      	movs	r2, #64	; 0x40
 80025e0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f916 	bl	8002814 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80025e8:	697b      	ldr	r3, [r7, #20]
 80025ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d019      	beq.n	8002626 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d014      	beq.n	8002626 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002604:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800260e:	693a      	ldr	r2, [r7, #16]
 8002610:	4013      	ands	r3, r2
 8002612:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f44f 7280 	mov.w	r2, #256	; 0x100
 800261c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800261e:	6939      	ldr	r1, [r7, #16]
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f8d8 	bl	80027d6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002628:	2b00      	cmp	r3, #0
 800262a:	d007      	beq.n	800263c <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002632:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002634:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f8a2 	bl	8002780 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800263c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800263e:	2b00      	cmp	r3, #0
 8002640:	d007      	beq.n	8002652 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002648:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800264a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f00d fc5b 	bl	800ff08 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8002660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 f897 	bl	8002796 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002678:	2b00      	cmp	r3, #0
 800267a:	d007      	beq.n	800268c <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002684:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 f890 	bl	80027ac <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b00      	cmp	r3, #0
 8002694:	d018      	beq.n	80026c8 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80026a8:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	4013      	ands	r3, r2
 80026b6:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2280      	movs	r2, #128	; 0x80
 80026be:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80026c0:	68f9      	ldr	r1, [r7, #12]
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f87c 	bl	80027c0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00c      	beq.n	80026ec <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026e4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f880 	bl	80027ec <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00c      	beq.n	8002710 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d007      	beq.n	8002710 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002708:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f878 	bl	8002800 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00f      	beq.n	800273a <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d00a      	beq.n	800273a <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800272c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002732:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69fa      	ldr	r2, [r7, #28]
 8002746:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002748:	69f9      	ldr	r1, [r7, #28]
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f00d fb94 	bl	800fe78 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8002750:	6a3b      	ldr	r3, [r7, #32]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6a3a      	ldr	r2, [r7, #32]
 800275c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f00d fb90 	bl	800fe98 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002778:	bf00      	nop
 800277a:	3730      	adds	r7, #48	; 0x30
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}

08002780 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr

08002796 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
 800279e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80027ca:	bf00      	nop
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr

080027d6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
 80027de:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002830:	4b30      	ldr	r3, [pc, #192]	; (80028f4 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8002832:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a2f      	ldr	r2, [pc, #188]	; (80028f8 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d103      	bne.n	8002846 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8002844:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a2c      	ldr	r2, [pc, #176]	; (80028fc <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d103      	bne.n	8002858 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8002856:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68ba      	ldr	r2, [r7, #8]
 800285c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002866:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286e:	041a      	lsls	r2, r3, #16
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800288c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002894:	061a      	lsls	r2, r3, #24
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	430a      	orrs	r2, r1
 800289c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	60fb      	str	r3, [r7, #12]
 80028cc:	e005      	b.n	80028da <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3304      	adds	r3, #4
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d3f3      	bcc.n	80028ce <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 80028e6:	bf00      	nop
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	4000a400 	.word	0x4000a400
 80028f8:	40006800 	.word	0x40006800
 80028fc:	40006c00 	.word	0x40006c00

08002900 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8002900:	b480      	push	{r7}
 8002902:	b089      	sub	sp, #36	; 0x24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10a      	bne.n	800292c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800291e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002926:	4313      	orrs	r3, r2
 8002928:	61fb      	str	r3, [r7, #28]
 800292a:	e00a      	b.n	8002942 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002934:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800293a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800293c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002940:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800294c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002952:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002958:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002960:	4313      	orrs	r3, r2
 8002962:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	4613      	mov	r3, r2
 800296c:	00db      	lsls	r3, r3, #3
 800296e:	4413      	add	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	440b      	add	r3, r1
 8002974:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002976:	69bb      	ldr	r3, [r7, #24]
 8002978:	69fa      	ldr	r2, [r7, #28]
 800297a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800297c:	69bb      	ldr	r3, [r7, #24]
 800297e:	3304      	adds	r3, #4
 8002980:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	693a      	ldr	r2, [r7, #16]
 8002986:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	3304      	adds	r3, #4
 800298c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
 8002992:	e020      	b.n	80029d6 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	3303      	adds	r3, #3
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	3302      	adds	r3, #2
 80029a4:	6879      	ldr	r1, [r7, #4]
 80029a6:	440b      	add	r3, r1
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80029ac:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3301      	adds	r3, #1
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	440b      	add	r3, r1
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80029ba:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	440a      	add	r2, r1
 80029c2:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80029c4:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	3304      	adds	r3, #4
 80029ce:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3304      	adds	r3, #4
 80029d4:	617b      	str	r3, [r7, #20]
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	4a06      	ldr	r2, [pc, #24]	; (80029f4 <FDCAN_CopyMessageToRAM+0xf4>)
 80029dc:	5cd3      	ldrb	r3, [r2, r3]
 80029de:	461a      	mov	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d3d6      	bcc.n	8002994 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 80029e6:	bf00      	nop
 80029e8:	bf00      	nop
 80029ea:	3724      	adds	r7, #36	; 0x24
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	08015a14 	.word	0x08015a14

080029f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b087      	sub	sp, #28
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a06:	e15a      	b.n	8002cbe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	4013      	ands	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 814c 	beq.w	8002cb8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d005      	beq.n	8002a38 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d130      	bne.n	8002a9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	2203      	movs	r2, #3
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	693a      	ldr	r2, [r7, #16]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a6e:	2201      	movs	r2, #1
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	f003 0201 	and.w	r2, r3, #1
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d017      	beq.n	8002ad6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	4013      	ands	r3, r2
 8002abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d123      	bne.n	8002b2a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	08da      	lsrs	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3208      	adds	r2, #8
 8002aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aee:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	220f      	movs	r2, #15
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	693a      	ldr	r2, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	08da      	lsrs	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3208      	adds	r2, #8
 8002b24:	6939      	ldr	r1, [r7, #16]
 8002b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0203 	and.w	r2, r3, #3
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	693a      	ldr	r2, [r7, #16]
 8002b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80a6 	beq.w	8002cb8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6c:	4b5b      	ldr	r3, [pc, #364]	; (8002cdc <HAL_GPIO_Init+0x2e4>)
 8002b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b70:	4a5a      	ldr	r2, [pc, #360]	; (8002cdc <HAL_GPIO_Init+0x2e4>)
 8002b72:	f043 0301 	orr.w	r3, r3, #1
 8002b76:	6613      	str	r3, [r2, #96]	; 0x60
 8002b78:	4b58      	ldr	r3, [pc, #352]	; (8002cdc <HAL_GPIO_Init+0x2e4>)
 8002b7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b84:	4a56      	ldr	r2, [pc, #344]	; (8002ce0 <HAL_GPIO_Init+0x2e8>)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	089b      	lsrs	r3, r3, #2
 8002b8a:	3302      	adds	r3, #2
 8002b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	220f      	movs	r2, #15
 8002b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba0:	43db      	mvns	r3, r3
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4013      	ands	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bae:	d01f      	beq.n	8002bf0 <HAL_GPIO_Init+0x1f8>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a4c      	ldr	r2, [pc, #304]	; (8002ce4 <HAL_GPIO_Init+0x2ec>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d019      	beq.n	8002bec <HAL_GPIO_Init+0x1f4>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a4b      	ldr	r2, [pc, #300]	; (8002ce8 <HAL_GPIO_Init+0x2f0>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d013      	beq.n	8002be8 <HAL_GPIO_Init+0x1f0>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a4a      	ldr	r2, [pc, #296]	; (8002cec <HAL_GPIO_Init+0x2f4>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d00d      	beq.n	8002be4 <HAL_GPIO_Init+0x1ec>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a49      	ldr	r2, [pc, #292]	; (8002cf0 <HAL_GPIO_Init+0x2f8>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d007      	beq.n	8002be0 <HAL_GPIO_Init+0x1e8>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a48      	ldr	r2, [pc, #288]	; (8002cf4 <HAL_GPIO_Init+0x2fc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d101      	bne.n	8002bdc <HAL_GPIO_Init+0x1e4>
 8002bd8:	2305      	movs	r3, #5
 8002bda:	e00a      	b.n	8002bf2 <HAL_GPIO_Init+0x1fa>
 8002bdc:	2306      	movs	r3, #6
 8002bde:	e008      	b.n	8002bf2 <HAL_GPIO_Init+0x1fa>
 8002be0:	2304      	movs	r3, #4
 8002be2:	e006      	b.n	8002bf2 <HAL_GPIO_Init+0x1fa>
 8002be4:	2303      	movs	r3, #3
 8002be6:	e004      	b.n	8002bf2 <HAL_GPIO_Init+0x1fa>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e002      	b.n	8002bf2 <HAL_GPIO_Init+0x1fa>
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <HAL_GPIO_Init+0x1fa>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	f002 0203 	and.w	r2, r2, #3
 8002bf8:	0092      	lsls	r2, r2, #2
 8002bfa:	4093      	lsls	r3, r2
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c02:	4937      	ldr	r1, [pc, #220]	; (8002ce0 <HAL_GPIO_Init+0x2e8>)
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	089b      	lsrs	r3, r3, #2
 8002c08:	3302      	adds	r3, #2
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c10:	4b39      	ldr	r3, [pc, #228]	; (8002cf8 <HAL_GPIO_Init+0x300>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c34:	4a30      	ldr	r2, [pc, #192]	; (8002cf8 <HAL_GPIO_Init+0x300>)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002c3a:	4b2f      	ldr	r3, [pc, #188]	; (8002cf8 <HAL_GPIO_Init+0x300>)
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002c56:	693a      	ldr	r2, [r7, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c5e:	4a26      	ldr	r2, [pc, #152]	; (8002cf8 <HAL_GPIO_Init+0x300>)
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002c64:	4b24      	ldr	r3, [pc, #144]	; (8002cf8 <HAL_GPIO_Init+0x300>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c88:	4a1b      	ldr	r2, [pc, #108]	; (8002cf8 <HAL_GPIO_Init+0x300>)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <HAL_GPIO_Init+0x300>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002cb2:	4a11      	ldr	r2, [pc, #68]	; (8002cf8 <HAL_GPIO_Init+0x300>)
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f47f ae9d 	bne.w	8002a08 <HAL_GPIO_Init+0x10>
  }
}
 8002cce:	bf00      	nop
 8002cd0:	bf00      	nop
 8002cd2:	371c      	adds	r7, #28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	48000400 	.word	0x48000400
 8002ce8:	48000800 	.word	0x48000800
 8002cec:	48000c00 	.word	0x48000c00
 8002cf0:	48001000 	.word	0x48001000
 8002cf4:	48001400 	.word	0x48001400
 8002cf8:	40010400 	.word	0x40010400

08002cfc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b087      	sub	sp, #28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d06:	2300      	movs	r3, #0
 8002d08:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002d0a:	e0bd      	b.n	8002e88 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80b0 	beq.w	8002e82 <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8002d22:	4a60      	ldr	r2, [pc, #384]	; (8002ea4 <HAL_GPIO_DeInit+0x1a8>)
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	220f      	movs	r2, #15
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	68fa      	ldr	r2, [r7, #12]
 8002d40:	4013      	ands	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d4a:	d01f      	beq.n	8002d8c <HAL_GPIO_DeInit+0x90>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a56      	ldr	r2, [pc, #344]	; (8002ea8 <HAL_GPIO_DeInit+0x1ac>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d019      	beq.n	8002d88 <HAL_GPIO_DeInit+0x8c>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	4a55      	ldr	r2, [pc, #340]	; (8002eac <HAL_GPIO_DeInit+0x1b0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d013      	beq.n	8002d84 <HAL_GPIO_DeInit+0x88>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	4a54      	ldr	r2, [pc, #336]	; (8002eb0 <HAL_GPIO_DeInit+0x1b4>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d00d      	beq.n	8002d80 <HAL_GPIO_DeInit+0x84>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	4a53      	ldr	r2, [pc, #332]	; (8002eb4 <HAL_GPIO_DeInit+0x1b8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d007      	beq.n	8002d7c <HAL_GPIO_DeInit+0x80>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4a52      	ldr	r2, [pc, #328]	; (8002eb8 <HAL_GPIO_DeInit+0x1bc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d101      	bne.n	8002d78 <HAL_GPIO_DeInit+0x7c>
 8002d74:	2305      	movs	r3, #5
 8002d76:	e00a      	b.n	8002d8e <HAL_GPIO_DeInit+0x92>
 8002d78:	2306      	movs	r3, #6
 8002d7a:	e008      	b.n	8002d8e <HAL_GPIO_DeInit+0x92>
 8002d7c:	2304      	movs	r3, #4
 8002d7e:	e006      	b.n	8002d8e <HAL_GPIO_DeInit+0x92>
 8002d80:	2303      	movs	r3, #3
 8002d82:	e004      	b.n	8002d8e <HAL_GPIO_DeInit+0x92>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e002      	b.n	8002d8e <HAL_GPIO_DeInit+0x92>
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e000      	b.n	8002d8e <HAL_GPIO_DeInit+0x92>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	f002 0203 	and.w	r2, r2, #3
 8002d94:	0092      	lsls	r2, r2, #2
 8002d96:	4093      	lsls	r3, r2
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d132      	bne.n	8002e04 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002d9e:	4b47      	ldr	r3, [pc, #284]	; (8002ebc <HAL_GPIO_DeInit+0x1c0>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	4945      	ldr	r1, [pc, #276]	; (8002ebc <HAL_GPIO_DeInit+0x1c0>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002dac:	4b43      	ldr	r3, [pc, #268]	; (8002ebc <HAL_GPIO_DeInit+0x1c0>)
 8002dae:	685a      	ldr	r2, [r3, #4]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	43db      	mvns	r3, r3
 8002db4:	4941      	ldr	r1, [pc, #260]	; (8002ebc <HAL_GPIO_DeInit+0x1c0>)
 8002db6:	4013      	ands	r3, r2
 8002db8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002dba:	4b40      	ldr	r3, [pc, #256]	; (8002ebc <HAL_GPIO_DeInit+0x1c0>)
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	43db      	mvns	r3, r3
 8002dc2:	493e      	ldr	r1, [pc, #248]	; (8002ebc <HAL_GPIO_DeInit+0x1c0>)
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002dc8:	4b3c      	ldr	r3, [pc, #240]	; (8002ebc <HAL_GPIO_DeInit+0x1c0>)
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	43db      	mvns	r3, r3
 8002dd0:	493a      	ldr	r1, [pc, #232]	; (8002ebc <HAL_GPIO_DeInit+0x1c0>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f003 0303 	and.w	r3, r3, #3
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	220f      	movs	r2, #15
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8002de6:	4a2f      	ldr	r2, [pc, #188]	; (8002ea4 <HAL_GPIO_DeInit+0x1a8>)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	3302      	adds	r3, #2
 8002dee:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	43da      	mvns	r2, r3
 8002df6:	482b      	ldr	r0, [pc, #172]	; (8002ea4 <HAL_GPIO_DeInit+0x1a8>)
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	400a      	ands	r2, r1
 8002dfe:	3302      	adds	r3, #2
 8002e00:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	2103      	movs	r1, #3
 8002e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e12:	431a      	orrs	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	08da      	lsrs	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3208      	adds	r2, #8
 8002e20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	220f      	movs	r2, #15
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	08d2      	lsrs	r2, r2, #3
 8002e38:	4019      	ands	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3208      	adds	r2, #8
 8002e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	2103      	movs	r1, #3
 8002e4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	401a      	ands	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	fa01 f303 	lsl.w	r3, r1, r3
 8002e64:	43db      	mvns	r3, r3
 8002e66:	401a      	ands	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2103      	movs	r1, #3
 8002e76:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	609a      	str	r2, [r3, #8]
    }

    position++;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3301      	adds	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f47f af3b 	bne.w	8002d0c <HAL_GPIO_DeInit+0x10>
  }
}
 8002e96:	bf00      	nop
 8002e98:	bf00      	nop
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40010000 	.word	0x40010000
 8002ea8:	48000400 	.word	0x48000400
 8002eac:	48000800 	.word	0x48000800
 8002eb0:	48000c00 	.word	0x48000c00
 8002eb4:	48001000 	.word	0x48001000
 8002eb8:	48001400 	.word	0x48001400
 8002ebc:	40010400 	.word	0x40010400

08002ec0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	887b      	ldrh	r3, [r7, #2]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
 8002edc:	e001      	b.n	8002ee2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	460b      	mov	r3, r1
 8002efa:	807b      	strh	r3, [r7, #2]
 8002efc:	4613      	mov	r3, r2
 8002efe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f00:	787b      	ldrb	r3, [r7, #1]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f06:	887a      	ldrh	r2, [r7, #2]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f0c:	e002      	b.n	8002f14 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f0e:	887a      	ldrh	r2, [r7, #2]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	695b      	ldr	r3, [r3, #20]
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	4013      	ands	r3, r2
 8002f38:	041a      	lsls	r2, r3, #16
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	43d9      	mvns	r1, r3
 8002f3e:	887b      	ldrh	r3, [r7, #2]
 8002f40:	400b      	ands	r3, r1
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	619a      	str	r2, [r3, #24]
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002f5e:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	88fb      	ldrh	r3, [r7, #6]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d006      	beq.n	8002f78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f6a:	4a05      	ldr	r2, [pc, #20]	; (8002f80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f6c:	88fb      	ldrh	r3, [r7, #6]
 8002f6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f70:	88fb      	ldrh	r3, [r7, #6]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 f806 	bl	8002f84 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40010400 	.word	0x40010400

08002f84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b082      	sub	sp, #8
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e08d      	b.n	80030c8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d106      	bne.n	8002fc6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f00e f825 	bl	8011010 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2224      	movs	r2, #36	; 0x24
 8002fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0201 	bic.w	r2, r2, #1
 8002fdc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685a      	ldr	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ffa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d107      	bne.n	8003014 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003010:	609a      	str	r2, [r3, #8]
 8003012:	e006      	b.n	8003022 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003020:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d108      	bne.n	800303c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	e007      	b.n	800304c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	685a      	ldr	r2, [r3, #4]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800304a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800305a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800305e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68da      	ldr	r2, [r3, #12]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800306e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69d9      	ldr	r1, [r3, #28]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a1a      	ldr	r2, [r3, #32]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e021      	b.n	8003126 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2224      	movs	r2, #36	; 0x24
 80030e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0201 	bic.w	r2, r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f00d ffe4 	bl	80110c8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af02      	add	r7, sp, #8
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	461a      	mov	r2, r3
 800313c:	460b      	mov	r3, r1
 800313e:	817b      	strh	r3, [r7, #10]
 8003140:	4613      	mov	r3, r2
 8003142:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b20      	cmp	r3, #32
 800314e:	f040 80fd 	bne.w	800334c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003158:	2b01      	cmp	r3, #1
 800315a:	d101      	bne.n	8003160 <HAL_I2C_Master_Transmit+0x30>
 800315c:	2302      	movs	r3, #2
 800315e:	e0f6      	b.n	800334e <HAL_I2C_Master_Transmit+0x21e>
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003168:	f7fd ffd8 	bl	800111c <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	2319      	movs	r3, #25
 8003174:	2201      	movs	r2, #1
 8003176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f001 fa2d 	bl	80045da <I2C_WaitOnFlagUntilTimeout>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e0e1      	b.n	800334e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2221      	movs	r2, #33	; 0x21
 800318e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2210      	movs	r2, #16
 8003196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	893a      	ldrh	r2, [r7, #8]
 80031aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	2bff      	cmp	r3, #255	; 0xff
 80031ba:	d906      	bls.n	80031ca <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	22ff      	movs	r2, #255	; 0xff
 80031c0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80031c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	e007      	b.n	80031da <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80031d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d024      	beq.n	800322c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	1c5a      	adds	r2, r3, #1
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	3b01      	subs	r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	b2db      	uxtb	r3, r3
 8003218:	3301      	adds	r3, #1
 800321a:	b2da      	uxtb	r2, r3
 800321c:	8979      	ldrh	r1, [r7, #10]
 800321e:	4b4e      	ldr	r3, [pc, #312]	; (8003358 <HAL_I2C_Master_Transmit+0x228>)
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f001 fb9b 	bl	8004960 <I2C_TransferConfig>
 800322a:	e066      	b.n	80032fa <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003230:	b2da      	uxtb	r2, r3
 8003232:	8979      	ldrh	r1, [r7, #10]
 8003234:	4b48      	ldr	r3, [pc, #288]	; (8003358 <HAL_I2C_Master_Transmit+0x228>)
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f001 fb90 	bl	8004960 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003240:	e05b      	b.n	80032fa <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	6a39      	ldr	r1, [r7, #32]
 8003246:	68f8      	ldr	r0, [r7, #12]
 8003248:	f001 fa20 	bl	800468c <I2C_WaitOnTXISFlagUntilTimeout>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e07b      	b.n	800334e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003266:	1c5a      	adds	r2, r3, #1
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003270:	b29b      	uxth	r3, r3
 8003272:	3b01      	subs	r3, #1
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328a:	b29b      	uxth	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d034      	beq.n	80032fa <HAL_I2C_Master_Transmit+0x1ca>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003294:	2b00      	cmp	r3, #0
 8003296:	d130      	bne.n	80032fa <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	2200      	movs	r2, #0
 80032a0:	2180      	movs	r1, #128	; 0x80
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f001 f999 	bl	80045da <I2C_WaitOnFlagUntilTimeout>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e04d      	b.n	800334e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	2bff      	cmp	r3, #255	; 0xff
 80032ba:	d90e      	bls.n	80032da <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	22ff      	movs	r2, #255	; 0xff
 80032c0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	8979      	ldrh	r1, [r7, #10]
 80032ca:	2300      	movs	r3, #0
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f001 fb44 	bl	8004960 <I2C_TransferConfig>
 80032d8:	e00f      	b.n	80032fa <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	8979      	ldrh	r1, [r7, #10]
 80032ec:	2300      	movs	r3, #0
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f001 fb33 	bl	8004960 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d19e      	bne.n	8003242 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	6a39      	ldr	r1, [r7, #32]
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f001 fa06 	bl	800471a <I2C_WaitOnSTOPFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e01a      	b.n	800334e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2220      	movs	r2, #32
 800331e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6859      	ldr	r1, [r3, #4]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	4b0c      	ldr	r3, [pc, #48]	; (800335c <HAL_I2C_Master_Transmit+0x22c>)
 800332c:	400b      	ands	r3, r1
 800332e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2220      	movs	r2, #32
 8003334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003348:	2300      	movs	r3, #0
 800334a:	e000      	b.n	800334e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800334c:	2302      	movs	r3, #2
  }
}
 800334e:	4618      	mov	r0, r3
 8003350:	3718      	adds	r7, #24
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	80002000 	.word	0x80002000
 800335c:	fe00e800 	.word	0xfe00e800

08003360 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b088      	sub	sp, #32
 8003364:	af02      	add	r7, sp, #8
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	4608      	mov	r0, r1
 800336a:	4611      	mov	r1, r2
 800336c:	461a      	mov	r2, r3
 800336e:	4603      	mov	r3, r0
 8003370:	817b      	strh	r3, [r7, #10]
 8003372:	460b      	mov	r3, r1
 8003374:	813b      	strh	r3, [r7, #8]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b20      	cmp	r3, #32
 8003384:	f040 80f9 	bne.w	800357a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003388:	6a3b      	ldr	r3, [r7, #32]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_I2C_Mem_Write+0x34>
 800338e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e0ed      	b.n	800357c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d101      	bne.n	80033ae <HAL_I2C_Mem_Write+0x4e>
 80033aa:	2302      	movs	r3, #2
 80033ac:	e0e6      	b.n	800357c <HAL_I2C_Mem_Write+0x21c>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2201      	movs	r2, #1
 80033b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80033b6:	f7fd feb1 	bl	800111c <HAL_GetTick>
 80033ba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	2319      	movs	r3, #25
 80033c2:	2201      	movs	r2, #1
 80033c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f001 f906 	bl	80045da <I2C_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0d1      	b.n	800357c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2221      	movs	r2, #33	; 0x21
 80033dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2240      	movs	r2, #64	; 0x40
 80033e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a3a      	ldr	r2, [r7, #32]
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003400:	88f8      	ldrh	r0, [r7, #6]
 8003402:	893a      	ldrh	r2, [r7, #8]
 8003404:	8979      	ldrh	r1, [r7, #10]
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340c:	9300      	str	r3, [sp, #0]
 800340e:	4603      	mov	r3, r0
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f000 fc49 	bl	8003ca8 <I2C_RequestMemoryWrite>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0a9      	b.n	800357c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	2bff      	cmp	r3, #255	; 0xff
 8003430:	d90e      	bls.n	8003450 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	22ff      	movs	r2, #255	; 0xff
 8003436:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	b2da      	uxtb	r2, r3
 800343e:	8979      	ldrh	r1, [r7, #10]
 8003440:	2300      	movs	r3, #0
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f001 fa89 	bl	8004960 <I2C_TransferConfig>
 800344e:	e00f      	b.n	8003470 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345e:	b2da      	uxtb	r2, r3
 8003460:	8979      	ldrh	r1, [r7, #10]
 8003462:	2300      	movs	r3, #0
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f001 fa78 	bl	8004960 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f001 f909 	bl	800468c <I2C_WaitOnTXISFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e07b      	b.n	800357c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003488:	781a      	ldrb	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349e:	b29b      	uxth	r3, r3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d034      	beq.n	8003528 <HAL_I2C_Mem_Write+0x1c8>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d130      	bne.n	8003528 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034cc:	2200      	movs	r2, #0
 80034ce:	2180      	movs	r1, #128	; 0x80
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f001 f882 	bl	80045da <I2C_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e04d      	b.n	800357c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2bff      	cmp	r3, #255	; 0xff
 80034e8:	d90e      	bls.n	8003508 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	22ff      	movs	r2, #255	; 0xff
 80034ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f4:	b2da      	uxtb	r2, r3
 80034f6:	8979      	ldrh	r1, [r7, #10]
 80034f8:	2300      	movs	r3, #0
 80034fa:	9300      	str	r3, [sp, #0]
 80034fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f001 fa2d 	bl	8004960 <I2C_TransferConfig>
 8003506:	e00f      	b.n	8003528 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003516:	b2da      	uxtb	r2, r3
 8003518:	8979      	ldrh	r1, [r7, #10]
 800351a:	2300      	movs	r3, #0
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f001 fa1c 	bl	8004960 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d19e      	bne.n	8003470 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f001 f8ef 	bl	800471a <I2C_WaitOnSTOPFlagUntilTimeout>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d001      	beq.n	8003546 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e01a      	b.n	800357c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2220      	movs	r2, #32
 800354c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6859      	ldr	r1, [r3, #4]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	4b0a      	ldr	r3, [pc, #40]	; (8003584 <HAL_I2C_Mem_Write+0x224>)
 800355a:	400b      	ands	r3, r1
 800355c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	e000      	b.n	800357c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800357a:	2302      	movs	r3, #2
  }
}
 800357c:	4618      	mov	r0, r3
 800357e:	3718      	adds	r7, #24
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	fe00e800 	.word	0xfe00e800

08003588 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af02      	add	r7, sp, #8
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	4608      	mov	r0, r1
 8003592:	4611      	mov	r1, r2
 8003594:	461a      	mov	r2, r3
 8003596:	4603      	mov	r3, r0
 8003598:	817b      	strh	r3, [r7, #10]
 800359a:	460b      	mov	r3, r1
 800359c:	813b      	strh	r3, [r7, #8]
 800359e:	4613      	mov	r3, r2
 80035a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	f040 80fd 	bne.w	80037aa <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d002      	beq.n	80035bc <HAL_I2C_Mem_Read+0x34>
 80035b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d105      	bne.n	80035c8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e0f1      	b.n	80037ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_I2C_Mem_Read+0x4e>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e0ea      	b.n	80037ac <HAL_I2C_Mem_Read+0x224>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80035de:	f7fd fd9d 	bl	800111c <HAL_GetTick>
 80035e2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	2319      	movs	r3, #25
 80035ea:	2201      	movs	r2, #1
 80035ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f000 fff2 	bl	80045da <I2C_WaitOnFlagUntilTimeout>
 80035f6:	4603      	mov	r3, r0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e0d5      	b.n	80037ac <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2222      	movs	r2, #34	; 0x22
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2240      	movs	r2, #64	; 0x40
 800360c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6a3a      	ldr	r2, [r7, #32]
 800361a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003620:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003628:	88f8      	ldrh	r0, [r7, #6]
 800362a:	893a      	ldrh	r2, [r7, #8]
 800362c:	8979      	ldrh	r1, [r7, #10]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	9301      	str	r3, [sp, #4]
 8003632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	4603      	mov	r3, r0
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 fb89 	bl	8003d50 <I2C_RequestMemoryRead>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e0ad      	b.n	80037ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	2bff      	cmp	r3, #255	; 0xff
 8003658:	d90e      	bls.n	8003678 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	22ff      	movs	r2, #255	; 0xff
 800365e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	b2da      	uxtb	r2, r3
 8003666:	8979      	ldrh	r1, [r7, #10]
 8003668:	4b52      	ldr	r3, [pc, #328]	; (80037b4 <HAL_I2C_Mem_Read+0x22c>)
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f001 f975 	bl	8004960 <I2C_TransferConfig>
 8003676:	e00f      	b.n	8003698 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367c:	b29a      	uxth	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003686:	b2da      	uxtb	r2, r3
 8003688:	8979      	ldrh	r1, [r7, #10]
 800368a:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <HAL_I2C_Mem_Read+0x22c>)
 800368c:	9300      	str	r3, [sp, #0]
 800368e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f001 f964 	bl	8004960 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	9300      	str	r3, [sp, #0]
 800369c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369e:	2200      	movs	r2, #0
 80036a0:	2104      	movs	r1, #4
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f000 ff99 	bl	80045da <I2C_WaitOnFlagUntilTimeout>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e07c      	b.n	80037ac <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036bc:	b2d2      	uxtb	r2, r2
 80036be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	1c5a      	adds	r2, r3, #1
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ce:	3b01      	subs	r3, #1
 80036d0:	b29a      	uxth	r2, r3
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	3b01      	subs	r3, #1
 80036de:	b29a      	uxth	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d034      	beq.n	8003758 <HAL_I2C_Mem_Read+0x1d0>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d130      	bne.n	8003758 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036fc:	2200      	movs	r2, #0
 80036fe:	2180      	movs	r1, #128	; 0x80
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 ff6a 	bl	80045da <I2C_WaitOnFlagUntilTimeout>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e04d      	b.n	80037ac <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003714:	b29b      	uxth	r3, r3
 8003716:	2bff      	cmp	r3, #255	; 0xff
 8003718:	d90e      	bls.n	8003738 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	22ff      	movs	r2, #255	; 0xff
 800371e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003724:	b2da      	uxtb	r2, r3
 8003726:	8979      	ldrh	r1, [r7, #10]
 8003728:	2300      	movs	r3, #0
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f001 f915 	bl	8004960 <I2C_TransferConfig>
 8003736:	e00f      	b.n	8003758 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29a      	uxth	r2, r3
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003746:	b2da      	uxtb	r2, r3
 8003748:	8979      	ldrh	r1, [r7, #10]
 800374a:	2300      	movs	r3, #0
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f001 f904 	bl	8004960 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375c:	b29b      	uxth	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d19a      	bne.n	8003698 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 ffd7 	bl	800471a <I2C_WaitOnSTOPFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e01a      	b.n	80037ac <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2220      	movs	r2, #32
 800377c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	6859      	ldr	r1, [r3, #4]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_I2C_Mem_Read+0x230>)
 800378a:	400b      	ands	r3, r1
 800378c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2220      	movs	r2, #32
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	e000      	b.n	80037ac <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80037aa:	2302      	movs	r3, #2
  }
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}
 80037b4:	80002400 	.word	0x80002400
 80037b8:	fe00e800 	.word	0xfe00e800

080037bc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b08a      	sub	sp, #40	; 0x28
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	460b      	mov	r3, r1
 80037ca:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b20      	cmp	r3, #32
 80037da:	f040 80d6 	bne.w	800398a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ec:	d101      	bne.n	80037f2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
 80037f0:	e0cc      	b.n	800398c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_I2C_IsDeviceReady+0x44>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e0c5      	b.n	800398c <HAL_I2C_IsDeviceReady+0x1d0>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2224      	movs	r2, #36	; 0x24
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2200      	movs	r2, #0
 8003814:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d107      	bne.n	800382e <HAL_I2C_IsDeviceReady+0x72>
 800381e:	897b      	ldrh	r3, [r7, #10]
 8003820:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003824:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003828:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800382c:	e006      	b.n	800383c <HAL_I2C_IsDeviceReady+0x80>
 800382e:	897b      	ldrh	r3, [r7, #10]
 8003830:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003834:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003838:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800383c:	68fa      	ldr	r2, [r7, #12]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003842:	f7fd fc6b 	bl	800111c <HAL_GetTick>
 8003846:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b20      	cmp	r3, #32
 8003854:	bf0c      	ite	eq
 8003856:	2301      	moveq	r3, #1
 8003858:	2300      	movne	r3, #0
 800385a:	b2db      	uxtb	r3, r3
 800385c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b10      	cmp	r3, #16
 800386a:	bf0c      	ite	eq
 800386c:	2301      	moveq	r3, #1
 800386e:	2300      	movne	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003874:	e034      	b.n	80038e0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387c:	d01a      	beq.n	80038b4 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800387e:	f7fd fc4d 	bl	800111c <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d302      	bcc.n	8003894 <HAL_I2C_IsDeviceReady+0xd8>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10f      	bne.n	80038b4 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	f043 0220 	orr.w	r2, r3, #32
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e06b      	b.n	800398c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	f003 0320 	and.w	r3, r3, #32
 80038be:	2b20      	cmp	r3, #32
 80038c0:	bf0c      	ite	eq
 80038c2:	2301      	moveq	r3, #1
 80038c4:	2300      	movne	r3, #0
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b10      	cmp	r3, #16
 80038d6:	bf0c      	ite	eq
 80038d8:	2301      	moveq	r3, #1
 80038da:	2300      	movne	r3, #0
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80038e0:	7ffb      	ldrb	r3, [r7, #31]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d102      	bne.n	80038ec <HAL_I2C_IsDeviceReady+0x130>
 80038e6:	7fbb      	ldrb	r3, [r7, #30]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d0c4      	beq.n	8003876 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	f003 0310 	and.w	r3, r3, #16
 80038f6:	2b10      	cmp	r3, #16
 80038f8:	d01a      	beq.n	8003930 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	2200      	movs	r2, #0
 8003902:	2120      	movs	r1, #32
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fe68 	bl	80045da <I2C_WaitOnFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e03b      	b.n	800398c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2220      	movs	r2, #32
 800391a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2220      	movs	r2, #32
 8003920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	e02d      	b.n	800398c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2200      	movs	r2, #0
 8003938:	2120      	movs	r1, #32
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 fe4d 	bl	80045da <I2C_WaitOnFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e020      	b.n	800398c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	2210      	movs	r2, #16
 8003950:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2220      	movs	r2, #32
 8003958:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	3301      	adds	r3, #1
 800395e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	429a      	cmp	r2, r3
 8003966:	f63f af56 	bhi.w	8003816 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2220      	movs	r2, #32
 800396e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003976:	f043 0220 	orr.w	r2, r3, #32
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800398a:	2302      	movs	r3, #2
  }
}
 800398c:	4618      	mov	r0, r3
 800398e:	3720      	adds	r7, #32
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00f      	beq.n	80039d6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c4:	f043 0201 	orr.w	r2, r3, #1
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039d4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d00f      	beq.n	8003a00 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ee:	f043 0208 	orr.w	r2, r3, #8
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80039fe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00f      	beq.n	8003a2a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a18:	f043 0202 	orr.w	r2, r3, #2
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a28:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a2e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f003 030b 	and.w	r3, r3, #11
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d003      	beq.n	8003a42 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003a3a:	68f9      	ldr	r1, [r7, #12]
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 fc73 	bl	8004328 <I2C_ITError>
  }
}
 8003a42:	bf00      	nop
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}

08003a4a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a52:	bf00      	nop
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a5e:	b480      	push	{r7}
 8003a60:	b083      	sub	sp, #12
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	70fb      	strb	r3, [r7, #3]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003a82:	bf00      	nop
 8003a84:	370c      	adds	r7, #12
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr

08003a8e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a8e:	b480      	push	{r7}
 8003a90:	b083      	sub	sp, #12
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003a96:	bf00      	nop
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b086      	sub	sp, #24
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	60f8      	str	r0, [r7, #12]
 8003abe:	60b9      	str	r1, [r7, #8]
 8003ac0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <I2C_Slave_ISR_IT+0x24>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e0e2      	b.n	8003ca0 <I2C_Slave_ISR_IT+0x1ea>
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d009      	beq.n	8003b00 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d004      	beq.n	8003b00 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003af6:	6939      	ldr	r1, [r7, #16]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fa5d 	bl	8003fb8 <I2C_ITSlaveCplt>
 8003afe:	e0ca      	b.n	8003c96 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f003 0310 	and.w	r3, r3, #16
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d04b      	beq.n	8003ba2 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d046      	beq.n	8003ba2 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d128      	bne.n	8003b70 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b28      	cmp	r3, #40	; 0x28
 8003b28:	d108      	bne.n	8003b3c <I2C_Slave_ISR_IT+0x86>
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b30:	d104      	bne.n	8003b3c <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b32:	6939      	ldr	r1, [r7, #16]
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f000 fba3 	bl	8004280 <I2C_ITListenCplt>
 8003b3a:	e031      	b.n	8003ba0 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b42:	b2db      	uxtb	r3, r3
 8003b44:	2b29      	cmp	r3, #41	; 0x29
 8003b46:	d10e      	bne.n	8003b66 <I2C_Slave_ISR_IT+0xb0>
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b4e:	d00a      	beq.n	8003b66 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2210      	movs	r2, #16
 8003b56:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 fcfc 	bl	8004556 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f000 f9ce 	bl	8003f00 <I2C_ITSlaveSeqCplt>
 8003b64:	e01c      	b.n	8003ba0 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2210      	movs	r2, #16
 8003b6c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003b6e:	e08f      	b.n	8003c90 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2210      	movs	r2, #16
 8003b76:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7c:	f043 0204 	orr.w	r2, r3, #4
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <I2C_Slave_ISR_IT+0xdc>
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b90:	d17e      	bne.n	8003c90 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b96:	4619      	mov	r1, r3
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 fbc5 	bl	8004328 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003b9e:	e077      	b.n	8003c90 <I2C_Slave_ISR_IT+0x1da>
 8003ba0:	e076      	b.n	8003c90 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d02f      	beq.n	8003c0c <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d02a      	beq.n	8003c0c <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d018      	beq.n	8003bf2 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d14b      	bne.n	8003c94 <I2C_Slave_ISR_IT+0x1de>
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c02:	d047      	beq.n	8003c94 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f97b 	bl	8003f00 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003c0a:	e043      	b.n	8003c94 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f003 0308 	and.w	r3, r3, #8
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d004      	beq.n	8003c2a <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003c20:	6939      	ldr	r1, [r7, #16]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f8e8 	bl	8003df8 <I2C_ITAddrCplt>
 8003c28:	e035      	b.n	8003c96 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d030      	beq.n	8003c96 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d02b      	beq.n	8003c96 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d018      	beq.n	8003c7a <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	781a      	ldrb	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	851a      	strh	r2, [r3, #40]	; 0x28
 8003c78:	e00d      	b.n	8003c96 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c80:	d002      	beq.n	8003c88 <I2C_Slave_ISR_IT+0x1d2>
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d106      	bne.n	8003c96 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f939 	bl	8003f00 <I2C_ITSlaveSeqCplt>
 8003c8e:	e002      	b.n	8003c96 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003c90:	bf00      	nop
 8003c92:	e000      	b.n	8003c96 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003c94:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b086      	sub	sp, #24
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	4608      	mov	r0, r1
 8003cb2:	4611      	mov	r1, r2
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	817b      	strh	r3, [r7, #10]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	813b      	strh	r3, [r7, #8]
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	b2da      	uxtb	r2, r3
 8003cc6:	8979      	ldrh	r1, [r7, #10]
 8003cc8:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <I2C_RequestMemoryWrite+0xa4>)
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fe45 	bl	8004960 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd6:	69fa      	ldr	r2, [r7, #28]
 8003cd8:	69b9      	ldr	r1, [r7, #24]
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fcd6 	bl	800468c <I2C_WaitOnTXISFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e02c      	b.n	8003d44 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cea:	88fb      	ldrh	r3, [r7, #6]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d105      	bne.n	8003cfc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cf0:	893b      	ldrh	r3, [r7, #8]
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	629a      	str	r2, [r3, #40]	; 0x28
 8003cfa:	e015      	b.n	8003d28 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cfc:	893b      	ldrh	r3, [r7, #8]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	b2da      	uxtb	r2, r3
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d0a:	69fa      	ldr	r2, [r7, #28]
 8003d0c:	69b9      	ldr	r1, [r7, #24]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 fcbc 	bl	800468c <I2C_WaitOnTXISFlagUntilTimeout>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e012      	b.n	8003d44 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d1e:	893b      	ldrh	r3, [r7, #8]
 8003d20:	b2da      	uxtb	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	9300      	str	r3, [sp, #0]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	2180      	movs	r1, #128	; 0x80
 8003d32:	68f8      	ldr	r0, [r7, #12]
 8003d34:	f000 fc51 	bl	80045da <I2C_WaitOnFlagUntilTimeout>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e000      	b.n	8003d44 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	80002000 	.word	0x80002000

08003d50 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	4608      	mov	r0, r1
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	4603      	mov	r3, r0
 8003d60:	817b      	strh	r3, [r7, #10]
 8003d62:	460b      	mov	r3, r1
 8003d64:	813b      	strh	r3, [r7, #8]
 8003d66:	4613      	mov	r3, r2
 8003d68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003d6a:	88fb      	ldrh	r3, [r7, #6]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	8979      	ldrh	r1, [r7, #10]
 8003d70:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <I2C_RequestMemoryRead+0xa4>)
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	2300      	movs	r3, #0
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f000 fdf2 	bl	8004960 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7c:	69fa      	ldr	r2, [r7, #28]
 8003d7e:	69b9      	ldr	r1, [r7, #24]
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fc83 	bl	800468c <I2C_WaitOnTXISFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e02c      	b.n	8003dea <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d105      	bne.n	8003da2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d96:	893b      	ldrh	r3, [r7, #8]
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28
 8003da0:	e015      	b.n	8003dce <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003da2:	893b      	ldrh	r3, [r7, #8]
 8003da4:	0a1b      	lsrs	r3, r3, #8
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003db0:	69fa      	ldr	r2, [r7, #28]
 8003db2:	69b9      	ldr	r1, [r7, #24]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fc69 	bl	800468c <I2C_WaitOnTXISFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e012      	b.n	8003dea <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003dc4:	893b      	ldrh	r3, [r7, #8]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003dce:	69fb      	ldr	r3, [r7, #28]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2140      	movs	r1, #64	; 0x40
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fbfe 	bl	80045da <I2C_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e000      	b.n	8003dea <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003de8:	2300      	movs	r3, #0
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3710      	adds	r7, #16
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	80002000 	.word	0x80002000

08003df8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003e0e:	2b28      	cmp	r3, #40	; 0x28
 8003e10:	d16a      	bne.n	8003ee8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	0c1b      	lsrs	r3, r3, #16
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	0c1b      	lsrs	r3, r3, #16
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003e30:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e3e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003e4c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d138      	bne.n	8003ec8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003e56:	897b      	ldrh	r3, [r7, #10]
 8003e58:	09db      	lsrs	r3, r3, #7
 8003e5a:	b29a      	uxth	r2, r3
 8003e5c:	89bb      	ldrh	r3, [r7, #12]
 8003e5e:	4053      	eors	r3, r2
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f003 0306 	and.w	r3, r3, #6
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d11c      	bne.n	8003ea4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003e6a:	897b      	ldrh	r3, [r7, #10]
 8003e6c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e7c:	2b02      	cmp	r3, #2
 8003e7e:	d13b      	bne.n	8003ef8 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	2208      	movs	r2, #8
 8003e8c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003e96:	89ba      	ldrh	r2, [r7, #12]
 8003e98:	7bfb      	ldrb	r3, [r7, #15]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7ff fde8 	bl	8003a72 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003ea2:	e029      	b.n	8003ef8 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003ea4:	893b      	ldrh	r3, [r7, #8]
 8003ea6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ea8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f000 fd89 	bl	80049c4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003eba:	89ba      	ldrh	r2, [r7, #12]
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff fdd6 	bl	8003a72 <HAL_I2C_AddrCallback>
}
 8003ec6:	e017      	b.n	8003ef8 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 fd79 	bl	80049c4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003eda:	89ba      	ldrh	r2, [r7, #12]
 8003edc:	7bfb      	ldrb	r3, [r7, #15]
 8003ede:	4619      	mov	r1, r3
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f7ff fdc6 	bl	8003a72 <HAL_I2C_AddrCallback>
}
 8003ee6:	e007      	b.n	8003ef8 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2208      	movs	r2, #8
 8003eee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003ef8:	bf00      	nop
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}

08003f00 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f30:	601a      	str	r2, [r3, #0]
 8003f32:	e00c      	b.n	8003f4e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d007      	beq.n	8003f4e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f4c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	2b29      	cmp	r3, #41	; 0x29
 8003f58:	d112      	bne.n	8003f80 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2228      	movs	r2, #40	; 0x28
 8003f5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2221      	movs	r2, #33	; 0x21
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003f68:	2101      	movs	r1, #1
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fd2a 	bl	80049c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff fd66 	bl	8003a4a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003f7e:	e017      	b.n	8003fb0 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	2b2a      	cmp	r3, #42	; 0x2a
 8003f8a:	d111      	bne.n	8003fb0 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2228      	movs	r2, #40	; 0x28
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2222      	movs	r2, #34	; 0x22
 8003f98:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003f9a:	2102      	movs	r1, #2
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f000 fd11 	bl	80049c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff fd57 	bl	8003a5e <HAL_I2C_SlaveRxCpltCallback>
}
 8003fb0:	bf00      	nop
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fda:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003fe4:	7afb      	ldrb	r3, [r7, #11]
 8003fe6:	2b21      	cmp	r3, #33	; 0x21
 8003fe8:	d002      	beq.n	8003ff0 <I2C_ITSlaveCplt+0x38>
 8003fea:	7afb      	ldrb	r3, [r7, #11]
 8003fec:	2b29      	cmp	r3, #41	; 0x29
 8003fee:	d108      	bne.n	8004002 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003ff0:	f248 0101 	movw	r1, #32769	; 0x8001
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f000 fce5 	bl	80049c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2221      	movs	r2, #33	; 0x21
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
 8004000:	e019      	b.n	8004036 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004002:	7afb      	ldrb	r3, [r7, #11]
 8004004:	2b22      	cmp	r3, #34	; 0x22
 8004006:	d002      	beq.n	800400e <I2C_ITSlaveCplt+0x56>
 8004008:	7afb      	ldrb	r3, [r7, #11]
 800400a:	2b2a      	cmp	r3, #42	; 0x2a
 800400c:	d108      	bne.n	8004020 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800400e:	f248 0102 	movw	r1, #32770	; 0x8002
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fcd6 	bl	80049c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2222      	movs	r2, #34	; 0x22
 800401c:	631a      	str	r2, [r3, #48]	; 0x30
 800401e:	e00a      	b.n	8004036 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004020:	7afb      	ldrb	r3, [r7, #11]
 8004022:	2b28      	cmp	r3, #40	; 0x28
 8004024:	d107      	bne.n	8004036 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004026:	f248 0103 	movw	r1, #32771	; 0x8003
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 fcca 	bl	80049c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004044:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6859      	ldr	r1, [r3, #4]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681a      	ldr	r2, [r3, #0]
 8004050:	4b89      	ldr	r3, [pc, #548]	; (8004278 <I2C_ITSlaveCplt+0x2c0>)
 8004052:	400b      	ands	r3, r1
 8004054:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 fa7d 	bl	8004556 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d013      	beq.n	800408e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004074:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	2b00      	cmp	r3, #0
 800407c:	d01f      	beq.n	80040be <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	b29a      	uxth	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800408c:	e017      	b.n	80040be <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d012      	beq.n	80040be <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040a6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d006      	beq.n	80040be <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d020      	beq.n	800410a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f023 0304 	bic.w	r3, r3, #4
 80040ce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00c      	beq.n	800410a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f4:	3b01      	subs	r3, #1
 80040f6:	b29a      	uxth	r2, r3
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004100:	b29b      	uxth	r3, r3
 8004102:	3b01      	subs	r3, #1
 8004104:	b29a      	uxth	r2, r3
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410e:	b29b      	uxth	r3, r3
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004118:	f043 0204 	orr.w	r2, r3, #4
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	f003 0310 	and.w	r3, r3, #16
 8004126:	2b00      	cmp	r3, #0
 8004128:	d049      	beq.n	80041be <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004130:	2b00      	cmp	r3, #0
 8004132:	d044      	beq.n	80041be <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d128      	bne.n	8004190 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b28      	cmp	r3, #40	; 0x28
 8004148:	d108      	bne.n	800415c <I2C_ITSlaveCplt+0x1a4>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004150:	d104      	bne.n	800415c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004152:	6979      	ldr	r1, [r7, #20]
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f893 	bl	8004280 <I2C_ITListenCplt>
 800415a:	e030      	b.n	80041be <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b29      	cmp	r3, #41	; 0x29
 8004166:	d10e      	bne.n	8004186 <I2C_ITSlaveCplt+0x1ce>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800416e:	d00a      	beq.n	8004186 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	2210      	movs	r2, #16
 8004176:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f9ec 	bl	8004556 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7ff febe 	bl	8003f00 <I2C_ITSlaveSeqCplt>
 8004184:	e01b      	b.n	80041be <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2210      	movs	r2, #16
 800418c:	61da      	str	r2, [r3, #28]
 800418e:	e016      	b.n	80041be <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2210      	movs	r2, #16
 8004196:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800419c:	f043 0204 	orr.w	r2, r3, #4
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <I2C_ITSlaveCplt+0x1fa>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041b0:	d105      	bne.n	80041be <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	4619      	mov	r1, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f8b5 	bl	8004328 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d010      	beq.n	80041f6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d8:	4619      	mov	r1, r3
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f8a4 	bl	8004328 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b28      	cmp	r3, #40	; 0x28
 80041ea:	d141      	bne.n	8004270 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80041ec:	6979      	ldr	r1, [r7, #20]
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f846 	bl	8004280 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80041f4:	e03c      	b.n	8004270 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041fe:	d014      	beq.n	800422a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f7ff fe7d 	bl	8003f00 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a1c      	ldr	r2, [pc, #112]	; (800427c <I2C_ITSlaveCplt+0x2c4>)
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f7ff fc33 	bl	8003a8e <HAL_I2C_ListenCpltCallback>
}
 8004228:	e022      	b.n	8004270 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b22      	cmp	r3, #34	; 0x22
 8004234:	d10e      	bne.n	8004254 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f7ff fc06 	bl	8003a5e <HAL_I2C_SlaveRxCpltCallback>
}
 8004252:	e00d      	b.n	8004270 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7ff fbed 	bl	8003a4a <HAL_I2C_SlaveTxCpltCallback>
}
 8004270:	bf00      	nop
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	fe00e800 	.word	0xfe00e800
 800427c:	ffff0000 	.word	0xffff0000

08004280 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a25      	ldr	r2, [pc, #148]	; (8004324 <I2C_ITListenCplt+0xa4>)
 800428e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2220      	movs	r2, #32
 800429a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d022      	beq.n	80042fc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d012      	beq.n	80042fc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042da:	3b01      	subs	r3, #1
 80042dc:	b29a      	uxth	r2, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	f043 0204 	orr.w	r2, r3, #4
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80042fc:	f248 0103 	movw	r1, #32771	; 0x8003
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 fb5f 	bl	80049c4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2210      	movs	r2, #16
 800430c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f7ff fbb9 	bl	8003a8e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800431c:	bf00      	nop
 800431e:	3708      	adds	r7, #8
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	ffff0000 	.word	0xffff0000

08004328 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004338:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a6d      	ldr	r2, [pc, #436]	; (80044fc <I2C_ITError+0x1d4>)
 8004346:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	2b28      	cmp	r3, #40	; 0x28
 800435e:	d005      	beq.n	800436c <I2C_ITError+0x44>
 8004360:	7bfb      	ldrb	r3, [r7, #15]
 8004362:	2b29      	cmp	r3, #41	; 0x29
 8004364:	d002      	beq.n	800436c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b2a      	cmp	r3, #42	; 0x2a
 800436a:	d10b      	bne.n	8004384 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800436c:	2103      	movs	r1, #3
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f000 fb28 	bl	80049c4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2228      	movs	r2, #40	; 0x28
 8004378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a60      	ldr	r2, [pc, #384]	; (8004500 <I2C_ITError+0x1d8>)
 8004380:	635a      	str	r2, [r3, #52]	; 0x34
 8004382:	e030      	b.n	80043e6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004384:	f248 0103 	movw	r1, #32771	; 0x8003
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f000 fb1b 	bl	80049c4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8e1 	bl	8004556 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800439a:	b2db      	uxtb	r3, r3
 800439c:	2b60      	cmp	r3, #96	; 0x60
 800439e:	d01f      	beq.n	80043e0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	699b      	ldr	r3, [r3, #24]
 80043ae:	f003 0320 	and.w	r3, r3, #32
 80043b2:	2b20      	cmp	r3, #32
 80043b4:	d114      	bne.n	80043e0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	f003 0310 	and.w	r3, r3, #16
 80043c0:	2b10      	cmp	r3, #16
 80043c2:	d109      	bne.n	80043d8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2210      	movs	r2, #16
 80043ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d0:	f043 0204 	orr.w	r2, r3, #4
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2220      	movs	r2, #32
 80043de:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d039      	beq.n	8004468 <I2C_ITError+0x140>
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b11      	cmp	r3, #17
 80043f8:	d002      	beq.n	8004400 <I2C_ITError+0xd8>
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2b21      	cmp	r3, #33	; 0x21
 80043fe:	d133      	bne.n	8004468 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800440a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800440e:	d107      	bne.n	8004420 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800441e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004424:	4618      	mov	r0, r3
 8004426:	f7fd fa5f 	bl	80018e8 <HAL_DMA_GetState>
 800442a:	4603      	mov	r3, r0
 800442c:	2b01      	cmp	r3, #1
 800442e:	d017      	beq.n	8004460 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	4a33      	ldr	r2, [pc, #204]	; (8004504 <I2C_ITError+0x1dc>)
 8004436:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004444:	4618      	mov	r0, r3
 8004446:	f7fd f939 	bl	80016bc <HAL_DMA_Abort_IT>
 800444a:	4603      	mov	r3, r0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d04d      	beq.n	80044ec <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	687a      	ldr	r2, [r7, #4]
 8004458:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800445a:	4610      	mov	r0, r2
 800445c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800445e:	e045      	b.n	80044ec <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 f851 	bl	8004508 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004466:	e041      	b.n	80044ec <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446c:	2b00      	cmp	r3, #0
 800446e:	d039      	beq.n	80044e4 <I2C_ITError+0x1bc>
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b12      	cmp	r3, #18
 8004474:	d002      	beq.n	800447c <I2C_ITError+0x154>
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	2b22      	cmp	r3, #34	; 0x22
 800447a:	d133      	bne.n	80044e4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004486:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800448a:	d107      	bne.n	800449c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800449a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fd fa21 	bl	80018e8 <HAL_DMA_GetState>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d017      	beq.n	80044dc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b0:	4a14      	ldr	r2, [pc, #80]	; (8004504 <I2C_ITError+0x1dc>)
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fd f8fb 	bl	80016bc <HAL_DMA_Abort_IT>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d011      	beq.n	80044f0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044d6:	4610      	mov	r0, r2
 80044d8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044da:	e009      	b.n	80044f0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f000 f813 	bl	8004508 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044e2:	e005      	b.n	80044f0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 f80f 	bl	8004508 <I2C_TreatErrorCallback>
  }
}
 80044ea:	e002      	b.n	80044f2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044f0:	bf00      	nop
}
 80044f2:	bf00      	nop
 80044f4:	3710      	adds	r7, #16
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	ffff0000 	.word	0xffff0000
 8004500:	08003ab7 	.word	0x08003ab7
 8004504:	0800459f 	.word	0x0800459f

08004508 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b60      	cmp	r3, #96	; 0x60
 800451a:	d10e      	bne.n	800453a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff fab5 	bl	8003aa2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004538:	e009      	b.n	800454e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f00c fd39 	bl	8010fc0 <HAL_I2C_ErrorCallback>
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004556:	b480      	push	{r7}
 8004558:	b083      	sub	sp, #12
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b02      	cmp	r3, #2
 800456a:	d103      	bne.n	8004574 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2200      	movs	r2, #0
 8004572:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b01      	cmp	r3, #1
 8004580:	d007      	beq.n	8004592 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699a      	ldr	r2, [r3, #24]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f042 0201 	orr.w	r2, r2, #1
 8004590:	619a      	str	r2, [r3, #24]
  }
}
 8004592:	bf00      	nop
 8004594:	370c      	adds	r7, #12
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr

0800459e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800459e:	b580      	push	{r7, lr}
 80045a0:	b084      	sub	sp, #16
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045aa:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	2200      	movs	r2, #0
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d003      	beq.n	80045cc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045c8:	2200      	movs	r2, #0
 80045ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7ff ff9b 	bl	8004508 <I2C_TreatErrorCallback>
}
 80045d2:	bf00      	nop
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b084      	sub	sp, #16
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	603b      	str	r3, [r7, #0]
 80045e6:	4613      	mov	r3, r2
 80045e8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045ea:	e03b      	b.n	8004664 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ec:	69ba      	ldr	r2, [r7, #24]
 80045ee:	6839      	ldr	r1, [r7, #0]
 80045f0:	68f8      	ldr	r0, [r7, #12]
 80045f2:	f000 f8d5 	bl	80047a0 <I2C_IsErrorOccurred>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e041      	b.n	8004684 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004606:	d02d      	beq.n	8004664 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004608:	f7fc fd88 	bl	800111c <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d302      	bcc.n	800461e <I2C_WaitOnFlagUntilTimeout+0x44>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d122      	bne.n	8004664 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699a      	ldr	r2, [r3, #24]
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	4013      	ands	r3, r2
 8004628:	68ba      	ldr	r2, [r7, #8]
 800462a:	429a      	cmp	r2, r3
 800462c:	bf0c      	ite	eq
 800462e:	2301      	moveq	r3, #1
 8004630:	2300      	movne	r3, #0
 8004632:	b2db      	uxtb	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	79fb      	ldrb	r3, [r7, #7]
 8004638:	429a      	cmp	r2, r3
 800463a:	d113      	bne.n	8004664 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004640:	f043 0220 	orr.w	r2, r3, #32
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e00f      	b.n	8004684 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4013      	ands	r3, r2
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	429a      	cmp	r2, r3
 8004672:	bf0c      	ite	eq
 8004674:	2301      	moveq	r3, #1
 8004676:	2300      	movne	r3, #0
 8004678:	b2db      	uxtb	r3, r3
 800467a:	461a      	mov	r2, r3
 800467c:	79fb      	ldrb	r3, [r7, #7]
 800467e:	429a      	cmp	r2, r3
 8004680:	d0b4      	beq.n	80045ec <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	60f8      	str	r0, [r7, #12]
 8004694:	60b9      	str	r1, [r7, #8]
 8004696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004698:	e033      	b.n	8004702 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f87e 	bl	80047a0 <I2C_IsErrorOccurred>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d001      	beq.n	80046ae <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e031      	b.n	8004712 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b4:	d025      	beq.n	8004702 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046b6:	f7fc fd31 	bl	800111c <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	68ba      	ldr	r2, [r7, #8]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d302      	bcc.n	80046cc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d11a      	bne.n	8004702 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b02      	cmp	r3, #2
 80046d8:	d013      	beq.n	8004702 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	f043 0220 	orr.w	r2, r3, #32
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e007      	b.n	8004712 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	699b      	ldr	r3, [r3, #24]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b02      	cmp	r3, #2
 800470e:	d1c4      	bne.n	800469a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004726:	e02f      	b.n	8004788 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f837 	bl	80047a0 <I2C_IsErrorOccurred>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e02d      	b.n	8004798 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473c:	f7fc fcee 	bl	800111c <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	429a      	cmp	r2, r3
 800474a:	d302      	bcc.n	8004752 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d11a      	bne.n	8004788 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	699b      	ldr	r3, [r3, #24]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b20      	cmp	r3, #32
 800475e:	d013      	beq.n	8004788 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004764:	f043 0220 	orr.w	r2, r3, #32
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e007      	b.n	8004798 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b20      	cmp	r3, #32
 8004794:	d1c8      	bne.n	8004728 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3710      	adds	r7, #16
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}

080047a0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b08a      	sub	sp, #40	; 0x28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	699b      	ldr	r3, [r3, #24]
 80047b8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d068      	beq.n	800489e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2210      	movs	r2, #16
 80047d2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80047d4:	e049      	b.n	800486a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047dc:	d045      	beq.n	800486a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80047de:	f7fc fc9d 	bl	800111c <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	69fb      	ldr	r3, [r7, #28]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d302      	bcc.n	80047f4 <I2C_IsErrorOccurred+0x54>
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d13a      	bne.n	800486a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047fe:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004806:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004816:	d121      	bne.n	800485c <I2C_IsErrorOccurred+0xbc>
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800481e:	d01d      	beq.n	800485c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004820:	7cfb      	ldrb	r3, [r7, #19]
 8004822:	2b20      	cmp	r3, #32
 8004824:	d01a      	beq.n	800485c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004834:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004836:	f7fc fc71 	bl	800111c <HAL_GetTick>
 800483a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800483c:	e00e      	b.n	800485c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800483e:	f7fc fc6d 	bl	800111c <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b19      	cmp	r3, #25
 800484a:	d907      	bls.n	800485c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	f043 0320 	orr.w	r3, r3, #32
 8004852:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800485a:	e006      	b.n	800486a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f003 0320 	and.w	r3, r3, #32
 8004866:	2b20      	cmp	r3, #32
 8004868:	d1e9      	bne.n	800483e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	f003 0320 	and.w	r3, r3, #32
 8004874:	2b20      	cmp	r3, #32
 8004876:	d003      	beq.n	8004880 <I2C_IsErrorOccurred+0xe0>
 8004878:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0aa      	beq.n	80047d6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004880:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2220      	movs	r2, #32
 800488e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	f043 0304 	orr.w	r3, r3, #4
 8004896:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00b      	beq.n	80048c8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	f043 0301 	orr.w	r3, r3, #1
 80048b6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048c0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80048d2:	6a3b      	ldr	r3, [r7, #32]
 80048d4:	f043 0308 	orr.w	r3, r3, #8
 80048d8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048e2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80048ea:	69bb      	ldr	r3, [r7, #24]
 80048ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00b      	beq.n	800490c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	f043 0302 	orr.w	r3, r3, #2
 80048fa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004904:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800490c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01c      	beq.n	800494e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004914:	68f8      	ldr	r0, [r7, #12]
 8004916:	f7ff fe1e 	bl	8004556 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6859      	ldr	r1, [r3, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	4b0d      	ldr	r3, [pc, #52]	; (800495c <I2C_IsErrorOccurred+0x1bc>)
 8004926:	400b      	ands	r3, r1
 8004928:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	431a      	orrs	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2220      	movs	r2, #32
 800493a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800494e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004952:	4618      	mov	r0, r3
 8004954:	3728      	adds	r7, #40	; 0x28
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	fe00e800 	.word	0xfe00e800

08004960 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	607b      	str	r3, [r7, #4]
 800496a:	460b      	mov	r3, r1
 800496c:	817b      	strh	r3, [r7, #10]
 800496e:	4613      	mov	r3, r2
 8004970:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004972:	897b      	ldrh	r3, [r7, #10]
 8004974:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004978:	7a7b      	ldrb	r3, [r7, #9]
 800497a:	041b      	lsls	r3, r3, #16
 800497c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004980:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	4313      	orrs	r3, r2
 800498a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800498e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	685a      	ldr	r2, [r3, #4]
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	0d5b      	lsrs	r3, r3, #21
 800499a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800499e:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <I2C_TransferConfig+0x60>)
 80049a0:	430b      	orrs	r3, r1
 80049a2:	43db      	mvns	r3, r3
 80049a4:	ea02 0103 	and.w	r1, r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	03ff63ff 	.word	0x03ff63ff

080049c4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	460b      	mov	r3, r1
 80049ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80049d0:	2300      	movs	r3, #0
 80049d2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80049d4:	887b      	ldrh	r3, [r7, #2]
 80049d6:	f003 0301 	and.w	r3, r3, #1
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00f      	beq.n	80049fe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80049e4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049f2:	2b28      	cmp	r3, #40	; 0x28
 80049f4:	d003      	beq.n	80049fe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80049fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00f      	beq.n	8004a28 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004a0e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a1c:	2b28      	cmp	r3, #40	; 0x28
 8004a1e:	d003      	beq.n	8004a28 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004a26:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004a28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	da03      	bge.n	8004a38 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004a36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004a38:	887b      	ldrh	r3, [r7, #2]
 8004a3a:	2b10      	cmp	r3, #16
 8004a3c:	d103      	bne.n	8004a46 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004a44:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004a46:	887b      	ldrh	r3, [r7, #2]
 8004a48:	2b20      	cmp	r3, #32
 8004a4a:	d103      	bne.n	8004a54 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f043 0320 	orr.w	r3, r3, #32
 8004a52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004a54:	887b      	ldrh	r3, [r7, #2]
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d103      	bne.n	8004a62 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a60:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6819      	ldr	r1, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	43da      	mvns	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	400a      	ands	r2, r1
 8004a72:	601a      	str	r2, [r3, #0]
}
 8004a74:	bf00      	nop
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b20      	cmp	r3, #32
 8004a94:	d138      	bne.n	8004b08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d101      	bne.n	8004aa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	e032      	b.n	8004b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2224      	movs	r2, #36	; 0x24
 8004ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f022 0201 	bic.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ad2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6819      	ldr	r1, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	683a      	ldr	r2, [r7, #0]
 8004ae0:	430a      	orrs	r2, r1
 8004ae2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2220      	movs	r2, #32
 8004af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b04:	2300      	movs	r3, #0
 8004b06:	e000      	b.n	8004b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004b08:	2302      	movs	r3, #2
  }
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	370c      	adds	r7, #12
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b085      	sub	sp, #20
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
 8004b1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d139      	bne.n	8004ba0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e033      	b.n	8004ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2224      	movs	r2, #36	; 0x24
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 0201 	bic.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	021b      	lsls	r3, r3, #8
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2220      	movs	r2, #32
 8004b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e000      	b.n	8004ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004ba0:	2302      	movs	r3, #2
  }
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e0c0      	b.n	8004d42 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d106      	bne.n	8004bda <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f00a f90d 	bl	800edf4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2203      	movs	r2, #3
 8004bde:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f004 fa35 	bl	8009056 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bec:	2300      	movs	r3, #0
 8004bee:	73fb      	strb	r3, [r7, #15]
 8004bf0:	e03e      	b.n	8004c70 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004bf2:	7bfa      	ldrb	r2, [r7, #15]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	009b      	lsls	r3, r3, #2
 8004bfa:	4413      	add	r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	440b      	add	r3, r1
 8004c00:	3311      	adds	r3, #17
 8004c02:	2201      	movs	r2, #1
 8004c04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c06:	7bfa      	ldrb	r2, [r7, #15]
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	440b      	add	r3, r1
 8004c14:	3310      	adds	r3, #16
 8004c16:	7bfa      	ldrb	r2, [r7, #15]
 8004c18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c1a:	7bfa      	ldrb	r2, [r7, #15]
 8004c1c:	6879      	ldr	r1, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	4413      	add	r3, r2
 8004c24:	00db      	lsls	r3, r3, #3
 8004c26:	440b      	add	r3, r1
 8004c28:	3313      	adds	r3, #19
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c2e:	7bfa      	ldrb	r2, [r7, #15]
 8004c30:	6879      	ldr	r1, [r7, #4]
 8004c32:	4613      	mov	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4413      	add	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	440b      	add	r3, r1
 8004c3c:	3320      	adds	r3, #32
 8004c3e:	2200      	movs	r2, #0
 8004c40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c42:	7bfa      	ldrb	r2, [r7, #15]
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	4413      	add	r3, r2
 8004c4c:	00db      	lsls	r3, r3, #3
 8004c4e:	440b      	add	r3, r1
 8004c50:	3324      	adds	r3, #36	; 0x24
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c56:	7bfb      	ldrb	r3, [r7, #15]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	1c5a      	adds	r2, r3, #1
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	4413      	add	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	440b      	add	r3, r1
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	791b      	ldrb	r3, [r3, #4]
 8004c74:	7bfa      	ldrb	r2, [r7, #15]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d3bb      	bcc.n	8004bf2 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	73fb      	strb	r3, [r7, #15]
 8004c7e:	e044      	b.n	8004d0a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004c80:	7bfa      	ldrb	r2, [r7, #15]
 8004c82:	6879      	ldr	r1, [r7, #4]
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	440b      	add	r3, r1
 8004c8e:	f203 1351 	addw	r3, r3, #337	; 0x151
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004c96:	7bfa      	ldrb	r2, [r7, #15]
 8004c98:	6879      	ldr	r1, [r7, #4]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	440b      	add	r3, r1
 8004ca4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004ca8:	7bfa      	ldrb	r2, [r7, #15]
 8004caa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004cac:	7bfa      	ldrb	r2, [r7, #15]
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	440b      	add	r3, r1
 8004cba:	f203 1353 	addw	r3, r3, #339	; 0x153
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cc2:	7bfa      	ldrb	r2, [r7, #15]
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	4413      	add	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	440b      	add	r3, r1
 8004cd0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004cd8:	7bfa      	ldrb	r2, [r7, #15]
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	4413      	add	r3, r2
 8004ce2:	00db      	lsls	r3, r3, #3
 8004ce4:	440b      	add	r3, r1
 8004ce6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004cee:	7bfa      	ldrb	r2, [r7, #15]
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	4413      	add	r3, r2
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	440b      	add	r3, r1
 8004cfc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	3301      	adds	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	791b      	ldrb	r3, [r3, #4]
 8004d0e:	7bfa      	ldrb	r2, [r7, #15]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d3b5      	bcc.n	8004c80 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6818      	ldr	r0, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3304      	adds	r3, #4
 8004d1c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004d20:	f004 f9b4 	bl	800908c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	7a9b      	ldrb	r3, [r3, #10]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d102      	bne.n	8004d40 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f001 fc41 	bl	80065c2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b082      	sub	sp, #8
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d101      	bne.n	8004d60 <HAL_PCD_Start+0x16>
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	e012      	b.n	8004d86 <HAL_PCD_Start+0x3c>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	f004 f95b 	bl	8009028 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4618      	mov	r0, r3
 8004d78:	f006 fc1b 	bl	800b5b2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f006 fc20 	bl	800b5e0 <USB_ReadInterrupts>
 8004da0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d003      	beq.n	8004db4 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fb04 	bl	80053ba <PCD_EP_ISR_Handler>

    return;
 8004db2:	e110      	b.n	8004fd6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d013      	beq.n	8004de6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dd0:	b292      	uxth	r2, r2
 8004dd2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f00a f887 	bl	800eeea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004ddc:	2100      	movs	r1, #0
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f000 f8fc 	bl	8004fdc <HAL_PCD_SetAddress>

    return;
 8004de4:	e0f7      	b.n	8004fd6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d00c      	beq.n	8004e0a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004df8:	b29a      	uxth	r2, r3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004e02:	b292      	uxth	r2, r2
 8004e04:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004e08:	e0e5      	b.n	8004fd6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00c      	beq.n	8004e2e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e1c:	b29a      	uxth	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e26:	b292      	uxth	r2, r2
 8004e28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004e2c:	e0d3      	b.n	8004fd6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d034      	beq.n	8004ea2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e40:	b29a      	uxth	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0204 	bic.w	r2, r2, #4
 8004e4a:	b292      	uxth	r2, r2
 8004e4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004e58:	b29a      	uxth	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f022 0208 	bic.w	r2, r2, #8
 8004e62:	b292      	uxth	r2, r2
 8004e64:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d107      	bne.n	8004e82 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004e7a:	2100      	movs	r1, #0
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f00a fa27 	bl	800f2d0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004e82:	6878      	ldr	r0, [r7, #4]
 8004e84:	f00a f86a 	bl	800ef5c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004e90:	b29a      	uxth	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e9a:	b292      	uxth	r2, r2
 8004e9c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004ea0:	e099      	b.n	8004fd6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d027      	beq.n	8004efc <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004eb4:	b29a      	uxth	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0208 	orr.w	r2, r2, #8
 8004ebe:	b292      	uxth	r2, r2
 8004ec0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed6:	b292      	uxth	r2, r2
 8004ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ee4:	b29a      	uxth	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 0204 	orr.w	r2, r2, #4
 8004eee:	b292      	uxth	r2, r2
 8004ef0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f00a f817 	bl	800ef28 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004efa:	e06c      	b.n	8004fd6 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d040      	beq.n	8004f88 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f0e:	b29a      	uxth	r2, r3
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f18:	b292      	uxth	r2, r2
 8004f1a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d12b      	bne.n	8004f80 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f30:	b29a      	uxth	r2, r3
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0204 	orr.w	r2, r2, #4
 8004f3a:	b292      	uxth	r2, r2
 8004f3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f042 0208 	orr.w	r2, r2, #8
 8004f52:	b292      	uxth	r2, r2
 8004f54:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	089b      	lsrs	r3, r3, #2
 8004f6c:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004f76:	2101      	movs	r1, #1
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f00a f9a9 	bl	800f2d0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004f7e:	e02a      	b.n	8004fd6 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f009 ffd1 	bl	800ef28 <HAL_PCD_SuspendCallback>
    return;
 8004f86:	e026      	b.n	8004fd6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00f      	beq.n	8004fb2 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004fa4:	b292      	uxth	r2, r2
 8004fa6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f009 ff8f 	bl	800eece <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004fb0:	e011      	b.n	8004fd6 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fce:	b292      	uxth	r2, r2
 8004fd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004fd4:	bf00      	nop
  }
}
 8004fd6:	3710      	adds	r7, #16
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d101      	bne.n	8004ff6 <HAL_PCD_SetAddress+0x1a>
 8004ff2:	2302      	movs	r3, #2
 8004ff4:	e012      	b.n	800501c <HAL_PCD_SetAddress+0x40>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	78fa      	ldrb	r2, [r7, #3]
 8005002:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	78fa      	ldrb	r2, [r7, #3]
 800500a:	4611      	mov	r1, r2
 800500c:	4618      	mov	r0, r3
 800500e:	f006 fabc 	bl	800b58a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3708      	adds	r7, #8
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	4608      	mov	r0, r1
 800502e:	4611      	mov	r1, r2
 8005030:	461a      	mov	r2, r3
 8005032:	4603      	mov	r3, r0
 8005034:	70fb      	strb	r3, [r7, #3]
 8005036:	460b      	mov	r3, r1
 8005038:	803b      	strh	r3, [r7, #0]
 800503a:	4613      	mov	r3, r2
 800503c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005046:	2b00      	cmp	r3, #0
 8005048:	da0e      	bge.n	8005068 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	f003 0207 	and.w	r2, r3, #7
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	3310      	adds	r3, #16
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	705a      	strb	r2, [r3, #1]
 8005066:	e00e      	b.n	8005086 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005068:	78fb      	ldrb	r3, [r7, #3]
 800506a:	f003 0207 	and.w	r2, r3, #7
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	00db      	lsls	r3, r3, #3
 8005076:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800507a:	687a      	ldr	r2, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005086:	78fb      	ldrb	r3, [r7, #3]
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	b2da      	uxtb	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005092:	883a      	ldrh	r2, [r7, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	78ba      	ldrb	r2, [r7, #2]
 800509c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800509e:	78bb      	ldrb	r3, [r7, #2]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d102      	bne.n	80050aa <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_PCD_EP_Open+0x94>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e00e      	b.n	80050d6 <HAL_PCD_EP_Open+0xb2>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68f9      	ldr	r1, [r7, #12]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f003 fffe 	bl	80090c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80050d4:	7afb      	ldrb	r3, [r7, #11]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3710      	adds	r7, #16
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b084      	sub	sp, #16
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	460b      	mov	r3, r1
 80050e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80050ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	da0e      	bge.n	8005110 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	f003 0207 	and.w	r2, r3, #7
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	00db      	lsls	r3, r3, #3
 8005100:	3310      	adds	r3, #16
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	4413      	add	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2201      	movs	r2, #1
 800510c:	705a      	strb	r2, [r3, #1]
 800510e:	e00e      	b.n	800512e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005110:	78fb      	ldrb	r3, [r7, #3]
 8005112:	f003 0207 	and.w	r2, r3, #7
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	4413      	add	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	b2da      	uxtb	r2, r3
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005140:	2b01      	cmp	r3, #1
 8005142:	d101      	bne.n	8005148 <HAL_PCD_EP_Close+0x6a>
 8005144:	2302      	movs	r3, #2
 8005146:	e00e      	b.n	8005166 <HAL_PCD_EP_Close+0x88>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	68f9      	ldr	r1, [r7, #12]
 8005156:	4618      	mov	r0, r3
 8005158:	f004 fb7a 	bl	8009850 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3710      	adds	r7, #16
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b086      	sub	sp, #24
 8005172:	af00      	add	r7, sp, #0
 8005174:	60f8      	str	r0, [r7, #12]
 8005176:	607a      	str	r2, [r7, #4]
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	460b      	mov	r3, r1
 800517c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800517e:	7afb      	ldrb	r3, [r7, #11]
 8005180:	f003 0207 	and.w	r2, r3, #7
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4413      	add	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2200      	movs	r2, #0
 80051a6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	2200      	movs	r2, #0
 80051ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80051ae:	7afb      	ldrb	r3, [r7, #11]
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	6979      	ldr	r1, [r7, #20]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f004 fd32 	bl	8009c2a <USB_EPStartXfer>

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b083      	sub	sp, #12
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	460b      	mov	r3, r1
 80051da:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	f003 0207 	and.w	r2, r3, #7
 80051e2:	6879      	ldr	r1, [r7, #4]
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	440b      	add	r3, r1
 80051ee:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80051f2:	681b      	ldr	r3, [r3, #0]
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	460b      	mov	r3, r1
 800520e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005210:	7afb      	ldrb	r3, [r7, #11]
 8005212:	f003 0207 	and.w	r2, r3, #7
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	3310      	adds	r3, #16
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	4413      	add	r3, r2
 8005224:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	683a      	ldr	r2, [r7, #0]
 8005230:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	2200      	movs	r2, #0
 8005244:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2201      	movs	r2, #1
 800524a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800524c:	7afb      	ldrb	r3, [r7, #11]
 800524e:	f003 0307 	and.w	r3, r3, #7
 8005252:	b2da      	uxtb	r2, r3
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6979      	ldr	r1, [r7, #20]
 800525e:	4618      	mov	r0, r3
 8005260:	f004 fce3 	bl	8009c2a <USB_EPStartXfer>

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b084      	sub	sp, #16
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
 8005276:	460b      	mov	r3, r1
 8005278:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800527a:	78fb      	ldrb	r3, [r7, #3]
 800527c:	f003 0307 	and.w	r3, r3, #7
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	7912      	ldrb	r2, [r2, #4]
 8005284:	4293      	cmp	r3, r2
 8005286:	d901      	bls.n	800528c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e03e      	b.n	800530a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800528c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005290:	2b00      	cmp	r3, #0
 8005292:	da0e      	bge.n	80052b2 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005294:	78fb      	ldrb	r3, [r7, #3]
 8005296:	f003 0207 	and.w	r2, r3, #7
 800529a:	4613      	mov	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4413      	add	r3, r2
 80052a0:	00db      	lsls	r3, r3, #3
 80052a2:	3310      	adds	r3, #16
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	4413      	add	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2201      	movs	r2, #1
 80052ae:	705a      	strb	r2, [r3, #1]
 80052b0:	e00c      	b.n	80052cc <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80052b2:	78fa      	ldrb	r2, [r7, #3]
 80052b4:	4613      	mov	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4413      	add	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	4413      	add	r3, r2
 80052c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2201      	movs	r2, #1
 80052d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80052d2:	78fb      	ldrb	r3, [r7, #3]
 80052d4:	f003 0307 	and.w	r3, r3, #7
 80052d8:	b2da      	uxtb	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d101      	bne.n	80052ec <HAL_PCD_EP_SetStall+0x7e>
 80052e8:	2302      	movs	r3, #2
 80052ea:	e00e      	b.n	800530a <HAL_PCD_EP_SetStall+0x9c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68f9      	ldr	r1, [r7, #12]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f006 f846 	bl	800b38c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b084      	sub	sp, #16
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	460b      	mov	r3, r1
 800531c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800531e:	78fb      	ldrb	r3, [r7, #3]
 8005320:	f003 030f 	and.w	r3, r3, #15
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	7912      	ldrb	r2, [r2, #4]
 8005328:	4293      	cmp	r3, r2
 800532a:	d901      	bls.n	8005330 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800532c:	2301      	movs	r3, #1
 800532e:	e040      	b.n	80053b2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005330:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005334:	2b00      	cmp	r3, #0
 8005336:	da0e      	bge.n	8005356 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005338:	78fb      	ldrb	r3, [r7, #3]
 800533a:	f003 0207 	and.w	r2, r3, #7
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	3310      	adds	r3, #16
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	4413      	add	r3, r2
 800534c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2201      	movs	r2, #1
 8005352:	705a      	strb	r2, [r3, #1]
 8005354:	e00e      	b.n	8005374 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	f003 0207 	and.w	r2, r3, #7
 800535c:	4613      	mov	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4413      	add	r3, r2
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	4413      	add	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800537a:	78fb      	ldrb	r3, [r7, #3]
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	b2da      	uxtb	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800538c:	2b01      	cmp	r3, #1
 800538e:	d101      	bne.n	8005394 <HAL_PCD_EP_ClrStall+0x82>
 8005390:	2302      	movs	r3, #2
 8005392:	e00e      	b.n	80053b2 <HAL_PCD_EP_ClrStall+0xa0>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68f9      	ldr	r1, [r7, #12]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f006 f843 	bl	800b42e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b096      	sub	sp, #88	; 0x58
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80053c2:	e3ae      	b.n	8005b22 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80053cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80053d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80053de:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f040 8170 	bne.w	80056c8 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80053e8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80053ec:	f003 0310 	and.w	r3, r3, #16
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d14d      	bne.n	8005490 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005404:	81fb      	strh	r3, [r7, #14]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	89fb      	ldrh	r3, [r7, #14]
 800540c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005410:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005414:	b29b      	uxth	r3, r3
 8005416:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3310      	adds	r3, #16
 800541c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005426:	b29b      	uxth	r3, r3
 8005428:	461a      	mov	r2, r3
 800542a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	00db      	lsls	r3, r3, #3
 8005430:	4413      	add	r3, r2
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	6812      	ldr	r2, [r2, #0]
 8005436:	4413      	add	r3, r2
 8005438:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800543c:	881b      	ldrh	r3, [r3, #0]
 800543e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005442:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005444:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8005446:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005448:	695a      	ldr	r2, [r3, #20]
 800544a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	441a      	add	r2, r3
 8005450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005452:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8005454:	2100      	movs	r1, #0
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f009 fd1f 	bl	800ee9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	7b1b      	ldrb	r3, [r3, #12]
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 835d 	beq.w	8005b22 <PCD_EP_ISR_Handler+0x768>
 8005468:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	2b00      	cmp	r3, #0
 800546e:	f040 8358 	bne.w	8005b22 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	7b1b      	ldrb	r3, [r3, #12]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800547c:	b2da      	uxtb	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	b292      	uxth	r2, r2
 8005484:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	731a      	strb	r2, [r3, #12]
 800548e:	e348      	b.n	8005b22 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005496:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	881b      	ldrh	r3, [r3, #0]
 800549e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80054a2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80054a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d032      	beq.n	8005514 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054b6:	b29b      	uxth	r3, r3
 80054b8:	461a      	mov	r2, r3
 80054ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	00db      	lsls	r3, r3, #3
 80054c0:	4413      	add	r3, r2
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	4413      	add	r3, r2
 80054c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054cc:	881b      	ldrh	r3, [r3, #0]
 80054ce:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80054d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054d4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80054e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80054e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054e6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	f006 f8cb 	bl	800b684 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	881b      	ldrh	r3, [r3, #0]
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	f640 738f 	movw	r3, #3983	; 0xf8f
 80054fa:	4013      	ands	r3, r2
 80054fc:	823b      	strh	r3, [r7, #16]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	8a3a      	ldrh	r2, [r7, #16]
 8005504:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005508:	b292      	uxth	r2, r2
 800550a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f009 fc97 	bl	800ee40 <HAL_PCD_SetupStageCallback>
 8005512:	e306      	b.n	8005b22 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005514:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005518:	2b00      	cmp	r3, #0
 800551a:	f280 8302 	bge.w	8005b22 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b29a      	uxth	r2, r3
 8005526:	f640 738f 	movw	r3, #3983	; 0xf8f
 800552a:	4013      	ands	r3, r2
 800552c:	83fb      	strh	r3, [r7, #30]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	8bfa      	ldrh	r2, [r7, #30]
 8005534:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005538:	b292      	uxth	r2, r2
 800553a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005544:	b29b      	uxth	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	00db      	lsls	r3, r3, #3
 800554e:	4413      	add	r3, r2
 8005550:	687a      	ldr	r2, [r7, #4]
 8005552:	6812      	ldr	r2, [r2, #0]
 8005554:	4413      	add	r3, r2
 8005556:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800555a:	881b      	ldrh	r3, [r3, #0]
 800555c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005560:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005562:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005564:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005566:	69db      	ldr	r3, [r3, #28]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d019      	beq.n	80055a0 <PCD_EP_ISR_Handler+0x1e6>
 800556c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d015      	beq.n	80055a0 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557a:	6959      	ldr	r1, [r3, #20]
 800557c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8005580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005582:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005584:	b29b      	uxth	r3, r3
 8005586:	f006 f87d 	bl	800b684 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800558a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800558c:	695a      	ldr	r2, [r3, #20]
 800558e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005590:	69db      	ldr	r3, [r3, #28]
 8005592:	441a      	add	r2, r3
 8005594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005596:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005598:	2100      	movs	r1, #0
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f009 fc62 	bl	800ee64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	881b      	ldrh	r3, [r3, #0]
 80055a6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80055aa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80055ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f040 82b5 	bne.w	8005b22 <PCD_EP_ISR_Handler+0x768>
 80055b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80055bc:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80055c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80055c4:	f000 82ad 	beq.w	8005b22 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	61bb      	str	r3, [r7, #24]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	461a      	mov	r2, r3
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	4413      	add	r3, r2
 80055de:	61bb      	str	r3, [r7, #24]
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	881b      	ldrh	r3, [r3, #0]
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055f2:	b29a      	uxth	r2, r3
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	801a      	strh	r2, [r3, #0]
 80055f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b3e      	cmp	r3, #62	; 0x3e
 80055fe:	d91d      	bls.n	800563c <PCD_EP_ISR_Handler+0x282>
 8005600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	647b      	str	r3, [r7, #68]	; 0x44
 8005608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f003 031f 	and.w	r3, r3, #31
 8005610:	2b00      	cmp	r3, #0
 8005612:	d102      	bne.n	800561a <PCD_EP_ISR_Handler+0x260>
 8005614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005616:	3b01      	subs	r3, #1
 8005618:	647b      	str	r3, [r7, #68]	; 0x44
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	881b      	ldrh	r3, [r3, #0]
 800561e:	b29a      	uxth	r2, r3
 8005620:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005622:	b29b      	uxth	r3, r3
 8005624:	029b      	lsls	r3, r3, #10
 8005626:	b29b      	uxth	r3, r3
 8005628:	4313      	orrs	r3, r2
 800562a:	b29b      	uxth	r3, r3
 800562c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005630:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005634:	b29a      	uxth	r2, r3
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	e026      	b.n	800568a <PCD_EP_ISR_Handler+0x2d0>
 800563c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800563e:	691b      	ldr	r3, [r3, #16]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <PCD_EP_ISR_Handler+0x2a0>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	881b      	ldrh	r3, [r3, #0]
 8005648:	b29b      	uxth	r3, r3
 800564a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800564e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005652:	b29a      	uxth	r2, r3
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	801a      	strh	r2, [r3, #0]
 8005658:	e017      	b.n	800568a <PCD_EP_ISR_Handler+0x2d0>
 800565a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	647b      	str	r3, [r7, #68]	; 0x44
 8005662:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	d002      	beq.n	8005674 <PCD_EP_ISR_Handler+0x2ba>
 800566e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005670:	3301      	adds	r3, #1
 8005672:	647b      	str	r3, [r7, #68]	; 0x44
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	881b      	ldrh	r3, [r3, #0]
 8005678:	b29a      	uxth	r2, r3
 800567a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800567c:	b29b      	uxth	r3, r3
 800567e:	029b      	lsls	r3, r3, #10
 8005680:	b29b      	uxth	r3, r3
 8005682:	4313      	orrs	r3, r2
 8005684:	b29a      	uxth	r2, r3
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	b29b      	uxth	r3, r3
 8005692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569a:	827b      	strh	r3, [r7, #18]
 800569c:	8a7b      	ldrh	r3, [r7, #18]
 800569e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80056a2:	827b      	strh	r3, [r7, #18]
 80056a4:	8a7b      	ldrh	r3, [r7, #18]
 80056a6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80056aa:	827b      	strh	r3, [r7, #18]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	8a7b      	ldrh	r3, [r7, #18]
 80056b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	8013      	strh	r3, [r2, #0]
 80056c6:	e22c      	b.n	8005b22 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	461a      	mov	r2, r3
 80056ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	881b      	ldrh	r3, [r3, #0]
 80056d8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80056dc:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f280 80f6 	bge.w	80058d2 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80056f0:	009b      	lsls	r3, r3, #2
 80056f2:	4413      	add	r3, r2
 80056f4:	881b      	ldrh	r3, [r3, #0]
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80056fc:	4013      	ands	r3, r2
 80056fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800570c:	009b      	lsls	r3, r3, #2
 800570e:	4413      	add	r3, r2
 8005710:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8005714:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005718:	b292      	uxth	r2, r2
 800571a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800571c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	4413      	add	r3, r2
 8005730:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8005732:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005734:	7b1b      	ldrb	r3, [r3, #12]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d123      	bne.n	8005782 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005742:	b29b      	uxth	r3, r3
 8005744:	461a      	mov	r2, r3
 8005746:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005748:	781b      	ldrb	r3, [r3, #0]
 800574a:	00db      	lsls	r3, r3, #3
 800574c:	4413      	add	r3, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	4413      	add	r3, r2
 8005754:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005758:	881b      	ldrh	r3, [r3, #0]
 800575a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800575e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8005762:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 808e 	beq.w	8005888 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6818      	ldr	r0, [r3, #0]
 8005770:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005772:	6959      	ldr	r1, [r3, #20]
 8005774:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005776:	88da      	ldrh	r2, [r3, #6]
 8005778:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800577c:	f005 ff82 	bl	800b684 <USB_ReadPMA>
 8005780:	e082      	b.n	8005888 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005784:	78db      	ldrb	r3, [r3, #3]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d10a      	bne.n	80057a0 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800578a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800578e:	461a      	mov	r2, r3
 8005790:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f9d3 	bl	8005b3e <HAL_PCD_EP_DB_Receive>
 8005798:	4603      	mov	r3, r0
 800579a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800579e:	e073      	b.n	8005888 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	461a      	mov	r2, r3
 80057a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4413      	add	r3, r2
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057ba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	461a      	mov	r2, r3
 80057c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	009b      	lsls	r3, r3, #2
 80057ca:	441a      	add	r2, r3
 80057cc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80057d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80057d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80057d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80057dc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	461a      	mov	r2, r3
 80057ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	881b      	ldrh	r3, [r3, #0]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d022      	beq.n	8005844 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005806:	b29b      	uxth	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800580c:	781b      	ldrb	r3, [r3, #0]
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	4413      	add	r3, r2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6812      	ldr	r2, [r2, #0]
 8005816:	4413      	add	r3, r2
 8005818:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005822:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8005826:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800582a:	2b00      	cmp	r3, #0
 800582c:	d02c      	beq.n	8005888 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6818      	ldr	r0, [r3, #0]
 8005832:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005834:	6959      	ldr	r1, [r3, #20]
 8005836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005838:	891a      	ldrh	r2, [r3, #8]
 800583a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800583e:	f005 ff21 	bl	800b684 <USB_ReadPMA>
 8005842:	e021      	b.n	8005888 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800584c:	b29b      	uxth	r3, r3
 800584e:	461a      	mov	r2, r3
 8005850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	4413      	add	r3, r2
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	6812      	ldr	r2, [r2, #0]
 800585c:	4413      	add	r3, r2
 800585e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005862:	881b      	ldrh	r3, [r3, #0]
 8005864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005868:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800586c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005870:	2b00      	cmp	r3, #0
 8005872:	d009      	beq.n	8005888 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800587a:	6959      	ldr	r1, [r3, #20]
 800587c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800587e:	895a      	ldrh	r2, [r3, #10]
 8005880:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005884:	f005 fefe 	bl	800b684 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005888:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005890:	441a      	add	r2, r3
 8005892:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005894:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8005896:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005898:	695a      	ldr	r2, [r3, #20]
 800589a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800589e:	441a      	add	r2, r3
 80058a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80058a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <PCD_EP_ISR_Handler+0x4fe>
 80058ac:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 80058b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d206      	bcs.n	80058c6 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80058b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	4619      	mov	r1, r3
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f009 fad0 	bl	800ee64 <HAL_PCD_DataOutStageCallback>
 80058c4:	e005      	b.n	80058d2 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80058cc:	4618      	mov	r0, r3
 80058ce:	f004 f9ac 	bl	8009c2a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80058d2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80058d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 8121 	beq.w	8005b22 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 80058e0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 80058e4:	4613      	mov	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4413      	add	r3, r2
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	3310      	adds	r3, #16
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	4413      	add	r3, r2
 80058f2:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	461a      	mov	r2, r3
 80058fa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	4413      	add	r3, r2
 8005902:	881b      	ldrh	r3, [r3, #0]
 8005904:	b29b      	uxth	r3, r3
 8005906:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800590a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	441a      	add	r2, r3
 8005920:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005924:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005928:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800592c:	b29b      	uxth	r3, r3
 800592e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005932:	78db      	ldrb	r3, [r3, #3]
 8005934:	2b01      	cmp	r3, #1
 8005936:	f040 80a2 	bne.w	8005a7e <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800593a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800593c:	2200      	movs	r2, #0
 800593e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005942:	7b1b      	ldrb	r3, [r3, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 8093 	beq.w	8005a70 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800594a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800594e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005952:	2b00      	cmp	r3, #0
 8005954:	d046      	beq.n	80059e4 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d126      	bne.n	80059ac <PCD_EP_ISR_Handler+0x5f2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596c:	b29b      	uxth	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	4413      	add	r3, r2
 8005974:	627b      	str	r3, [r7, #36]	; 0x24
 8005976:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	00da      	lsls	r2, r3, #3
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	4413      	add	r3, r2
 8005980:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005984:	623b      	str	r3, [r7, #32]
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	b29b      	uxth	r3, r3
 800598c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005990:	b29a      	uxth	r2, r3
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	801a      	strh	r2, [r3, #0]
 8005996:	6a3b      	ldr	r3, [r7, #32]
 8005998:	881b      	ldrh	r3, [r3, #0]
 800599a:	b29b      	uxth	r3, r3
 800599c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059a4:	b29a      	uxth	r2, r3
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	801a      	strh	r2, [r3, #0]
 80059aa:	e061      	b.n	8005a70 <PCD_EP_ISR_Handler+0x6b6>
 80059ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ae:	785b      	ldrb	r3, [r3, #1]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d15d      	bne.n	8005a70 <PCD_EP_ISR_Handler+0x6b6>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059c8:	4413      	add	r3, r2
 80059ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	00da      	lsls	r2, r3, #3
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	4413      	add	r3, r2
 80059d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80059da:	62bb      	str	r3, [r7, #40]	; 0x28
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	2200      	movs	r2, #0
 80059e0:	801a      	strh	r2, [r3, #0]
 80059e2:	e045      	b.n	8005a70 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059ec:	785b      	ldrb	r3, [r3, #1]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d126      	bne.n	8005a40 <PCD_EP_ISR_Handler+0x686>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	637b      	str	r3, [r7, #52]	; 0x34
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	461a      	mov	r2, r3
 8005a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a06:	4413      	add	r3, r2
 8005a08:	637b      	str	r3, [r7, #52]	; 0x34
 8005a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	00da      	lsls	r2, r3, #3
 8005a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a12:	4413      	add	r3, r2
 8005a14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a18:	633b      	str	r3, [r7, #48]	; 0x30
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	801a      	strh	r2, [r3, #0]
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2c:	881b      	ldrh	r3, [r3, #0]
 8005a2e:	b29b      	uxth	r3, r3
 8005a30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	801a      	strh	r2, [r3, #0]
 8005a3e:	e017      	b.n	8005a70 <PCD_EP_ISR_Handler+0x6b6>
 8005a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a42:	785b      	ldrb	r3, [r3, #1]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d113      	bne.n	8005a70 <PCD_EP_ISR_Handler+0x6b6>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	461a      	mov	r2, r3
 8005a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a56:	4413      	add	r3, r2
 8005a58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	00da      	lsls	r2, r3, #3
 8005a60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a62:	4413      	add	r3, r2
 8005a64:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005a68:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	4619      	mov	r1, r3
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f009 fa0f 	bl	800ee9a <HAL_PCD_DataInStageCallback>
 8005a7c:	e051      	b.n	8005b22 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005a7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d144      	bne.n	8005b14 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	461a      	mov	r2, r3
 8005a96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	4413      	add	r3, r2
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	4413      	add	r3, r2
 8005aa4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005aa8:	881b      	ldrh	r3, [r3, #0]
 8005aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005aae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ab4:	699a      	ldr	r2, [r3, #24]
 8005ab6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d907      	bls.n	8005ace <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8005abe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005ac6:	1ad2      	subs	r2, r2, r3
 8005ac8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aca:	619a      	str	r2, [r3, #24]
 8005acc:	e002      	b.n	8005ad4 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d106      	bne.n	8005aea <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	4619      	mov	r1, r3
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f009 f9d9 	bl	800ee9a <HAL_PCD_DataInStageCallback>
 8005ae8:	e01b      	b.n	8005b22 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aec:	695a      	ldr	r2, [r3, #20]
 8005aee:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005af2:	441a      	add	r2, r3
 8005af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af6:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005b00:	441a      	add	r2, r3
 8005b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b04:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f004 f88c 	bl	8009c2a <USB_EPStartXfer>
 8005b12:	e006      	b.n	8005b22 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005b14:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005b18:	461a      	mov	r2, r3
 8005b1a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f917 	bl	8005d50 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	b21b      	sxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f6ff ac48 	blt.w	80053c4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3758      	adds	r7, #88	; 0x58
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b088      	sub	sp, #32
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	60f8      	str	r0, [r7, #12]
 8005b46:	60b9      	str	r1, [r7, #8]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005b4c:	88fb      	ldrh	r3, [r7, #6]
 8005b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d07c      	beq.n	8005c50 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b5e:	b29b      	uxth	r3, r3
 8005b60:	461a      	mov	r2, r3
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	00db      	lsls	r3, r3, #3
 8005b68:	4413      	add	r3, r2
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	6812      	ldr	r2, [r2, #0]
 8005b6e:	4413      	add	r3, r2
 8005b70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b74:	881b      	ldrh	r3, [r3, #0]
 8005b76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b7a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	699a      	ldr	r2, [r3, #24]
 8005b80:	8b7b      	ldrh	r3, [r7, #26]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d306      	bcc.n	8005b94 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	8b7b      	ldrh	r3, [r7, #26]
 8005b8c:	1ad2      	subs	r2, r2, r3
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	619a      	str	r2, [r3, #24]
 8005b92:	e002      	b.n	8005b9a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2200      	movs	r2, #0
 8005b98:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	699b      	ldr	r3, [r3, #24]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d123      	bne.n	8005bea <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bbc:	833b      	strh	r3, [r7, #24]
 8005bbe:	8b3b      	ldrh	r3, [r7, #24]
 8005bc0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bc4:	833b      	strh	r3, [r7, #24]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	461a      	mov	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	441a      	add	r2, r3
 8005bd4:	8b3b      	ldrh	r3, [r7, #24]
 8005bd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005be2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005bea:	88fb      	ldrh	r3, [r7, #6]
 8005bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d01f      	beq.n	8005c34 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	881b      	ldrh	r3, [r3, #0]
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0e:	82fb      	strh	r3, [r7, #22]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	441a      	add	r2, r3
 8005c1e:	8afb      	ldrh	r3, [r7, #22]
 8005c20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005c34:	8b7b      	ldrh	r3, [r7, #26]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	f000 8085 	beq.w	8005d46 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6818      	ldr	r0, [r3, #0]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6959      	ldr	r1, [r3, #20]
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	891a      	ldrh	r2, [r3, #8]
 8005c48:	8b7b      	ldrh	r3, [r7, #26]
 8005c4a:	f005 fd1b 	bl	800b684 <USB_ReadPMA>
 8005c4e:	e07a      	b.n	8005d46 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	4413      	add	r3, r2
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	6812      	ldr	r2, [r2, #0]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c6e:	881b      	ldrh	r3, [r3, #0]
 8005c70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c74:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	699a      	ldr	r2, [r3, #24]
 8005c7a:	8b7b      	ldrh	r3, [r7, #26]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d306      	bcc.n	8005c8e <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005c80:	68bb      	ldr	r3, [r7, #8]
 8005c82:	699a      	ldr	r2, [r3, #24]
 8005c84:	8b7b      	ldrh	r3, [r7, #26]
 8005c86:	1ad2      	subs	r2, r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	619a      	str	r2, [r3, #24]
 8005c8c:	e002      	b.n	8005c94 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	2200      	movs	r2, #0
 8005c92:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d123      	bne.n	8005ce4 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cb6:	83fb      	strh	r3, [r7, #30]
 8005cb8:	8bfb      	ldrh	r3, [r7, #30]
 8005cba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005cbe:	83fb      	strh	r3, [r7, #30]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	441a      	add	r2, r3
 8005cce:	8bfb      	ldrh	r3, [r7, #30]
 8005cd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005cd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005ce4:	88fb      	ldrh	r3, [r7, #6]
 8005ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d11f      	bne.n	8005d2e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	881b      	ldrh	r3, [r3, #0]
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d08:	83bb      	strh	r3, [r7, #28]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	461a      	mov	r2, r3
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	441a      	add	r2, r3
 8005d18:	8bbb      	ldrh	r3, [r7, #28]
 8005d1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d26:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005d2e:	8b7b      	ldrh	r3, [r7, #26]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6818      	ldr	r0, [r3, #0]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	6959      	ldr	r1, [r3, #20]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	895a      	ldrh	r2, [r3, #10]
 8005d40:	8b7b      	ldrh	r3, [r7, #26]
 8005d42:	f005 fc9f 	bl	800b684 <USB_ReadPMA>
    }
  }

  return count;
 8005d46:	8b7b      	ldrh	r3, [r7, #26]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3720      	adds	r7, #32
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b0a4      	sub	sp, #144	; 0x90
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005d5e:	88fb      	ldrh	r3, [r7, #6]
 8005d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 81db 	beq.w	8006120 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	461a      	mov	r2, r3
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	00db      	lsls	r3, r3, #3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	6812      	ldr	r2, [r2, #0]
 8005d82:	4413      	add	r3, r2
 8005d84:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d8e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	699a      	ldr	r2, [r3, #24]
 8005d96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d907      	bls.n	8005dae <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005da6:	1ad2      	subs	r2, r2, r3
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	619a      	str	r2, [r3, #24]
 8005dac:	e002      	b.n	8005db4 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2200      	movs	r2, #0
 8005db2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	f040 80b9 	bne.w	8005f30 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	785b      	ldrb	r3, [r3, #1]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d126      	bne.n	8005e14 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dda:	4413      	add	r3, r2
 8005ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	00da      	lsls	r2, r3, #3
 8005de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de6:	4413      	add	r3, r2
 8005de8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	881b      	ldrh	r3, [r3, #0]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005df8:	b29a      	uxth	r2, r3
 8005dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfc:	801a      	strh	r2, [r3, #0]
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e01a      	b.n	8005e4a <HAL_PCD_EP_DB_Transmit+0xfa>
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	785b      	ldrb	r3, [r3, #1]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d116      	bne.n	8005e4a <HAL_PCD_EP_DB_Transmit+0xfa>
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	637b      	str	r3, [r7, #52]	; 0x34
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e30:	4413      	add	r3, r2
 8005e32:	637b      	str	r3, [r7, #52]	; 0x34
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	00da      	lsls	r2, r3, #3
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e3c:	4413      	add	r3, r2
 8005e3e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e42:	633b      	str	r3, [r7, #48]	; 0x30
 8005e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e46:	2200      	movs	r2, #0
 8005e48:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	785b      	ldrb	r3, [r3, #1]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d126      	bne.n	8005ea6 <HAL_PCD_EP_DB_Transmit+0x156>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	61fb      	str	r3, [r7, #28]
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	461a      	mov	r2, r3
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	61fb      	str	r3, [r7, #28]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	00da      	lsls	r2, r3, #3
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005e7e:	61bb      	str	r3, [r7, #24]
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	881b      	ldrh	r3, [r3, #0]
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	881b      	ldrh	r3, [r3, #0]
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	801a      	strh	r2, [r3, #0]
 8005ea4:	e017      	b.n	8005ed6 <HAL_PCD_EP_DB_Transmit+0x186>
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	785b      	ldrb	r3, [r3, #1]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d113      	bne.n	8005ed6 <HAL_PCD_EP_DB_Transmit+0x186>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	4413      	add	r3, r2
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	00da      	lsls	r2, r3, #3
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	4413      	add	r3, r2
 8005eca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005ece:	623b      	str	r3, [r7, #32]
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	781b      	ldrb	r3, [r3, #0]
 8005eda:	4619      	mov	r1, r3
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f008 ffdc 	bl	800ee9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ee2:	88fb      	ldrh	r3, [r7, #6]
 8005ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 82fa 	beq.w	80064e2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	881b      	ldrh	r3, [r3, #0]
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f08:	82fb      	strh	r3, [r7, #22]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	009b      	lsls	r3, r3, #2
 8005f16:	441a      	add	r2, r3
 8005f18:	8afb      	ldrh	r3, [r7, #22]
 8005f1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	8013      	strh	r3, [r2, #0]
 8005f2e:	e2d8      	b.n	80064e2 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005f30:	88fb      	ldrh	r3, [r7, #6]
 8005f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d021      	beq.n	8005f7e <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	4413      	add	r3, r2
 8005f48:	881b      	ldrh	r3, [r3, #0]
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f54:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	441a      	add	r2, r3
 8005f66:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	f040 82ac 	bne.w	80064e2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	695a      	ldr	r2, [r3, #20]
 8005f8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005f92:	441a      	add	r2, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	69da      	ldr	r2, [r3, #28]
 8005f9c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005fa0:	441a      	add	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	6a1a      	ldr	r2, [r3, #32]
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d30b      	bcc.n	8005fca <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6a1a      	ldr	r2, [r3, #32]
 8005fbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fc2:	1ad2      	subs	r2, r2, r3
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	621a      	str	r2, [r3, #32]
 8005fc8:	e017      	b.n	8005ffa <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	6a1b      	ldr	r3, [r3, #32]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d108      	bne.n	8005fe4 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005fd2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005fd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005fe2:	e00a      	b.n	8005ffa <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	6a1b      	ldr	r3, [r3, #32]
 8005ff0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d165      	bne.n	80060ce <HAL_PCD_EP_DB_Transmit+0x37e>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006010:	b29b      	uxth	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006016:	4413      	add	r3, r2
 8006018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	00da      	lsls	r2, r3, #3
 8006020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006022:	4413      	add	r3, r2
 8006024:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006028:	63bb      	str	r3, [r7, #56]	; 0x38
 800602a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800602c:	881b      	ldrh	r3, [r3, #0]
 800602e:	b29b      	uxth	r3, r3
 8006030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006034:	b29a      	uxth	r2, r3
 8006036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006038:	801a      	strh	r2, [r3, #0]
 800603a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800603e:	2b3e      	cmp	r3, #62	; 0x3e
 8006040:	d91d      	bls.n	800607e <HAL_PCD_EP_DB_Transmit+0x32e>
 8006042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	64bb      	str	r3, [r7, #72]	; 0x48
 800604a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800604e:	f003 031f 	and.w	r3, r3, #31
 8006052:	2b00      	cmp	r3, #0
 8006054:	d102      	bne.n	800605c <HAL_PCD_EP_DB_Transmit+0x30c>
 8006056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006058:	3b01      	subs	r3, #1
 800605a:	64bb      	str	r3, [r7, #72]	; 0x48
 800605c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	b29a      	uxth	r2, r3
 8006062:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006064:	b29b      	uxth	r3, r3
 8006066:	029b      	lsls	r3, r3, #10
 8006068:	b29b      	uxth	r3, r3
 800606a:	4313      	orrs	r3, r2
 800606c:	b29b      	uxth	r3, r3
 800606e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006072:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006076:	b29a      	uxth	r2, r3
 8006078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607a:	801a      	strh	r2, [r3, #0]
 800607c:	e044      	b.n	8006108 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800607e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006082:	2b00      	cmp	r3, #0
 8006084:	d10a      	bne.n	800609c <HAL_PCD_EP_DB_Transmit+0x34c>
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	881b      	ldrh	r3, [r3, #0]
 800608a:	b29b      	uxth	r3, r3
 800608c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006090:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006094:	b29a      	uxth	r2, r3
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	801a      	strh	r2, [r3, #0]
 800609a:	e035      	b.n	8006108 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800609c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060a0:	085b      	lsrs	r3, r3, #1
 80060a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80060a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060a8:	f003 0301 	and.w	r3, r3, #1
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <HAL_PCD_EP_DB_Transmit+0x366>
 80060b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060b2:	3301      	adds	r3, #1
 80060b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80060b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060be:	b29b      	uxth	r3, r3
 80060c0:	029b      	lsls	r3, r3, #10
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	4313      	orrs	r3, r2
 80060c6:	b29a      	uxth	r2, r3
 80060c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060ca:	801a      	strh	r2, [r3, #0]
 80060cc:	e01c      	b.n	8006108 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	785b      	ldrb	r3, [r3, #1]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d118      	bne.n	8006108 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	647b      	str	r3, [r7, #68]	; 0x44
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	461a      	mov	r2, r3
 80060e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ea:	4413      	add	r3, r2
 80060ec:	647b      	str	r3, [r7, #68]	; 0x44
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	00da      	lsls	r2, r3, #3
 80060f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060f6:	4413      	add	r3, r2
 80060f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80060fc:	643b      	str	r3, [r7, #64]	; 0x40
 80060fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006102:	b29a      	uxth	r2, r3
 8006104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006106:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6818      	ldr	r0, [r3, #0]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6959      	ldr	r1, [r3, #20]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	891a      	ldrh	r2, [r3, #8]
 8006114:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006118:	b29b      	uxth	r3, r3
 800611a:	f005 fa71 	bl	800b600 <USB_WritePMA>
 800611e:	e1e0      	b.n	80064e2 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006128:	b29b      	uxth	r3, r3
 800612a:	461a      	mov	r2, r3
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	4413      	add	r3, r2
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	6812      	ldr	r2, [r2, #0]
 8006138:	4413      	add	r3, r2
 800613a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006144:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	699a      	ldr	r2, [r3, #24]
 800614c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006150:	429a      	cmp	r2, r3
 8006152:	d307      	bcc.n	8006164 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	699a      	ldr	r2, [r3, #24]
 8006158:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800615c:	1ad2      	subs	r2, r2, r3
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	619a      	str	r2, [r3, #24]
 8006162:	e002      	b.n	800616a <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2200      	movs	r2, #0
 8006168:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	699b      	ldr	r3, [r3, #24]
 800616e:	2b00      	cmp	r3, #0
 8006170:	f040 80c0 	bne.w	80062f4 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	785b      	ldrb	r3, [r3, #1]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d126      	bne.n	80061ca <HAL_PCD_EP_DB_Transmit+0x47a>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800618a:	b29b      	uxth	r3, r3
 800618c:	461a      	mov	r2, r3
 800618e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006190:	4413      	add	r3, r2
 8006192:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	00da      	lsls	r2, r3, #3
 800619a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800619c:	4413      	add	r3, r2
 800619e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80061a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061a6:	881b      	ldrh	r3, [r3, #0]
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061ae:	b29a      	uxth	r2, r3
 80061b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b2:	801a      	strh	r2, [r3, #0]
 80061b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061b6:	881b      	ldrh	r3, [r3, #0]
 80061b8:	b29b      	uxth	r3, r3
 80061ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061c2:	b29a      	uxth	r2, r3
 80061c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061c6:	801a      	strh	r2, [r3, #0]
 80061c8:	e01a      	b.n	8006200 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d116      	bne.n	8006200 <HAL_PCD_EP_DB_Transmit+0x4b0>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	667b      	str	r3, [r7, #100]	; 0x64
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	461a      	mov	r2, r3
 80061e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061e6:	4413      	add	r3, r2
 80061e8:	667b      	str	r3, [r7, #100]	; 0x64
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	781b      	ldrb	r3, [r3, #0]
 80061ee:	00da      	lsls	r2, r3, #3
 80061f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061f2:	4413      	add	r3, r2
 80061f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80061f8:	663b      	str	r3, [r7, #96]	; 0x60
 80061fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061fc:	2200      	movs	r2, #0
 80061fe:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	677b      	str	r3, [r7, #116]	; 0x74
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	785b      	ldrb	r3, [r3, #1]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d12b      	bne.n	8006266 <HAL_PCD_EP_DB_Transmit+0x516>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800621c:	b29b      	uxth	r3, r3
 800621e:	461a      	mov	r2, r3
 8006220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006222:	4413      	add	r3, r2
 8006224:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	00da      	lsls	r2, r3, #3
 800622c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800622e:	4413      	add	r3, r2
 8006230:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006234:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006238:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800623c:	881b      	ldrh	r3, [r3, #0]
 800623e:	b29b      	uxth	r3, r3
 8006240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006244:	b29a      	uxth	r2, r3
 8006246:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800624a:	801a      	strh	r2, [r3, #0]
 800624c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006250:	881b      	ldrh	r3, [r3, #0]
 8006252:	b29b      	uxth	r3, r3
 8006254:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006258:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800625c:	b29a      	uxth	r2, r3
 800625e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006262:	801a      	strh	r2, [r3, #0]
 8006264:	e017      	b.n	8006296 <HAL_PCD_EP_DB_Transmit+0x546>
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	785b      	ldrb	r3, [r3, #1]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d113      	bne.n	8006296 <HAL_PCD_EP_DB_Transmit+0x546>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006276:	b29b      	uxth	r3, r3
 8006278:	461a      	mov	r2, r3
 800627a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800627c:	4413      	add	r3, r2
 800627e:	677b      	str	r3, [r7, #116]	; 0x74
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	00da      	lsls	r2, r3, #3
 8006286:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006288:	4413      	add	r3, r2
 800628a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800628e:	673b      	str	r3, [r7, #112]	; 0x70
 8006290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006292:	2200      	movs	r2, #0
 8006294:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	4619      	mov	r1, r3
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f008 fdfc 	bl	800ee9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80062a2:	88fb      	ldrh	r3, [r7, #6]
 80062a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f040 811a 	bne.w	80064e2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	881b      	ldrh	r3, [r3, #0]
 80062be:	b29b      	uxth	r3, r3
 80062c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062c8:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	441a      	add	r2, r3
 80062da:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80062de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80062ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	8013      	strh	r3, [r2, #0]
 80062f2:	e0f6      	b.n	80064e2 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80062f4:	88fb      	ldrh	r3, [r7, #6]
 80062f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d121      	bne.n	8006342 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	009b      	lsls	r3, r3, #2
 800630a:	4413      	add	r3, r2
 800630c:	881b      	ldrh	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006314:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006318:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	461a      	mov	r2, r3
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800632e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006332:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006336:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800633a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633e:	b29b      	uxth	r3, r3
 8006340:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006348:	2b01      	cmp	r3, #1
 800634a:	f040 80ca 	bne.w	80064e2 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	695a      	ldr	r2, [r3, #20]
 8006352:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006356:	441a      	add	r2, r3
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	69da      	ldr	r2, [r3, #28]
 8006360:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006364:	441a      	add	r2, r3
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	6a1a      	ldr	r2, [r3, #32]
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	429a      	cmp	r2, r3
 8006374:	d30b      	bcc.n	800638e <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	6a1a      	ldr	r2, [r3, #32]
 8006382:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006386:	1ad2      	subs	r2, r2, r3
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	621a      	str	r2, [r3, #32]
 800638c:	e017      	b.n	80063be <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	6a1b      	ldr	r3, [r3, #32]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d108      	bne.n	80063a8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8006396:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800639a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80063a6:	e00a      	b.n	80063be <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2200      	movs	r2, #0
 80063b4:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	657b      	str	r3, [r7, #84]	; 0x54
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	785b      	ldrb	r3, [r3, #1]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d165      	bne.n	8006498 <HAL_PCD_EP_DB_Transmit+0x748>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063da:	b29b      	uxth	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063e0:	4413      	add	r3, r2
 80063e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	00da      	lsls	r2, r3, #3
 80063ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80063ec:	4413      	add	r3, r2
 80063ee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80063f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80063f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063fe:	b29a      	uxth	r2, r3
 8006400:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006402:	801a      	strh	r2, [r3, #0]
 8006404:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006408:	2b3e      	cmp	r3, #62	; 0x3e
 800640a:	d91d      	bls.n	8006448 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800640c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006410:	095b      	lsrs	r3, r3, #5
 8006412:	66bb      	str	r3, [r7, #104]	; 0x68
 8006414:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006418:	f003 031f 	and.w	r3, r3, #31
 800641c:	2b00      	cmp	r3, #0
 800641e:	d102      	bne.n	8006426 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006420:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006422:	3b01      	subs	r3, #1
 8006424:	66bb      	str	r3, [r7, #104]	; 0x68
 8006426:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29a      	uxth	r2, r3
 800642c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800642e:	b29b      	uxth	r3, r3
 8006430:	029b      	lsls	r3, r3, #10
 8006432:	b29b      	uxth	r3, r3
 8006434:	4313      	orrs	r3, r2
 8006436:	b29b      	uxth	r3, r3
 8006438:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800643c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006440:	b29a      	uxth	r2, r3
 8006442:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006444:	801a      	strh	r2, [r3, #0]
 8006446:	e041      	b.n	80064cc <HAL_PCD_EP_DB_Transmit+0x77c>
 8006448:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800644c:	2b00      	cmp	r3, #0
 800644e:	d10a      	bne.n	8006466 <HAL_PCD_EP_DB_Transmit+0x716>
 8006450:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006452:	881b      	ldrh	r3, [r3, #0]
 8006454:	b29b      	uxth	r3, r3
 8006456:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800645a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800645e:	b29a      	uxth	r2, r3
 8006460:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006462:	801a      	strh	r2, [r3, #0]
 8006464:	e032      	b.n	80064cc <HAL_PCD_EP_DB_Transmit+0x77c>
 8006466:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800646a:	085b      	lsrs	r3, r3, #1
 800646c:	66bb      	str	r3, [r7, #104]	; 0x68
 800646e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <HAL_PCD_EP_DB_Transmit+0x730>
 800647a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800647c:	3301      	adds	r3, #1
 800647e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006482:	881b      	ldrh	r3, [r3, #0]
 8006484:	b29a      	uxth	r2, r3
 8006486:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006488:	b29b      	uxth	r3, r3
 800648a:	029b      	lsls	r3, r3, #10
 800648c:	b29b      	uxth	r3, r3
 800648e:	4313      	orrs	r3, r2
 8006490:	b29a      	uxth	r2, r3
 8006492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006494:	801a      	strh	r2, [r3, #0]
 8006496:	e019      	b.n	80064cc <HAL_PCD_EP_DB_Transmit+0x77c>
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	785b      	ldrb	r3, [r3, #1]
 800649c:	2b01      	cmp	r3, #1
 800649e:	d115      	bne.n	80064cc <HAL_PCD_EP_DB_Transmit+0x77c>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ae:	4413      	add	r3, r2
 80064b0:	657b      	str	r3, [r7, #84]	; 0x54
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	00da      	lsls	r2, r3, #3
 80064b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ba:	4413      	add	r3, r2
 80064bc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80064c0:	653b      	str	r3, [r7, #80]	; 0x50
 80064c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ca:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	6818      	ldr	r0, [r3, #0]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	6959      	ldr	r1, [r3, #20]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	895a      	ldrh	r2, [r3, #10]
 80064d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80064dc:	b29b      	uxth	r3, r3
 80064de:	f005 f88f 	bl	800b600 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	461a      	mov	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	881b      	ldrh	r3, [r3, #0]
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064fc:	82bb      	strh	r3, [r7, #20]
 80064fe:	8abb      	ldrh	r3, [r7, #20]
 8006500:	f083 0310 	eor.w	r3, r3, #16
 8006504:	82bb      	strh	r3, [r7, #20]
 8006506:	8abb      	ldrh	r3, [r7, #20]
 8006508:	f083 0320 	eor.w	r3, r3, #32
 800650c:	82bb      	strh	r3, [r7, #20]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	009b      	lsls	r3, r3, #2
 800651a:	441a      	add	r2, r3
 800651c:	8abb      	ldrh	r3, [r7, #20]
 800651e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006522:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800652a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800652e:	b29b      	uxth	r3, r3
 8006530:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8006532:	2300      	movs	r3, #0
}
 8006534:	4618      	mov	r0, r3
 8006536:	3790      	adds	r7, #144	; 0x90
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	607b      	str	r3, [r7, #4]
 8006546:	460b      	mov	r3, r1
 8006548:	817b      	strh	r3, [r7, #10]
 800654a:	4613      	mov	r3, r2
 800654c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800654e:	897b      	ldrh	r3, [r7, #10]
 8006550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006554:	b29b      	uxth	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800655a:	897b      	ldrh	r3, [r7, #10]
 800655c:	f003 0207 	and.w	r2, r3, #7
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	00db      	lsls	r3, r3, #3
 8006568:	3310      	adds	r3, #16
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	e009      	b.n	8006586 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006572:	897a      	ldrh	r2, [r7, #10]
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	00db      	lsls	r3, r3, #3
 800657c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006580:	68fa      	ldr	r2, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006586:	893b      	ldrh	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d107      	bne.n	800659c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2200      	movs	r2, #0
 8006590:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	b29a      	uxth	r2, r3
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	80da      	strh	r2, [r3, #6]
 800659a:	e00b      	b.n	80065b4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2201      	movs	r2, #1
 80065a0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	b29a      	uxth	r2, r3
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	0c1b      	lsrs	r3, r3, #16
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80065b4:	2300      	movs	r3, #0
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	371c      	adds	r7, #28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b085      	sub	sp, #20
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80065e6:	b29b      	uxth	r3, r3
 80065e8:	f043 0301 	orr.w	r3, r3, #1
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80065fa:	b29b      	uxth	r3, r3
 80065fc:	f043 0302 	orr.w	r3, r3, #2
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3714      	adds	r7, #20
 800660e:	46bd      	mov	sp, r7
 8006610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006614:	4770      	bx	lr
	...

08006618 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800661c:	4b05      	ldr	r3, [pc, #20]	; (8006634 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a04      	ldr	r2, [pc, #16]	; (8006634 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006622:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006626:	6013      	str	r3, [r2, #0]
}
 8006628:	bf00      	nop
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr
 8006632:	bf00      	nop
 8006634:	40007000 	.word	0x40007000

08006638 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d141      	bne.n	80066ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006646:	4b4b      	ldr	r3, [pc, #300]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800664e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006652:	d131      	bne.n	80066b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006654:	4b47      	ldr	r3, [pc, #284]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800665a:	4a46      	ldr	r2, [pc, #280]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800665c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006660:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006664:	4b43      	ldr	r3, [pc, #268]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800666c:	4a41      	ldr	r2, [pc, #260]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800666e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006672:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006674:	4b40      	ldr	r3, [pc, #256]	; (8006778 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2232      	movs	r2, #50	; 0x32
 800667a:	fb02 f303 	mul.w	r3, r2, r3
 800667e:	4a3f      	ldr	r2, [pc, #252]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006680:	fba2 2303 	umull	r2, r3, r2, r3
 8006684:	0c9b      	lsrs	r3, r3, #18
 8006686:	3301      	adds	r3, #1
 8006688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800668a:	e002      	b.n	8006692 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	3b01      	subs	r3, #1
 8006690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006692:	4b38      	ldr	r3, [pc, #224]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800669a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800669e:	d102      	bne.n	80066a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1f2      	bne.n	800668c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80066a6:	4b33      	ldr	r3, [pc, #204]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b2:	d158      	bne.n	8006766 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80066b4:	2303      	movs	r3, #3
 80066b6:	e057      	b.n	8006768 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066b8:	4b2e      	ldr	r3, [pc, #184]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066be:	4a2d      	ldr	r2, [pc, #180]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80066c8:	e04d      	b.n	8006766 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066d0:	d141      	bne.n	8006756 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066d2:	4b28      	ldr	r3, [pc, #160]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066de:	d131      	bne.n	8006744 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80066e0:	4b24      	ldr	r3, [pc, #144]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066e6:	4a23      	ldr	r2, [pc, #140]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80066f0:	4b20      	ldr	r3, [pc, #128]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80066f8:	4a1e      	ldr	r2, [pc, #120]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80066fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006700:	4b1d      	ldr	r3, [pc, #116]	; (8006778 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2232      	movs	r2, #50	; 0x32
 8006706:	fb02 f303 	mul.w	r3, r2, r3
 800670a:	4a1c      	ldr	r2, [pc, #112]	; (800677c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800670c:	fba2 2303 	umull	r2, r3, r2, r3
 8006710:	0c9b      	lsrs	r3, r3, #18
 8006712:	3301      	adds	r3, #1
 8006714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006716:	e002      	b.n	800671e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	3b01      	subs	r3, #1
 800671c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800671e:	4b15      	ldr	r3, [pc, #84]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006720:	695b      	ldr	r3, [r3, #20]
 8006722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800672a:	d102      	bne.n	8006732 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d1f2      	bne.n	8006718 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006732:	4b10      	ldr	r3, [pc, #64]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800673a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800673e:	d112      	bne.n	8006766 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e011      	b.n	8006768 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006744:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800674a:	4a0a      	ldr	r2, [pc, #40]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800674c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006750:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006754:	e007      	b.n	8006766 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006756:	4b07      	ldr	r3, [pc, #28]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800675e:	4a05      	ldr	r2, [pc, #20]	; (8006774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006760:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006764:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3714      	adds	r7, #20
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	40007000 	.word	0x40007000
 8006778:	2000000c 	.word	0x2000000c
 800677c:	431bde83 	.word	0x431bde83

08006780 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006780:	b480      	push	{r7}
 8006782:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006784:	4b05      	ldr	r3, [pc, #20]	; (800679c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	4a04      	ldr	r2, [pc, #16]	; (800679c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800678a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800678e:	6093      	str	r3, [r2, #8]
}
 8006790:	bf00      	nop
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40007000 	.word	0x40007000

080067a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d101      	bne.n	80067b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e2fe      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d075      	beq.n	80068aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067be:	4b97      	ldr	r3, [pc, #604]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 030c 	and.w	r3, r3, #12
 80067c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067c8:	4b94      	ldr	r3, [pc, #592]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f003 0303 	and.w	r3, r3, #3
 80067d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	2b0c      	cmp	r3, #12
 80067d6:	d102      	bne.n	80067de <HAL_RCC_OscConfig+0x3e>
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2b03      	cmp	r3, #3
 80067dc:	d002      	beq.n	80067e4 <HAL_RCC_OscConfig+0x44>
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	2b08      	cmp	r3, #8
 80067e2:	d10b      	bne.n	80067fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067e4:	4b8d      	ldr	r3, [pc, #564]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d05b      	beq.n	80068a8 <HAL_RCC_OscConfig+0x108>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d157      	bne.n	80068a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067f8:	2301      	movs	r3, #1
 80067fa:	e2d9      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006804:	d106      	bne.n	8006814 <HAL_RCC_OscConfig+0x74>
 8006806:	4b85      	ldr	r3, [pc, #532]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a84      	ldr	r2, [pc, #528]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 800680c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	e01d      	b.n	8006850 <HAL_RCC_OscConfig+0xb0>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800681c:	d10c      	bne.n	8006838 <HAL_RCC_OscConfig+0x98>
 800681e:	4b7f      	ldr	r3, [pc, #508]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a7e      	ldr	r2, [pc, #504]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 8006824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006828:	6013      	str	r3, [r2, #0]
 800682a:	4b7c      	ldr	r3, [pc, #496]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a7b      	ldr	r2, [pc, #492]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 8006830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006834:	6013      	str	r3, [r2, #0]
 8006836:	e00b      	b.n	8006850 <HAL_RCC_OscConfig+0xb0>
 8006838:	4b78      	ldr	r3, [pc, #480]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a77      	ldr	r2, [pc, #476]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 800683e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	4b75      	ldr	r3, [pc, #468]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a74      	ldr	r2, [pc, #464]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 800684a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800684e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d013      	beq.n	8006880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006858:	f7fa fc60 	bl	800111c <HAL_GetTick>
 800685c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800685e:	e008      	b.n	8006872 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006860:	f7fa fc5c 	bl	800111c <HAL_GetTick>
 8006864:	4602      	mov	r2, r0
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b64      	cmp	r3, #100	; 0x64
 800686c:	d901      	bls.n	8006872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800686e:	2303      	movs	r3, #3
 8006870:	e29e      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006872:	4b6a      	ldr	r3, [pc, #424]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d0f0      	beq.n	8006860 <HAL_RCC_OscConfig+0xc0>
 800687e:	e014      	b.n	80068aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006880:	f7fa fc4c 	bl	800111c <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006888:	f7fa fc48 	bl	800111c <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b64      	cmp	r3, #100	; 0x64
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e28a      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800689a:	4b60      	ldr	r3, [pc, #384]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1f0      	bne.n	8006888 <HAL_RCC_OscConfig+0xe8>
 80068a6:	e000      	b.n	80068aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0302 	and.w	r3, r3, #2
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d075      	beq.n	80069a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068b6:	4b59      	ldr	r3, [pc, #356]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f003 030c 	and.w	r3, r3, #12
 80068be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068c0:	4b56      	ldr	r3, [pc, #344]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	f003 0303 	and.w	r3, r3, #3
 80068c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	2b0c      	cmp	r3, #12
 80068ce:	d102      	bne.n	80068d6 <HAL_RCC_OscConfig+0x136>
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d002      	beq.n	80068dc <HAL_RCC_OscConfig+0x13c>
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d11f      	bne.n	800691c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068dc:	4b4f      	ldr	r3, [pc, #316]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d005      	beq.n	80068f4 <HAL_RCC_OscConfig+0x154>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e25d      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068f4:	4b49      	ldr	r3, [pc, #292]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	061b      	lsls	r3, r3, #24
 8006902:	4946      	ldr	r1, [pc, #280]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 8006904:	4313      	orrs	r3, r2
 8006906:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006908:	4b45      	ldr	r3, [pc, #276]	; (8006a20 <HAL_RCC_OscConfig+0x280>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4618      	mov	r0, r3
 800690e:	f7fa fbb9 	bl	8001084 <HAL_InitTick>
 8006912:	4603      	mov	r3, r0
 8006914:	2b00      	cmp	r3, #0
 8006916:	d043      	beq.n	80069a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e249      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d023      	beq.n	800696c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006924:	4b3d      	ldr	r3, [pc, #244]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a3c      	ldr	r2, [pc, #240]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 800692a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800692e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006930:	f7fa fbf4 	bl	800111c <HAL_GetTick>
 8006934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006938:	f7fa fbf0 	bl	800111c <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e232      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800694a:	4b34      	ldr	r3, [pc, #208]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006952:	2b00      	cmp	r3, #0
 8006954:	d0f0      	beq.n	8006938 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006956:	4b31      	ldr	r3, [pc, #196]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	061b      	lsls	r3, r3, #24
 8006964:	492d      	ldr	r1, [pc, #180]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 8006966:	4313      	orrs	r3, r2
 8006968:	604b      	str	r3, [r1, #4]
 800696a:	e01a      	b.n	80069a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800696c:	4b2b      	ldr	r3, [pc, #172]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a2a      	ldr	r2, [pc, #168]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 8006972:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006978:	f7fa fbd0 	bl	800111c <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006980:	f7fa fbcc 	bl	800111c <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e20e      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006992:	4b22      	ldr	r3, [pc, #136]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1f0      	bne.n	8006980 <HAL_RCC_OscConfig+0x1e0>
 800699e:	e000      	b.n	80069a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f003 0308 	and.w	r3, r3, #8
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d041      	beq.n	8006a32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d01c      	beq.n	80069f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069b6:	4b19      	ldr	r3, [pc, #100]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 80069b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069bc:	4a17      	ldr	r2, [pc, #92]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069c6:	f7fa fba9 	bl	800111c <HAL_GetTick>
 80069ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069cc:	e008      	b.n	80069e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069ce:	f7fa fba5 	bl	800111c <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	2b02      	cmp	r3, #2
 80069da:	d901      	bls.n	80069e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80069dc:	2303      	movs	r3, #3
 80069de:	e1e7      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80069e0:	4b0e      	ldr	r3, [pc, #56]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 80069e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d0ef      	beq.n	80069ce <HAL_RCC_OscConfig+0x22e>
 80069ee:	e020      	b.n	8006a32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069f0:	4b0a      	ldr	r3, [pc, #40]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 80069f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069f6:	4a09      	ldr	r2, [pc, #36]	; (8006a1c <HAL_RCC_OscConfig+0x27c>)
 80069f8:	f023 0301 	bic.w	r3, r3, #1
 80069fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a00:	f7fa fb8c 	bl	800111c <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a06:	e00d      	b.n	8006a24 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a08:	f7fa fb88 	bl	800111c <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d906      	bls.n	8006a24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e1ca      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
 8006a1a:	bf00      	nop
 8006a1c:	40021000 	.word	0x40021000
 8006a20:	20000000 	.word	0x20000000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006a24:	4b8c      	ldr	r3, [pc, #560]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a2a:	f003 0302 	and.w	r3, r3, #2
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d1ea      	bne.n	8006a08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0304 	and.w	r3, r3, #4
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	f000 80a6 	beq.w	8006b8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a40:	2300      	movs	r3, #0
 8006a42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a44:	4b84      	ldr	r3, [pc, #528]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <HAL_RCC_OscConfig+0x2b4>
 8006a50:	2301      	movs	r3, #1
 8006a52:	e000      	b.n	8006a56 <HAL_RCC_OscConfig+0x2b6>
 8006a54:	2300      	movs	r3, #0
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d00d      	beq.n	8006a76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a5a:	4b7f      	ldr	r3, [pc, #508]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a5e:	4a7e      	ldr	r2, [pc, #504]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a64:	6593      	str	r3, [r2, #88]	; 0x58
 8006a66:	4b7c      	ldr	r3, [pc, #496]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006a72:	2301      	movs	r3, #1
 8006a74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a76:	4b79      	ldr	r3, [pc, #484]	; (8006c5c <HAL_RCC_OscConfig+0x4bc>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d118      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a82:	4b76      	ldr	r3, [pc, #472]	; (8006c5c <HAL_RCC_OscConfig+0x4bc>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a75      	ldr	r2, [pc, #468]	; (8006c5c <HAL_RCC_OscConfig+0x4bc>)
 8006a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a8e:	f7fa fb45 	bl	800111c <HAL_GetTick>
 8006a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a94:	e008      	b.n	8006aa8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a96:	f7fa fb41 	bl	800111c <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d901      	bls.n	8006aa8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006aa4:	2303      	movs	r3, #3
 8006aa6:	e183      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006aa8:	4b6c      	ldr	r3, [pc, #432]	; (8006c5c <HAL_RCC_OscConfig+0x4bc>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d0f0      	beq.n	8006a96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d108      	bne.n	8006ace <HAL_RCC_OscConfig+0x32e>
 8006abc:	4b66      	ldr	r3, [pc, #408]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac2:	4a65      	ldr	r2, [pc, #404]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006ac4:	f043 0301 	orr.w	r3, r3, #1
 8006ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006acc:	e024      	b.n	8006b18 <HAL_RCC_OscConfig+0x378>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	2b05      	cmp	r3, #5
 8006ad4:	d110      	bne.n	8006af8 <HAL_RCC_OscConfig+0x358>
 8006ad6:	4b60      	ldr	r3, [pc, #384]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006adc:	4a5e      	ldr	r2, [pc, #376]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006ade:	f043 0304 	orr.w	r3, r3, #4
 8006ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ae6:	4b5c      	ldr	r3, [pc, #368]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006aec:	4a5a      	ldr	r2, [pc, #360]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006aee:	f043 0301 	orr.w	r3, r3, #1
 8006af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006af6:	e00f      	b.n	8006b18 <HAL_RCC_OscConfig+0x378>
 8006af8:	4b57      	ldr	r3, [pc, #348]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006afe:	4a56      	ldr	r2, [pc, #344]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006b00:	f023 0301 	bic.w	r3, r3, #1
 8006b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b08:	4b53      	ldr	r3, [pc, #332]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b0e:	4a52      	ldr	r2, [pc, #328]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006b10:	f023 0304 	bic.w	r3, r3, #4
 8006b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d016      	beq.n	8006b4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b20:	f7fa fafc 	bl	800111c <HAL_GetTick>
 8006b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b26:	e00a      	b.n	8006b3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b28:	f7fa faf8 	bl	800111c <HAL_GetTick>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	1ad3      	subs	r3, r2, r3
 8006b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e138      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b3e:	4b46      	ldr	r3, [pc, #280]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b44:	f003 0302 	and.w	r3, r3, #2
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d0ed      	beq.n	8006b28 <HAL_RCC_OscConfig+0x388>
 8006b4c:	e015      	b.n	8006b7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b4e:	f7fa fae5 	bl	800111c <HAL_GetTick>
 8006b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b54:	e00a      	b.n	8006b6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b56:	f7fa fae1 	bl	800111c <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d901      	bls.n	8006b6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006b68:	2303      	movs	r3, #3
 8006b6a:	e121      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b6c:	4b3a      	ldr	r3, [pc, #232]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1ed      	bne.n	8006b56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b7a:	7ffb      	ldrb	r3, [r7, #31]
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d105      	bne.n	8006b8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b80:	4b35      	ldr	r3, [pc, #212]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b84:	4a34      	ldr	r2, [pc, #208]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0320 	and.w	r3, r3, #32
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d03c      	beq.n	8006c12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01c      	beq.n	8006bda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006ba0:	4b2d      	ldr	r3, [pc, #180]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ba6:	4a2c      	ldr	r2, [pc, #176]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006ba8:	f043 0301 	orr.w	r3, r3, #1
 8006bac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb0:	f7fa fab4 	bl	800111c <HAL_GetTick>
 8006bb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bb6:	e008      	b.n	8006bca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bb8:	f7fa fab0 	bl	800111c <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b02      	cmp	r3, #2
 8006bc4:	d901      	bls.n	8006bca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e0f2      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006bca:	4b23      	ldr	r3, [pc, #140]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bd0:	f003 0302 	and.w	r3, r3, #2
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d0ef      	beq.n	8006bb8 <HAL_RCC_OscConfig+0x418>
 8006bd8:	e01b      	b.n	8006c12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006bda:	4b1f      	ldr	r3, [pc, #124]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006be0:	4a1d      	ldr	r2, [pc, #116]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006be2:	f023 0301 	bic.w	r3, r3, #1
 8006be6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bea:	f7fa fa97 	bl	800111c <HAL_GetTick>
 8006bee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006bf0:	e008      	b.n	8006c04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006bf2:	f7fa fa93 	bl	800111c <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d901      	bls.n	8006c04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e0d5      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c04:	4b14      	ldr	r3, [pc, #80]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c0a:	f003 0302 	and.w	r3, r3, #2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1ef      	bne.n	8006bf2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f000 80c9 	beq.w	8006dae <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c1c:	4b0e      	ldr	r3, [pc, #56]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f003 030c 	and.w	r3, r3, #12
 8006c24:	2b0c      	cmp	r3, #12
 8006c26:	f000 8083 	beq.w	8006d30 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d15e      	bne.n	8006cf0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c32:	4b09      	ldr	r3, [pc, #36]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a08      	ldr	r2, [pc, #32]	; (8006c58 <HAL_RCC_OscConfig+0x4b8>)
 8006c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c3e:	f7fa fa6d 	bl	800111c <HAL_GetTick>
 8006c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c44:	e00c      	b.n	8006c60 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c46:	f7fa fa69 	bl	800111c <HAL_GetTick>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	1ad3      	subs	r3, r2, r3
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d905      	bls.n	8006c60 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e0ab      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
 8006c58:	40021000 	.word	0x40021000
 8006c5c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c60:	4b55      	ldr	r3, [pc, #340]	; (8006db8 <HAL_RCC_OscConfig+0x618>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1ec      	bne.n	8006c46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006c6c:	4b52      	ldr	r3, [pc, #328]	; (8006db8 <HAL_RCC_OscConfig+0x618>)
 8006c6e:	68da      	ldr	r2, [r3, #12]
 8006c70:	4b52      	ldr	r3, [pc, #328]	; (8006dbc <HAL_RCC_OscConfig+0x61c>)
 8006c72:	4013      	ands	r3, r2
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	6a11      	ldr	r1, [r2, #32]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c7c:	3a01      	subs	r2, #1
 8006c7e:	0112      	lsls	r2, r2, #4
 8006c80:	4311      	orrs	r1, r2
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006c86:	0212      	lsls	r2, r2, #8
 8006c88:	4311      	orrs	r1, r2
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006c8e:	0852      	lsrs	r2, r2, #1
 8006c90:	3a01      	subs	r2, #1
 8006c92:	0552      	lsls	r2, r2, #21
 8006c94:	4311      	orrs	r1, r2
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c9a:	0852      	lsrs	r2, r2, #1
 8006c9c:	3a01      	subs	r2, #1
 8006c9e:	0652      	lsls	r2, r2, #25
 8006ca0:	4311      	orrs	r1, r2
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006ca6:	06d2      	lsls	r2, r2, #27
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	4943      	ldr	r1, [pc, #268]	; (8006db8 <HAL_RCC_OscConfig+0x618>)
 8006cac:	4313      	orrs	r3, r2
 8006cae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cb0:	4b41      	ldr	r3, [pc, #260]	; (8006db8 <HAL_RCC_OscConfig+0x618>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a40      	ldr	r2, [pc, #256]	; (8006db8 <HAL_RCC_OscConfig+0x618>)
 8006cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006cbc:	4b3e      	ldr	r3, [pc, #248]	; (8006db8 <HAL_RCC_OscConfig+0x618>)
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	4a3d      	ldr	r2, [pc, #244]	; (8006db8 <HAL_RCC_OscConfig+0x618>)
 8006cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006cc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cc8:	f7fa fa28 	bl	800111c <HAL_GetTick>
 8006ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006cce:	e008      	b.n	8006ce2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cd0:	f7fa fa24 	bl	800111c <HAL_GetTick>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	1ad3      	subs	r3, r2, r3
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d901      	bls.n	8006ce2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e066      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ce2:	4b35      	ldr	r3, [pc, #212]	; (8006db8 <HAL_RCC_OscConfig+0x618>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d0f0      	beq.n	8006cd0 <HAL_RCC_OscConfig+0x530>
 8006cee:	e05e      	b.n	8006dae <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cf0:	4b31      	ldr	r3, [pc, #196]	; (8006db8 <HAL_RCC_OscConfig+0x618>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a30      	ldr	r2, [pc, #192]	; (8006db8 <HAL_RCC_OscConfig+0x618>)
 8006cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cfa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfc:	f7fa fa0e 	bl	800111c <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d04:	f7fa fa0a 	bl	800111c <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e04c      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d16:	4b28      	ldr	r3, [pc, #160]	; (8006db8 <HAL_RCC_OscConfig+0x618>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f0      	bne.n	8006d04 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006d22:	4b25      	ldr	r3, [pc, #148]	; (8006db8 <HAL_RCC_OscConfig+0x618>)
 8006d24:	68da      	ldr	r2, [r3, #12]
 8006d26:	4924      	ldr	r1, [pc, #144]	; (8006db8 <HAL_RCC_OscConfig+0x618>)
 8006d28:	4b25      	ldr	r3, [pc, #148]	; (8006dc0 <HAL_RCC_OscConfig+0x620>)
 8006d2a:	4013      	ands	r3, r2
 8006d2c:	60cb      	str	r3, [r1, #12]
 8006d2e:	e03e      	b.n	8006dae <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	69db      	ldr	r3, [r3, #28]
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d101      	bne.n	8006d3c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e039      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006d3c:	4b1e      	ldr	r3, [pc, #120]	; (8006db8 <HAL_RCC_OscConfig+0x618>)
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	f003 0203 	and.w	r2, r3, #3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6a1b      	ldr	r3, [r3, #32]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d12c      	bne.n	8006daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d123      	bne.n	8006daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d11b      	bne.n	8006daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d7c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d113      	bne.n	8006daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d8c:	085b      	lsrs	r3, r3, #1
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d109      	bne.n	8006daa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006da0:	085b      	lsrs	r3, r3, #1
 8006da2:	3b01      	subs	r3, #1
 8006da4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d001      	beq.n	8006dae <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e000      	b.n	8006db0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3720      	adds	r7, #32
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	40021000 	.word	0x40021000
 8006dbc:	019f800c 	.word	0x019f800c
 8006dc0:	feeefffc 	.word	0xfeeefffc

08006dc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e11e      	b.n	800701a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ddc:	4b91      	ldr	r3, [pc, #580]	; (8007024 <HAL_RCC_ClockConfig+0x260>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 030f 	and.w	r3, r3, #15
 8006de4:	683a      	ldr	r2, [r7, #0]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d910      	bls.n	8006e0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dea:	4b8e      	ldr	r3, [pc, #568]	; (8007024 <HAL_RCC_ClockConfig+0x260>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f023 020f 	bic.w	r2, r3, #15
 8006df2:	498c      	ldr	r1, [pc, #560]	; (8007024 <HAL_RCC_ClockConfig+0x260>)
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfa:	4b8a      	ldr	r3, [pc, #552]	; (8007024 <HAL_RCC_ClockConfig+0x260>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 030f 	and.w	r3, r3, #15
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d001      	beq.n	8006e0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006e08:	2301      	movs	r3, #1
 8006e0a:	e106      	b.n	800701a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d073      	beq.n	8006f00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2b03      	cmp	r3, #3
 8006e1e:	d129      	bne.n	8006e74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006e20:	4b81      	ldr	r3, [pc, #516]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	e0f4      	b.n	800701a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006e30:	f000 f99e 	bl	8007170 <RCC_GetSysClockFreqFromPLLSource>
 8006e34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	4a7c      	ldr	r2, [pc, #496]	; (800702c <HAL_RCC_ClockConfig+0x268>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d93f      	bls.n	8006ebe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e3e:	4b7a      	ldr	r3, [pc, #488]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d009      	beq.n	8006e5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d033      	beq.n	8006ebe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d12f      	bne.n	8006ebe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006e5e:	4b72      	ldr	r3, [pc, #456]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e66:	4a70      	ldr	r2, [pc, #448]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006e68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006e6e:	2380      	movs	r3, #128	; 0x80
 8006e70:	617b      	str	r3, [r7, #20]
 8006e72:	e024      	b.n	8006ebe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	685b      	ldr	r3, [r3, #4]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d107      	bne.n	8006e8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006e7c:	4b6a      	ldr	r3, [pc, #424]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d109      	bne.n	8006e9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e0c6      	b.n	800701a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e8c:	4b66      	ldr	r3, [pc, #408]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d101      	bne.n	8006e9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e0be      	b.n	800701a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006e9c:	f000 f8ce 	bl	800703c <HAL_RCC_GetSysClockFreq>
 8006ea0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	4a61      	ldr	r2, [pc, #388]	; (800702c <HAL_RCC_ClockConfig+0x268>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d909      	bls.n	8006ebe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006eaa:	4b5f      	ldr	r3, [pc, #380]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006eb2:	4a5d      	ldr	r2, [pc, #372]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006eb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006eba:	2380      	movs	r3, #128	; 0x80
 8006ebc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006ebe:	4b5a      	ldr	r3, [pc, #360]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f023 0203 	bic.w	r2, r3, #3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	4957      	ldr	r1, [pc, #348]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ed0:	f7fa f924 	bl	800111c <HAL_GetTick>
 8006ed4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ed6:	e00a      	b.n	8006eee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ed8:	f7fa f920 	bl	800111c <HAL_GetTick>
 8006edc:	4602      	mov	r2, r0
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e095      	b.n	800701a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006eee:	4b4e      	ldr	r3, [pc, #312]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	f003 020c 	and.w	r2, r3, #12
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	009b      	lsls	r3, r3, #2
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d1eb      	bne.n	8006ed8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f003 0302 	and.w	r3, r3, #2
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d023      	beq.n	8006f54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f003 0304 	and.w	r3, r3, #4
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f18:	4b43      	ldr	r3, [pc, #268]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	4a42      	ldr	r2, [pc, #264]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006f1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0308 	and.w	r3, r3, #8
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d007      	beq.n	8006f40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006f30:	4b3d      	ldr	r3, [pc, #244]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006f38:	4a3b      	ldr	r2, [pc, #236]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006f3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006f3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f40:	4b39      	ldr	r3, [pc, #228]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	4936      	ldr	r1, [pc, #216]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	608b      	str	r3, [r1, #8]
 8006f52:	e008      	b.n	8006f66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2b80      	cmp	r3, #128	; 0x80
 8006f58:	d105      	bne.n	8006f66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006f5a:	4b33      	ldr	r3, [pc, #204]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006f5c:	689b      	ldr	r3, [r3, #8]
 8006f5e:	4a32      	ldr	r2, [pc, #200]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006f60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006f66:	4b2f      	ldr	r3, [pc, #188]	; (8007024 <HAL_RCC_ClockConfig+0x260>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 030f 	and.w	r3, r3, #15
 8006f6e:	683a      	ldr	r2, [r7, #0]
 8006f70:	429a      	cmp	r2, r3
 8006f72:	d21d      	bcs.n	8006fb0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f74:	4b2b      	ldr	r3, [pc, #172]	; (8007024 <HAL_RCC_ClockConfig+0x260>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f023 020f 	bic.w	r2, r3, #15
 8006f7c:	4929      	ldr	r1, [pc, #164]	; (8007024 <HAL_RCC_ClockConfig+0x260>)
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006f84:	f7fa f8ca 	bl	800111c <HAL_GetTick>
 8006f88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f8a:	e00a      	b.n	8006fa2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f8c:	f7fa f8c6 	bl	800111c <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e03b      	b.n	800701a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006fa2:	4b20      	ldr	r3, [pc, #128]	; (8007024 <HAL_RCC_ClockConfig+0x260>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f003 030f 	and.w	r3, r3, #15
 8006faa:	683a      	ldr	r2, [r7, #0]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d1ed      	bne.n	8006f8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f003 0304 	and.w	r3, r3, #4
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d008      	beq.n	8006fce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006fbc:	4b1a      	ldr	r3, [pc, #104]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	4917      	ldr	r1, [pc, #92]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0308 	and.w	r3, r3, #8
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d009      	beq.n	8006fee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006fda:	4b13      	ldr	r3, [pc, #76]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	00db      	lsls	r3, r3, #3
 8006fe8:	490f      	ldr	r1, [pc, #60]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006fea:	4313      	orrs	r3, r2
 8006fec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006fee:	f000 f825 	bl	800703c <HAL_RCC_GetSysClockFreq>
 8006ff2:	4602      	mov	r2, r0
 8006ff4:	4b0c      	ldr	r3, [pc, #48]	; (8007028 <HAL_RCC_ClockConfig+0x264>)
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	091b      	lsrs	r3, r3, #4
 8006ffa:	f003 030f 	and.w	r3, r3, #15
 8006ffe:	490c      	ldr	r1, [pc, #48]	; (8007030 <HAL_RCC_ClockConfig+0x26c>)
 8007000:	5ccb      	ldrb	r3, [r1, r3]
 8007002:	f003 031f 	and.w	r3, r3, #31
 8007006:	fa22 f303 	lsr.w	r3, r2, r3
 800700a:	4a0a      	ldr	r2, [pc, #40]	; (8007034 <HAL_RCC_ClockConfig+0x270>)
 800700c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800700e:	4b0a      	ldr	r3, [pc, #40]	; (8007038 <HAL_RCC_ClockConfig+0x274>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4618      	mov	r0, r3
 8007014:	f7fa f836 	bl	8001084 <HAL_InitTick>
 8007018:	4603      	mov	r3, r0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40022000 	.word	0x40022000
 8007028:	40021000 	.word	0x40021000
 800702c:	04c4b400 	.word	0x04c4b400
 8007030:	08015a4c 	.word	0x08015a4c
 8007034:	2000000c 	.word	0x2000000c
 8007038:	20000000 	.word	0x20000000

0800703c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007042:	4b2c      	ldr	r3, [pc, #176]	; (80070f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	f003 030c 	and.w	r3, r3, #12
 800704a:	2b04      	cmp	r3, #4
 800704c:	d102      	bne.n	8007054 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800704e:	4b2a      	ldr	r3, [pc, #168]	; (80070f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007050:	613b      	str	r3, [r7, #16]
 8007052:	e047      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007054:	4b27      	ldr	r3, [pc, #156]	; (80070f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f003 030c 	and.w	r3, r3, #12
 800705c:	2b08      	cmp	r3, #8
 800705e:	d102      	bne.n	8007066 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007060:	4b26      	ldr	r3, [pc, #152]	; (80070fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	e03e      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007066:	4b23      	ldr	r3, [pc, #140]	; (80070f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f003 030c 	and.w	r3, r3, #12
 800706e:	2b0c      	cmp	r3, #12
 8007070:	d136      	bne.n	80070e0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007072:	4b20      	ldr	r3, [pc, #128]	; (80070f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800707c:	4b1d      	ldr	r3, [pc, #116]	; (80070f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	091b      	lsrs	r3, r3, #4
 8007082:	f003 030f 	and.w	r3, r3, #15
 8007086:	3301      	adds	r3, #1
 8007088:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2b03      	cmp	r3, #3
 800708e:	d10c      	bne.n	80070aa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007090:	4a1a      	ldr	r2, [pc, #104]	; (80070fc <HAL_RCC_GetSysClockFreq+0xc0>)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	fbb2 f3f3 	udiv	r3, r2, r3
 8007098:	4a16      	ldr	r2, [pc, #88]	; (80070f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800709a:	68d2      	ldr	r2, [r2, #12]
 800709c:	0a12      	lsrs	r2, r2, #8
 800709e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80070a2:	fb02 f303 	mul.w	r3, r2, r3
 80070a6:	617b      	str	r3, [r7, #20]
      break;
 80070a8:	e00c      	b.n	80070c4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80070aa:	4a13      	ldr	r2, [pc, #76]	; (80070f8 <HAL_RCC_GetSysClockFreq+0xbc>)
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b2:	4a10      	ldr	r2, [pc, #64]	; (80070f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070b4:	68d2      	ldr	r2, [r2, #12]
 80070b6:	0a12      	lsrs	r2, r2, #8
 80070b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80070bc:	fb02 f303 	mul.w	r3, r2, r3
 80070c0:	617b      	str	r3, [r7, #20]
      break;
 80070c2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80070c4:	4b0b      	ldr	r3, [pc, #44]	; (80070f4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	0e5b      	lsrs	r3, r3, #25
 80070ca:	f003 0303 	and.w	r3, r3, #3
 80070ce:	3301      	adds	r3, #1
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80070d4:	697a      	ldr	r2, [r7, #20]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070dc:	613b      	str	r3, [r7, #16]
 80070de:	e001      	b.n	80070e4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80070e0:	2300      	movs	r3, #0
 80070e2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80070e4:	693b      	ldr	r3, [r7, #16]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	371c      	adds	r7, #28
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
 80070f2:	bf00      	nop
 80070f4:	40021000 	.word	0x40021000
 80070f8:	00f42400 	.word	0x00f42400
 80070fc:	007a1200 	.word	0x007a1200

08007100 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007100:	b480      	push	{r7}
 8007102:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007104:	4b03      	ldr	r3, [pc, #12]	; (8007114 <HAL_RCC_GetHCLKFreq+0x14>)
 8007106:	681b      	ldr	r3, [r3, #0]
}
 8007108:	4618      	mov	r0, r3
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop
 8007114:	2000000c 	.word	0x2000000c

08007118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800711c:	f7ff fff0 	bl	8007100 <HAL_RCC_GetHCLKFreq>
 8007120:	4602      	mov	r2, r0
 8007122:	4b06      	ldr	r3, [pc, #24]	; (800713c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	0a1b      	lsrs	r3, r3, #8
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	4904      	ldr	r1, [pc, #16]	; (8007140 <HAL_RCC_GetPCLK1Freq+0x28>)
 800712e:	5ccb      	ldrb	r3, [r1, r3]
 8007130:	f003 031f 	and.w	r3, r3, #31
 8007134:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007138:	4618      	mov	r0, r3
 800713a:	bd80      	pop	{r7, pc}
 800713c:	40021000 	.word	0x40021000
 8007140:	08015a5c 	.word	0x08015a5c

08007144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007148:	f7ff ffda 	bl	8007100 <HAL_RCC_GetHCLKFreq>
 800714c:	4602      	mov	r2, r0
 800714e:	4b06      	ldr	r3, [pc, #24]	; (8007168 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	0adb      	lsrs	r3, r3, #11
 8007154:	f003 0307 	and.w	r3, r3, #7
 8007158:	4904      	ldr	r1, [pc, #16]	; (800716c <HAL_RCC_GetPCLK2Freq+0x28>)
 800715a:	5ccb      	ldrb	r3, [r1, r3]
 800715c:	f003 031f 	and.w	r3, r3, #31
 8007160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007164:	4618      	mov	r0, r3
 8007166:	bd80      	pop	{r7, pc}
 8007168:	40021000 	.word	0x40021000
 800716c:	08015a5c 	.word	0x08015a5c

08007170 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007176:	4b1e      	ldr	r3, [pc, #120]	; (80071f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	f003 0303 	and.w	r3, r3, #3
 800717e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007180:	4b1b      	ldr	r3, [pc, #108]	; (80071f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	091b      	lsrs	r3, r3, #4
 8007186:	f003 030f 	and.w	r3, r3, #15
 800718a:	3301      	adds	r3, #1
 800718c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	2b03      	cmp	r3, #3
 8007192:	d10c      	bne.n	80071ae <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007194:	4a17      	ldr	r2, [pc, #92]	; (80071f4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	fbb2 f3f3 	udiv	r3, r2, r3
 800719c:	4a14      	ldr	r2, [pc, #80]	; (80071f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800719e:	68d2      	ldr	r2, [r2, #12]
 80071a0:	0a12      	lsrs	r2, r2, #8
 80071a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071a6:	fb02 f303 	mul.w	r3, r2, r3
 80071aa:	617b      	str	r3, [r7, #20]
    break;
 80071ac:	e00c      	b.n	80071c8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071ae:	4a12      	ldr	r2, [pc, #72]	; (80071f8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071b6:	4a0e      	ldr	r2, [pc, #56]	; (80071f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071b8:	68d2      	ldr	r2, [r2, #12]
 80071ba:	0a12      	lsrs	r2, r2, #8
 80071bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071c0:	fb02 f303 	mul.w	r3, r2, r3
 80071c4:	617b      	str	r3, [r7, #20]
    break;
 80071c6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071c8:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	0e5b      	lsrs	r3, r3, #25
 80071ce:	f003 0303 	and.w	r3, r3, #3
 80071d2:	3301      	adds	r3, #1
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80071d8:	697a      	ldr	r2, [r7, #20]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80071e2:	687b      	ldr	r3, [r7, #4]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	371c      	adds	r7, #28
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr
 80071f0:	40021000 	.word	0x40021000
 80071f4:	007a1200 	.word	0x007a1200
 80071f8:	00f42400 	.word	0x00f42400

080071fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b086      	sub	sp, #24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007204:	2300      	movs	r3, #0
 8007206:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007208:	2300      	movs	r3, #0
 800720a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 8098 	beq.w	800734a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800721a:	2300      	movs	r3, #0
 800721c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800721e:	4b43      	ldr	r3, [pc, #268]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10d      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800722a:	4b40      	ldr	r3, [pc, #256]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800722c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722e:	4a3f      	ldr	r2, [pc, #252]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007234:	6593      	str	r3, [r2, #88]	; 0x58
 8007236:	4b3d      	ldr	r3, [pc, #244]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800723a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800723e:	60bb      	str	r3, [r7, #8]
 8007240:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007242:	2301      	movs	r3, #1
 8007244:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007246:	4b3a      	ldr	r3, [pc, #232]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a39      	ldr	r2, [pc, #228]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800724c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007250:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007252:	f7f9 ff63 	bl	800111c <HAL_GetTick>
 8007256:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007258:	e009      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800725a:	f7f9 ff5f 	bl	800111c <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	2b02      	cmp	r3, #2
 8007266:	d902      	bls.n	800726e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	74fb      	strb	r3, [r7, #19]
        break;
 800726c:	e005      	b.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800726e:	4b30      	ldr	r3, [pc, #192]	; (8007330 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0ef      	beq.n	800725a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800727a:	7cfb      	ldrb	r3, [r7, #19]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d159      	bne.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007280:	4b2a      	ldr	r3, [pc, #168]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800728a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800728c:	697b      	ldr	r3, [r7, #20]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d01e      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	429a      	cmp	r2, r3
 800729a:	d019      	beq.n	80072d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800729c:	4b23      	ldr	r3, [pc, #140]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800729e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80072a8:	4b20      	ldr	r3, [pc, #128]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ae:	4a1f      	ldr	r2, [pc, #124]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80072b8:	4b1c      	ldr	r3, [pc, #112]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072be:	4a1b      	ldr	r2, [pc, #108]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80072c8:	4a18      	ldr	r2, [pc, #96]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d016      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072da:	f7f9 ff1f 	bl	800111c <HAL_GetTick>
 80072de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072e0:	e00b      	b.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072e2:	f7f9 ff1b 	bl	800111c <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d902      	bls.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	74fb      	strb	r3, [r7, #19]
            break;
 80072f8:	e006      	b.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80072fa:	4b0c      	ldr	r3, [pc, #48]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007300:	f003 0302 	and.w	r3, r3, #2
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0ec      	beq.n	80072e2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007308:	7cfb      	ldrb	r3, [r7, #19]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10b      	bne.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800730e:	4b07      	ldr	r3, [pc, #28]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007314:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731c:	4903      	ldr	r1, [pc, #12]	; (800732c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800731e:	4313      	orrs	r3, r2
 8007320:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007324:	e008      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007326:	7cfb      	ldrb	r3, [r7, #19]
 8007328:	74bb      	strb	r3, [r7, #18]
 800732a:	e005      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800732c:	40021000 	.word	0x40021000
 8007330:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007334:	7cfb      	ldrb	r3, [r7, #19]
 8007336:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007338:	7c7b      	ldrb	r3, [r7, #17]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d105      	bne.n	800734a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800733e:	4ba7      	ldr	r3, [pc, #668]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007342:	4aa6      	ldr	r2, [pc, #664]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007344:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007348:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f003 0301 	and.w	r3, r3, #1
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007356:	4ba1      	ldr	r3, [pc, #644]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800735c:	f023 0203 	bic.w	r2, r3, #3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	499d      	ldr	r1, [pc, #628]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007366:	4313      	orrs	r3, r2
 8007368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007378:	4b98      	ldr	r3, [pc, #608]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800737a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800737e:	f023 020c 	bic.w	r2, r3, #12
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	4995      	ldr	r1, [pc, #596]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007388:	4313      	orrs	r3, r2
 800738a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0304 	and.w	r3, r3, #4
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800739a:	4b90      	ldr	r3, [pc, #576]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800739c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	498c      	ldr	r1, [pc, #560]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073aa:	4313      	orrs	r3, r2
 80073ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0308 	and.w	r3, r3, #8
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80073bc:	4b87      	ldr	r3, [pc, #540]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	691b      	ldr	r3, [r3, #16]
 80073ca:	4984      	ldr	r1, [pc, #528]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073cc:	4313      	orrs	r3, r2
 80073ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f003 0310 	and.w	r3, r3, #16
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00a      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80073de:	4b7f      	ldr	r3, [pc, #508]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	497b      	ldr	r1, [pc, #492]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80073ee:	4313      	orrs	r3, r2
 80073f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f003 0320 	and.w	r3, r3, #32
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007400:	4b76      	ldr	r3, [pc, #472]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007406:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	699b      	ldr	r3, [r3, #24]
 800740e:	4973      	ldr	r1, [pc, #460]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007410:	4313      	orrs	r3, r2
 8007412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800741e:	2b00      	cmp	r3, #0
 8007420:	d00a      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007422:	4b6e      	ldr	r3, [pc, #440]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007428:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	496a      	ldr	r1, [pc, #424]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007432:	4313      	orrs	r3, r2
 8007434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00a      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007444:	4b65      	ldr	r3, [pc, #404]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800744a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	4962      	ldr	r1, [pc, #392]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007454:	4313      	orrs	r3, r2
 8007456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00a      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007466:	4b5d      	ldr	r3, [pc, #372]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800746c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	4959      	ldr	r1, [pc, #356]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007476:	4313      	orrs	r3, r2
 8007478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00a      	beq.n	800749e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007488:	4b54      	ldr	r3, [pc, #336]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800748a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800748e:	f023 0203 	bic.w	r2, r3, #3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007496:	4951      	ldr	r1, [pc, #324]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007498:	4313      	orrs	r3, r2
 800749a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80074aa:	4b4c      	ldr	r3, [pc, #304]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b8:	4948      	ldr	r1, [pc, #288]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d015      	beq.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074cc:	4b43      	ldr	r3, [pc, #268]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074da:	4940      	ldr	r1, [pc, #256]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074dc:	4313      	orrs	r3, r2
 80074de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ea:	d105      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80074ec:	4b3b      	ldr	r3, [pc, #236]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074ee:	68db      	ldr	r3, [r3, #12]
 80074f0:	4a3a      	ldr	r2, [pc, #232]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80074f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80074f6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007500:	2b00      	cmp	r3, #0
 8007502:	d015      	beq.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007504:	4b35      	ldr	r3, [pc, #212]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007512:	4932      	ldr	r1, [pc, #200]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007514:	4313      	orrs	r3, r2
 8007516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007522:	d105      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007524:	4b2d      	ldr	r3, [pc, #180]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	4a2c      	ldr	r2, [pc, #176]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800752a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800752e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d015      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800753c:	4b27      	ldr	r3, [pc, #156]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800753e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007542:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800754a:	4924      	ldr	r1, [pc, #144]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800754c:	4313      	orrs	r3, r2
 800754e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800755a:	d105      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800755c:	4b1f      	ldr	r3, [pc, #124]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	4a1e      	ldr	r2, [pc, #120]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007562:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007566:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007570:	2b00      	cmp	r3, #0
 8007572:	d015      	beq.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007574:	4b19      	ldr	r3, [pc, #100]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800757a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007582:	4916      	ldr	r1, [pc, #88]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007584:	4313      	orrs	r3, r2
 8007586:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800758e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007592:	d105      	bne.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007594:	4b11      	ldr	r3, [pc, #68]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	4a10      	ldr	r2, [pc, #64]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800759a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800759e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d019      	beq.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80075ac:	4b0b      	ldr	r3, [pc, #44]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ba:	4908      	ldr	r1, [pc, #32]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075bc:	4313      	orrs	r3, r2
 80075be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075ca:	d109      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075cc:	4b03      	ldr	r3, [pc, #12]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	4a02      	ldr	r2, [pc, #8]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80075d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075d6:	60d3      	str	r3, [r2, #12]
 80075d8:	e002      	b.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80075da:	bf00      	nop
 80075dc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d015      	beq.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80075ec:	4b29      	ldr	r3, [pc, #164]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075fa:	4926      	ldr	r1, [pc, #152]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80075fc:	4313      	orrs	r3, r2
 80075fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800760a:	d105      	bne.n	8007618 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800760c:	4b21      	ldr	r3, [pc, #132]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800760e:	68db      	ldr	r3, [r3, #12]
 8007610:	4a20      	ldr	r2, [pc, #128]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007616:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007620:	2b00      	cmp	r3, #0
 8007622:	d015      	beq.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8007624:	4b1b      	ldr	r3, [pc, #108]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007632:	4918      	ldr	r1, [pc, #96]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007634:	4313      	orrs	r3, r2
 8007636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800763e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007642:	d105      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007644:	4b13      	ldr	r3, [pc, #76]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	4a12      	ldr	r2, [pc, #72]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800764a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800764e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d015      	beq.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800765c:	4b0d      	ldr	r3, [pc, #52]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800765e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007662:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800766a:	490a      	ldr	r1, [pc, #40]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800766c:	4313      	orrs	r3, r2
 800766e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007676:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800767a:	d105      	bne.n	8007688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800767c:	4b05      	ldr	r3, [pc, #20]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800767e:	68db      	ldr	r3, [r3, #12]
 8007680:	4a04      	ldr	r2, [pc, #16]	; (8007694 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007682:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007686:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007688:	7cbb      	ldrb	r3, [r7, #18]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	40021000 	.word	0x40021000

08007698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d101      	bne.n	80076aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80076a6:	2301      	movs	r3, #1
 80076a8:	e042      	b.n	8007730 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d106      	bne.n	80076c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f00a f9bd 	bl	8011a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2224      	movs	r2, #36	; 0x24
 80076c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f022 0201 	bic.w	r2, r2, #1
 80076d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d002      	beq.n	80076e8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 ff42 	bl	800856c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fc43 	bl	8007f74 <UART_SetConfig>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	e01b      	b.n	8007730 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	685a      	ldr	r2, [r3, #4]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689a      	ldr	r2, [r3, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f042 0201 	orr.w	r2, r2, #1
 8007726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 ffc1 	bl	80086b0 <UART_CheckIdleState>
 800772e:	4603      	mov	r3, r0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	603b      	str	r3, [r7, #0]
 8007744:	4613      	mov	r3, r2
 8007746:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800774e:	2b20      	cmp	r3, #32
 8007750:	d17b      	bne.n	800784a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d002      	beq.n	800775e <HAL_UART_Transmit+0x26>
 8007758:	88fb      	ldrh	r3, [r7, #6]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	e074      	b.n	800784c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	2200      	movs	r2, #0
 8007766:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	2221      	movs	r2, #33	; 0x21
 800776e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007772:	f7f9 fcd3 	bl	800111c <HAL_GetTick>
 8007776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	88fa      	ldrh	r2, [r7, #6]
 800777c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	88fa      	ldrh	r2, [r7, #6]
 8007784:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007790:	d108      	bne.n	80077a4 <HAL_UART_Transmit+0x6c>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d104      	bne.n	80077a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800779a:	2300      	movs	r3, #0
 800779c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	61bb      	str	r3, [r7, #24]
 80077a2:	e003      	b.n	80077ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077a8:	2300      	movs	r3, #0
 80077aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80077ac:	e030      	b.n	8007810 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	9300      	str	r3, [sp, #0]
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2200      	movs	r2, #0
 80077b6:	2180      	movs	r1, #128	; 0x80
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f001 f823 	bl	8008804 <UART_WaitOnFlagUntilTimeout>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d005      	beq.n	80077d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e03d      	b.n	800784c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80077d0:	69fb      	ldr	r3, [r7, #28]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d10b      	bne.n	80077ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80077e4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80077e6:	69bb      	ldr	r3, [r7, #24]
 80077e8:	3302      	adds	r3, #2
 80077ea:	61bb      	str	r3, [r7, #24]
 80077ec:	e007      	b.n	80077fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	781a      	ldrb	r2, [r3, #0]
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	3301      	adds	r3, #1
 80077fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007804:	b29b      	uxth	r3, r3
 8007806:	3b01      	subs	r3, #1
 8007808:	b29a      	uxth	r2, r3
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007816:	b29b      	uxth	r3, r3
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1c8      	bne.n	80077ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	697b      	ldr	r3, [r7, #20]
 8007822:	2200      	movs	r2, #0
 8007824:	2140      	movs	r1, #64	; 0x40
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 ffec 	bl	8008804 <UART_WaitOnFlagUntilTimeout>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d005      	beq.n	800783e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2220      	movs	r2, #32
 8007836:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800783a:	2303      	movs	r3, #3
 800783c:	e006      	b.n	800784c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2220      	movs	r2, #32
 8007842:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8007846:	2300      	movs	r3, #0
 8007848:	e000      	b.n	800784c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800784a:	2302      	movs	r3, #2
  }
}
 800784c:	4618      	mov	r0, r3
 800784e:	3720      	adds	r7, #32
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b08a      	sub	sp, #40	; 0x28
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	4613      	mov	r3, r2
 8007860:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007868:	2b20      	cmp	r3, #32
 800786a:	d137      	bne.n	80078dc <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d002      	beq.n	8007878 <HAL_UART_Receive_DMA+0x24>
 8007872:	88fb      	ldrh	r3, [r7, #6]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	e030      	b.n	80078de <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2200      	movs	r2, #0
 8007880:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a18      	ldr	r2, [pc, #96]	; (80078e8 <HAL_UART_Receive_DMA+0x94>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d01f      	beq.n	80078cc <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d018      	beq.n	80078cc <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	e853 3f00 	ldrex	r3, [r3]
 80078a6:	613b      	str	r3, [r7, #16]
   return(result);
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	461a      	mov	r2, r3
 80078b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b8:	623b      	str	r3, [r7, #32]
 80078ba:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078bc:	69f9      	ldr	r1, [r7, #28]
 80078be:	6a3a      	ldr	r2, [r7, #32]
 80078c0:	e841 2300 	strex	r3, r2, [r1]
 80078c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d1e6      	bne.n	800789a <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80078cc:	88fb      	ldrh	r3, [r7, #6]
 80078ce:	461a      	mov	r2, r3
 80078d0:	68b9      	ldr	r1, [r7, #8]
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f001 f804 	bl	80088e0 <UART_Start_Receive_DMA>
 80078d8:	4603      	mov	r3, r0
 80078da:	e000      	b.n	80078de <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80078dc:	2302      	movs	r3, #2
  }
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3728      	adds	r7, #40	; 0x28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	40008000 	.word	0x40008000

080078ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b0ba      	sub	sp, #232	; 0xe8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	69db      	ldr	r3, [r3, #28]
 80078fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	689b      	ldr	r3, [r3, #8]
 800790e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007912:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007916:	f640 030f 	movw	r3, #2063	; 0x80f
 800791a:	4013      	ands	r3, r2
 800791c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007920:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007924:	2b00      	cmp	r3, #0
 8007926:	d11b      	bne.n	8007960 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800792c:	f003 0320 	and.w	r3, r3, #32
 8007930:	2b00      	cmp	r3, #0
 8007932:	d015      	beq.n	8007960 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007938:	f003 0320 	and.w	r3, r3, #32
 800793c:	2b00      	cmp	r3, #0
 800793e:	d105      	bne.n	800794c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d009      	beq.n	8007960 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 82e3 	beq.w	8007f1c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	4798      	blx	r3
      }
      return;
 800795e:	e2dd      	b.n	8007f1c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007960:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 8123 	beq.w	8007bb0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800796a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800796e:	4b8d      	ldr	r3, [pc, #564]	; (8007ba4 <HAL_UART_IRQHandler+0x2b8>)
 8007970:	4013      	ands	r3, r2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007976:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800797a:	4b8b      	ldr	r3, [pc, #556]	; (8007ba8 <HAL_UART_IRQHandler+0x2bc>)
 800797c:	4013      	ands	r3, r2
 800797e:	2b00      	cmp	r3, #0
 8007980:	f000 8116 	beq.w	8007bb0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007988:	f003 0301 	and.w	r3, r3, #1
 800798c:	2b00      	cmp	r3, #0
 800798e:	d011      	beq.n	80079b4 <HAL_UART_IRQHandler+0xc8>
 8007990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007998:	2b00      	cmp	r3, #0
 800799a:	d00b      	beq.n	80079b4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2201      	movs	r2, #1
 80079a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079aa:	f043 0201 	orr.w	r2, r3, #1
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b8:	f003 0302 	and.w	r3, r3, #2
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d011      	beq.n	80079e4 <HAL_UART_IRQHandler+0xf8>
 80079c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079c4:	f003 0301 	and.w	r3, r3, #1
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00b      	beq.n	80079e4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2202      	movs	r2, #2
 80079d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079da:	f043 0204 	orr.w	r2, r3, #4
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d011      	beq.n	8007a14 <HAL_UART_IRQHandler+0x128>
 80079f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079f4:	f003 0301 	and.w	r3, r3, #1
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00b      	beq.n	8007a14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2204      	movs	r2, #4
 8007a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a0a:	f043 0202 	orr.w	r2, r3, #2
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a18:	f003 0308 	and.w	r3, r3, #8
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d017      	beq.n	8007a50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a24:	f003 0320 	and.w	r3, r3, #32
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d105      	bne.n	8007a38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a30:	4b5c      	ldr	r3, [pc, #368]	; (8007ba4 <HAL_UART_IRQHandler+0x2b8>)
 8007a32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00b      	beq.n	8007a50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2208      	movs	r2, #8
 8007a3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a46:	f043 0208 	orr.w	r2, r3, #8
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d012      	beq.n	8007a82 <HAL_UART_IRQHandler+0x196>
 8007a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d00c      	beq.n	8007a82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a78:	f043 0220 	orr.w	r2, r3, #32
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 8249 	beq.w	8007f20 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a92:	f003 0320 	and.w	r3, r3, #32
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d013      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a9e:	f003 0320 	and.w	r3, r3, #32
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d105      	bne.n	8007ab2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d007      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d003      	beq.n	8007ac2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	689b      	ldr	r3, [r3, #8]
 8007ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ad6:	2b40      	cmp	r3, #64	; 0x40
 8007ad8:	d005      	beq.n	8007ae6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ade:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d054      	beq.n	8007b90 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 ffe1 	bl	8008aae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af6:	2b40      	cmp	r3, #64	; 0x40
 8007af8:	d146      	bne.n	8007b88 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3308      	adds	r3, #8
 8007b00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b08:	e853 3f00 	ldrex	r3, [r3]
 8007b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	3308      	adds	r3, #8
 8007b22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b36:	e841 2300 	strex	r3, r2, [r1]
 8007b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1d9      	bne.n	8007afa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d017      	beq.n	8007b80 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b56:	4a15      	ldr	r2, [pc, #84]	; (8007bac <HAL_UART_IRQHandler+0x2c0>)
 8007b58:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7f9 fdab 	bl	80016bc <HAL_DMA_Abort_IT>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d019      	beq.n	8007ba0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b74:	687a      	ldr	r2, [r7, #4]
 8007b76:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007b7a:	4610      	mov	r0, r2
 8007b7c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b7e:	e00f      	b.n	8007ba0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f009 ff47 	bl	8011a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b86:	e00b      	b.n	8007ba0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f009 ff43 	bl	8011a14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b8e:	e007      	b.n	8007ba0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f009 ff3f 	bl	8011a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007b9e:	e1bf      	b.n	8007f20 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba0:	bf00      	nop
    return;
 8007ba2:	e1bd      	b.n	8007f20 <HAL_UART_IRQHandler+0x634>
 8007ba4:	10000001 	.word	0x10000001
 8007ba8:	04000120 	.word	0x04000120
 8007bac:	08008d65 	.word	0x08008d65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bb4:	2b01      	cmp	r3, #1
 8007bb6:	f040 8153 	bne.w	8007e60 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bbe:	f003 0310 	and.w	r3, r3, #16
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 814c 	beq.w	8007e60 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bcc:	f003 0310 	and.w	r3, r3, #16
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 8145 	beq.w	8007e60 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2210      	movs	r2, #16
 8007bdc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689b      	ldr	r3, [r3, #8]
 8007be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be8:	2b40      	cmp	r3, #64	; 0x40
 8007bea:	f040 80bb 	bne.w	8007d64 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007bfc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 818f 	beq.w	8007f24 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007c0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c10:	429a      	cmp	r2, r3
 8007c12:	f080 8187 	bcs.w	8007f24 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c1c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 0320 	and.w	r3, r3, #32
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f040 8087 	bne.w	8007d42 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	461a      	mov	r2, r3
 8007c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c62:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c66:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c6e:	e841 2300 	strex	r3, r2, [r1]
 8007c72:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d1da      	bne.n	8007c34 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3308      	adds	r3, #8
 8007c84:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c88:	e853 3f00 	ldrex	r3, [r3]
 8007c8c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c90:	f023 0301 	bic.w	r3, r3, #1
 8007c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3308      	adds	r3, #8
 8007c9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ca2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007caa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cae:	e841 2300 	strex	r3, r2, [r1]
 8007cb2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cb4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d1e1      	bne.n	8007c7e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3308      	adds	r3, #8
 8007cc0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cc4:	e853 3f00 	ldrex	r3, [r3]
 8007cc8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ccc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	3308      	adds	r3, #8
 8007cda:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cde:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007ce0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007ce4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007ce6:	e841 2300 	strex	r3, r2, [r1]
 8007cea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1e3      	bne.n	8007cba <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2220      	movs	r2, #32
 8007cf6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d08:	e853 3f00 	ldrex	r3, [r3]
 8007d0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d10:	f023 0310 	bic.w	r3, r3, #16
 8007d14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d22:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d24:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d26:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d28:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e4      	bne.n	8007d00 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f7f9 fc64 	bl	800160a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2202      	movs	r2, #2
 8007d46:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f8fd 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d62:	e0df      	b.n	8007f24 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 80d1 	beq.w	8007f28 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 80cc 	beq.w	8007f28 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007da4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007db2:	647b      	str	r3, [r7, #68]	; 0x44
 8007db4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007db8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e4      	bne.n	8007d90 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3308      	adds	r3, #8
 8007dcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ddc:	f023 0301 	bic.w	r3, r3, #1
 8007de0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007dee:	633a      	str	r2, [r7, #48]	; 0x30
 8007df0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007df4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e1      	bne.n	8007dc6 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0310 	bic.w	r3, r3, #16
 8007e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e38:	61fb      	str	r3, [r7, #28]
 8007e3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	69b9      	ldr	r1, [r7, #24]
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	617b      	str	r3, [r7, #20]
   return(result);
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e4      	bne.n	8007e16 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 f87f 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e5e:	e063      	b.n	8007f28 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d00e      	beq.n	8007e8a <HAL_UART_IRQHandler+0x59e>
 8007e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d008      	beq.n	8007e8a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f000 ffaf 	bl	8008de6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e88:	e051      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d014      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d105      	bne.n	8007eae <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007ea2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ea6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d008      	beq.n	8007ec0 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d03a      	beq.n	8007f2c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	4798      	blx	r3
    }
    return;
 8007ebe:	e035      	b.n	8007f2c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d009      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x5f4>
 8007ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d003      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 ff59 	bl	8008d90 <UART_EndTransmit_IT>
    return;
 8007ede:	e026      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d009      	beq.n	8007f00 <HAL_UART_IRQHandler+0x614>
 8007eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d003      	beq.n	8007f00 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 ff88 	bl	8008e0e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007efe:	e016      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d010      	beq.n	8007f2e <HAL_UART_IRQHandler+0x642>
 8007f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	da0c      	bge.n	8007f2e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f000 ff70 	bl	8008dfa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f1a:	e008      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
      return;
 8007f1c:	bf00      	nop
 8007f1e:	e006      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
    return;
 8007f20:	bf00      	nop
 8007f22:	e004      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
      return;
 8007f24:	bf00      	nop
 8007f26:	e002      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
      return;
 8007f28:	bf00      	nop
 8007f2a:	e000      	b.n	8007f2e <HAL_UART_IRQHandler+0x642>
    return;
 8007f2c:	bf00      	nop
  }
}
 8007f2e:	37e8      	adds	r7, #232	; 0xe8
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007f50:	bf00      	nop
 8007f52:	370c      	adds	r7, #12
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f68:	bf00      	nop
 8007f6a:	370c      	adds	r7, #12
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f72:	4770      	bx	lr

08007f74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f78:	b08c      	sub	sp, #48	; 0x30
 8007f7a:	af00      	add	r7, sp, #0
 8007f7c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	695b      	ldr	r3, [r3, #20]
 8007f92:	431a      	orrs	r2, r3
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	69db      	ldr	r3, [r3, #28]
 8007f98:	4313      	orrs	r3, r2
 8007f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	4baa      	ldr	r3, [pc, #680]	; (800824c <UART_SetConfig+0x2d8>)
 8007fa4:	4013      	ands	r3, r2
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	6812      	ldr	r2, [r2, #0]
 8007faa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fac:	430b      	orrs	r3, r1
 8007fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	68da      	ldr	r2, [r3, #12]
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a9f      	ldr	r2, [pc, #636]	; (8008250 <UART_SetConfig+0x2dc>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d004      	beq.n	8007fe0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	6a1b      	ldr	r3, [r3, #32]
 8007fda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007fea:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007fee:	697a      	ldr	r2, [r7, #20]
 8007ff0:	6812      	ldr	r2, [r2, #0]
 8007ff2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ff4:	430b      	orrs	r3, r1
 8007ff6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffe:	f023 010f 	bic.w	r1, r3, #15
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	4a90      	ldr	r2, [pc, #576]	; (8008254 <UART_SetConfig+0x2e0>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d125      	bne.n	8008064 <UART_SetConfig+0xf0>
 8008018:	4b8f      	ldr	r3, [pc, #572]	; (8008258 <UART_SetConfig+0x2e4>)
 800801a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800801e:	f003 0303 	and.w	r3, r3, #3
 8008022:	2b03      	cmp	r3, #3
 8008024:	d81a      	bhi.n	800805c <UART_SetConfig+0xe8>
 8008026:	a201      	add	r2, pc, #4	; (adr r2, 800802c <UART_SetConfig+0xb8>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	0800803d 	.word	0x0800803d
 8008030:	0800804d 	.word	0x0800804d
 8008034:	08008045 	.word	0x08008045
 8008038:	08008055 	.word	0x08008055
 800803c:	2301      	movs	r3, #1
 800803e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008042:	e116      	b.n	8008272 <UART_SetConfig+0x2fe>
 8008044:	2302      	movs	r3, #2
 8008046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800804a:	e112      	b.n	8008272 <UART_SetConfig+0x2fe>
 800804c:	2304      	movs	r3, #4
 800804e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008052:	e10e      	b.n	8008272 <UART_SetConfig+0x2fe>
 8008054:	2308      	movs	r3, #8
 8008056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800805a:	e10a      	b.n	8008272 <UART_SetConfig+0x2fe>
 800805c:	2310      	movs	r3, #16
 800805e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008062:	e106      	b.n	8008272 <UART_SetConfig+0x2fe>
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a7c      	ldr	r2, [pc, #496]	; (800825c <UART_SetConfig+0x2e8>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d138      	bne.n	80080e0 <UART_SetConfig+0x16c>
 800806e:	4b7a      	ldr	r3, [pc, #488]	; (8008258 <UART_SetConfig+0x2e4>)
 8008070:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008074:	f003 030c 	and.w	r3, r3, #12
 8008078:	2b0c      	cmp	r3, #12
 800807a:	d82d      	bhi.n	80080d8 <UART_SetConfig+0x164>
 800807c:	a201      	add	r2, pc, #4	; (adr r2, 8008084 <UART_SetConfig+0x110>)
 800807e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008082:	bf00      	nop
 8008084:	080080b9 	.word	0x080080b9
 8008088:	080080d9 	.word	0x080080d9
 800808c:	080080d9 	.word	0x080080d9
 8008090:	080080d9 	.word	0x080080d9
 8008094:	080080c9 	.word	0x080080c9
 8008098:	080080d9 	.word	0x080080d9
 800809c:	080080d9 	.word	0x080080d9
 80080a0:	080080d9 	.word	0x080080d9
 80080a4:	080080c1 	.word	0x080080c1
 80080a8:	080080d9 	.word	0x080080d9
 80080ac:	080080d9 	.word	0x080080d9
 80080b0:	080080d9 	.word	0x080080d9
 80080b4:	080080d1 	.word	0x080080d1
 80080b8:	2300      	movs	r3, #0
 80080ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080be:	e0d8      	b.n	8008272 <UART_SetConfig+0x2fe>
 80080c0:	2302      	movs	r3, #2
 80080c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080c6:	e0d4      	b.n	8008272 <UART_SetConfig+0x2fe>
 80080c8:	2304      	movs	r3, #4
 80080ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ce:	e0d0      	b.n	8008272 <UART_SetConfig+0x2fe>
 80080d0:	2308      	movs	r3, #8
 80080d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d6:	e0cc      	b.n	8008272 <UART_SetConfig+0x2fe>
 80080d8:	2310      	movs	r3, #16
 80080da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080de:	e0c8      	b.n	8008272 <UART_SetConfig+0x2fe>
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a5e      	ldr	r2, [pc, #376]	; (8008260 <UART_SetConfig+0x2ec>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d125      	bne.n	8008136 <UART_SetConfig+0x1c2>
 80080ea:	4b5b      	ldr	r3, [pc, #364]	; (8008258 <UART_SetConfig+0x2e4>)
 80080ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080f4:	2b30      	cmp	r3, #48	; 0x30
 80080f6:	d016      	beq.n	8008126 <UART_SetConfig+0x1b2>
 80080f8:	2b30      	cmp	r3, #48	; 0x30
 80080fa:	d818      	bhi.n	800812e <UART_SetConfig+0x1ba>
 80080fc:	2b20      	cmp	r3, #32
 80080fe:	d00a      	beq.n	8008116 <UART_SetConfig+0x1a2>
 8008100:	2b20      	cmp	r3, #32
 8008102:	d814      	bhi.n	800812e <UART_SetConfig+0x1ba>
 8008104:	2b00      	cmp	r3, #0
 8008106:	d002      	beq.n	800810e <UART_SetConfig+0x19a>
 8008108:	2b10      	cmp	r3, #16
 800810a:	d008      	beq.n	800811e <UART_SetConfig+0x1aa>
 800810c:	e00f      	b.n	800812e <UART_SetConfig+0x1ba>
 800810e:	2300      	movs	r3, #0
 8008110:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008114:	e0ad      	b.n	8008272 <UART_SetConfig+0x2fe>
 8008116:	2302      	movs	r3, #2
 8008118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800811c:	e0a9      	b.n	8008272 <UART_SetConfig+0x2fe>
 800811e:	2304      	movs	r3, #4
 8008120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008124:	e0a5      	b.n	8008272 <UART_SetConfig+0x2fe>
 8008126:	2308      	movs	r3, #8
 8008128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800812c:	e0a1      	b.n	8008272 <UART_SetConfig+0x2fe>
 800812e:	2310      	movs	r3, #16
 8008130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008134:	e09d      	b.n	8008272 <UART_SetConfig+0x2fe>
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a4a      	ldr	r2, [pc, #296]	; (8008264 <UART_SetConfig+0x2f0>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d125      	bne.n	800818c <UART_SetConfig+0x218>
 8008140:	4b45      	ldr	r3, [pc, #276]	; (8008258 <UART_SetConfig+0x2e4>)
 8008142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008146:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800814a:	2bc0      	cmp	r3, #192	; 0xc0
 800814c:	d016      	beq.n	800817c <UART_SetConfig+0x208>
 800814e:	2bc0      	cmp	r3, #192	; 0xc0
 8008150:	d818      	bhi.n	8008184 <UART_SetConfig+0x210>
 8008152:	2b80      	cmp	r3, #128	; 0x80
 8008154:	d00a      	beq.n	800816c <UART_SetConfig+0x1f8>
 8008156:	2b80      	cmp	r3, #128	; 0x80
 8008158:	d814      	bhi.n	8008184 <UART_SetConfig+0x210>
 800815a:	2b00      	cmp	r3, #0
 800815c:	d002      	beq.n	8008164 <UART_SetConfig+0x1f0>
 800815e:	2b40      	cmp	r3, #64	; 0x40
 8008160:	d008      	beq.n	8008174 <UART_SetConfig+0x200>
 8008162:	e00f      	b.n	8008184 <UART_SetConfig+0x210>
 8008164:	2300      	movs	r3, #0
 8008166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800816a:	e082      	b.n	8008272 <UART_SetConfig+0x2fe>
 800816c:	2302      	movs	r3, #2
 800816e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008172:	e07e      	b.n	8008272 <UART_SetConfig+0x2fe>
 8008174:	2304      	movs	r3, #4
 8008176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800817a:	e07a      	b.n	8008272 <UART_SetConfig+0x2fe>
 800817c:	2308      	movs	r3, #8
 800817e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008182:	e076      	b.n	8008272 <UART_SetConfig+0x2fe>
 8008184:	2310      	movs	r3, #16
 8008186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800818a:	e072      	b.n	8008272 <UART_SetConfig+0x2fe>
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a35      	ldr	r2, [pc, #212]	; (8008268 <UART_SetConfig+0x2f4>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d12a      	bne.n	80081ec <UART_SetConfig+0x278>
 8008196:	4b30      	ldr	r3, [pc, #192]	; (8008258 <UART_SetConfig+0x2e4>)
 8008198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800819c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081a4:	d01a      	beq.n	80081dc <UART_SetConfig+0x268>
 80081a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80081aa:	d81b      	bhi.n	80081e4 <UART_SetConfig+0x270>
 80081ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b0:	d00c      	beq.n	80081cc <UART_SetConfig+0x258>
 80081b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b6:	d815      	bhi.n	80081e4 <UART_SetConfig+0x270>
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d003      	beq.n	80081c4 <UART_SetConfig+0x250>
 80081bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081c0:	d008      	beq.n	80081d4 <UART_SetConfig+0x260>
 80081c2:	e00f      	b.n	80081e4 <UART_SetConfig+0x270>
 80081c4:	2300      	movs	r3, #0
 80081c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ca:	e052      	b.n	8008272 <UART_SetConfig+0x2fe>
 80081cc:	2302      	movs	r3, #2
 80081ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081d2:	e04e      	b.n	8008272 <UART_SetConfig+0x2fe>
 80081d4:	2304      	movs	r3, #4
 80081d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081da:	e04a      	b.n	8008272 <UART_SetConfig+0x2fe>
 80081dc:	2308      	movs	r3, #8
 80081de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e2:	e046      	b.n	8008272 <UART_SetConfig+0x2fe>
 80081e4:	2310      	movs	r3, #16
 80081e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ea:	e042      	b.n	8008272 <UART_SetConfig+0x2fe>
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	4a17      	ldr	r2, [pc, #92]	; (8008250 <UART_SetConfig+0x2dc>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d13a      	bne.n	800826c <UART_SetConfig+0x2f8>
 80081f6:	4b18      	ldr	r3, [pc, #96]	; (8008258 <UART_SetConfig+0x2e4>)
 80081f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008200:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008204:	d01a      	beq.n	800823c <UART_SetConfig+0x2c8>
 8008206:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800820a:	d81b      	bhi.n	8008244 <UART_SetConfig+0x2d0>
 800820c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008210:	d00c      	beq.n	800822c <UART_SetConfig+0x2b8>
 8008212:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008216:	d815      	bhi.n	8008244 <UART_SetConfig+0x2d0>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <UART_SetConfig+0x2b0>
 800821c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008220:	d008      	beq.n	8008234 <UART_SetConfig+0x2c0>
 8008222:	e00f      	b.n	8008244 <UART_SetConfig+0x2d0>
 8008224:	2300      	movs	r3, #0
 8008226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800822a:	e022      	b.n	8008272 <UART_SetConfig+0x2fe>
 800822c:	2302      	movs	r3, #2
 800822e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008232:	e01e      	b.n	8008272 <UART_SetConfig+0x2fe>
 8008234:	2304      	movs	r3, #4
 8008236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800823a:	e01a      	b.n	8008272 <UART_SetConfig+0x2fe>
 800823c:	2308      	movs	r3, #8
 800823e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008242:	e016      	b.n	8008272 <UART_SetConfig+0x2fe>
 8008244:	2310      	movs	r3, #16
 8008246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800824a:	e012      	b.n	8008272 <UART_SetConfig+0x2fe>
 800824c:	cfff69f3 	.word	0xcfff69f3
 8008250:	40008000 	.word	0x40008000
 8008254:	40013800 	.word	0x40013800
 8008258:	40021000 	.word	0x40021000
 800825c:	40004400 	.word	0x40004400
 8008260:	40004800 	.word	0x40004800
 8008264:	40004c00 	.word	0x40004c00
 8008268:	40005000 	.word	0x40005000
 800826c:	2310      	movs	r3, #16
 800826e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4aae      	ldr	r2, [pc, #696]	; (8008530 <UART_SetConfig+0x5bc>)
 8008278:	4293      	cmp	r3, r2
 800827a:	f040 8097 	bne.w	80083ac <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800827e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008282:	2b08      	cmp	r3, #8
 8008284:	d823      	bhi.n	80082ce <UART_SetConfig+0x35a>
 8008286:	a201      	add	r2, pc, #4	; (adr r2, 800828c <UART_SetConfig+0x318>)
 8008288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828c:	080082b1 	.word	0x080082b1
 8008290:	080082cf 	.word	0x080082cf
 8008294:	080082b9 	.word	0x080082b9
 8008298:	080082cf 	.word	0x080082cf
 800829c:	080082bf 	.word	0x080082bf
 80082a0:	080082cf 	.word	0x080082cf
 80082a4:	080082cf 	.word	0x080082cf
 80082a8:	080082cf 	.word	0x080082cf
 80082ac:	080082c7 	.word	0x080082c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082b0:	f7fe ff32 	bl	8007118 <HAL_RCC_GetPCLK1Freq>
 80082b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082b6:	e010      	b.n	80082da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082b8:	4b9e      	ldr	r3, [pc, #632]	; (8008534 <UART_SetConfig+0x5c0>)
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082bc:	e00d      	b.n	80082da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082be:	f7fe febd 	bl	800703c <HAL_RCC_GetSysClockFreq>
 80082c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082c4:	e009      	b.n	80082da <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082cc:	e005      	b.n	80082da <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 8130 	beq.w	8008542 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e6:	4a94      	ldr	r2, [pc, #592]	; (8008538 <UART_SetConfig+0x5c4>)
 80082e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082ec:	461a      	mov	r2, r3
 80082ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80082f4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	685a      	ldr	r2, [r3, #4]
 80082fa:	4613      	mov	r3, r2
 80082fc:	005b      	lsls	r3, r3, #1
 80082fe:	4413      	add	r3, r2
 8008300:	69ba      	ldr	r2, [r7, #24]
 8008302:	429a      	cmp	r2, r3
 8008304:	d305      	bcc.n	8008312 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	429a      	cmp	r2, r3
 8008310:	d903      	bls.n	800831a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008318:	e113      	b.n	8008542 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800831a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831c:	2200      	movs	r2, #0
 800831e:	60bb      	str	r3, [r7, #8]
 8008320:	60fa      	str	r2, [r7, #12]
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	4a84      	ldr	r2, [pc, #528]	; (8008538 <UART_SetConfig+0x5c4>)
 8008328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800832c:	b29b      	uxth	r3, r3
 800832e:	2200      	movs	r2, #0
 8008330:	603b      	str	r3, [r7, #0]
 8008332:	607a      	str	r2, [r7, #4]
 8008334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008338:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800833c:	f7f8 fcac 	bl	8000c98 <__aeabi_uldivmod>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4610      	mov	r0, r2
 8008346:	4619      	mov	r1, r3
 8008348:	f04f 0200 	mov.w	r2, #0
 800834c:	f04f 0300 	mov.w	r3, #0
 8008350:	020b      	lsls	r3, r1, #8
 8008352:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008356:	0202      	lsls	r2, r0, #8
 8008358:	6979      	ldr	r1, [r7, #20]
 800835a:	6849      	ldr	r1, [r1, #4]
 800835c:	0849      	lsrs	r1, r1, #1
 800835e:	2000      	movs	r0, #0
 8008360:	460c      	mov	r4, r1
 8008362:	4605      	mov	r5, r0
 8008364:	eb12 0804 	adds.w	r8, r2, r4
 8008368:	eb43 0905 	adc.w	r9, r3, r5
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	469a      	mov	sl, r3
 8008374:	4693      	mov	fp, r2
 8008376:	4652      	mov	r2, sl
 8008378:	465b      	mov	r3, fp
 800837a:	4640      	mov	r0, r8
 800837c:	4649      	mov	r1, r9
 800837e:	f7f8 fc8b 	bl	8000c98 <__aeabi_uldivmod>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4613      	mov	r3, r2
 8008388:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008390:	d308      	bcc.n	80083a4 <UART_SetConfig+0x430>
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008398:	d204      	bcs.n	80083a4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	6a3a      	ldr	r2, [r7, #32]
 80083a0:	60da      	str	r2, [r3, #12]
 80083a2:	e0ce      	b.n	8008542 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083aa:	e0ca      	b.n	8008542 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	69db      	ldr	r3, [r3, #28]
 80083b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083b4:	d166      	bne.n	8008484 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80083b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80083ba:	2b08      	cmp	r3, #8
 80083bc:	d827      	bhi.n	800840e <UART_SetConfig+0x49a>
 80083be:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <UART_SetConfig+0x450>)
 80083c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c4:	080083e9 	.word	0x080083e9
 80083c8:	080083f1 	.word	0x080083f1
 80083cc:	080083f9 	.word	0x080083f9
 80083d0:	0800840f 	.word	0x0800840f
 80083d4:	080083ff 	.word	0x080083ff
 80083d8:	0800840f 	.word	0x0800840f
 80083dc:	0800840f 	.word	0x0800840f
 80083e0:	0800840f 	.word	0x0800840f
 80083e4:	08008407 	.word	0x08008407
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083e8:	f7fe fe96 	bl	8007118 <HAL_RCC_GetPCLK1Freq>
 80083ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083ee:	e014      	b.n	800841a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083f0:	f7fe fea8 	bl	8007144 <HAL_RCC_GetPCLK2Freq>
 80083f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80083f6:	e010      	b.n	800841a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083f8:	4b4e      	ldr	r3, [pc, #312]	; (8008534 <UART_SetConfig+0x5c0>)
 80083fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80083fc:	e00d      	b.n	800841a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083fe:	f7fe fe1d 	bl	800703c <HAL_RCC_GetSysClockFreq>
 8008402:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008404:	e009      	b.n	800841a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800840a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800840c:	e005      	b.n	800841a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800840e:	2300      	movs	r3, #0
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008412:	2301      	movs	r3, #1
 8008414:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008418:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	2b00      	cmp	r3, #0
 800841e:	f000 8090 	beq.w	8008542 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008426:	4a44      	ldr	r2, [pc, #272]	; (8008538 <UART_SetConfig+0x5c4>)
 8008428:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800842c:	461a      	mov	r2, r3
 800842e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008430:	fbb3 f3f2 	udiv	r3, r3, r2
 8008434:	005a      	lsls	r2, r3, #1
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	085b      	lsrs	r3, r3, #1
 800843c:	441a      	add	r2, r3
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	685b      	ldr	r3, [r3, #4]
 8008442:	fbb2 f3f3 	udiv	r3, r2, r3
 8008446:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008448:	6a3b      	ldr	r3, [r7, #32]
 800844a:	2b0f      	cmp	r3, #15
 800844c:	d916      	bls.n	800847c <UART_SetConfig+0x508>
 800844e:	6a3b      	ldr	r3, [r7, #32]
 8008450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008454:	d212      	bcs.n	800847c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	b29b      	uxth	r3, r3
 800845a:	f023 030f 	bic.w	r3, r3, #15
 800845e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008460:	6a3b      	ldr	r3, [r7, #32]
 8008462:	085b      	lsrs	r3, r3, #1
 8008464:	b29b      	uxth	r3, r3
 8008466:	f003 0307 	and.w	r3, r3, #7
 800846a:	b29a      	uxth	r2, r3
 800846c:	8bfb      	ldrh	r3, [r7, #30]
 800846e:	4313      	orrs	r3, r2
 8008470:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	8bfa      	ldrh	r2, [r7, #30]
 8008478:	60da      	str	r2, [r3, #12]
 800847a:	e062      	b.n	8008542 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800847c:	2301      	movs	r3, #1
 800847e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008482:	e05e      	b.n	8008542 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008484:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008488:	2b08      	cmp	r3, #8
 800848a:	d828      	bhi.n	80084de <UART_SetConfig+0x56a>
 800848c:	a201      	add	r2, pc, #4	; (adr r2, 8008494 <UART_SetConfig+0x520>)
 800848e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008492:	bf00      	nop
 8008494:	080084b9 	.word	0x080084b9
 8008498:	080084c1 	.word	0x080084c1
 800849c:	080084c9 	.word	0x080084c9
 80084a0:	080084df 	.word	0x080084df
 80084a4:	080084cf 	.word	0x080084cf
 80084a8:	080084df 	.word	0x080084df
 80084ac:	080084df 	.word	0x080084df
 80084b0:	080084df 	.word	0x080084df
 80084b4:	080084d7 	.word	0x080084d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084b8:	f7fe fe2e 	bl	8007118 <HAL_RCC_GetPCLK1Freq>
 80084bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084be:	e014      	b.n	80084ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084c0:	f7fe fe40 	bl	8007144 <HAL_RCC_GetPCLK2Freq>
 80084c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084c6:	e010      	b.n	80084ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084c8:	4b1a      	ldr	r3, [pc, #104]	; (8008534 <UART_SetConfig+0x5c0>)
 80084ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084cc:	e00d      	b.n	80084ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084ce:	f7fe fdb5 	bl	800703c <HAL_RCC_GetSysClockFreq>
 80084d2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084d4:	e009      	b.n	80084ea <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084dc:	e005      	b.n	80084ea <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084e8:	bf00      	nop
    }

    if (pclk != 0U)
 80084ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d028      	beq.n	8008542 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f4:	4a10      	ldr	r2, [pc, #64]	; (8008538 <UART_SetConfig+0x5c4>)
 80084f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084fa:	461a      	mov	r2, r3
 80084fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	085b      	lsrs	r3, r3, #1
 8008508:	441a      	add	r2, r3
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008512:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	2b0f      	cmp	r3, #15
 8008518:	d910      	bls.n	800853c <UART_SetConfig+0x5c8>
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008520:	d20c      	bcs.n	800853c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008522:	6a3b      	ldr	r3, [r7, #32]
 8008524:	b29a      	uxth	r2, r3
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	60da      	str	r2, [r3, #12]
 800852c:	e009      	b.n	8008542 <UART_SetConfig+0x5ce>
 800852e:	bf00      	nop
 8008530:	40008000 	.word	0x40008000
 8008534:	00f42400 	.word	0x00f42400
 8008538:	08015a24 	.word	0x08015a24
      }
      else
      {
        ret = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	2201      	movs	r2, #1
 8008546:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	2201      	movs	r2, #1
 800854e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2200      	movs	r2, #0
 8008556:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2200      	movs	r2, #0
 800855c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800855e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008562:	4618      	mov	r0, r3
 8008564:	3730      	adds	r7, #48	; 0x30
 8008566:	46bd      	mov	sp, r7
 8008568:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800856c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008578:	f003 0308 	and.w	r3, r3, #8
 800857c:	2b00      	cmp	r3, #0
 800857e:	d00a      	beq.n	8008596 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685b      	ldr	r3, [r3, #4]
 8008586:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	430a      	orrs	r2, r1
 8008594:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859a:	f003 0301 	and.w	r3, r3, #1
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00a      	beq.n	80085b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085bc:	f003 0302 	and.w	r3, r3, #2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d00a      	beq.n	80085da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	430a      	orrs	r2, r1
 80085d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085de:	f003 0304 	and.w	r3, r3, #4
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00a      	beq.n	80085fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	430a      	orrs	r2, r1
 80085fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008600:	f003 0310 	and.w	r3, r3, #16
 8008604:	2b00      	cmp	r3, #0
 8008606:	d00a      	beq.n	800861e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008622:	f003 0320 	and.w	r3, r3, #32
 8008626:	2b00      	cmp	r3, #0
 8008628:	d00a      	beq.n	8008640 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	430a      	orrs	r2, r1
 800863e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008644:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01a      	beq.n	8008682 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	430a      	orrs	r2, r1
 8008660:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008666:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800866a:	d10a      	bne.n	8008682 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	430a      	orrs	r2, r1
 8008680:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868a:	2b00      	cmp	r3, #0
 800868c:	d00a      	beq.n	80086a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	685b      	ldr	r3, [r3, #4]
 8008694:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	430a      	orrs	r2, r1
 80086a2:	605a      	str	r2, [r3, #4]
  }
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b098      	sub	sp, #96	; 0x60
 80086b4:	af02      	add	r7, sp, #8
 80086b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086c0:	f7f8 fd2c 	bl	800111c <HAL_GetTick>
 80086c4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f003 0308 	and.w	r3, r3, #8
 80086d0:	2b08      	cmp	r3, #8
 80086d2:	d12f      	bne.n	8008734 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086dc:	2200      	movs	r2, #0
 80086de:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 f88e 	bl	8008804 <UART_WaitOnFlagUntilTimeout>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d022      	beq.n	8008734 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	e853 3f00 	ldrex	r3, [r3]
 80086fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80086fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008702:	653b      	str	r3, [r7, #80]	; 0x50
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	461a      	mov	r2, r3
 800870a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800870c:	647b      	str	r3, [r7, #68]	; 0x44
 800870e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008710:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008712:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008714:	e841 2300 	strex	r3, r2, [r1]
 8008718:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800871a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800871c:	2b00      	cmp	r3, #0
 800871e:	d1e6      	bne.n	80086ee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2220      	movs	r2, #32
 8008724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2200      	movs	r2, #0
 800872c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008730:	2303      	movs	r3, #3
 8008732:	e063      	b.n	80087fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0304 	and.w	r3, r3, #4
 800873e:	2b04      	cmp	r3, #4
 8008740:	d149      	bne.n	80087d6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008742:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008746:	9300      	str	r3, [sp, #0]
 8008748:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800874a:	2200      	movs	r2, #0
 800874c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f857 	bl	8008804 <UART_WaitOnFlagUntilTimeout>
 8008756:	4603      	mov	r3, r0
 8008758:	2b00      	cmp	r3, #0
 800875a:	d03c      	beq.n	80087d6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	623b      	str	r3, [r7, #32]
   return(result);
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008770:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	461a      	mov	r2, r3
 8008778:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800877a:	633b      	str	r3, [r7, #48]	; 0x30
 800877c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e6      	bne.n	800875c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	3308      	adds	r3, #8
 8008794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	e853 3f00 	ldrex	r3, [r3]
 800879c:	60fb      	str	r3, [r7, #12]
   return(result);
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	f023 0301 	bic.w	r3, r3, #1
 80087a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	3308      	adds	r3, #8
 80087ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087ae:	61fa      	str	r2, [r7, #28]
 80087b0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	69b9      	ldr	r1, [r7, #24]
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	617b      	str	r3, [r7, #20]
   return(result);
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e5      	bne.n	800878e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2220      	movs	r2, #32
 80087c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e012      	b.n	80087fc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2220      	movs	r2, #32
 80087da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3758      	adds	r7, #88	; 0x58
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b084      	sub	sp, #16
 8008808:	af00      	add	r7, sp, #0
 800880a:	60f8      	str	r0, [r7, #12]
 800880c:	60b9      	str	r1, [r7, #8]
 800880e:	603b      	str	r3, [r7, #0]
 8008810:	4613      	mov	r3, r2
 8008812:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008814:	e04f      	b.n	80088b6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800881c:	d04b      	beq.n	80088b6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800881e:	f7f8 fc7d 	bl	800111c <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	69ba      	ldr	r2, [r7, #24]
 800882a:	429a      	cmp	r2, r3
 800882c:	d302      	bcc.n	8008834 <UART_WaitOnFlagUntilTimeout+0x30>
 800882e:	69bb      	ldr	r3, [r7, #24]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d101      	bne.n	8008838 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e04e      	b.n	80088d6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0304 	and.w	r3, r3, #4
 8008842:	2b00      	cmp	r3, #0
 8008844:	d037      	beq.n	80088b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2b80      	cmp	r3, #128	; 0x80
 800884a:	d034      	beq.n	80088b6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2b40      	cmp	r3, #64	; 0x40
 8008850:	d031      	beq.n	80088b6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	69db      	ldr	r3, [r3, #28]
 8008858:	f003 0308 	and.w	r3, r3, #8
 800885c:	2b08      	cmp	r3, #8
 800885e:	d110      	bne.n	8008882 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	2208      	movs	r2, #8
 8008866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f000 f920 	bl	8008aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2208      	movs	r2, #8
 8008872:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2200      	movs	r2, #0
 800887a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e029      	b.n	80088d6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	69db      	ldr	r3, [r3, #28]
 8008888:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800888c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008890:	d111      	bne.n	80088b6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800889a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f000 f906 	bl	8008aae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2220      	movs	r2, #32
 80088a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e00f      	b.n	80088d6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	69da      	ldr	r2, [r3, #28]
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	4013      	ands	r3, r2
 80088c0:	68ba      	ldr	r2, [r7, #8]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	bf0c      	ite	eq
 80088c6:	2301      	moveq	r3, #1
 80088c8:	2300      	movne	r3, #0
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	461a      	mov	r2, r3
 80088ce:	79fb      	ldrb	r3, [r7, #7]
 80088d0:	429a      	cmp	r2, r3
 80088d2:	d0a0      	beq.n	8008816 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088d4:	2300      	movs	r3, #0
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
	...

080088e0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b096      	sub	sp, #88	; 0x58
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	60f8      	str	r0, [r7, #12]
 80088e8:	60b9      	str	r1, [r7, #8]
 80088ea:	4613      	mov	r3, r2
 80088ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	68ba      	ldr	r2, [r7, #8]
 80088f2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	88fa      	ldrh	r2, [r7, #6]
 80088f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2222      	movs	r2, #34	; 0x22
 8008908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008912:	2b00      	cmp	r3, #0
 8008914:	d02d      	beq.n	8008972 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800891c:	4a40      	ldr	r2, [pc, #256]	; (8008a20 <UART_Start_Receive_DMA+0x140>)
 800891e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008926:	4a3f      	ldr	r2, [pc, #252]	; (8008a24 <UART_Start_Receive_DMA+0x144>)
 8008928:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008930:	4a3d      	ldr	r2, [pc, #244]	; (8008a28 <UART_Start_Receive_DMA+0x148>)
 8008932:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800893a:	2200      	movs	r2, #0
 800893c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	3324      	adds	r3, #36	; 0x24
 800894a:	4619      	mov	r1, r3
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008950:	461a      	mov	r2, r3
 8008952:	88fb      	ldrh	r3, [r7, #6]
 8008954:	f7f8 fdde 	bl	8001514 <HAL_DMA_Start_IT>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d009      	beq.n	8008972 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2210      	movs	r2, #16
 8008962:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2220      	movs	r2, #32
 800896a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e051      	b.n	8008a16 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	691b      	ldr	r3, [r3, #16]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d018      	beq.n	80089ac <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008982:	e853 3f00 	ldrex	r3, [r3]
 8008986:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800898e:	657b      	str	r3, [r7, #84]	; 0x54
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	461a      	mov	r2, r3
 8008996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008998:	64bb      	str	r3, [r7, #72]	; 0x48
 800899a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800899e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089a0:	e841 2300 	strex	r3, r2, [r1]
 80089a4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80089a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1e6      	bne.n	800897a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	3308      	adds	r3, #8
 80089b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089b6:	e853 3f00 	ldrex	r3, [r3]
 80089ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089be:	f043 0301 	orr.w	r3, r3, #1
 80089c2:	653b      	str	r3, [r7, #80]	; 0x50
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	3308      	adds	r3, #8
 80089ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80089cc:	637a      	str	r2, [r7, #52]	; 0x34
 80089ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089d4:	e841 2300 	strex	r3, r2, [r1]
 80089d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d1e5      	bne.n	80089ac <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	3308      	adds	r3, #8
 80089e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	e853 3f00 	ldrex	r3, [r3]
 80089ee:	613b      	str	r3, [r7, #16]
   return(result);
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3308      	adds	r3, #8
 80089fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a00:	623a      	str	r2, [r7, #32]
 8008a02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a04:	69f9      	ldr	r1, [r7, #28]
 8008a06:	6a3a      	ldr	r2, [r7, #32]
 8008a08:	e841 2300 	strex	r3, r2, [r1]
 8008a0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d1e5      	bne.n	80089e0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3758      	adds	r7, #88	; 0x58
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	08008b7b 	.word	0x08008b7b
 8008a24:	08008ca7 	.word	0x08008ca7
 8008a28:	08008ce5 	.word	0x08008ce5

08008a2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a2c:	b480      	push	{r7}
 8008a2e:	b08f      	sub	sp, #60	; 0x3c
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3a:	6a3b      	ldr	r3, [r7, #32]
 8008a3c:	e853 3f00 	ldrex	r3, [r3]
 8008a40:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008a48:	637b      	str	r3, [r7, #52]	; 0x34
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	461a      	mov	r2, r3
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a54:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a5a:	e841 2300 	strex	r3, r2, [r1]
 8008a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d1e6      	bne.n	8008a34 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	3308      	adds	r3, #8
 8008a6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	e853 3f00 	ldrex	r3, [r3]
 8008a74:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3308      	adds	r3, #8
 8008a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a86:	61ba      	str	r2, [r7, #24]
 8008a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a8a:	6979      	ldr	r1, [r7, #20]
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	e841 2300 	strex	r3, r2, [r1]
 8008a92:	613b      	str	r3, [r7, #16]
   return(result);
 8008a94:	693b      	ldr	r3, [r7, #16]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d1e5      	bne.n	8008a66 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2220      	movs	r2, #32
 8008a9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8008aa2:	bf00      	nop
 8008aa4:	373c      	adds	r7, #60	; 0x3c
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aac:	4770      	bx	lr

08008aae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aae:	b480      	push	{r7}
 8008ab0:	b095      	sub	sp, #84	; 0x54
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008abe:	e853 3f00 	ldrex	r3, [r3]
 8008ac2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008aca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ad6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ada:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008adc:	e841 2300 	strex	r3, r2, [r1]
 8008ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d1e6      	bne.n	8008ab6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	3308      	adds	r3, #8
 8008aee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af0:	6a3b      	ldr	r3, [r7, #32]
 8008af2:	e853 3f00 	ldrex	r3, [r3]
 8008af6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008af8:	69fb      	ldr	r3, [r7, #28]
 8008afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008afe:	f023 0301 	bic.w	r3, r3, #1
 8008b02:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	3308      	adds	r3, #8
 8008b0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b14:	e841 2300 	strex	r3, r2, [r1]
 8008b18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d1e3      	bne.n	8008ae8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d118      	bne.n	8008b5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	e853 3f00 	ldrex	r3, [r3]
 8008b34:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	f023 0310 	bic.w	r3, r3, #16
 8008b3c:	647b      	str	r3, [r7, #68]	; 0x44
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	461a      	mov	r2, r3
 8008b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b46:	61bb      	str	r3, [r7, #24]
 8008b48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4a:	6979      	ldr	r1, [r7, #20]
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	e841 2300 	strex	r3, r2, [r1]
 8008b52:	613b      	str	r3, [r7, #16]
   return(result);
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d1e6      	bne.n	8008b28 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2220      	movs	r2, #32
 8008b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008b6e:	bf00      	nop
 8008b70:	3754      	adds	r7, #84	; 0x54
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr

08008b7a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b09c      	sub	sp, #112	; 0x70
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b86:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 0320 	and.w	r3, r3, #32
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d171      	bne.n	8008c7a <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008b98:	2200      	movs	r2, #0
 8008b9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ba6:	e853 3f00 	ldrex	r3, [r3]
 8008baa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bb2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	461a      	mov	r2, r3
 8008bba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8008bbe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008bc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008bc4:	e841 2300 	strex	r3, r2, [r1]
 8008bc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d1e6      	bne.n	8008b9e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3308      	adds	r3, #8
 8008bd6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008be0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008be2:	f023 0301 	bic.w	r3, r3, #1
 8008be6:	667b      	str	r3, [r7, #100]	; 0x64
 8008be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3308      	adds	r3, #8
 8008bee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008bf0:	647a      	str	r2, [r7, #68]	; 0x44
 8008bf2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bf8:	e841 2300 	strex	r3, r2, [r1]
 8008bfc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1e5      	bne.n	8008bd0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3308      	adds	r3, #8
 8008c0a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	623b      	str	r3, [r7, #32]
   return(result);
 8008c14:	6a3b      	ldr	r3, [r7, #32]
 8008c16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c1a:	663b      	str	r3, [r7, #96]	; 0x60
 8008c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3308      	adds	r3, #8
 8008c22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c24:	633a      	str	r2, [r7, #48]	; 0x30
 8008c26:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e5      	bne.n	8008c04 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d118      	bne.n	8008c7a <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	e853 3f00 	ldrex	r3, [r3]
 8008c54:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f023 0310 	bic.w	r3, r3, #16
 8008c5c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	461a      	mov	r2, r3
 8008c64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c66:	61fb      	str	r3, [r7, #28]
 8008c68:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c6a:	69b9      	ldr	r1, [r7, #24]
 8008c6c:	69fa      	ldr	r2, [r7, #28]
 8008c6e:	e841 2300 	strex	r3, r2, [r1]
 8008c72:	617b      	str	r3, [r7, #20]
   return(result);
 8008c74:	697b      	ldr	r3, [r7, #20]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1e6      	bne.n	8008c48 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d107      	bne.n	8008c98 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008c8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c8e:	4619      	mov	r1, r3
 8008c90:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008c92:	f7ff f963 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c96:	e002      	b.n	8008c9e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008c98:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008c9a:	f008 fec5 	bl	8011a28 <HAL_UART_RxCpltCallback>
}
 8008c9e:	bf00      	nop
 8008ca0:	3770      	adds	r7, #112	; 0x70
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b084      	sub	sp, #16
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cbe:	2b01      	cmp	r3, #1
 8008cc0:	d109      	bne.n	8008cd6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008cc8:	085b      	lsrs	r3, r3, #1
 8008cca:	b29b      	uxth	r3, r3
 8008ccc:	4619      	mov	r1, r3
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f7ff f944 	bl	8007f5c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cd4:	e002      	b.n	8008cdc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f7ff f936 	bl	8007f48 <HAL_UART_RxHalfCpltCallback>
}
 8008cdc:	bf00      	nop
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cf8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d00:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	689b      	ldr	r3, [r3, #8]
 8008d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d0c:	2b80      	cmp	r3, #128	; 0x80
 8008d0e:	d109      	bne.n	8008d24 <UART_DMAError+0x40>
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	2b21      	cmp	r3, #33	; 0x21
 8008d14:	d106      	bne.n	8008d24 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008d16:	697b      	ldr	r3, [r7, #20]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008d1e:	6978      	ldr	r0, [r7, #20]
 8008d20:	f7ff fe84 	bl	8008a2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d24:	697b      	ldr	r3, [r7, #20]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2e:	2b40      	cmp	r3, #64	; 0x40
 8008d30:	d109      	bne.n	8008d46 <UART_DMAError+0x62>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2b22      	cmp	r3, #34	; 0x22
 8008d36:	d106      	bne.n	8008d46 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008d38:	697b      	ldr	r3, [r7, #20]
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008d40:	6978      	ldr	r0, [r7, #20]
 8008d42:	f7ff feb4 	bl	8008aae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d4c:	f043 0210 	orr.w	r2, r3, #16
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d56:	6978      	ldr	r0, [r7, #20]
 8008d58:	f008 fe5c 	bl	8011a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d5c:	bf00      	nop
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b084      	sub	sp, #16
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d82:	68f8      	ldr	r0, [r7, #12]
 8008d84:	f008 fe46 	bl	8011a14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d88:	bf00      	nop
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b088      	sub	sp, #32
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	e853 3f00 	ldrex	r3, [r3]
 8008da4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dac:	61fb      	str	r3, [r7, #28]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	69fb      	ldr	r3, [r7, #28]
 8008db6:	61bb      	str	r3, [r7, #24]
 8008db8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dba:	6979      	ldr	r1, [r7, #20]
 8008dbc:	69ba      	ldr	r2, [r7, #24]
 8008dbe:	e841 2300 	strex	r3, r2, [r1]
 8008dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e6      	bne.n	8008d98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2220      	movs	r2, #32
 8008dce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff f8ab 	bl	8007f34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dde:	bf00      	nop
 8008de0:	3720      	adds	r7, #32
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}

08008de6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008dee:	bf00      	nop
 8008df0:	370c      	adds	r7, #12
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr

08008dfa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008dfa:	b480      	push	{r7}
 8008dfc:	b083      	sub	sp, #12
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008e02:	bf00      	nop
 8008e04:	370c      	adds	r7, #12
 8008e06:	46bd      	mov	sp, r7
 8008e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0c:	4770      	bx	lr

08008e0e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008e0e:	b480      	push	{r7}
 8008e10:	b083      	sub	sp, #12
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008e16:	bf00      	nop
 8008e18:	370c      	adds	r7, #12
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e20:	4770      	bx	lr

08008e22 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e22:	b480      	push	{r7}
 8008e24:	b085      	sub	sp, #20
 8008e26:	af00      	add	r7, sp, #0
 8008e28:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d101      	bne.n	8008e38 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e34:	2302      	movs	r3, #2
 8008e36:	e027      	b.n	8008e88 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2201      	movs	r2, #1
 8008e3c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2224      	movs	r2, #36	; 0x24
 8008e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681a      	ldr	r2, [r3, #0]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f022 0201 	bic.w	r2, r2, #1
 8008e5e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008e66:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2200      	movs	r2, #0
 8008e82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ea4:	2b01      	cmp	r3, #1
 8008ea6:	d101      	bne.n	8008eac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	e02d      	b.n	8008f08 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2224      	movs	r2, #36	; 0x24
 8008eb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681a      	ldr	r2, [r3, #0]
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f022 0201 	bic.w	r2, r2, #1
 8008ed2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	430a      	orrs	r2, r1
 8008ee6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 f84f 	bl	8008f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f06:	2300      	movs	r3, #0
}
 8008f08:	4618      	mov	r0, r3
 8008f0a:	3710      	adds	r7, #16
 8008f0c:	46bd      	mov	sp, r7
 8008f0e:	bd80      	pop	{r7, pc}

08008f10 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d101      	bne.n	8008f28 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f24:	2302      	movs	r3, #2
 8008f26:	e02d      	b.n	8008f84 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2224      	movs	r2, #36	; 0x24
 8008f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f022 0201 	bic.w	r2, r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	430a      	orrs	r2, r1
 8008f62:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f811 	bl	8008f8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2220      	movs	r2, #32
 8008f76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3710      	adds	r7, #16
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b085      	sub	sp, #20
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d108      	bne.n	8008fae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008fac:	e031      	b.n	8009012 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008fae:	2308      	movs	r3, #8
 8008fb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008fb2:	2308      	movs	r3, #8
 8008fb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	689b      	ldr	r3, [r3, #8]
 8008fbc:	0e5b      	lsrs	r3, r3, #25
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	f003 0307 	and.w	r3, r3, #7
 8008fc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	689b      	ldr	r3, [r3, #8]
 8008fcc:	0f5b      	lsrs	r3, r3, #29
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	f003 0307 	and.w	r3, r3, #7
 8008fd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	7b3a      	ldrb	r2, [r7, #12]
 8008fda:	4911      	ldr	r1, [pc, #68]	; (8009020 <UARTEx_SetNbDataToProcess+0x94>)
 8008fdc:	5c8a      	ldrb	r2, [r1, r2]
 8008fde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008fe2:	7b3a      	ldrb	r2, [r7, #12]
 8008fe4:	490f      	ldr	r1, [pc, #60]	; (8009024 <UARTEx_SetNbDataToProcess+0x98>)
 8008fe6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008fe8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fec:	b29a      	uxth	r2, r3
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	7b7a      	ldrb	r2, [r7, #13]
 8008ff8:	4909      	ldr	r1, [pc, #36]	; (8009020 <UARTEx_SetNbDataToProcess+0x94>)
 8008ffa:	5c8a      	ldrb	r2, [r1, r2]
 8008ffc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009000:	7b7a      	ldrb	r2, [r7, #13]
 8009002:	4908      	ldr	r1, [pc, #32]	; (8009024 <UARTEx_SetNbDataToProcess+0x98>)
 8009004:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009006:	fb93 f3f2 	sdiv	r3, r3, r2
 800900a:	b29a      	uxth	r2, r3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009012:	bf00      	nop
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	08015a3c 	.word	0x08015a3c
 8009024:	08015a44 	.word	0x08015a44

08009028 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009038:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800903c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	b29a      	uxth	r2, r3
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3714      	adds	r7, #20
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr

08009056 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009056:	b480      	push	{r7}
 8009058:	b085      	sub	sp, #20
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800905e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009062:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	b29b      	uxth	r3, r3
 8009070:	43db      	mvns	r3, r3
 8009072:	b29b      	uxth	r3, r3
 8009074:	4013      	ands	r3, r2
 8009076:	b29a      	uxth	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800908c:	b480      	push	{r7}
 800908e:	b085      	sub	sp, #20
 8009090:	af00      	add	r7, sp, #0
 8009092:	60f8      	str	r0, [r7, #12]
 8009094:	1d3b      	adds	r3, r7, #4
 8009096:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	2201      	movs	r2, #1
 800909e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80090ba:	2300      	movs	r3, #0
}
 80090bc:	4618      	mov	r0, r3
 80090be:	3714      	adds	r7, #20
 80090c0:	46bd      	mov	sp, r7
 80090c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c6:	4770      	bx	lr

080090c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b09d      	sub	sp, #116	; 0x74
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	881b      	ldrh	r3, [r3, #0]
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80090ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80090ee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	78db      	ldrb	r3, [r3, #3]
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d81f      	bhi.n	800913a <USB_ActivateEndpoint+0x72>
 80090fa:	a201      	add	r2, pc, #4	; (adr r2, 8009100 <USB_ActivateEndpoint+0x38>)
 80090fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009100:	08009111 	.word	0x08009111
 8009104:	0800912d 	.word	0x0800912d
 8009108:	08009143 	.word	0x08009143
 800910c:	0800911f 	.word	0x0800911f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009110:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009114:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009118:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800911c:	e012      	b.n	8009144 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800911e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009122:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009126:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800912a:	e00b      	b.n	8009144 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800912c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009130:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009134:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009138:	e004      	b.n	8009144 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009140:	e000      	b.n	8009144 <USB_ActivateEndpoint+0x7c>
      break;
 8009142:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	683b      	ldr	r3, [r7, #0]
 8009148:	781b      	ldrb	r3, [r3, #0]
 800914a:	009b      	lsls	r3, r3, #2
 800914c:	441a      	add	r2, r3
 800914e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800915a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800915e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009162:	b29b      	uxth	r3, r3
 8009164:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009166:	687a      	ldr	r2, [r7, #4]
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	009b      	lsls	r3, r3, #2
 800916e:	4413      	add	r3, r2
 8009170:	881b      	ldrh	r3, [r3, #0]
 8009172:	b29b      	uxth	r3, r3
 8009174:	b21b      	sxth	r3, r3
 8009176:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800917a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800917e:	b21a      	sxth	r2, r3
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	b21b      	sxth	r3, r3
 8009186:	4313      	orrs	r3, r2
 8009188:	b21b      	sxth	r3, r3
 800918a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800918e:	687a      	ldr	r2, [r7, #4]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	441a      	add	r2, r3
 8009198:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800919c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	7b1b      	ldrb	r3, [r3, #12]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f040 8178 	bne.w	80094aa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	785b      	ldrb	r3, [r3, #1]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	f000 8084 	beq.w	80092cc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	61bb      	str	r3, [r7, #24]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091ce:	b29b      	uxth	r3, r3
 80091d0:	461a      	mov	r2, r3
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	4413      	add	r3, r2
 80091d6:	61bb      	str	r3, [r7, #24]
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	00da      	lsls	r2, r3, #3
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	4413      	add	r3, r2
 80091e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091e6:	617b      	str	r3, [r7, #20]
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	88db      	ldrh	r3, [r3, #6]
 80091ec:	085b      	lsrs	r3, r3, #1
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	005b      	lsls	r3, r3, #1
 80091f2:	b29a      	uxth	r2, r3
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80091f8:	687a      	ldr	r2, [r7, #4]
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	009b      	lsls	r3, r3, #2
 8009200:	4413      	add	r3, r2
 8009202:	881b      	ldrh	r3, [r3, #0]
 8009204:	827b      	strh	r3, [r7, #18]
 8009206:	8a7b      	ldrh	r3, [r7, #18]
 8009208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800920c:	2b00      	cmp	r3, #0
 800920e:	d01b      	beq.n	8009248 <USB_ActivateEndpoint+0x180>
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	009b      	lsls	r3, r3, #2
 8009218:	4413      	add	r3, r2
 800921a:	881b      	ldrh	r3, [r3, #0]
 800921c:	b29b      	uxth	r3, r3
 800921e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009226:	823b      	strh	r3, [r7, #16]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	781b      	ldrb	r3, [r3, #0]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	441a      	add	r2, r3
 8009232:	8a3b      	ldrh	r3, [r7, #16]
 8009234:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009238:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800923c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009240:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009244:	b29b      	uxth	r3, r3
 8009246:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	78db      	ldrb	r3, [r3, #3]
 800924c:	2b01      	cmp	r3, #1
 800924e:	d020      	beq.n	8009292 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009250:	687a      	ldr	r2, [r7, #4]
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	009b      	lsls	r3, r3, #2
 8009258:	4413      	add	r3, r2
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	b29b      	uxth	r3, r3
 800925e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009262:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009266:	81bb      	strh	r3, [r7, #12]
 8009268:	89bb      	ldrh	r3, [r7, #12]
 800926a:	f083 0320 	eor.w	r3, r3, #32
 800926e:	81bb      	strh	r3, [r7, #12]
 8009270:	687a      	ldr	r2, [r7, #4]
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	009b      	lsls	r3, r3, #2
 8009278:	441a      	add	r2, r3
 800927a:	89bb      	ldrh	r3, [r7, #12]
 800927c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009280:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800928c:	b29b      	uxth	r3, r3
 800928e:	8013      	strh	r3, [r2, #0]
 8009290:	e2d5      	b.n	800983e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009292:	687a      	ldr	r2, [r7, #4]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	881b      	ldrh	r3, [r3, #0]
 800929e:	b29b      	uxth	r3, r3
 80092a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80092a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092a8:	81fb      	strh	r3, [r7, #14]
 80092aa:	687a      	ldr	r2, [r7, #4]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	009b      	lsls	r3, r3, #2
 80092b2:	441a      	add	r2, r3
 80092b4:	89fb      	ldrh	r3, [r7, #14]
 80092b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80092ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80092be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	8013      	strh	r3, [r2, #0]
 80092ca:	e2b8      	b.n	800983e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	633b      	str	r3, [r7, #48]	; 0x30
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092d6:	b29b      	uxth	r3, r3
 80092d8:	461a      	mov	r2, r3
 80092da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092dc:	4413      	add	r3, r2
 80092de:	633b      	str	r3, [r7, #48]	; 0x30
 80092e0:	683b      	ldr	r3, [r7, #0]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	00da      	lsls	r2, r3, #3
 80092e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092e8:	4413      	add	r3, r2
 80092ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	88db      	ldrh	r3, [r3, #6]
 80092f4:	085b      	lsrs	r3, r3, #1
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	b29a      	uxth	r2, r3
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	62bb      	str	r3, [r7, #40]	; 0x28
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800930a:	b29b      	uxth	r3, r3
 800930c:	461a      	mov	r2, r3
 800930e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009310:	4413      	add	r3, r2
 8009312:	62bb      	str	r3, [r7, #40]	; 0x28
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	00da      	lsls	r2, r3, #3
 800931a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931c:	4413      	add	r3, r2
 800931e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009322:	627b      	str	r3, [r7, #36]	; 0x24
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	881b      	ldrh	r3, [r3, #0]
 8009328:	b29b      	uxth	r3, r3
 800932a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800932e:	b29a      	uxth	r2, r3
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	801a      	strh	r2, [r3, #0]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	2b3e      	cmp	r3, #62	; 0x3e
 800933a:	d91d      	bls.n	8009378 <USB_ActivateEndpoint+0x2b0>
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	691b      	ldr	r3, [r3, #16]
 8009340:	095b      	lsrs	r3, r3, #5
 8009342:	66bb      	str	r3, [r7, #104]	; 0x68
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	f003 031f 	and.w	r3, r3, #31
 800934c:	2b00      	cmp	r3, #0
 800934e:	d102      	bne.n	8009356 <USB_ActivateEndpoint+0x28e>
 8009350:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009352:	3b01      	subs	r3, #1
 8009354:	66bb      	str	r3, [r7, #104]	; 0x68
 8009356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009358:	881b      	ldrh	r3, [r3, #0]
 800935a:	b29a      	uxth	r2, r3
 800935c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800935e:	b29b      	uxth	r3, r3
 8009360:	029b      	lsls	r3, r3, #10
 8009362:	b29b      	uxth	r3, r3
 8009364:	4313      	orrs	r3, r2
 8009366:	b29b      	uxth	r3, r3
 8009368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800936c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009370:	b29a      	uxth	r2, r3
 8009372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009374:	801a      	strh	r2, [r3, #0]
 8009376:	e026      	b.n	80093c6 <USB_ActivateEndpoint+0x2fe>
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10a      	bne.n	8009396 <USB_ActivateEndpoint+0x2ce>
 8009380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009382:	881b      	ldrh	r3, [r3, #0]
 8009384:	b29b      	uxth	r3, r3
 8009386:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800938a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800938e:	b29a      	uxth	r2, r3
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	801a      	strh	r2, [r3, #0]
 8009394:	e017      	b.n	80093c6 <USB_ActivateEndpoint+0x2fe>
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	691b      	ldr	r3, [r3, #16]
 800939a:	085b      	lsrs	r3, r3, #1
 800939c:	66bb      	str	r3, [r7, #104]	; 0x68
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d002      	beq.n	80093b0 <USB_ActivateEndpoint+0x2e8>
 80093aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093ac:	3301      	adds	r3, #1
 80093ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80093b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b2:	881b      	ldrh	r3, [r3, #0]
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	029b      	lsls	r3, r3, #10
 80093bc:	b29b      	uxth	r3, r3
 80093be:	4313      	orrs	r3, r2
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80093c6:	687a      	ldr	r2, [r7, #4]
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	781b      	ldrb	r3, [r3, #0]
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	4413      	add	r3, r2
 80093d0:	881b      	ldrh	r3, [r3, #0]
 80093d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80093d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80093d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d01b      	beq.n	8009416 <USB_ActivateEndpoint+0x34e>
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	781b      	ldrb	r3, [r3, #0]
 80093e4:	009b      	lsls	r3, r3, #2
 80093e6:	4413      	add	r3, r2
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80093f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093f4:	843b      	strh	r3, [r7, #32]
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	009b      	lsls	r3, r3, #2
 80093fe:	441a      	add	r2, r3
 8009400:	8c3b      	ldrh	r3, [r7, #32]
 8009402:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009406:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800940a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800940e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009412:	b29b      	uxth	r3, r3
 8009414:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	781b      	ldrb	r3, [r3, #0]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d124      	bne.n	8009468 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800941e:	687a      	ldr	r2, [r7, #4]
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	881b      	ldrh	r3, [r3, #0]
 800942a:	b29b      	uxth	r3, r3
 800942c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009430:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009434:	83bb      	strh	r3, [r7, #28]
 8009436:	8bbb      	ldrh	r3, [r7, #28]
 8009438:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800943c:	83bb      	strh	r3, [r7, #28]
 800943e:	8bbb      	ldrh	r3, [r7, #28]
 8009440:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009444:	83bb      	strh	r3, [r7, #28]
 8009446:	687a      	ldr	r2, [r7, #4]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	441a      	add	r2, r3
 8009450:	8bbb      	ldrh	r3, [r7, #28]
 8009452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800945a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800945e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009462:	b29b      	uxth	r3, r3
 8009464:	8013      	strh	r3, [r2, #0]
 8009466:	e1ea      	b.n	800983e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009468:	687a      	ldr	r2, [r7, #4]
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	881b      	ldrh	r3, [r3, #0]
 8009474:	b29b      	uxth	r3, r3
 8009476:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800947a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800947e:	83fb      	strh	r3, [r7, #30]
 8009480:	8bfb      	ldrh	r3, [r7, #30]
 8009482:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009486:	83fb      	strh	r3, [r7, #30]
 8009488:	687a      	ldr	r2, [r7, #4]
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	441a      	add	r2, r3
 8009492:	8bfb      	ldrh	r3, [r7, #30]
 8009494:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009498:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800949c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094a4:	b29b      	uxth	r3, r3
 80094a6:	8013      	strh	r3, [r2, #0]
 80094a8:	e1c9      	b.n	800983e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	78db      	ldrb	r3, [r3, #3]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d11e      	bne.n	80094f0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	b29b      	uxth	r3, r3
 80094c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094c8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80094cc:	687a      	ldr	r2, [r7, #4]
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	441a      	add	r2, r3
 80094d6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80094da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094e2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80094e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	8013      	strh	r3, [r2, #0]
 80094ee:	e01d      	b.n	800952c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009506:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	441a      	add	r2, r3
 8009514:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009518:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800951c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009520:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009528:	b29b      	uxth	r3, r3
 800952a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009536:	b29b      	uxth	r3, r3
 8009538:	461a      	mov	r2, r3
 800953a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800953c:	4413      	add	r3, r2
 800953e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	00da      	lsls	r2, r3, #3
 8009546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009548:	4413      	add	r3, r2
 800954a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800954e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	891b      	ldrh	r3, [r3, #8]
 8009554:	085b      	lsrs	r3, r3, #1
 8009556:	b29b      	uxth	r3, r3
 8009558:	005b      	lsls	r3, r3, #1
 800955a:	b29a      	uxth	r2, r3
 800955c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800955e:	801a      	strh	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	657b      	str	r3, [r7, #84]	; 0x54
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800956a:	b29b      	uxth	r3, r3
 800956c:	461a      	mov	r2, r3
 800956e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009570:	4413      	add	r3, r2
 8009572:	657b      	str	r3, [r7, #84]	; 0x54
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	00da      	lsls	r2, r3, #3
 800957a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800957c:	4413      	add	r3, r2
 800957e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009582:	653b      	str	r3, [r7, #80]	; 0x50
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	895b      	ldrh	r3, [r3, #10]
 8009588:	085b      	lsrs	r3, r3, #1
 800958a:	b29b      	uxth	r3, r3
 800958c:	005b      	lsls	r3, r3, #1
 800958e:	b29a      	uxth	r2, r3
 8009590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009592:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	785b      	ldrb	r3, [r3, #1]
 8009598:	2b00      	cmp	r3, #0
 800959a:	f040 8093 	bne.w	80096c4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	781b      	ldrb	r3, [r3, #0]
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	4413      	add	r3, r2
 80095a8:	881b      	ldrh	r3, [r3, #0]
 80095aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80095ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80095b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d01b      	beq.n	80095f2 <USB_ActivateEndpoint+0x52a>
 80095ba:	687a      	ldr	r2, [r7, #4]
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	781b      	ldrb	r3, [r3, #0]
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	881b      	ldrh	r3, [r3, #0]
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80095d2:	687a      	ldr	r2, [r7, #4]
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	441a      	add	r2, r3
 80095dc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80095de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	881b      	ldrh	r3, [r3, #0]
 80095fe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009600:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009606:	2b00      	cmp	r3, #0
 8009608:	d01b      	beq.n	8009642 <USB_ActivateEndpoint+0x57a>
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	781b      	ldrb	r3, [r3, #0]
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	881b      	ldrh	r3, [r3, #0]
 8009616:	b29b      	uxth	r3, r3
 8009618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800961c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009620:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	683b      	ldr	r3, [r7, #0]
 8009626:	781b      	ldrb	r3, [r3, #0]
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	441a      	add	r2, r3
 800962c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800962e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800963a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800963e:	b29b      	uxth	r3, r3
 8009640:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	781b      	ldrb	r3, [r3, #0]
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	881b      	ldrh	r3, [r3, #0]
 800964e:	b29b      	uxth	r3, r3
 8009650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009658:	873b      	strh	r3, [r7, #56]	; 0x38
 800965a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800965c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009660:	873b      	strh	r3, [r7, #56]	; 0x38
 8009662:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009664:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009668:	873b      	strh	r3, [r7, #56]	; 0x38
 800966a:	687a      	ldr	r2, [r7, #4]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	441a      	add	r2, r3
 8009674:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009676:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800967a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800967e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009686:	b29b      	uxth	r3, r3
 8009688:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800968a:	687a      	ldr	r2, [r7, #4]
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	781b      	ldrb	r3, [r3, #0]
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4413      	add	r3, r2
 8009694:	881b      	ldrh	r3, [r3, #0]
 8009696:	b29b      	uxth	r3, r3
 8009698:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800969c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096a0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	441a      	add	r2, r3
 80096ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80096ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096be:	b29b      	uxth	r3, r3
 80096c0:	8013      	strh	r3, [r2, #0]
 80096c2:	e0bc      	b.n	800983e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096c4:	687a      	ldr	r2, [r7, #4]
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	4413      	add	r3, r2
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80096d4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80096d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01d      	beq.n	800971c <USB_ActivateEndpoint+0x654>
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	781b      	ldrb	r3, [r3, #0]
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	881b      	ldrh	r3, [r3, #0]
 80096ec:	b29b      	uxth	r3, r3
 80096ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80096f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	441a      	add	r2, r3
 8009704:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009708:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800970c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009710:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009714:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009718:	b29b      	uxth	r3, r3
 800971a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800971c:	687a      	ldr	r2, [r7, #4]
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	881b      	ldrh	r3, [r3, #0]
 8009728:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800972c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009734:	2b00      	cmp	r3, #0
 8009736:	d01d      	beq.n	8009774 <USB_ActivateEndpoint+0x6ac>
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	4413      	add	r3, r2
 8009742:	881b      	ldrh	r3, [r3, #0]
 8009744:	b29b      	uxth	r3, r3
 8009746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800974a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800974e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	441a      	add	r2, r3
 800975c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009760:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009764:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009768:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800976c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009770:	b29b      	uxth	r3, r3
 8009772:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	78db      	ldrb	r3, [r3, #3]
 8009778:	2b01      	cmp	r3, #1
 800977a:	d024      	beq.n	80097c6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800977c:	687a      	ldr	r2, [r7, #4]
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	4413      	add	r3, r2
 8009786:	881b      	ldrh	r3, [r3, #0]
 8009788:	b29b      	uxth	r3, r3
 800978a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800978e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009792:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009796:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800979a:	f083 0320 	eor.w	r3, r3, #32
 800979e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	441a      	add	r2, r3
 80097ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80097b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097c0:	b29b      	uxth	r3, r3
 80097c2:	8013      	strh	r3, [r2, #0]
 80097c4:	e01d      	b.n	8009802 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	009b      	lsls	r3, r3, #2
 80097ce:	4413      	add	r3, r2
 80097d0:	881b      	ldrh	r3, [r3, #0]
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097dc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	441a      	add	r2, r3
 80097ea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80097ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097fe:	b29b      	uxth	r3, r3
 8009800:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	881b      	ldrh	r3, [r3, #0]
 800980e:	b29b      	uxth	r3, r3
 8009810:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009814:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009818:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	781b      	ldrb	r3, [r3, #0]
 8009822:	009b      	lsls	r3, r3, #2
 8009824:	441a      	add	r2, r3
 8009826:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800982a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800982e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800983a:	b29b      	uxth	r3, r3
 800983c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800983e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8009842:	4618      	mov	r0, r3
 8009844:	3774      	adds	r7, #116	; 0x74
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr
 800984e:	bf00      	nop

08009850 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009850:	b480      	push	{r7}
 8009852:	b08d      	sub	sp, #52	; 0x34
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	7b1b      	ldrb	r3, [r3, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	f040 808e 	bne.w	8009980 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	785b      	ldrb	r3, [r3, #1]
 8009868:	2b00      	cmp	r3, #0
 800986a:	d044      	beq.n	80098f6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800986c:	687a      	ldr	r2, [r7, #4]
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	781b      	ldrb	r3, [r3, #0]
 8009872:	009b      	lsls	r3, r3, #2
 8009874:	4413      	add	r3, r2
 8009876:	881b      	ldrh	r3, [r3, #0]
 8009878:	81bb      	strh	r3, [r7, #12]
 800987a:	89bb      	ldrh	r3, [r7, #12]
 800987c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009880:	2b00      	cmp	r3, #0
 8009882:	d01b      	beq.n	80098bc <USB_DeactivateEndpoint+0x6c>
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	881b      	ldrh	r3, [r3, #0]
 8009890:	b29b      	uxth	r3, r3
 8009892:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009896:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800989a:	817b      	strh	r3, [r7, #10]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	441a      	add	r2, r3
 80098a6:	897b      	ldrh	r3, [r7, #10]
 80098a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80098bc:	687a      	ldr	r2, [r7, #4]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	881b      	ldrh	r3, [r3, #0]
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098d2:	813b      	strh	r3, [r7, #8]
 80098d4:	687a      	ldr	r2, [r7, #4]
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	781b      	ldrb	r3, [r3, #0]
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	441a      	add	r2, r3
 80098de:	893b      	ldrh	r3, [r7, #8]
 80098e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	8013      	strh	r3, [r2, #0]
 80098f4:	e192      	b.n	8009c1c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80098f6:	687a      	ldr	r2, [r7, #4]
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	4413      	add	r3, r2
 8009900:	881b      	ldrh	r3, [r3, #0]
 8009902:	827b      	strh	r3, [r7, #18]
 8009904:	8a7b      	ldrh	r3, [r7, #18]
 8009906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800990a:	2b00      	cmp	r3, #0
 800990c:	d01b      	beq.n	8009946 <USB_DeactivateEndpoint+0xf6>
 800990e:	687a      	ldr	r2, [r7, #4]
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	4413      	add	r3, r2
 8009918:	881b      	ldrh	r3, [r3, #0]
 800991a:	b29b      	uxth	r3, r3
 800991c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009924:	823b      	strh	r3, [r7, #16]
 8009926:	687a      	ldr	r2, [r7, #4]
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	441a      	add	r2, r3
 8009930:	8a3b      	ldrh	r3, [r7, #16]
 8009932:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009936:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800993a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800993e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009942:	b29b      	uxth	r3, r3
 8009944:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	4413      	add	r3, r2
 8009950:	881b      	ldrh	r3, [r3, #0]
 8009952:	b29b      	uxth	r3, r3
 8009954:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009958:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800995c:	81fb      	strh	r3, [r7, #14]
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	781b      	ldrb	r3, [r3, #0]
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	441a      	add	r2, r3
 8009968:	89fb      	ldrh	r3, [r7, #14]
 800996a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800996e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009972:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009976:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800997a:	b29b      	uxth	r3, r3
 800997c:	8013      	strh	r3, [r2, #0]
 800997e:	e14d      	b.n	8009c1c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	785b      	ldrb	r3, [r3, #1]
 8009984:	2b00      	cmp	r3, #0
 8009986:	f040 80a5 	bne.w	8009ad4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	881b      	ldrh	r3, [r3, #0]
 8009996:	843b      	strh	r3, [r7, #32]
 8009998:	8c3b      	ldrh	r3, [r7, #32]
 800999a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d01b      	beq.n	80099da <USB_DeactivateEndpoint+0x18a>
 80099a2:	687a      	ldr	r2, [r7, #4]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	781b      	ldrb	r3, [r3, #0]
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	881b      	ldrh	r3, [r3, #0]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099b8:	83fb      	strh	r3, [r7, #30]
 80099ba:	687a      	ldr	r2, [r7, #4]
 80099bc:	683b      	ldr	r3, [r7, #0]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	009b      	lsls	r3, r3, #2
 80099c2:	441a      	add	r2, r3
 80099c4:	8bfb      	ldrh	r3, [r7, #30]
 80099c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	4413      	add	r3, r2
 80099e4:	881b      	ldrh	r3, [r3, #0]
 80099e6:	83bb      	strh	r3, [r7, #28]
 80099e8:	8bbb      	ldrh	r3, [r7, #28]
 80099ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d01b      	beq.n	8009a2a <USB_DeactivateEndpoint+0x1da>
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	881b      	ldrh	r3, [r3, #0]
 80099fe:	b29b      	uxth	r3, r3
 8009a00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a08:	837b      	strh	r3, [r7, #26]
 8009a0a:	687a      	ldr	r2, [r7, #4]
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	441a      	add	r2, r3
 8009a14:	8b7b      	ldrh	r3, [r7, #26]
 8009a16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a22:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009a2a:	687a      	ldr	r2, [r7, #4]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	b29b      	uxth	r3, r3
 8009a38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a40:	833b      	strh	r3, [r7, #24]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	441a      	add	r2, r3
 8009a4c:	8b3b      	ldrh	r3, [r7, #24]
 8009a4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	781b      	ldrb	r3, [r3, #0]
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	881b      	ldrh	r3, [r3, #0]
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a78:	82fb      	strh	r3, [r7, #22]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	441a      	add	r2, r3
 8009a84:	8afb      	ldrh	r3, [r7, #22]
 8009a86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a9a:	687a      	ldr	r2, [r7, #4]
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	781b      	ldrb	r3, [r3, #0]
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	881b      	ldrh	r3, [r3, #0]
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ab0:	82bb      	strh	r3, [r7, #20]
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	441a      	add	r2, r3
 8009abc:	8abb      	ldrh	r3, [r7, #20]
 8009abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ac6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ace:	b29b      	uxth	r3, r3
 8009ad0:	8013      	strh	r3, [r2, #0]
 8009ad2:	e0a3      	b.n	8009c1c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	4413      	add	r3, r2
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009ae2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d01b      	beq.n	8009b24 <USB_DeactivateEndpoint+0x2d4>
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	009b      	lsls	r3, r3, #2
 8009af4:	4413      	add	r3, r2
 8009af6:	881b      	ldrh	r3, [r3, #0]
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b02:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	441a      	add	r2, r3
 8009b0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009b10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009b1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b20:	b29b      	uxth	r3, r3
 8009b22:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b24:	687a      	ldr	r2, [r7, #4]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	009b      	lsls	r3, r3, #2
 8009b2c:	4413      	add	r3, r2
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009b32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01b      	beq.n	8009b74 <USB_DeactivateEndpoint+0x324>
 8009b3c:	687a      	ldr	r2, [r7, #4]
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	4413      	add	r3, r2
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b52:	853b      	strh	r3, [r7, #40]	; 0x28
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	441a      	add	r2, r3
 8009b5e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	881b      	ldrh	r3, [r3, #0]
 8009b80:	b29b      	uxth	r3, r3
 8009b82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b8a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009b8c:	687a      	ldr	r2, [r7, #4]
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	009b      	lsls	r3, r3, #2
 8009b94:	441a      	add	r2, r3
 8009b96:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009b98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ba0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009bac:	687a      	ldr	r2, [r7, #4]
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	881b      	ldrh	r3, [r3, #0]
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bc2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	441a      	add	r2, r3
 8009bce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009be0:	b29b      	uxth	r3, r3
 8009be2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009be4:	687a      	ldr	r2, [r7, #4]
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	881b      	ldrh	r3, [r3, #0]
 8009bf0:	b29b      	uxth	r3, r3
 8009bf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bfa:	847b      	strh	r3, [r7, #34]	; 0x22
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	009b      	lsls	r3, r3, #2
 8009c04:	441a      	add	r2, r3
 8009c06:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3734      	adds	r7, #52	; 0x34
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b0c2      	sub	sp, #264	; 0x108
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c38:	6018      	str	r0, [r3, #0]
 8009c3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c42:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	785b      	ldrb	r3, [r3, #1]
 8009c50:	2b01      	cmp	r3, #1
 8009c52:	f040 86b7 	bne.w	800a9c4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009c56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	699a      	ldr	r2, [r3, #24]
 8009c62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d908      	bls.n	8009c84 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009c82:	e007      	b.n	8009c94 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009c84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	699b      	ldr	r3, [r3, #24]
 8009c90:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009c94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	7b1b      	ldrb	r3, [r3, #12]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d13a      	bne.n	8009d1a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ca8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	6959      	ldr	r1, [r3, #20]
 8009cb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	88da      	ldrh	r2, [r3, #6]
 8009cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009cc6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009cca:	6800      	ldr	r0, [r0, #0]
 8009ccc:	f001 fc98 	bl	800b600 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cd4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	613b      	str	r3, [r7, #16]
 8009cdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ce0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009cea:	b29b      	uxth	r3, r3
 8009cec:	461a      	mov	r2, r3
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	613b      	str	r3, [r7, #16]
 8009cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	00da      	lsls	r2, r3, #3
 8009d02:	693b      	ldr	r3, [r7, #16]
 8009d04:	4413      	add	r3, r2
 8009d06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d10:	b29a      	uxth	r2, r3
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	801a      	strh	r2, [r3, #0]
 8009d16:	f000 be1f 	b.w	800a958 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	78db      	ldrb	r3, [r3, #3]
 8009d26:	2b02      	cmp	r3, #2
 8009d28:	f040 8462 	bne.w	800a5f0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009d2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	6a1a      	ldr	r2, [r3, #32]
 8009d38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	691b      	ldr	r3, [r3, #16]
 8009d44:	429a      	cmp	r2, r3
 8009d46:	f240 83df 	bls.w	800a508 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009d4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	781b      	ldrb	r3, [r3, #0]
 8009d60:	009b      	lsls	r3, r3, #2
 8009d62:	4413      	add	r3, r2
 8009d64:	881b      	ldrh	r3, [r3, #0]
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d7c:	681a      	ldr	r2, [r3, #0]
 8009d7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	441a      	add	r2, r3
 8009d8e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009d92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d9a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009d9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009da6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009daa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	6a1a      	ldr	r2, [r3, #32]
 8009db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009db6:	1ad2      	subs	r2, r2, r3
 8009db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009dc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dcc:	681a      	ldr	r2, [r3, #0]
 8009dce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	f000 81c7 	beq.w	800a17a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009df0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	633b      	str	r3, [r7, #48]	; 0x30
 8009df8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	785b      	ldrb	r3, [r3, #1]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d177      	bne.n	8009ef8 <USB_EPStartXfer+0x2ce>
 8009e08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	461a      	mov	r2, r3
 8009e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e28:	4413      	add	r3, r2
 8009e2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	781b      	ldrb	r3, [r3, #0]
 8009e38:	00da      	lsls	r2, r3, #3
 8009e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3c:	4413      	add	r3, r2
 8009e3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009e42:	627b      	str	r3, [r7, #36]	; 0x24
 8009e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e46:	881b      	ldrh	r3, [r3, #0]
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e4e:	b29a      	uxth	r2, r3
 8009e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e52:	801a      	strh	r2, [r3, #0]
 8009e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e58:	2b3e      	cmp	r3, #62	; 0x3e
 8009e5a:	d921      	bls.n	8009ea0 <USB_EPStartXfer+0x276>
 8009e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e60:	095b      	lsrs	r3, r3, #5
 8009e62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e6a:	f003 031f 	and.w	r3, r3, #31
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d104      	bne.n	8009e7c <USB_EPStartXfer+0x252>
 8009e72:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009e76:	3b01      	subs	r3, #1
 8009e78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e7e:	881b      	ldrh	r3, [r3, #0]
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	029b      	lsls	r3, r3, #10
 8009e8a:	b29b      	uxth	r3, r3
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	b29b      	uxth	r3, r3
 8009e90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e98:	b29a      	uxth	r2, r3
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	801a      	strh	r2, [r3, #0]
 8009e9e:	e050      	b.n	8009f42 <USB_EPStartXfer+0x318>
 8009ea0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d10a      	bne.n	8009ebe <USB_EPStartXfer+0x294>
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	881b      	ldrh	r3, [r3, #0]
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009eb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eba:	801a      	strh	r2, [r3, #0]
 8009ebc:	e041      	b.n	8009f42 <USB_EPStartXfer+0x318>
 8009ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ec2:	085b      	lsrs	r3, r3, #1
 8009ec4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ecc:	f003 0301 	and.w	r3, r3, #1
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d004      	beq.n	8009ede <USB_EPStartXfer+0x2b4>
 8009ed4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009ed8:	3301      	adds	r3, #1
 8009eda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	029b      	lsls	r3, r3, #10
 8009eec:	b29b      	uxth	r3, r3
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	b29a      	uxth	r2, r3
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef4:	801a      	strh	r2, [r3, #0]
 8009ef6:	e024      	b.n	8009f42 <USB_EPStartXfer+0x318>
 8009ef8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009efc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	785b      	ldrb	r3, [r3, #1]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d11c      	bne.n	8009f42 <USB_EPStartXfer+0x318>
 8009f08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f0c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f16:	b29b      	uxth	r3, r3
 8009f18:	461a      	mov	r2, r3
 8009f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f1c:	4413      	add	r3, r2
 8009f1e:	633b      	str	r3, [r7, #48]	; 0x30
 8009f20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	00da      	lsls	r2, r3, #3
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f30:	4413      	add	r3, r2
 8009f32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009f36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f40:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009f42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	895b      	ldrh	r3, [r3, #10]
 8009f4e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6959      	ldr	r1, [r3, #20]
 8009f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f62:	b29b      	uxth	r3, r3
 8009f64:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009f68:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009f6c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009f70:	6800      	ldr	r0, [r0, #0]
 8009f72:	f001 fb45 	bl	800b600 <USB_WritePMA>
            ep->xfer_buff += len;
 8009f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	695a      	ldr	r2, [r3, #20]
 8009f82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f86:	441a      	add	r2, r3
 8009f88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6a1a      	ldr	r2, [r3, #32]
 8009fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d90f      	bls.n	8009fd0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009fb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	6a1a      	ldr	r2, [r3, #32]
 8009fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fc0:	1ad2      	subs	r2, r2, r3
 8009fc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	621a      	str	r2, [r3, #32]
 8009fce:	e00e      	b.n	8009fee <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009fd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	6a1b      	ldr	r3, [r3, #32]
 8009fdc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009fe0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	2200      	movs	r2, #0
 8009fec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009fee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	785b      	ldrb	r3, [r3, #1]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d177      	bne.n	800a0ee <USB_EPStartXfer+0x4c4>
 8009ffe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	61bb      	str	r3, [r7, #24]
 800a00a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a00e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a018:	b29b      	uxth	r3, r3
 800a01a:	461a      	mov	r2, r3
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	4413      	add	r3, r2
 800a020:	61bb      	str	r3, [r7, #24]
 800a022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	781b      	ldrb	r3, [r3, #0]
 800a02e:	00da      	lsls	r2, r3, #3
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	4413      	add	r3, r2
 800a034:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a038:	617b      	str	r3, [r7, #20]
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	b29b      	uxth	r3, r3
 800a040:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a044:	b29a      	uxth	r2, r3
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	801a      	strh	r2, [r3, #0]
 800a04a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a04e:	2b3e      	cmp	r3, #62	; 0x3e
 800a050:	d921      	bls.n	800a096 <USB_EPStartXfer+0x46c>
 800a052:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a056:	095b      	lsrs	r3, r3, #5
 800a058:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a060:	f003 031f 	and.w	r3, r3, #31
 800a064:	2b00      	cmp	r3, #0
 800a066:	d104      	bne.n	800a072 <USB_EPStartXfer+0x448>
 800a068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a06c:	3b01      	subs	r3, #1
 800a06e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	881b      	ldrh	r3, [r3, #0]
 800a076:	b29a      	uxth	r2, r3
 800a078:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	029b      	lsls	r3, r3, #10
 800a080:	b29b      	uxth	r3, r3
 800a082:	4313      	orrs	r3, r2
 800a084:	b29b      	uxth	r3, r3
 800a086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a08a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a08e:	b29a      	uxth	r2, r3
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	801a      	strh	r2, [r3, #0]
 800a094:	e056      	b.n	800a144 <USB_EPStartXfer+0x51a>
 800a096:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10a      	bne.n	800a0b4 <USB_EPStartXfer+0x48a>
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	881b      	ldrh	r3, [r3, #0]
 800a0a2:	b29b      	uxth	r3, r3
 800a0a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	801a      	strh	r2, [r3, #0]
 800a0b2:	e047      	b.n	800a144 <USB_EPStartXfer+0x51a>
 800a0b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0b8:	085b      	lsrs	r3, r3, #1
 800a0ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c2:	f003 0301 	and.w	r3, r3, #1
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d004      	beq.n	800a0d4 <USB_EPStartXfer+0x4aa>
 800a0ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	881b      	ldrh	r3, [r3, #0]
 800a0d8:	b29a      	uxth	r2, r3
 800a0da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	029b      	lsls	r3, r3, #10
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	b29a      	uxth	r2, r3
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	801a      	strh	r2, [r3, #0]
 800a0ec:	e02a      	b.n	800a144 <USB_EPStartXfer+0x51a>
 800a0ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	785b      	ldrb	r3, [r3, #1]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d122      	bne.n	800a144 <USB_EPStartXfer+0x51a>
 800a0fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a102:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	623b      	str	r3, [r7, #32]
 800a10a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a10e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a118:	b29b      	uxth	r3, r3
 800a11a:	461a      	mov	r2, r3
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	4413      	add	r3, r2
 800a120:	623b      	str	r3, [r7, #32]
 800a122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	781b      	ldrb	r3, [r3, #0]
 800a12e:	00da      	lsls	r2, r3, #3
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	4413      	add	r3, r2
 800a134:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a138:	61fb      	str	r3, [r7, #28]
 800a13a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a13e:	b29a      	uxth	r2, r3
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	891b      	ldrh	r3, [r3, #8]
 800a150:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	6959      	ldr	r1, [r3, #20]
 800a160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a164:	b29b      	uxth	r3, r3
 800a166:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a16a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a16e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a172:	6800      	ldr	r0, [r0, #0]
 800a174:	f001 fa44 	bl	800b600 <USB_WritePMA>
 800a178:	e3ee      	b.n	800a958 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a17a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a17e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	785b      	ldrb	r3, [r3, #1]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d177      	bne.n	800a27a <USB_EPStartXfer+0x650>
 800a18a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a18e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	64bb      	str	r3, [r7, #72]	; 0x48
 800a196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a19a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1aa:	4413      	add	r3, r2
 800a1ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800a1ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	781b      	ldrb	r3, [r3, #0]
 800a1ba:	00da      	lsls	r2, r3, #3
 800a1bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a1be:	4413      	add	r3, r2
 800a1c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a1c4:	647b      	str	r3, [r7, #68]	; 0x44
 800a1c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	b29b      	uxth	r3, r3
 800a1cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1d0:	b29a      	uxth	r2, r3
 800a1d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a1d4:	801a      	strh	r2, [r3, #0]
 800a1d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1da:	2b3e      	cmp	r3, #62	; 0x3e
 800a1dc:	d921      	bls.n	800a222 <USB_EPStartXfer+0x5f8>
 800a1de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1e2:	095b      	lsrs	r3, r3, #5
 800a1e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a1e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ec:	f003 031f 	and.w	r3, r3, #31
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d104      	bne.n	800a1fe <USB_EPStartXfer+0x5d4>
 800a1f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a1fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a200:	881b      	ldrh	r3, [r3, #0]
 800a202:	b29a      	uxth	r2, r3
 800a204:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a208:	b29b      	uxth	r3, r3
 800a20a:	029b      	lsls	r3, r3, #10
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	4313      	orrs	r3, r2
 800a210:	b29b      	uxth	r3, r3
 800a212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a21a:	b29a      	uxth	r2, r3
 800a21c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a21e:	801a      	strh	r2, [r3, #0]
 800a220:	e056      	b.n	800a2d0 <USB_EPStartXfer+0x6a6>
 800a222:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a226:	2b00      	cmp	r3, #0
 800a228:	d10a      	bne.n	800a240 <USB_EPStartXfer+0x616>
 800a22a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a22c:	881b      	ldrh	r3, [r3, #0]
 800a22e:	b29b      	uxth	r3, r3
 800a230:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a234:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a238:	b29a      	uxth	r2, r3
 800a23a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a23c:	801a      	strh	r2, [r3, #0]
 800a23e:	e047      	b.n	800a2d0 <USB_EPStartXfer+0x6a6>
 800a240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a244:	085b      	lsrs	r3, r3, #1
 800a246:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	2b00      	cmp	r3, #0
 800a254:	d004      	beq.n	800a260 <USB_EPStartXfer+0x636>
 800a256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a25a:	3301      	adds	r3, #1
 800a25c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a262:	881b      	ldrh	r3, [r3, #0]
 800a264:	b29a      	uxth	r2, r3
 800a266:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	029b      	lsls	r3, r3, #10
 800a26e:	b29b      	uxth	r3, r3
 800a270:	4313      	orrs	r3, r2
 800a272:	b29a      	uxth	r2, r3
 800a274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a276:	801a      	strh	r2, [r3, #0]
 800a278:	e02a      	b.n	800a2d0 <USB_EPStartXfer+0x6a6>
 800a27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a27e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	785b      	ldrb	r3, [r3, #1]
 800a286:	2b01      	cmp	r3, #1
 800a288:	d122      	bne.n	800a2d0 <USB_EPStartXfer+0x6a6>
 800a28a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a28e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	653b      	str	r3, [r7, #80]	; 0x50
 800a296:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	461a      	mov	r2, r3
 800a2a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2aa:	4413      	add	r3, r2
 800a2ac:	653b      	str	r3, [r7, #80]	; 0x50
 800a2ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	00da      	lsls	r2, r3, #3
 800a2bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2be:	4413      	add	r3, r2
 800a2c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a2c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a2d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	891b      	ldrh	r3, [r3, #8]
 800a2dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a2e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6959      	ldr	r1, [r3, #20]
 800a2ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a2f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a2fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a2fe:	6800      	ldr	r0, [r0, #0]
 800a300:	f001 f97e 	bl	800b600 <USB_WritePMA>
            ep->xfer_buff += len;
 800a304:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a308:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	695a      	ldr	r2, [r3, #20]
 800a310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a314:	441a      	add	r2, r3
 800a316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a31a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	6a1a      	ldr	r2, [r3, #32]
 800a32e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d90f      	bls.n	800a35e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a33e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	6a1a      	ldr	r2, [r3, #32]
 800a34a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a34e:	1ad2      	subs	r2, r2, r3
 800a350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a354:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	621a      	str	r2, [r3, #32]
 800a35c:	e00e      	b.n	800a37c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a35e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a36e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a372:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2200      	movs	r2, #0
 800a37a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a37c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a380:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	643b      	str	r3, [r7, #64]	; 0x40
 800a388:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a38c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	785b      	ldrb	r3, [r3, #1]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d177      	bne.n	800a488 <USB_EPStartXfer+0x85e>
 800a398:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a39c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	461a      	mov	r2, r3
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b8:	4413      	add	r3, r2
 800a3ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800a3bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	781b      	ldrb	r3, [r3, #0]
 800a3c8:	00da      	lsls	r2, r3, #3
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	4413      	add	r3, r2
 800a3ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a3d2:	637b      	str	r3, [r7, #52]	; 0x34
 800a3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d6:	881b      	ldrh	r3, [r3, #0]
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e2:	801a      	strh	r2, [r3, #0]
 800a3e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3e8:	2b3e      	cmp	r3, #62	; 0x3e
 800a3ea:	d921      	bls.n	800a430 <USB_EPStartXfer+0x806>
 800a3ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3f0:	095b      	lsrs	r3, r3, #5
 800a3f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a3f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a3fa:	f003 031f 	and.w	r3, r3, #31
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d104      	bne.n	800a40c <USB_EPStartXfer+0x7e2>
 800a402:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a406:	3b01      	subs	r3, #1
 800a408:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a40e:	881b      	ldrh	r3, [r3, #0]
 800a410:	b29a      	uxth	r2, r3
 800a412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a416:	b29b      	uxth	r3, r3
 800a418:	029b      	lsls	r3, r3, #10
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	4313      	orrs	r3, r2
 800a41e:	b29b      	uxth	r3, r3
 800a420:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a424:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a428:	b29a      	uxth	r2, r3
 800a42a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a42c:	801a      	strh	r2, [r3, #0]
 800a42e:	e050      	b.n	800a4d2 <USB_EPStartXfer+0x8a8>
 800a430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a434:	2b00      	cmp	r3, #0
 800a436:	d10a      	bne.n	800a44e <USB_EPStartXfer+0x824>
 800a438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a43a:	881b      	ldrh	r3, [r3, #0]
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a442:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a446:	b29a      	uxth	r2, r3
 800a448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a44a:	801a      	strh	r2, [r3, #0]
 800a44c:	e041      	b.n	800a4d2 <USB_EPStartXfer+0x8a8>
 800a44e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a452:	085b      	lsrs	r3, r3, #1
 800a454:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a45c:	f003 0301 	and.w	r3, r3, #1
 800a460:	2b00      	cmp	r3, #0
 800a462:	d004      	beq.n	800a46e <USB_EPStartXfer+0x844>
 800a464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a468:	3301      	adds	r3, #1
 800a46a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a46e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a470:	881b      	ldrh	r3, [r3, #0]
 800a472:	b29a      	uxth	r2, r3
 800a474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a478:	b29b      	uxth	r3, r3
 800a47a:	029b      	lsls	r3, r3, #10
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	4313      	orrs	r3, r2
 800a480:	b29a      	uxth	r2, r3
 800a482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a484:	801a      	strh	r2, [r3, #0]
 800a486:	e024      	b.n	800a4d2 <USB_EPStartXfer+0x8a8>
 800a488:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a48c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	785b      	ldrb	r3, [r3, #1]
 800a494:	2b01      	cmp	r3, #1
 800a496:	d11c      	bne.n	800a4d2 <USB_EPStartXfer+0x8a8>
 800a498:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a49c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4ac:	4413      	add	r3, r2
 800a4ae:	643b      	str	r3, [r7, #64]	; 0x40
 800a4b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	00da      	lsls	r2, r3, #3
 800a4be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4d0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	895b      	ldrh	r3, [r3, #10]
 800a4de:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	6959      	ldr	r1, [r3, #20]
 800a4ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4f2:	b29b      	uxth	r3, r3
 800a4f4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a4f8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a4fc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a500:	6800      	ldr	r0, [r0, #0]
 800a502:	f001 f87d 	bl	800b600 <USB_WritePMA>
 800a506:	e227      	b.n	800a958 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a50c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6a1b      	ldr	r3, [r3, #32]
 800a514:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a518:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a51c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a520:	681a      	ldr	r2, [r3, #0]
 800a522:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a526:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	781b      	ldrb	r3, [r3, #0]
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4413      	add	r3, r2
 800a532:	881b      	ldrh	r3, [r3, #0]
 800a534:	b29b      	uxth	r3, r3
 800a536:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a53a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a53e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a546:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	009b      	lsls	r3, r3, #2
 800a55a:	441a      	add	r2, r3
 800a55c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a560:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a564:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a568:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a56c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a570:	b29b      	uxth	r3, r3
 800a572:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a584:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a58e:	b29b      	uxth	r3, r3
 800a590:	461a      	mov	r2, r3
 800a592:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a594:	4413      	add	r3, r2
 800a596:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a59c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	781b      	ldrb	r3, [r3, #0]
 800a5a4:	00da      	lsls	r2, r3, #3
 800a5a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a5a8:	4413      	add	r3, r2
 800a5aa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a5ae:	65bb      	str	r3, [r7, #88]	; 0x58
 800a5b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5b4:	b29a      	uxth	r2, r3
 800a5b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a5b8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a5ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	891b      	ldrh	r3, [r3, #8]
 800a5c6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a5ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	6959      	ldr	r1, [r3, #20]
 800a5d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5da:	b29b      	uxth	r3, r3
 800a5dc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a5e0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a5e4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a5e8:	6800      	ldr	r0, [r0, #0]
 800a5ea:	f001 f809 	bl	800b600 <USB_WritePMA>
 800a5ee:	e1b3      	b.n	800a958 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a5f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	6a1a      	ldr	r2, [r3, #32]
 800a5fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a600:	1ad2      	subs	r2, r2, r3
 800a602:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a606:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a60e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a612:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a61c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	781b      	ldrb	r3, [r3, #0]
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	881b      	ldrh	r3, [r3, #0]
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a630:	2b00      	cmp	r3, #0
 800a632:	f000 80c6 	beq.w	800a7c2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	673b      	str	r3, [r7, #112]	; 0x70
 800a642:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a646:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	785b      	ldrb	r3, [r3, #1]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d177      	bne.n	800a742 <USB_EPStartXfer+0xb18>
 800a652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a65e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a662:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a66c:	b29b      	uxth	r3, r3
 800a66e:	461a      	mov	r2, r3
 800a670:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a672:	4413      	add	r3, r2
 800a674:	66bb      	str	r3, [r7, #104]	; 0x68
 800a676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a67a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	00da      	lsls	r2, r3, #3
 800a684:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a686:	4413      	add	r3, r2
 800a688:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a68c:	667b      	str	r3, [r7, #100]	; 0x64
 800a68e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a690:	881b      	ldrh	r3, [r3, #0]
 800a692:	b29b      	uxth	r3, r3
 800a694:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a698:	b29a      	uxth	r2, r3
 800a69a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a69c:	801a      	strh	r2, [r3, #0]
 800a69e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6a2:	2b3e      	cmp	r3, #62	; 0x3e
 800a6a4:	d921      	bls.n	800a6ea <USB_EPStartXfer+0xac0>
 800a6a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6aa:	095b      	lsrs	r3, r3, #5
 800a6ac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a6b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6b4:	f003 031f 	and.w	r3, r3, #31
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d104      	bne.n	800a6c6 <USB_EPStartXfer+0xa9c>
 800a6bc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a6c0:	3b01      	subs	r3, #1
 800a6c2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a6c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6c8:	881b      	ldrh	r3, [r3, #0]
 800a6ca:	b29a      	uxth	r2, r3
 800a6cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a6d0:	b29b      	uxth	r3, r3
 800a6d2:	029b      	lsls	r3, r3, #10
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	4313      	orrs	r3, r2
 800a6d8:	b29b      	uxth	r3, r3
 800a6da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6e6:	801a      	strh	r2, [r3, #0]
 800a6e8:	e050      	b.n	800a78c <USB_EPStartXfer+0xb62>
 800a6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10a      	bne.n	800a708 <USB_EPStartXfer+0xade>
 800a6f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a6f4:	881b      	ldrh	r3, [r3, #0]
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a700:	b29a      	uxth	r2, r3
 800a702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a704:	801a      	strh	r2, [r3, #0]
 800a706:	e041      	b.n	800a78c <USB_EPStartXfer+0xb62>
 800a708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a70c:	085b      	lsrs	r3, r3, #1
 800a70e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a716:	f003 0301 	and.w	r3, r3, #1
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d004      	beq.n	800a728 <USB_EPStartXfer+0xafe>
 800a71e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a722:	3301      	adds	r3, #1
 800a724:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a72a:	881b      	ldrh	r3, [r3, #0]
 800a72c:	b29a      	uxth	r2, r3
 800a72e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a732:	b29b      	uxth	r3, r3
 800a734:	029b      	lsls	r3, r3, #10
 800a736:	b29b      	uxth	r3, r3
 800a738:	4313      	orrs	r3, r2
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a73e:	801a      	strh	r2, [r3, #0]
 800a740:	e024      	b.n	800a78c <USB_EPStartXfer+0xb62>
 800a742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a746:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	785b      	ldrb	r3, [r3, #1]
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d11c      	bne.n	800a78c <USB_EPStartXfer+0xb62>
 800a752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a760:	b29b      	uxth	r3, r3
 800a762:	461a      	mov	r2, r3
 800a764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a766:	4413      	add	r3, r2
 800a768:	673b      	str	r3, [r7, #112]	; 0x70
 800a76a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a76e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	781b      	ldrb	r3, [r3, #0]
 800a776:	00da      	lsls	r2, r3, #3
 800a778:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a77a:	4413      	add	r3, r2
 800a77c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a780:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a782:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a786:	b29a      	uxth	r2, r3
 800a788:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a78a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	895b      	ldrh	r3, [r3, #10]
 800a798:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a79c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	6959      	ldr	r1, [r3, #20]
 800a7a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a7b2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a7b6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a7ba:	6800      	ldr	r0, [r0, #0]
 800a7bc:	f000 ff20 	bl	800b600 <USB_WritePMA>
 800a7c0:	e0ca      	b.n	800a958 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a7c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	785b      	ldrb	r3, [r3, #1]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d177      	bne.n	800a8c2 <USB_EPStartXfer+0xc98>
 800a7d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a7de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	461a      	mov	r2, r3
 800a7f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a7f2:	4413      	add	r3, r2
 800a7f4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a7f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	00da      	lsls	r2, r3, #3
 800a804:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a806:	4413      	add	r3, r2
 800a808:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a80c:	67bb      	str	r3, [r7, #120]	; 0x78
 800a80e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a810:	881b      	ldrh	r3, [r3, #0]
 800a812:	b29b      	uxth	r3, r3
 800a814:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a818:	b29a      	uxth	r2, r3
 800a81a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a81c:	801a      	strh	r2, [r3, #0]
 800a81e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a822:	2b3e      	cmp	r3, #62	; 0x3e
 800a824:	d921      	bls.n	800a86a <USB_EPStartXfer+0xc40>
 800a826:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a82a:	095b      	lsrs	r3, r3, #5
 800a82c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a830:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a834:	f003 031f 	and.w	r3, r3, #31
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d104      	bne.n	800a846 <USB_EPStartXfer+0xc1c>
 800a83c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a840:	3b01      	subs	r3, #1
 800a842:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a846:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a850:	b29b      	uxth	r3, r3
 800a852:	029b      	lsls	r3, r3, #10
 800a854:	b29b      	uxth	r3, r3
 800a856:	4313      	orrs	r3, r2
 800a858:	b29b      	uxth	r3, r3
 800a85a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a85e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a862:	b29a      	uxth	r2, r3
 800a864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a866:	801a      	strh	r2, [r3, #0]
 800a868:	e05c      	b.n	800a924 <USB_EPStartXfer+0xcfa>
 800a86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10a      	bne.n	800a888 <USB_EPStartXfer+0xc5e>
 800a872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a874:	881b      	ldrh	r3, [r3, #0]
 800a876:	b29b      	uxth	r3, r3
 800a878:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a87c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a880:	b29a      	uxth	r2, r3
 800a882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a884:	801a      	strh	r2, [r3, #0]
 800a886:	e04d      	b.n	800a924 <USB_EPStartXfer+0xcfa>
 800a888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a88c:	085b      	lsrs	r3, r3, #1
 800a88e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a896:	f003 0301 	and.w	r3, r3, #1
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d004      	beq.n	800a8a8 <USB_EPStartXfer+0xc7e>
 800a89e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a8a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	029b      	lsls	r3, r3, #10
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8be:	801a      	strh	r2, [r3, #0]
 800a8c0:	e030      	b.n	800a924 <USB_EPStartXfer+0xcfa>
 800a8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	785b      	ldrb	r3, [r3, #1]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d128      	bne.n	800a924 <USB_EPStartXfer+0xcfa>
 800a8d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a8e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	461a      	mov	r2, r3
 800a8f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a8f6:	4413      	add	r3, r2
 800a8f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a8fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	781b      	ldrb	r3, [r3, #0]
 800a908:	00da      	lsls	r2, r3, #3
 800a90a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a90e:	4413      	add	r3, r2
 800a910:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a918:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a91c:	b29a      	uxth	r2, r3
 800a91e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a922:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a928:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	891b      	ldrh	r3, [r3, #8]
 800a930:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	6959      	ldr	r1, [r3, #20]
 800a940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a944:	b29b      	uxth	r3, r3
 800a946:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a94a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a94e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a952:	6800      	ldr	r0, [r0, #0]
 800a954:	f000 fe54 	bl	800b600 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a960:	681a      	ldr	r2, [r3, #0]
 800a962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	781b      	ldrb	r3, [r3, #0]
 800a96e:	009b      	lsls	r3, r3, #2
 800a970:	4413      	add	r3, r2
 800a972:	881b      	ldrh	r3, [r3, #0]
 800a974:	b29b      	uxth	r3, r3
 800a976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a97a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a97e:	817b      	strh	r3, [r7, #10]
 800a980:	897b      	ldrh	r3, [r7, #10]
 800a982:	f083 0310 	eor.w	r3, r3, #16
 800a986:	817b      	strh	r3, [r7, #10]
 800a988:	897b      	ldrh	r3, [r7, #10]
 800a98a:	f083 0320 	eor.w	r3, r3, #32
 800a98e:	817b      	strh	r3, [r7, #10]
 800a990:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a994:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a99e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	441a      	add	r2, r3
 800a9aa:	897b      	ldrh	r3, [r7, #10]
 800a9ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	8013      	strh	r3, [r2, #0]
 800a9c0:	f000 bcde 	b.w	800b380 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a9c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	7b1b      	ldrb	r3, [r3, #12]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f040 80bb 	bne.w	800ab4c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a9d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	699a      	ldr	r2, [r3, #24]
 800a9e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	691b      	ldr	r3, [r3, #16]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d917      	bls.n	800aa22 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a9f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	691b      	ldr	r3, [r3, #16]
 800a9fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800aa02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	699a      	ldr	r2, [r3, #24]
 800aa0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa12:	1ad2      	subs	r2, r2, r3
 800aa14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	619a      	str	r2, [r3, #24]
 800aa20:	e00e      	b.n	800aa40 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800aa22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	699b      	ldr	r3, [r3, #24]
 800aa2e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800aa32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800aa40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa5c:	b29b      	uxth	r3, r3
 800aa5e:	461a      	mov	r2, r3
 800aa60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa64:	4413      	add	r3, r2
 800aa66:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aa6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	00da      	lsls	r2, r3, #3
 800aa78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aa82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800aa86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aa98:	801a      	strh	r2, [r3, #0]
 800aa9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa9e:	2b3e      	cmp	r3, #62	; 0x3e
 800aaa0:	d924      	bls.n	800aaec <USB_EPStartXfer+0xec2>
 800aaa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaa6:	095b      	lsrs	r3, r3, #5
 800aaa8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aaac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aab0:	f003 031f 	and.w	r3, r3, #31
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d104      	bne.n	800aac2 <USB_EPStartXfer+0xe98>
 800aab8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aabc:	3b01      	subs	r3, #1
 800aabe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800aace:	b29b      	uxth	r3, r3
 800aad0:	029b      	lsls	r3, r3, #10
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	4313      	orrs	r3, r2
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aadc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aae6:	801a      	strh	r2, [r3, #0]
 800aae8:	f000 bc10 	b.w	800b30c <USB_EPStartXfer+0x16e2>
 800aaec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d10c      	bne.n	800ab0e <USB_EPStartXfer+0xee4>
 800aaf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	b29b      	uxth	r3, r3
 800aafc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab04:	b29a      	uxth	r2, r3
 800ab06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab0a:	801a      	strh	r2, [r3, #0]
 800ab0c:	e3fe      	b.n	800b30c <USB_EPStartXfer+0x16e2>
 800ab0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab12:	085b      	lsrs	r3, r3, #1
 800ab14:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab1c:	f003 0301 	and.w	r3, r3, #1
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d004      	beq.n	800ab2e <USB_EPStartXfer+0xf04>
 800ab24:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab28:	3301      	adds	r3, #1
 800ab2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ab2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800ab3a:	b29b      	uxth	r3, r3
 800ab3c:	029b      	lsls	r3, r3, #10
 800ab3e:	b29b      	uxth	r3, r3
 800ab40:	4313      	orrs	r3, r2
 800ab42:	b29a      	uxth	r2, r3
 800ab44:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ab48:	801a      	strh	r2, [r3, #0]
 800ab4a:	e3df      	b.n	800b30c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800ab4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	78db      	ldrb	r3, [r3, #3]
 800ab58:	2b02      	cmp	r3, #2
 800ab5a:	f040 8218 	bne.w	800af8e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800ab5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	785b      	ldrb	r3, [r3, #1]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	f040 809d 	bne.w	800acaa <USB_EPStartXfer+0x1080>
 800ab70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab74:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	461a      	mov	r2, r3
 800ab90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ab94:	4413      	add	r3, r2
 800ab96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	781b      	ldrb	r3, [r3, #0]
 800aba6:	00da      	lsls	r2, r3, #3
 800aba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800abac:	4413      	add	r3, r2
 800abae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800abb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800abb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800abba:	881b      	ldrh	r3, [r3, #0]
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abc2:	b29a      	uxth	r2, r3
 800abc4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800abc8:	801a      	strh	r2, [r3, #0]
 800abca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	691b      	ldr	r3, [r3, #16]
 800abd6:	2b3e      	cmp	r3, #62	; 0x3e
 800abd8:	d92b      	bls.n	800ac32 <USB_EPStartXfer+0x1008>
 800abda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	691b      	ldr	r3, [r3, #16]
 800abe6:	095b      	lsrs	r3, r3, #5
 800abe8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800abec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	691b      	ldr	r3, [r3, #16]
 800abf8:	f003 031f 	and.w	r3, r3, #31
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d104      	bne.n	800ac0a <USB_EPStartXfer+0xfe0>
 800ac00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac04:	3b01      	subs	r3, #1
 800ac06:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac0e:	881b      	ldrh	r3, [r3, #0]
 800ac10:	b29a      	uxth	r2, r3
 800ac12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac16:	b29b      	uxth	r3, r3
 800ac18:	029b      	lsls	r3, r3, #10
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac28:	b29a      	uxth	r2, r3
 800ac2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac2e:	801a      	strh	r2, [r3, #0]
 800ac30:	e070      	b.n	800ad14 <USB_EPStartXfer+0x10ea>
 800ac32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d10c      	bne.n	800ac5c <USB_EPStartXfer+0x1032>
 800ac42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac46:	881b      	ldrh	r3, [r3, #0]
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac58:	801a      	strh	r2, [r3, #0]
 800ac5a:	e05b      	b.n	800ad14 <USB_EPStartXfer+0x10ea>
 800ac5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	085b      	lsrs	r3, r3, #1
 800ac6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	f003 0301 	and.w	r3, r3, #1
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d004      	beq.n	800ac8c <USB_EPStartXfer+0x1062>
 800ac82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac86:	3301      	adds	r3, #1
 800ac88:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ac8c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	029b      	lsls	r3, r3, #10
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aca6:	801a      	strh	r2, [r3, #0]
 800aca8:	e034      	b.n	800ad14 <USB_EPStartXfer+0x10ea>
 800acaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	785b      	ldrb	r3, [r3, #1]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d12c      	bne.n	800ad14 <USB_EPStartXfer+0x10ea>
 800acba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800acc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800accc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acd6:	b29b      	uxth	r3, r3
 800acd8:	461a      	mov	r2, r3
 800acda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800acde:	4413      	add	r3, r2
 800ace0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ace4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	781b      	ldrb	r3, [r3, #0]
 800acf0:	00da      	lsls	r2, r3, #3
 800acf2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800acf6:	4413      	add	r3, r2
 800acf8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800acfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ad00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	691b      	ldr	r3, [r3, #16]
 800ad0c:	b29a      	uxth	r2, r3
 800ad0e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ad12:	801a      	strh	r2, [r3, #0]
 800ad14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ad22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	785b      	ldrb	r3, [r3, #1]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f040 809d 	bne.w	800ae6e <USB_EPStartXfer+0x1244>
 800ad34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad50:	b29b      	uxth	r3, r3
 800ad52:	461a      	mov	r2, r3
 800ad54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad58:	4413      	add	r3, r2
 800ad5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ad5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	00da      	lsls	r2, r3, #3
 800ad6c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ad70:	4413      	add	r3, r2
 800ad72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad76:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ad7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad7e:	881b      	ldrh	r3, [r3, #0]
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ad8c:	801a      	strh	r2, [r3, #0]
 800ad8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	691b      	ldr	r3, [r3, #16]
 800ad9a:	2b3e      	cmp	r3, #62	; 0x3e
 800ad9c:	d92b      	bls.n	800adf6 <USB_EPStartXfer+0x11cc>
 800ad9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	691b      	ldr	r3, [r3, #16]
 800adaa:	095b      	lsrs	r3, r3, #5
 800adac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800adb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	691b      	ldr	r3, [r3, #16]
 800adbc:	f003 031f 	and.w	r3, r3, #31
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d104      	bne.n	800adce <USB_EPStartXfer+0x11a4>
 800adc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adc8:	3b01      	subs	r3, #1
 800adca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800adce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800add2:	881b      	ldrh	r3, [r3, #0]
 800add4:	b29a      	uxth	r2, r3
 800add6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adda:	b29b      	uxth	r3, r3
 800addc:	029b      	lsls	r3, r3, #10
 800adde:	b29b      	uxth	r3, r3
 800ade0:	4313      	orrs	r3, r2
 800ade2:	b29b      	uxth	r3, r3
 800ade4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ade8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800adec:	b29a      	uxth	r2, r3
 800adee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adf2:	801a      	strh	r2, [r3, #0]
 800adf4:	e069      	b.n	800aeca <USB_EPStartXfer+0x12a0>
 800adf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d10c      	bne.n	800ae20 <USB_EPStartXfer+0x11f6>
 800ae06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae0a:	881b      	ldrh	r3, [r3, #0]
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae16:	b29a      	uxth	r2, r3
 800ae18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae1c:	801a      	strh	r2, [r3, #0]
 800ae1e:	e054      	b.n	800aeca <USB_EPStartXfer+0x12a0>
 800ae20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	085b      	lsrs	r3, r3, #1
 800ae2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae36:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	691b      	ldr	r3, [r3, #16]
 800ae3e:	f003 0301 	and.w	r3, r3, #1
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d004      	beq.n	800ae50 <USB_EPStartXfer+0x1226>
 800ae46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ae50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae54:	881b      	ldrh	r3, [r3, #0]
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	029b      	lsls	r3, r3, #10
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	4313      	orrs	r3, r2
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae6a:	801a      	strh	r2, [r3, #0]
 800ae6c:	e02d      	b.n	800aeca <USB_EPStartXfer+0x12a0>
 800ae6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	785b      	ldrb	r3, [r3, #1]
 800ae7a:	2b01      	cmp	r3, #1
 800ae7c:	d125      	bne.n	800aeca <USB_EPStartXfer+0x12a0>
 800ae7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	461a      	mov	r2, r3
 800ae90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ae94:	4413      	add	r3, r2
 800ae96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ae9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	00da      	lsls	r2, r3, #3
 800aea8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aeac:	4413      	add	r3, r2
 800aeae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aeb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aeb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	691b      	ldr	r3, [r3, #16]
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aec8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800aeca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aece:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	f000 8218 	beq.w	800b30c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800aedc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aee0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aee4:	681a      	ldr	r2, [r3, #0]
 800aee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	009b      	lsls	r3, r3, #2
 800aef4:	4413      	add	r3, r2
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800aefc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800af00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af04:	2b00      	cmp	r3, #0
 800af06:	d005      	beq.n	800af14 <USB_EPStartXfer+0x12ea>
 800af08:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800af0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af10:	2b00      	cmp	r3, #0
 800af12:	d10d      	bne.n	800af30 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800af14:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800af18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f040 81f5 	bne.w	800b30c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800af22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800af26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	f040 81ee 	bne.w	800b30c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800af30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	009b      	lsls	r3, r3, #2
 800af48:	4413      	add	r3, r2
 800af4a:	881b      	ldrh	r3, [r3, #0]
 800af4c:	b29b      	uxth	r3, r3
 800af4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af56:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800af5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	441a      	add	r2, r3
 800af74:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800af78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800af7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800af80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800af88:	b29b      	uxth	r3, r3
 800af8a:	8013      	strh	r3, [r2, #0]
 800af8c:	e1be      	b.n	800b30c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800af8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	78db      	ldrb	r3, [r3, #3]
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	f040 81b4 	bne.w	800b308 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800afa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	699a      	ldr	r2, [r3, #24]
 800afac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d917      	bls.n	800afec <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800afbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800afcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afd0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	699a      	ldr	r2, [r3, #24]
 800afd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afdc:	1ad2      	subs	r2, r2, r3
 800afde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	619a      	str	r2, [r3, #24]
 800afea:	e00e      	b.n	800b00a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800afec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	699b      	ldr	r3, [r3, #24]
 800aff8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800affc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	2200      	movs	r2, #0
 800b008:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b00a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b00e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	785b      	ldrb	r3, [r3, #1]
 800b016:	2b00      	cmp	r3, #0
 800b018:	f040 8085 	bne.w	800b126 <USB_EPStartXfer+0x14fc>
 800b01c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b020:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b02a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b02e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b038:	b29b      	uxth	r3, r3
 800b03a:	461a      	mov	r2, r3
 800b03c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b040:	4413      	add	r3, r2
 800b042:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b046:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b04a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	781b      	ldrb	r3, [r3, #0]
 800b052:	00da      	lsls	r2, r3, #3
 800b054:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b058:	4413      	add	r3, r2
 800b05a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b05e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b062:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b066:	881b      	ldrh	r3, [r3, #0]
 800b068:	b29b      	uxth	r3, r3
 800b06a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b06e:	b29a      	uxth	r2, r3
 800b070:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b074:	801a      	strh	r2, [r3, #0]
 800b076:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b07a:	2b3e      	cmp	r3, #62	; 0x3e
 800b07c:	d923      	bls.n	800b0c6 <USB_EPStartXfer+0x149c>
 800b07e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b082:	095b      	lsrs	r3, r3, #5
 800b084:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b08c:	f003 031f 	and.w	r3, r3, #31
 800b090:	2b00      	cmp	r3, #0
 800b092:	d104      	bne.n	800b09e <USB_EPStartXfer+0x1474>
 800b094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b098:	3b01      	subs	r3, #1
 800b09a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b09e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0a2:	881b      	ldrh	r3, [r3, #0]
 800b0a4:	b29a      	uxth	r2, r3
 800b0a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	029b      	lsls	r3, r3, #10
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	4313      	orrs	r3, r2
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0c2:	801a      	strh	r2, [r3, #0]
 800b0c4:	e060      	b.n	800b188 <USB_EPStartXfer+0x155e>
 800b0c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d10c      	bne.n	800b0e8 <USB_EPStartXfer+0x14be>
 800b0ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0d2:	881b      	ldrh	r3, [r3, #0]
 800b0d4:	b29b      	uxth	r3, r3
 800b0d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0de:	b29a      	uxth	r2, r3
 800b0e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b0e4:	801a      	strh	r2, [r3, #0]
 800b0e6:	e04f      	b.n	800b188 <USB_EPStartXfer+0x155e>
 800b0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ec:	085b      	lsrs	r3, r3, #1
 800b0ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b0f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d004      	beq.n	800b108 <USB_EPStartXfer+0x14de>
 800b0fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b102:	3301      	adds	r3, #1
 800b104:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b108:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	b29a      	uxth	r2, r3
 800b110:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b114:	b29b      	uxth	r3, r3
 800b116:	029b      	lsls	r3, r3, #10
 800b118:	b29b      	uxth	r3, r3
 800b11a:	4313      	orrs	r3, r2
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b122:	801a      	strh	r2, [r3, #0]
 800b124:	e030      	b.n	800b188 <USB_EPStartXfer+0x155e>
 800b126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b12a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	785b      	ldrb	r3, [r3, #1]
 800b132:	2b01      	cmp	r3, #1
 800b134:	d128      	bne.n	800b188 <USB_EPStartXfer+0x155e>
 800b136:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b13a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b148:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b152:	b29b      	uxth	r3, r3
 800b154:	461a      	mov	r2, r3
 800b156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b15a:	4413      	add	r3, r2
 800b15c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b160:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b164:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	781b      	ldrb	r3, [r3, #0]
 800b16c:	00da      	lsls	r2, r3, #3
 800b16e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b172:	4413      	add	r3, r2
 800b174:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b17c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b180:	b29a      	uxth	r2, r3
 800b182:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b186:	801a      	strh	r2, [r3, #0]
 800b188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b18c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b19a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	785b      	ldrb	r3, [r3, #1]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	f040 8085 	bne.w	800b2b2 <USB_EPStartXfer+0x1688>
 800b1a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b1b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1c4:	b29b      	uxth	r3, r3
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b1cc:	4413      	add	r3, r2
 800b1ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b1d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	00da      	lsls	r2, r3, #3
 800b1e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b1e4:	4413      	add	r3, r2
 800b1e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b1ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b1ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b1f2:	881b      	ldrh	r3, [r3, #0]
 800b1f4:	b29b      	uxth	r3, r3
 800b1f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b200:	801a      	strh	r2, [r3, #0]
 800b202:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b206:	2b3e      	cmp	r3, #62	; 0x3e
 800b208:	d923      	bls.n	800b252 <USB_EPStartXfer+0x1628>
 800b20a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b20e:	095b      	lsrs	r3, r3, #5
 800b210:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b218:	f003 031f 	and.w	r3, r3, #31
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d104      	bne.n	800b22a <USB_EPStartXfer+0x1600>
 800b220:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b224:	3b01      	subs	r3, #1
 800b226:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b22a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b22e:	881b      	ldrh	r3, [r3, #0]
 800b230:	b29a      	uxth	r2, r3
 800b232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b236:	b29b      	uxth	r3, r3
 800b238:	029b      	lsls	r3, r3, #10
 800b23a:	b29b      	uxth	r3, r3
 800b23c:	4313      	orrs	r3, r2
 800b23e:	b29b      	uxth	r3, r3
 800b240:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b244:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b248:	b29a      	uxth	r2, r3
 800b24a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b24e:	801a      	strh	r2, [r3, #0]
 800b250:	e05c      	b.n	800b30c <USB_EPStartXfer+0x16e2>
 800b252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b256:	2b00      	cmp	r3, #0
 800b258:	d10c      	bne.n	800b274 <USB_EPStartXfer+0x164a>
 800b25a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b25e:	881b      	ldrh	r3, [r3, #0]
 800b260:	b29b      	uxth	r3, r3
 800b262:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b266:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b270:	801a      	strh	r2, [r3, #0]
 800b272:	e04b      	b.n	800b30c <USB_EPStartXfer+0x16e2>
 800b274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b278:	085b      	lsrs	r3, r3, #1
 800b27a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b282:	f003 0301 	and.w	r3, r3, #1
 800b286:	2b00      	cmp	r3, #0
 800b288:	d004      	beq.n	800b294 <USB_EPStartXfer+0x166a>
 800b28a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b28e:	3301      	adds	r3, #1
 800b290:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b294:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b298:	881b      	ldrh	r3, [r3, #0]
 800b29a:	b29a      	uxth	r2, r3
 800b29c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	029b      	lsls	r3, r3, #10
 800b2a4:	b29b      	uxth	r3, r3
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	b29a      	uxth	r2, r3
 800b2aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b2ae:	801a      	strh	r2, [r3, #0]
 800b2b0:	e02c      	b.n	800b30c <USB_EPStartXfer+0x16e2>
 800b2b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	785b      	ldrb	r3, [r3, #1]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d124      	bne.n	800b30c <USB_EPStartXfer+0x16e2>
 800b2c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2d0:	b29b      	uxth	r3, r3
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b2d8:	4413      	add	r3, r2
 800b2da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	00da      	lsls	r2, r3, #3
 800b2ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b2f0:	4413      	add	r3, r2
 800b2f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b2f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2fe:	b29a      	uxth	r2, r3
 800b300:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b304:	801a      	strh	r2, [r3, #0]
 800b306:	e001      	b.n	800b30c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b308:	2301      	movs	r3, #1
 800b30a:	e03a      	b.n	800b382 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b30c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b310:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b314:	681a      	ldr	r2, [r3, #0]
 800b316:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b31a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	781b      	ldrb	r3, [r3, #0]
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4413      	add	r3, r2
 800b326:	881b      	ldrh	r3, [r3, #0]
 800b328:	b29b      	uxth	r3, r3
 800b32a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b32e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b332:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b336:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b33a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b33e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b342:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b346:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b34a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b34e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b352:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b356:	681a      	ldr	r2, [r3, #0]
 800b358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b35c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	781b      	ldrb	r3, [r3, #0]
 800b364:	009b      	lsls	r3, r3, #2
 800b366:	441a      	add	r2, r3
 800b368:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b36c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b370:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b37c:	b29b      	uxth	r3, r3
 800b37e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b380:	2300      	movs	r3, #0
}
 800b382:	4618      	mov	r0, r3
 800b384:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	785b      	ldrb	r3, [r3, #1]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d020      	beq.n	800b3e0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b39e:	687a      	ldr	r2, [r7, #4]
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	781b      	ldrb	r3, [r3, #0]
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	4413      	add	r3, r2
 800b3a8:	881b      	ldrh	r3, [r3, #0]
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3b4:	81bb      	strh	r3, [r7, #12]
 800b3b6:	89bb      	ldrh	r3, [r7, #12]
 800b3b8:	f083 0310 	eor.w	r3, r3, #16
 800b3bc:	81bb      	strh	r3, [r7, #12]
 800b3be:	687a      	ldr	r2, [r7, #4]
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	441a      	add	r2, r3
 800b3c8:	89bb      	ldrh	r3, [r7, #12]
 800b3ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b3d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3da:	b29b      	uxth	r3, r3
 800b3dc:	8013      	strh	r3, [r2, #0]
 800b3de:	e01f      	b.n	800b420 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b3e0:	687a      	ldr	r2, [r7, #4]
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	781b      	ldrb	r3, [r3, #0]
 800b3e6:	009b      	lsls	r3, r3, #2
 800b3e8:	4413      	add	r3, r2
 800b3ea:	881b      	ldrh	r3, [r3, #0]
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b3f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3f6:	81fb      	strh	r3, [r7, #14]
 800b3f8:	89fb      	ldrh	r3, [r7, #14]
 800b3fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b3fe:	81fb      	strh	r3, [r7, #14]
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	781b      	ldrb	r3, [r3, #0]
 800b406:	009b      	lsls	r3, r3, #2
 800b408:	441a      	add	r2, r3
 800b40a:	89fb      	ldrh	r3, [r7, #14]
 800b40c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b410:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b414:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b41c:	b29b      	uxth	r3, r3
 800b41e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3714      	adds	r7, #20
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr

0800b42e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b42e:	b480      	push	{r7}
 800b430:	b087      	sub	sp, #28
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	7b1b      	ldrb	r3, [r3, #12]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	f040 809d 	bne.w	800b57c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	785b      	ldrb	r3, [r3, #1]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d04c      	beq.n	800b4e4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	781b      	ldrb	r3, [r3, #0]
 800b450:	009b      	lsls	r3, r3, #2
 800b452:	4413      	add	r3, r2
 800b454:	881b      	ldrh	r3, [r3, #0]
 800b456:	823b      	strh	r3, [r7, #16]
 800b458:	8a3b      	ldrh	r3, [r7, #16]
 800b45a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d01b      	beq.n	800b49a <USB_EPClearStall+0x6c>
 800b462:	687a      	ldr	r2, [r7, #4]
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	781b      	ldrb	r3, [r3, #0]
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	881b      	ldrh	r3, [r3, #0]
 800b46e:	b29b      	uxth	r3, r3
 800b470:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b478:	81fb      	strh	r3, [r7, #14]
 800b47a:	687a      	ldr	r2, [r7, #4]
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	781b      	ldrb	r3, [r3, #0]
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	441a      	add	r2, r3
 800b484:	89fb      	ldrh	r3, [r7, #14]
 800b486:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b48a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b48e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b492:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b496:	b29b      	uxth	r3, r3
 800b498:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b49a:	683b      	ldr	r3, [r7, #0]
 800b49c:	78db      	ldrb	r3, [r3, #3]
 800b49e:	2b01      	cmp	r3, #1
 800b4a0:	d06c      	beq.n	800b57c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	781b      	ldrb	r3, [r3, #0]
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	4413      	add	r3, r2
 800b4ac:	881b      	ldrh	r3, [r3, #0]
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b4b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4b8:	81bb      	strh	r3, [r7, #12]
 800b4ba:	89bb      	ldrh	r3, [r7, #12]
 800b4bc:	f083 0320 	eor.w	r3, r3, #32
 800b4c0:	81bb      	strh	r3, [r7, #12]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	781b      	ldrb	r3, [r3, #0]
 800b4c8:	009b      	lsls	r3, r3, #2
 800b4ca:	441a      	add	r2, r3
 800b4cc:	89bb      	ldrh	r3, [r7, #12]
 800b4ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b4d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b4d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b4da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	8013      	strh	r3, [r2, #0]
 800b4e2:	e04b      	b.n	800b57c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b4e4:	687a      	ldr	r2, [r7, #4]
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	009b      	lsls	r3, r3, #2
 800b4ec:	4413      	add	r3, r2
 800b4ee:	881b      	ldrh	r3, [r3, #0]
 800b4f0:	82fb      	strh	r3, [r7, #22]
 800b4f2:	8afb      	ldrh	r3, [r7, #22]
 800b4f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d01b      	beq.n	800b534 <USB_EPClearStall+0x106>
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	4413      	add	r3, r2
 800b506:	881b      	ldrh	r3, [r3, #0]
 800b508:	b29b      	uxth	r3, r3
 800b50a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b50e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b512:	82bb      	strh	r3, [r7, #20]
 800b514:	687a      	ldr	r2, [r7, #4]
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	781b      	ldrb	r3, [r3, #0]
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	441a      	add	r2, r3
 800b51e:	8abb      	ldrh	r3, [r7, #20]
 800b520:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b524:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b528:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b52c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b530:	b29b      	uxth	r3, r3
 800b532:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b534:	687a      	ldr	r2, [r7, #4]
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	009b      	lsls	r3, r3, #2
 800b53c:	4413      	add	r3, r2
 800b53e:	881b      	ldrh	r3, [r3, #0]
 800b540:	b29b      	uxth	r3, r3
 800b542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b54a:	827b      	strh	r3, [r7, #18]
 800b54c:	8a7b      	ldrh	r3, [r7, #18]
 800b54e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b552:	827b      	strh	r3, [r7, #18]
 800b554:	8a7b      	ldrh	r3, [r7, #18]
 800b556:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b55a:	827b      	strh	r3, [r7, #18]
 800b55c:	687a      	ldr	r2, [r7, #4]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	781b      	ldrb	r3, [r3, #0]
 800b562:	009b      	lsls	r3, r3, #2
 800b564:	441a      	add	r2, r3
 800b566:	8a7b      	ldrh	r3, [r7, #18]
 800b568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b56c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b578:	b29b      	uxth	r3, r3
 800b57a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	371c      	adds	r7, #28
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b58a:	b480      	push	{r7}
 800b58c:	b083      	sub	sp, #12
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
 800b592:	460b      	mov	r3, r1
 800b594:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b596:	78fb      	ldrb	r3, [r7, #3]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d103      	bne.n	800b5a4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2280      	movs	r2, #128	; 0x80
 800b5a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	370c      	adds	r7, #12
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr

0800b5b2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	b083      	sub	sp, #12
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b5c0:	b29b      	uxth	r3, r3
 800b5c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5ca:	b29a      	uxth	r2, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b5d2:	2300      	movs	r3, #0
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b5ee:	b29b      	uxth	r3, r3
 800b5f0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
}
 800b5f4:	4618      	mov	r0, r3
 800b5f6:	3714      	adds	r7, #20
 800b5f8:	46bd      	mov	sp, r7
 800b5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fe:	4770      	bx	lr

0800b600 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b600:	b480      	push	{r7}
 800b602:	b08b      	sub	sp, #44	; 0x2c
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	4611      	mov	r1, r2
 800b60c:	461a      	mov	r2, r3
 800b60e:	460b      	mov	r3, r1
 800b610:	80fb      	strh	r3, [r7, #6]
 800b612:	4613      	mov	r3, r2
 800b614:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b616:	88bb      	ldrh	r3, [r7, #4]
 800b618:	3301      	adds	r3, #1
 800b61a:	085b      	lsrs	r3, r3, #1
 800b61c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b626:	88fa      	ldrh	r2, [r7, #6]
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	4413      	add	r3, r2
 800b62c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b630:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b632:	69bb      	ldr	r3, [r7, #24]
 800b634:	627b      	str	r3, [r7, #36]	; 0x24
 800b636:	e01b      	b.n	800b670 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	781b      	ldrb	r3, [r3, #0]
 800b63c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	3301      	adds	r3, #1
 800b642:	781b      	ldrb	r3, [r3, #0]
 800b644:	021b      	lsls	r3, r3, #8
 800b646:	b21a      	sxth	r2, r3
 800b648:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b64c:	4313      	orrs	r3, r2
 800b64e:	b21b      	sxth	r3, r3
 800b650:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b652:	6a3b      	ldr	r3, [r7, #32]
 800b654:	8a7a      	ldrh	r2, [r7, #18]
 800b656:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	3302      	adds	r3, #2
 800b65c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b65e:	69fb      	ldr	r3, [r7, #28]
 800b660:	3301      	adds	r3, #1
 800b662:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b664:	69fb      	ldr	r3, [r7, #28]
 800b666:	3301      	adds	r3, #1
 800b668:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66c:	3b01      	subs	r3, #1
 800b66e:	627b      	str	r3, [r7, #36]	; 0x24
 800b670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b672:	2b00      	cmp	r3, #0
 800b674:	d1e0      	bne.n	800b638 <USB_WritePMA+0x38>
  }
}
 800b676:	bf00      	nop
 800b678:	bf00      	nop
 800b67a:	372c      	adds	r7, #44	; 0x2c
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b684:	b480      	push	{r7}
 800b686:	b08b      	sub	sp, #44	; 0x2c
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	4611      	mov	r1, r2
 800b690:	461a      	mov	r2, r3
 800b692:	460b      	mov	r3, r1
 800b694:	80fb      	strh	r3, [r7, #6]
 800b696:	4613      	mov	r3, r2
 800b698:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b69a:	88bb      	ldrh	r3, [r7, #4]
 800b69c:	085b      	lsrs	r3, r3, #1
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b6aa:	88fa      	ldrh	r2, [r7, #6]
 800b6ac:	697b      	ldr	r3, [r7, #20]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b6b4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b6b6:	69bb      	ldr	r3, [r7, #24]
 800b6b8:	627b      	str	r3, [r7, #36]	; 0x24
 800b6ba:	e018      	b.n	800b6ee <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b6bc:	6a3b      	ldr	r3, [r7, #32]
 800b6be:	881b      	ldrh	r3, [r3, #0]
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b6c4:	6a3b      	ldr	r3, [r7, #32]
 800b6c6:	3302      	adds	r3, #2
 800b6c8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	b2da      	uxtb	r2, r3
 800b6ce:	69fb      	ldr	r3, [r7, #28]
 800b6d0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b6d2:	69fb      	ldr	r3, [r7, #28]
 800b6d4:	3301      	adds	r3, #1
 800b6d6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	0a1b      	lsrs	r3, r3, #8
 800b6dc:	b2da      	uxtb	r2, r3
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ea:	3b01      	subs	r3, #1
 800b6ec:	627b      	str	r3, [r7, #36]	; 0x24
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d1e3      	bne.n	800b6bc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b6f4:	88bb      	ldrh	r3, [r7, #4]
 800b6f6:	f003 0301 	and.w	r3, r3, #1
 800b6fa:	b29b      	uxth	r3, r3
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d007      	beq.n	800b710 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b700:	6a3b      	ldr	r3, [r7, #32]
 800b702:	881b      	ldrh	r3, [r3, #0]
 800b704:	b29b      	uxth	r3, r3
 800b706:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	b2da      	uxtb	r2, r3
 800b70c:	69fb      	ldr	r3, [r7, #28]
 800b70e:	701a      	strb	r2, [r3, #0]
  }
}
 800b710:	bf00      	nop
 800b712:	372c      	adds	r7, #44	; 0x2c
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <HAL_SYSTICK_Callback>:
static volatile uint32_t sysTickValStamp = 0;

static volatile int sysTickPending = 0;

void HAL_SYSTICK_Callback(void)
{
 800b71c:	b480      	push	{r7}
 800b71e:	af00      	add	r7, sp, #0
    sysTickUptime++;
 800b720:	4b04      	ldr	r3, [pc, #16]	; (800b734 <HAL_SYSTICK_Callback+0x18>)
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	3301      	adds	r3, #1
 800b726:	4a03      	ldr	r2, [pc, #12]	; (800b734 <HAL_SYSTICK_Callback+0x18>)
 800b728:	6013      	str	r3, [r2, #0]
}
 800b72a:	bf00      	nop
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr
 800b734:	2000039c 	.word	0x2000039c

0800b738 <delay>:
{
    return micros * usTicks;
}

void delay(uint32_t ms)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
    while (ms--)
 800b740:	e003      	b.n	800b74a <delay+0x12>
        delayMicroseconds(1000);
 800b742:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b746:	f000 f835 	bl	800b7b4 <delayMicroseconds>
    while (ms--)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	1e5a      	subs	r2, r3, #1
 800b74e:	607a      	str	r2, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1f6      	bne.n	800b742 <delay+0xa>
}
 800b754:	bf00      	nop
 800b756:	bf00      	nop
 800b758:	3708      	adds	r7, #8
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <millis>:

uint32_t millis(void)
{
 800b75e:	b580      	push	{r7, lr}
 800b760:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b762:	f7f5 fcdb 	bl	800111c <HAL_GetTick>
 800b766:	4603      	mov	r3, r0
}
 800b768:	4618      	mov	r0, r3
 800b76a:	bd80      	pop	{r7, pc}

0800b76c <micros>:

// Return system uptime in microseconds (rollover in 70minutes)

uint32_t micros(void)
{
 800b76c:	b4b0      	push	{r4, r5, r7}
 800b76e:	af00      	add	r7, sp, #0
	register uint32_t ms, cycle_cnt;

	do {
		ms = sysTickUptime;
 800b770:	4b0d      	ldr	r3, [pc, #52]	; (800b7a8 <micros+0x3c>)
 800b772:	681c      	ldr	r4, [r3, #0]
		cycle_cnt = SysTick->VAL;
 800b774:	4b0d      	ldr	r3, [pc, #52]	; (800b7ac <micros+0x40>)
 800b776:	689d      	ldr	r5, [r3, #8]
	} while (ms != sysTickUptime);
 800b778:	4b0b      	ldr	r3, [pc, #44]	; (800b7a8 <micros+0x3c>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	429c      	cmp	r4, r3
 800b77e:	d1f7      	bne.n	800b770 <micros+0x4>
	return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks; //168
 800b780:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b784:	fb03 f204 	mul.w	r2, r3, r4
 800b788:	4b09      	ldr	r3, [pc, #36]	; (800b7b0 <micros+0x44>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b790:	fb01 f303 	mul.w	r3, r1, r3
 800b794:	1b59      	subs	r1, r3, r5
 800b796:	4b06      	ldr	r3, [pc, #24]	; (800b7b0 <micros+0x44>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b79e:	4413      	add	r3, r2
}
 800b7a0:	4618      	mov	r0, r3
 800b7a2:	46bd      	mov	sp, r7
 800b7a4:	bcb0      	pop	{r4, r5, r7}
 800b7a6:	4770      	bx	lr
 800b7a8:	2000039c 	.word	0x2000039c
 800b7ac:	e000e010 	.word	0xe000e010
 800b7b0:	20000008 	.word	0x20000008

0800b7b4 <delayMicroseconds>:

void delayMicroseconds(uint32_t us)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
    uint32_t now = micros();
 800b7bc:	f7ff ffd6 	bl	800b76c <micros>
 800b7c0:	60f8      	str	r0, [r7, #12]
    while (micros() - now < us);
 800b7c2:	bf00      	nop
 800b7c4:	f7ff ffd2 	bl	800b76c <micros>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	1ad3      	subs	r3, r2, r3
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	429a      	cmp	r2, r3
 800b7d2:	d8f7      	bhi.n	800b7c4 <delayMicroseconds+0x10>
}
 800b7d4:	bf00      	nop
 800b7d6:	bf00      	nop
 800b7d8:	3710      	adds	r7, #16
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <__io_putchar>:

int __io_putchar(int ch)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b083      	sub	sp, #12
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
  //uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
  return 1;
 800b7e6:	2301      	movs	r3, #1
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	370c      	adds	r7, #12
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f2:	4770      	bx	lr

0800b7f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b7fa:	4b0f      	ldr	r3, [pc, #60]	; (800b838 <HAL_MspInit+0x44>)
 800b7fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b7fe:	4a0e      	ldr	r2, [pc, #56]	; (800b838 <HAL_MspInit+0x44>)
 800b800:	f043 0301 	orr.w	r3, r3, #1
 800b804:	6613      	str	r3, [r2, #96]	; 0x60
 800b806:	4b0c      	ldr	r3, [pc, #48]	; (800b838 <HAL_MspInit+0x44>)
 800b808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b80a:	f003 0301 	and.w	r3, r3, #1
 800b80e:	607b      	str	r3, [r7, #4]
 800b810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b812:	4b09      	ldr	r3, [pc, #36]	; (800b838 <HAL_MspInit+0x44>)
 800b814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b816:	4a08      	ldr	r2, [pc, #32]	; (800b838 <HAL_MspInit+0x44>)
 800b818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b81c:	6593      	str	r3, [r2, #88]	; 0x58
 800b81e:	4b06      	ldr	r3, [pc, #24]	; (800b838 <HAL_MspInit+0x44>)
 800b820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b826:	603b      	str	r3, [r7, #0]
 800b828:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800b82a:	f7fa ffa9 	bl	8006780 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b82e:	bf00      	nop
 800b830:	3708      	adds	r7, #8
 800b832:	46bd      	mov	sp, r7
 800b834:	bd80      	pop	{r7, pc}
 800b836:	bf00      	nop
 800b838:	40021000 	.word	0x40021000

0800b83c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b83c:	b480      	push	{r7}
 800b83e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800b840:	e7fe      	b.n	800b840 <NMI_Handler+0x4>

0800b842 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b842:	b480      	push	{r7}
 800b844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b846:	e7fe      	b.n	800b846 <HardFault_Handler+0x4>

0800b848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b848:	b480      	push	{r7}
 800b84a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b84c:	e7fe      	b.n	800b84c <MemManage_Handler+0x4>

0800b84e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b84e:	b480      	push	{r7}
 800b850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b852:	e7fe      	b.n	800b852 <BusFault_Handler+0x4>

0800b854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b854:	b480      	push	{r7}
 800b856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b858:	e7fe      	b.n	800b858 <UsageFault_Handler+0x4>

0800b85a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b85a:	b480      	push	{r7}
 800b85c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b85e:	bf00      	nop
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b868:	b480      	push	{r7}
 800b86a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b86c:	bf00      	nop
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr

0800b876 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b876:	b480      	push	{r7}
 800b878:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b87a:	bf00      	nop
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr

0800b884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b888:	f7f5 fc36 	bl	80010f8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800b88c:	f7f5 fd93 	bl	80013b6 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b890:	bf00      	nop
 800b892:	bd80      	pop	{r7, pc}

0800b894 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800b898:	4802      	ldr	r0, [pc, #8]	; (800b8a4 <DMA1_Channel1_IRQHandler+0x10>)
 800b89a:	f7f5 ff76 	bl	800178a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800b89e:	bf00      	nop
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	2000372c 	.word	0x2000372c

0800b8a8 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800b8ac:	4802      	ldr	r0, [pc, #8]	; (800b8b8 <USB_LP_IRQHandler+0x10>)
 800b8ae:	f7f9 fa6e 	bl	8004d8e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800b8b2:	bf00      	nop
 800b8b4:	bd80      	pop	{r7, pc}
 800b8b6:	bf00      	nop
 800b8b8:	20002664 	.word	0x20002664

0800b8bc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_IRQn 0 */
  //HAL_SPI_IRQHandler(&hspi1);
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800b8c0:	bf00      	nop
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
	...

0800b8cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800b8d0:	4802      	ldr	r0, [pc, #8]	; (800b8dc <USART2_IRQHandler+0x10>)
 800b8d2:	f7fc f80b 	bl	80078ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800b8d6:	bf00      	nop
 800b8d8:	bd80      	pop	{r7, pc}
 800b8da:	bf00      	nop
 800b8dc:	20003698 	.word	0x20003698

0800b8e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800b8e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b8e8:	f7f7 fb34 	bl	8002f54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b8ec:	bf00      	nop
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_IRQn 0 */
  //HAL_QSPI_IRQHandler(&hqspi1);
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800b8f4:	bf00      	nop
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr

0800b8fe <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b8fe:	b480      	push	{r7}
 800b900:	af00      	add	r7, sp, #0
  return 1;
 800b902:	2301      	movs	r3, #1
}
 800b904:	4618      	mov	r0, r3
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <_kill>:

int _kill(int pid, int sig)
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b082      	sub	sp, #8
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
 800b916:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b918:	f007 fc2a 	bl	8013170 <__errno>
 800b91c:	4603      	mov	r3, r0
 800b91e:	2216      	movs	r2, #22
 800b920:	601a      	str	r2, [r3, #0]
  return -1;
 800b922:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b926:	4618      	mov	r0, r3
 800b928:	3708      	adds	r7, #8
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <_exit>:

void _exit (int status)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b082      	sub	sp, #8
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b936:	f04f 31ff 	mov.w	r1, #4294967295
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f7ff ffe7 	bl	800b90e <_kill>
  while (1) {}    /* Make sure we hang here */
 800b940:	e7fe      	b.n	800b940 <_exit+0x12>

0800b942 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b942:	b580      	push	{r7, lr}
 800b944:	b086      	sub	sp, #24
 800b946:	af00      	add	r7, sp, #0
 800b948:	60f8      	str	r0, [r7, #12]
 800b94a:	60b9      	str	r1, [r7, #8]
 800b94c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b94e:	2300      	movs	r3, #0
 800b950:	617b      	str	r3, [r7, #20]
 800b952:	e00a      	b.n	800b96a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b954:	f3af 8000 	nop.w
 800b958:	4601      	mov	r1, r0
 800b95a:	68bb      	ldr	r3, [r7, #8]
 800b95c:	1c5a      	adds	r2, r3, #1
 800b95e:	60ba      	str	r2, [r7, #8]
 800b960:	b2ca      	uxtb	r2, r1
 800b962:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	3301      	adds	r3, #1
 800b968:	617b      	str	r3, [r7, #20]
 800b96a:	697a      	ldr	r2, [r7, #20]
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	429a      	cmp	r2, r3
 800b970:	dbf0      	blt.n	800b954 <_read+0x12>
  }

  return len;
 800b972:	687b      	ldr	r3, [r7, #4]
}
 800b974:	4618      	mov	r0, r3
 800b976:	3718      	adds	r7, #24
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}

0800b97c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b988:	2300      	movs	r3, #0
 800b98a:	617b      	str	r3, [r7, #20]
 800b98c:	e009      	b.n	800b9a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	1c5a      	adds	r2, r3, #1
 800b992:	60ba      	str	r2, [r7, #8]
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	4618      	mov	r0, r3
 800b998:	f7ff ff21 	bl	800b7de <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	617b      	str	r3, [r7, #20]
 800b9a2:	697a      	ldr	r2, [r7, #20]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	429a      	cmp	r2, r3
 800b9a8:	dbf1      	blt.n	800b98e <_write+0x12>
  }
  return len;
 800b9aa:	687b      	ldr	r3, [r7, #4]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3718      	adds	r7, #24
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <_close>:

int _close(int file)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b9bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b9d6:	683b      	ldr	r3, [r7, #0]
 800b9d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b9dc:	605a      	str	r2, [r3, #4]
  return 0;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	370c      	adds	r7, #12
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr

0800b9ec <_isatty>:

int _isatty(int file)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b9f4:	2301      	movs	r3, #1
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	370c      	adds	r7, #12
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba00:	4770      	bx	lr

0800ba02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ba02:	b480      	push	{r7}
 800ba04:	b085      	sub	sp, #20
 800ba06:	af00      	add	r7, sp, #0
 800ba08:	60f8      	str	r0, [r7, #12]
 800ba0a:	60b9      	str	r1, [r7, #8]
 800ba0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3714      	adds	r7, #20
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800ba24:	4a14      	ldr	r2, [pc, #80]	; (800ba78 <_sbrk+0x5c>)
 800ba26:	4b15      	ldr	r3, [pc, #84]	; (800ba7c <_sbrk+0x60>)
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800ba30:	4b13      	ldr	r3, [pc, #76]	; (800ba80 <_sbrk+0x64>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d102      	bne.n	800ba3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ba38:	4b11      	ldr	r3, [pc, #68]	; (800ba80 <_sbrk+0x64>)
 800ba3a:	4a12      	ldr	r2, [pc, #72]	; (800ba84 <_sbrk+0x68>)
 800ba3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ba3e:	4b10      	ldr	r3, [pc, #64]	; (800ba80 <_sbrk+0x64>)
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	4413      	add	r3, r2
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d207      	bcs.n	800ba5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ba4c:	f007 fb90 	bl	8013170 <__errno>
 800ba50:	4603      	mov	r3, r0
 800ba52:	220c      	movs	r2, #12
 800ba54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ba56:	f04f 33ff 	mov.w	r3, #4294967295
 800ba5a:	e009      	b.n	800ba70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ba5c:	4b08      	ldr	r3, [pc, #32]	; (800ba80 <_sbrk+0x64>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ba62:	4b07      	ldr	r3, [pc, #28]	; (800ba80 <_sbrk+0x64>)
 800ba64:	681a      	ldr	r2, [r3, #0]
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4413      	add	r3, r2
 800ba6a:	4a05      	ldr	r2, [pc, #20]	; (800ba80 <_sbrk+0x64>)
 800ba6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ba6e:	68fb      	ldr	r3, [r7, #12]
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3718      	adds	r7, #24
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	20020000 	.word	0x20020000
 800ba7c:	00000400 	.word	0x00000400
 800ba80:	200003a0 	.word	0x200003a0
 800ba84:	20004528 	.word	0x20004528

0800ba88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800ba88:	b480      	push	{r7}
 800ba8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ba8c:	4b06      	ldr	r3, [pc, #24]	; (800baa8 <SystemInit+0x20>)
 800ba8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba92:	4a05      	ldr	r2, [pc, #20]	; (800baa8 <SystemInit+0x20>)
 800ba94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800ba9c:	bf00      	nop
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa4:	4770      	bx	lr
 800baa6:	bf00      	nop
 800baa8:	e000ed00 	.word	0xe000ed00

0800baac <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 800baac:	b580      	push	{r7, lr}
 800baae:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800bab0:	4b1b      	ldr	r3, [pc, #108]	; (800bb20 <cliInit+0x74>)
 800bab2:	2200      	movs	r2, #0
 800bab4:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800bab6:	4b1a      	ldr	r3, [pc, #104]	; (800bb20 <cliInit+0x74>)
 800bab8:	2200      	movs	r2, #0
 800baba:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 800babc:	4b18      	ldr	r3, [pc, #96]	; (800bb20 <cliInit+0x74>)
 800babe:	2200      	movs	r2, #0
 800bac0:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800bac2:	4b17      	ldr	r3, [pc, #92]	; (800bb20 <cliInit+0x74>)
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800baca:	4b15      	ldr	r3, [pc, #84]	; (800bb20 <cliInit+0x74>)
 800bacc:	2200      	movs	r2, #0
 800bace:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 800bad2:	4b13      	ldr	r3, [pc, #76]	; (800bb20 <cliInit+0x74>)
 800bad4:	2200      	movs	r2, #0
 800bad6:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800bada:	4b11      	ldr	r3, [pc, #68]	; (800bb20 <cliInit+0x74>)
 800badc:	2200      	movs	r2, #0
 800bade:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800bae2:	4b0f      	ldr	r3, [pc, #60]	; (800bb20 <cliInit+0x74>)
 800bae4:	4a0f      	ldr	r2, [pc, #60]	; (800bb24 <cliInit+0x78>)
 800bae6:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800baea:	4b0d      	ldr	r3, [pc, #52]	; (800bb20 <cliInit+0x74>)
 800baec:	4a0e      	ldr	r2, [pc, #56]	; (800bb28 <cliInit+0x7c>)
 800baee:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800baf2:	4b0b      	ldr	r3, [pc, #44]	; (800bb20 <cliInit+0x74>)
 800baf4:	4a0d      	ldr	r2, [pc, #52]	; (800bb2c <cliInit+0x80>)
 800baf6:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800bafa:	4b09      	ldr	r3, [pc, #36]	; (800bb20 <cliInit+0x74>)
 800bafc:	4a0c      	ldr	r2, [pc, #48]	; (800bb30 <cliInit+0x84>)
 800bafe:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0

  cliLineClean(&cli_node);
 800bb02:	4807      	ldr	r0, [pc, #28]	; (800bb20 <cliInit+0x74>)
 800bb04:	f000 fb70 	bl	800c1e8 <cliLineClean>


  cliAdd("help", cliShowList);
 800bb08:	490a      	ldr	r1, [pc, #40]	; (800bb34 <cliInit+0x88>)
 800bb0a:	480b      	ldr	r0, [pc, #44]	; (800bb38 <cliInit+0x8c>)
 800bb0c:	f000 fe2c 	bl	800c768 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 800bb10:	490a      	ldr	r1, [pc, #40]	; (800bb3c <cliInit+0x90>)
 800bb12:	480b      	ldr	r0, [pc, #44]	; (800bb40 <cliInit+0x94>)
 800bb14:	f000 fe28 	bl	800c768 <cliAdd>

  return true;
 800bb18:	2301      	movs	r3, #1
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	200003a4 	.word	0x200003a4
 800bb24:	0800c5f9 	.word	0x0800c5f9
 800bb28:	0800c649 	.word	0x0800c649
 800bb2c:	0800c6a1 	.word	0x0800c6a1
 800bb30:	0800c6e9 	.word	0x0800c6e9
 800bb34:	0800c7fd 	.word	0x0800c7fd
 800bb38:	08015240 	.word	0x08015240
 800bb3c:	0800c86d 	.word	0x0800c86d
 800bb40:	08015248 	.word	0x08015248

0800bb44 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	6039      	str	r1, [r7, #0]
 800bb4e:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 800bb50:	4a0a      	ldr	r2, [pc, #40]	; (800bb7c <cliOpen+0x38>)
 800bb52:	79fb      	ldrb	r3, [r7, #7]
 800bb54:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 800bb56:	4a09      	ldr	r2, [pc, #36]	; (800bb7c <cliOpen+0x38>)
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 800bb5c:	79fb      	ldrb	r3, [r7, #7]
 800bb5e:	6839      	ldr	r1, [r7, #0]
 800bb60:	4618      	mov	r0, r3
 800bb62:	f005 fd43 	bl	80115ec <uartOpen>
 800bb66:	4603      	mov	r3, r0
 800bb68:	461a      	mov	r2, r3
 800bb6a:	4b04      	ldr	r3, [pc, #16]	; (800bb7c <cliOpen+0x38>)
 800bb6c:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 800bb6e:	4b03      	ldr	r3, [pc, #12]	; (800bb7c <cliOpen+0x38>)
 800bb70:	7a1b      	ldrb	r3, [r3, #8]
}
 800bb72:	4618      	mov	r0, r3
 800bb74:	3708      	adds	r7, #8
 800bb76:	46bd      	mov	sp, r7
 800bb78:	bd80      	pop	{r7, pc}
 800bb7a:	bf00      	nop
 800bb7c:	200003a4 	.word	0x200003a4

0800bb80 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	b084      	sub	sp, #16
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 800bb88:	4b34      	ldr	r3, [pc, #208]	; (800bc5c <cliShowLog+0xdc>)
 800bb8a:	7a5b      	ldrb	r3, [r3, #9]
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d061      	beq.n	800bc54 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	7ad8      	ldrb	r0, [r3, #11]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	4930      	ldr	r1, [pc, #192]	; (800bc60 <cliShowLog+0xe0>)
 800bb9e:	f005 ff01 	bl	80119a4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	7ad8      	ldrb	r0, [r3, #11]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800bbac:	461a      	mov	r2, r3
 800bbae:	492d      	ldr	r1, [pc, #180]	; (800bc64 <cliShowLog+0xe4>)
 800bbb0:	f005 fef8 	bl	80119a4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	7ad8      	ldrb	r0, [r3, #11]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800bbbe:	461a      	mov	r2, r3
 800bbc0:	4929      	ldr	r1, [pc, #164]	; (800bc68 <cliShowLog+0xe8>)
 800bbc2:	f005 feef 	bl	80119a4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	7ad8      	ldrb	r0, [r3, #11]
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	4926      	ldr	r1, [pc, #152]	; (800bc6c <cliShowLog+0xec>)
 800bbd4:	f005 fee6 	bl	80119a4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	7ad8      	ldrb	r0, [r3, #11]
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	4922      	ldr	r1, [pc, #136]	; (800bc70 <cliShowLog+0xf0>)
 800bbe6:	f005 fedd 	bl	80119a4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	7ad8      	ldrb	r0, [r3, #11]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	491f      	ldr	r1, [pc, #124]	; (800bc74 <cliShowLog+0xf4>)
 800bbf8:	f005 fed4 	bl	80119a4 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	7ad8      	ldrb	r0, [r3, #11]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800bc06:	461a      	mov	r2, r3
 800bc08:	491b      	ldr	r1, [pc, #108]	; (800bc78 <cliShowLog+0xf8>)
 800bc0a:	f005 fecb 	bl	80119a4 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 800bc0e:	2300      	movs	r3, #0
 800bc10:	60fb      	str	r3, [r7, #12]
 800bc12:	e012      	b.n	800bc3a <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	7ad8      	ldrb	r0, [r3, #11]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4413      	add	r3, r2
 800bc20:	00da      	lsls	r2, r3, #3
 800bc22:	1ad2      	subs	r2, r2, r3
 800bc24:	f502 73cc 	add.w	r3, r2, #408	; 0x198
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	68fa      	ldr	r2, [r7, #12]
 800bc2e:	4913      	ldr	r1, [pc, #76]	; (800bc7c <cliShowLog+0xfc>)
 800bc30:	f005 feb8 	bl	80119a4 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 800bc34:	68fb      	ldr	r3, [r7, #12]
 800bc36:	3301      	adds	r3, #1
 800bc38:	60fb      	str	r3, [r7, #12]
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800bc40:	461a      	mov	r2, r3
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	4293      	cmp	r3, r2
 800bc46:	dbe5      	blt.n	800bc14 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	7adb      	ldrb	r3, [r3, #11]
 800bc4c:	490c      	ldr	r1, [pc, #48]	; (800bc80 <cliShowLog+0x100>)
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f005 fea8 	bl	80119a4 <uartPrintf>
  }
}
 800bc54:	bf00      	nop
 800bc56:	3710      	adds	r7, #16
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bd80      	pop	{r7, pc}
 800bc5c:	200003a4 	.word	0x200003a4
 800bc60:	0801524c 	.word	0x0801524c
 800bc64:	0801525c 	.word	0x0801525c
 800bc68:	0801526c 	.word	0x0801526c
 800bc6c:	0801527c 	.word	0x0801527c
 800bc70:	0801528c 	.word	0x0801528c
 800bc74:	0801529c 	.word	0x0801529c
 800bc78:	080152ac 	.word	0x080152ac
 800bc7c:	080152bc 	.word	0x080152bc
 800bc80:	080152cc 	.word	0x080152cc

0800bc84 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	4906      	ldr	r1, [pc, #24]	; (800bcac <cliShowPrompt+0x28>)
 800bc92:	4618      	mov	r0, r3
 800bc94:	f005 fe86 	bl	80119a4 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	781b      	ldrb	r3, [r3, #0]
 800bc9c:	4904      	ldr	r1, [pc, #16]	; (800bcb0 <cliShowPrompt+0x2c>)
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f005 fe80 	bl	80119a4 <uartPrintf>
}
 800bca4:	bf00      	nop
 800bca6:	3708      	adds	r7, #8
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	080152d0 	.word	0x080152d0
 800bcb0:	080152d4 	.word	0x080152d4

0800bcb4 <cliMain>:

bool cliMain(void)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 800bcb8:	4b0e      	ldr	r3, [pc, #56]	; (800bcf4 <cliMain+0x40>)
 800bcba:	7a1b      	ldrb	r3, [r3, #8]
 800bcbc:	f083 0301 	eor.w	r3, r3, #1
 800bcc0:	b2db      	uxtb	r3, r3
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d001      	beq.n	800bcca <cliMain+0x16>
  {
    return false;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	e012      	b.n	800bcf0 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 800bcca:	4b0a      	ldr	r3, [pc, #40]	; (800bcf4 <cliMain+0x40>)
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f005 fdde 	bl	8011890 <uartAvailable>
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d009      	beq.n	800bcee <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800bcda:	4b06      	ldr	r3, [pc, #24]	; (800bcf4 <cliMain+0x40>)
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	4618      	mov	r0, r3
 800bce0:	f005 fe12 	bl	8011908 <uartRead>
 800bce4:	4603      	mov	r3, r0
 800bce6:	4619      	mov	r1, r3
 800bce8:	4802      	ldr	r0, [pc, #8]	; (800bcf4 <cliMain+0x40>)
 800bcea:	f000 f819 	bl	800bd20 <cliUpdate>
  }

  return true;
 800bcee:	2301      	movs	r3, #1
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	bd80      	pop	{r7, pc}
 800bcf4:	200003a4 	.word	0x200003a4

0800bcf8 <cliWrite>:
{
  return uartRead(cli_node.ch);
}

uint32_t cliWrite(uint8_t *p_data, uint32_t length)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b082      	sub	sp, #8
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	6039      	str	r1, [r7, #0]
  return uartWrite(cli_node.ch, p_data, length);
 800bd02:	4b06      	ldr	r3, [pc, #24]	; (800bd1c <cliWrite+0x24>)
 800bd04:	781b      	ldrb	r3, [r3, #0]
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	6879      	ldr	r1, [r7, #4]
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f005 fe1e 	bl	801194c <uartWrite>
 800bd10:	4603      	mov	r3, r0
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	200003a4 	.word	0x200003a4

0800bd20 <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08c      	sub	sp, #48	; 0x30
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
 800bd28:	460b      	mov	r3, r1
 800bd2a:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800bd38:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	7c1b      	ldrb	r3, [r3, #16]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	f040 816d 	bne.w	800c01e <cliUpdate+0x2fe>
  {
    switch(rx_data)
 800bd44:	78fb      	ldrb	r3, [r7, #3]
 800bd46:	2b7f      	cmp	r3, #127	; 0x7f
 800bd48:	d02a      	beq.n	800bda0 <cliUpdate+0x80>
 800bd4a:	2b7f      	cmp	r3, #127	; 0x7f
 800bd4c:	f300 80da 	bgt.w	800bf04 <cliUpdate+0x1e4>
 800bd50:	2b1b      	cmp	r3, #27
 800bd52:	d021      	beq.n	800bd98 <cliUpdate+0x78>
 800bd54:	2b1b      	cmp	r3, #27
 800bd56:	f300 80d5 	bgt.w	800bf04 <cliUpdate+0x1e4>
 800bd5a:	2b08      	cmp	r3, #8
 800bd5c:	d062      	beq.n	800be24 <cliUpdate+0x104>
 800bd5e:	2b0d      	cmp	r3, #13
 800bd60:	f040 80d0 	bne.w	800bf04 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:

      	if (line->count > 0)
 800bd64:	69fb      	ldr	r3, [r7, #28]
 800bd66:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d005      	beq.n	800bd7a <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fa54 	bl	800c21c <cliLineAdd>
          cliRunCmd(p_cli);
 800bd74:	6878      	ldr	r0, [r7, #4]
 800bd76:	f000 fb3f 	bl	800c3f8 <cliRunCmd>
        }

        line->count = 0;
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        line->cursor = 0;
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	2200      	movs	r2, #0
 800bd86:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        line->buf[0] = 0;
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f7ff ff77 	bl	800bc84 <cliShowPrompt>
        break;
 800bd96:	e142      	b.n	800c01e <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	741a      	strb	r2, [r3, #16]
        break;
 800bd9e:	e13e      	b.n	800c01e <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bdac:	429a      	cmp	r2, r3
 800bdae:	f080 8131 	bcs.w	800c014 <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 800bdb2:	69fb      	ldr	r3, [r7, #28]
 800bdb4:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bdbe:	1ad3      	subs	r3, r2, r3
 800bdc0:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdc6:	e013      	b.n	800bdf0 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bdce:	461a      	mov	r2, r3
 800bdd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd2:	441a      	add	r2, r3
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bdda:	4619      	mov	r1, r3
 800bddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdde:	440b      	add	r3, r1
 800bde0:	3b01      	subs	r3, #1
 800bde2:	69f9      	ldr	r1, [r7, #28]
 800bde4:	5c89      	ldrb	r1, [r1, r2]
 800bde6:	69fa      	ldr	r2, [r7, #28]
 800bde8:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 800bdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdec:	3301      	adds	r3, #1
 800bdee:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdf0:	7efb      	ldrb	r3, [r7, #27]
 800bdf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	dbe7      	blt.n	800bdc8 <cliUpdate+0xa8>
          }

          line->count--;
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bdfe:	3b01      	subs	r3, #1
 800be00:	b2da      	uxtb	r2, r3
 800be02:	69fb      	ldr	r3, [r7, #28]
 800be04:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          line->buf[line->count] = 0;
 800be08:	69fb      	ldr	r3, [r7, #28]
 800be0a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800be0e:	461a      	mov	r2, r3
 800be10:	69fb      	ldr	r3, [r7, #28]
 800be12:	2100      	movs	r1, #0
 800be14:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	498d      	ldr	r1, [pc, #564]	; (800c050 <cliUpdate+0x330>)
 800be1c:	4618      	mov	r0, r3
 800be1e:	f005 fdc1 	bl	80119a4 <uartPrintf>
        }
        break;
 800be22:	e0f7      	b.n	800c014 <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 800be24:	69fb      	ldr	r3, [r7, #28]
 800be26:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d055      	beq.n	800beda <cliUpdate+0x1ba>
 800be2e:	69fb      	ldr	r3, [r7, #28]
 800be30:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800be34:	2b00      	cmp	r3, #0
 800be36:	d050      	beq.n	800beda <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800be44:	429a      	cmp	r2, r3
 800be46:	d10e      	bne.n	800be66 <cliUpdate+0x146>
          {
            line->count--;
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800be4e:	3b01      	subs	r3, #1
 800be50:	b2da      	uxtb	r2, r3
 800be52:	69fb      	ldr	r3, [r7, #28]
 800be54:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800be5e:	461a      	mov	r2, r3
 800be60:	69fb      	ldr	r3, [r7, #28]
 800be62:	2100      	movs	r1, #0
 800be64:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 800be66:	69fb      	ldr	r3, [r7, #28]
 800be68:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800be72:	429a      	cmp	r2, r3
 800be74:	d231      	bcs.n	800beda <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800be76:	69fb      	ldr	r3, [r7, #28]
 800be78:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800be7c:	69fb      	ldr	r3, [r7, #28]
 800be7e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800be82:	1ad3      	subs	r3, r2, r3
 800be84:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 800be86:	2300      	movs	r3, #0
 800be88:	62bb      	str	r3, [r7, #40]	; 0x28
 800be8a:	e013      	b.n	800beb4 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800be92:	461a      	mov	r2, r3
 800be94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be96:	441a      	add	r2, r3
 800be98:	69fb      	ldr	r3, [r7, #28]
 800be9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800be9e:	4619      	mov	r1, r3
 800bea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea2:	440b      	add	r3, r1
 800bea4:	3b01      	subs	r3, #1
 800bea6:	69f9      	ldr	r1, [r7, #28]
 800bea8:	5c89      	ldrb	r1, [r1, r2]
 800beaa:	69fa      	ldr	r2, [r7, #28]
 800beac:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800beae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb0:	3301      	adds	r3, #1
 800beb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800beb4:	7ebb      	ldrb	r3, [r7, #26]
 800beb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800beb8:	429a      	cmp	r2, r3
 800beba:	dbe7      	blt.n	800be8c <cliUpdate+0x16c>
            }

            line->count--;
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bec2:	3b01      	subs	r3, #1
 800bec4:	b2da      	uxtb	r2, r3
 800bec6:	69fb      	ldr	r3, [r7, #28]
 800bec8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 800becc:	69fb      	ldr	r3, [r7, #28]
 800bece:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bed2:	461a      	mov	r2, r3
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	2100      	movs	r1, #0
 800bed8:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f000 8099 	beq.w	800c018 <cliUpdate+0x2f8>
        {
          line->cursor--;
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800beec:	3b01      	subs	r3, #1
 800beee:	b2da      	uxtb	r2, r3
 800bef0:	69fb      	ldr	r3, [r7, #28]
 800bef2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	4956      	ldr	r1, [pc, #344]	; (800c054 <cliUpdate+0x334>)
 800befc:	4618      	mov	r0, r3
 800befe:	f005 fd51 	bl	80119a4 <uartPrintf>
        }
        break;
 800bf02:	e089      	b.n	800c018 <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 800bf04:	69fb      	ldr	r3, [r7, #28]
 800bf06:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	69fa      	ldr	r2, [r7, #28]
 800bf0e:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bf12:	4293      	cmp	r3, r2
 800bf14:	f280 8082 	bge.w	800c01c <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800bf1e:	69fb      	ldr	r3, [r7, #28]
 800bf20:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bf24:	429a      	cmp	r2, r3
 800bf26:	d124      	bne.n	800bf72 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	781b      	ldrb	r3, [r3, #0]
 800bf2c:	1cf9      	adds	r1, r7, #3
 800bf2e:	2201      	movs	r2, #1
 800bf30:	4618      	mov	r0, r3
 800bf32:	f005 fd0b 	bl	801194c <uartWrite>

            line->buf[line->cursor] = rx_data;
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	78f9      	ldrb	r1, [r7, #3]
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	5499      	strb	r1, [r3, r2]
            line->count++;
 800bf44:	69fb      	ldr	r3, [r7, #28]
 800bf46:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	b2da      	uxtb	r2, r3
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	b2da      	uxtb	r2, r3
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 800bf64:	69fb      	ldr	r3, [r7, #28]
 800bf66:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bf6a:	461a      	mov	r2, r3
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	2100      	movs	r1, #0
 800bf70:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800bf78:	69fb      	ldr	r3, [r7, #28]
 800bf7a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d24c      	bcs.n	800c01c <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bf8e:	1ad3      	subs	r3, r2, r3
 800bf90:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 800bf92:	2300      	movs	r3, #0
 800bf94:	627b      	str	r3, [r7, #36]	; 0x24
 800bf96:	e013      	b.n	800bfc0 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 800bf98:	69fb      	ldr	r3, [r7, #28]
 800bf9a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	1e5a      	subs	r2, r3, #1
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bfac:	4619      	mov	r1, r3
 800bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb0:	1acb      	subs	r3, r1, r3
 800bfb2:	69f9      	ldr	r1, [r7, #28]
 800bfb4:	5c89      	ldrb	r1, [r1, r2]
 800bfb6:	69fa      	ldr	r2, [r7, #28]
 800bfb8:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800bfba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	627b      	str	r3, [r7, #36]	; 0x24
 800bfc0:	7e7b      	ldrb	r3, [r7, #25]
 800bfc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	dbe7      	blt.n	800bf98 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bfce:	461a      	mov	r2, r3
 800bfd0:	78f9      	ldrb	r1, [r7, #3]
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	5499      	strb	r1, [r3, r2]
            line->count++;
 800bfd6:	69fb      	ldr	r3, [r7, #28]
 800bfd8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bfdc:	3301      	adds	r3, #1
 800bfde:	b2da      	uxtb	r2, r3
 800bfe0:	69fb      	ldr	r3, [r7, #28]
 800bfe2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 800bfe6:	69fb      	ldr	r3, [r7, #28]
 800bfe8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bfec:	3301      	adds	r3, #1
 800bfee:	b2da      	uxtb	r2, r3
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 800bff6:	69fb      	ldr	r3, [r7, #28]
 800bff8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bffc:	461a      	mov	r2, r3
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	2100      	movs	r1, #0
 800c002:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	78fa      	ldrb	r2, [r7, #3]
 800c00a:	4913      	ldr	r1, [pc, #76]	; (800c058 <cliUpdate+0x338>)
 800c00c:	4618      	mov	r0, r3
 800c00e:	f005 fcc9 	bl	80119a4 <uartPrintf>
          }
        }
        break;
 800c012:	e003      	b.n	800c01c <cliUpdate+0x2fc>
        break;
 800c014:	bf00      	nop
 800c016:	e002      	b.n	800c01e <cliUpdate+0x2fe>
        break;
 800c018:	bf00      	nop
 800c01a:	e000      	b.n	800c01e <cliUpdate+0x2fe>
        break;
 800c01c:	bf00      	nop
    }
  }

  switch(p_cli->state)
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	7c1b      	ldrb	r3, [r3, #16]
 800c022:	3b01      	subs	r3, #1
 800c024:	2b03      	cmp	r3, #3
 800c026:	f200 80d2 	bhi.w	800c1ce <cliUpdate+0x4ae>
 800c02a:	a201      	add	r2, pc, #4	; (adr r2, 800c030 <cliUpdate+0x310>)
 800c02c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c030:	0800c041 	.word	0x0800c041
 800c034:	0800c049 	.word	0x0800c049
 800c038:	0800c05d 	.word	0x0800c05d
 800c03c:	0800c1c5 	.word	0x0800c1c5
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2202      	movs	r2, #2
 800c044:	741a      	strb	r2, [r3, #16]
      break;
 800c046:	e0c2      	b.n	800c1ce <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2203      	movs	r2, #3
 800c04c:	741a      	strb	r2, [r3, #16]
      break;
 800c04e:	e0be      	b.n	800c1ce <cliUpdate+0x4ae>
 800c050:	080152dc 	.word	0x080152dc
 800c054:	080152e4 	.word	0x080152e4
 800c058:	080152ec 	.word	0x080152ec

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800c062:	78fb      	ldrb	r3, [r7, #3]
 800c064:	2b44      	cmp	r3, #68	; 0x44
 800c066:	d11a      	bne.n	800c09e <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d015      	beq.n	800c09e <cliUpdate+0x37e>
        {
          line->cursor--;
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c078:	3b01      	subs	r3, #1
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	69fb      	ldr	r3, [r7, #28]
 800c07e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 800c082:	231b      	movs	r3, #27
 800c084:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800c086:	235b      	movs	r3, #91	; 0x5b
 800c088:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800c08a:	78fb      	ldrb	r3, [r7, #3]
 800c08c:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	f107 010c 	add.w	r1, r7, #12
 800c096:	2203      	movs	r2, #3
 800c098:	4618      	mov	r0, r3
 800c09a:	f005 fc57 	bl	801194c <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 800c09e:	78fb      	ldrb	r3, [r7, #3]
 800c0a0:	2b43      	cmp	r3, #67	; 0x43
 800c0a2:	d11d      	bne.n	800c0e0 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->buf_len)
 800c0a4:	69fb      	ldr	r3, [r7, #28]
 800c0a6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c0b0:	429a      	cmp	r2, r3
 800c0b2:	d215      	bcs.n	800c0e0 <cliUpdate+0x3c0>
        {
          line->cursor++;
 800c0b4:	69fb      	ldr	r3, [r7, #28]
 800c0b6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	b2da      	uxtb	r2, r3
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 800c0c4:	231b      	movs	r3, #27
 800c0c6:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800c0c8:	235b      	movs	r3, #91	; 0x5b
 800c0ca:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800c0cc:	78fb      	ldrb	r3, [r7, #3]
 800c0ce:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	781b      	ldrb	r3, [r3, #0]
 800c0d4:	f107 010c 	add.w	r1, r7, #12
 800c0d8:	2203      	movs	r2, #3
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f005 fc36 	bl	801194c <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 800c0e0:	78fb      	ldrb	r3, [r7, #3]
 800c0e2:	2b41      	cmp	r3, #65	; 0x41
 800c0e4:	d10c      	bne.n	800c100 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 800c0e6:	2101      	movs	r1, #1
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f000 f8eb 	bl	800c2c4 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	781a      	ldrb	r2, [r3, #0]
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	4610      	mov	r0, r2
 800c0fc:	f005 fc52 	bl	80119a4 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 800c100:	78fb      	ldrb	r3, [r7, #3]
 800c102:	2b42      	cmp	r3, #66	; 0x42
 800c104:	d10c      	bne.n	800c120 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 800c106:	2100      	movs	r1, #0
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f000 f8db 	bl	800c2c4 <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	781a      	ldrb	r2, [r3, #0]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800c118:	4619      	mov	r1, r3
 800c11a:	4610      	mov	r0, r2
 800c11c:	f005 fc42 	bl	80119a4 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 800c120:	78fb      	ldrb	r3, [r7, #3]
 800c122:	2b31      	cmp	r3, #49	; 0x31
 800c124:	d10f      	bne.n	800c146 <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	7818      	ldrb	r0, [r3, #0]
 800c12a:	69fb      	ldr	r3, [r7, #28]
 800c12c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c130:	461a      	mov	r2, r3
 800c132:	492b      	ldr	r1, [pc, #172]	; (800c1e0 <cliUpdate+0x4c0>)
 800c134:	f005 fc36 	bl	80119a4 <uartPrintf>
        line->cursor = 0;
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	2200      	movs	r2, #0
 800c13c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        p_cli->state = CLI_RX_SP4;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2204      	movs	r2, #4
 800c144:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 800c146:	78fb      	ldrb	r3, [r7, #3]
 800c148:	2b34      	cmp	r3, #52	; 0x34
 800c14a:	d13f      	bne.n	800c1cc <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c158:	429a      	cmp	r2, r3
 800c15a:	d210      	bcs.n	800c17e <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 800c15c:	69fb      	ldr	r3, [r7, #28]
 800c15e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c162:	b29a      	uxth	r2, r3
 800c164:	69fb      	ldr	r3, [r7, #28]
 800c166:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	8afa      	ldrh	r2, [r7, #22]
 800c176:	491b      	ldr	r1, [pc, #108]	; (800c1e4 <cliUpdate+0x4c4>)
 800c178:	4618      	mov	r0, r3
 800c17a:	f005 fc13 	bl	80119a4 <uartPrintf>
        }
        if (line->cursor > line->count)
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800c184:	69fb      	ldr	r3, [r7, #28]
 800c186:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c18a:	429a      	cmp	r2, r3
 800c18c:	d910      	bls.n	800c1b0 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 800c18e:	69fb      	ldr	r3, [r7, #28]
 800c190:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c194:	b29a      	uxth	r2, r3
 800c196:	69fb      	ldr	r3, [r7, #28]
 800c198:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800c19c:	b29b      	uxth	r3, r3
 800c19e:	1ad3      	subs	r3, r2, r3
 800c1a0:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	8afa      	ldrh	r2, [r7, #22]
 800c1a8:	490d      	ldr	r1, [pc, #52]	; (800c1e0 <cliUpdate+0x4c0>)
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f005 fbfa 	bl	80119a4 <uartPrintf>
        }
        line->cursor = line->count;
 800c1b0:	69fb      	ldr	r3, [r7, #28]
 800c1b2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800c1b6:	69fb      	ldr	r3, [r7, #28]
 800c1b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        p_cli->state = CLI_RX_SP4;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2204      	movs	r2, #4
 800c1c0:	741a      	strb	r2, [r3, #16]
      }
      break;
 800c1c2:	e003      	b.n	800c1cc <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	741a      	strb	r2, [r3, #16]
      break;
 800c1ca:	e000      	b.n	800c1ce <cliUpdate+0x4ae>
      break;
 800c1cc:	bf00      	nop
  }



  cliShowLog(p_cli);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f7ff fcd6 	bl	800bb80 <cliShowLog>

  return ret;
 800c1d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3730      	adds	r7, #48	; 0x30
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	080152f8 	.word	0x080152f8
 800c1e4:	08015300 	.word	0x08015300

0800c1e8 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b083      	sub	sp, #12
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  p_cli->line.cursor  = 0;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	221f      	movs	r2, #31
 800c204:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  p_cli->line.buf[0]  = 0;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 800c21c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c21e:	b083      	sub	sp, #12
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800c22a:	461a      	mov	r2, r3
 800c22c:	6879      	ldr	r1, [r7, #4]
 800c22e:	4613      	mov	r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	4413      	add	r3, r2
 800c234:	00da      	lsls	r2, r3, #3
 800c236:	1ad2      	subs	r2, r2, r3
 800c238:	188b      	adds	r3, r1, r2
 800c23a:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	f503 7409 	add.w	r4, r3, #548	; 0x224
 800c244:	4694      	mov	ip, r2
 800c246:	f104 0e20 	add.w	lr, r4, #32
 800c24a:	4665      	mov	r5, ip
 800c24c:	4626      	mov	r6, r4
 800c24e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c250:	6028      	str	r0, [r5, #0]
 800c252:	6069      	str	r1, [r5, #4]
 800c254:	60aa      	str	r2, [r5, #8]
 800c256:	60eb      	str	r3, [r5, #12]
 800c258:	3410      	adds	r4, #16
 800c25a:	f10c 0c10 	add.w	ip, ip, #16
 800c25e:	4574      	cmp	r4, lr
 800c260:	d1f3      	bne.n	800c24a <cliLineAdd+0x2e>
 800c262:	4663      	mov	r3, ip
 800c264:	4622      	mov	r2, r4
 800c266:	8811      	ldrh	r1, [r2, #0]
 800c268:	7892      	ldrb	r2, [r2, #2]
 800c26a:	8019      	strh	r1, [r3, #0]
 800c26c:	709a      	strb	r2, [r3, #2]

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800c274:	2b03      	cmp	r3, #3
 800c276:	d807      	bhi.n	800c288 <cliLineAdd+0x6c>
  {
    p_cli->hist_line_count++;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800c27e:	3301      	adds	r3, #1
 800c280:	b2da      	uxtb	r2, r3
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800c28e:	b25a      	sxtb	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800c29c:	3301      	adds	r3, #1
 800c29e:	425a      	negs	r2, r3
 800c2a0:	f003 0303 	and.w	r3, r3, #3
 800c2a4:	f002 0203 	and.w	r2, r2, #3
 800c2a8:	bf58      	it	pl
 800c2aa:	4253      	negpl	r3, r2
 800c2ac:	b2da      	uxtb	r2, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 800c2bc:	bf00      	nop
 800c2be:	370c      	adds	r7, #12
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c2c4 <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 800c2c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2c6:	b085      	sub	sp, #20
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	f000 8086 	beq.w	800c3e8 <cliLineChange+0x124>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d008      	beq.n	800c2f8 <cliLineChange+0x34>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	7818      	ldrb	r0, [r3, #0]
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	493f      	ldr	r1, [pc, #252]	; (800c3f0 <cliLineChange+0x12c>)
 800c2f4:	f005 fb56 	bl	80119a4 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d008      	beq.n	800c314 <cliLineChange+0x50>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	7818      	ldrb	r0, [r3, #0]
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800c30c:	461a      	mov	r2, r3
 800c30e:	4939      	ldr	r1, [pc, #228]	; (800c3f4 <cliLineChange+0x130>)
 800c310:	f005 fb48 	bl	80119a4 <uartPrintf>
  }


  if (key_up == true)
 800c314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c318:	2b01      	cmp	r3, #1
 800c31a:	d125      	bne.n	800c368 <cliLineChange+0xa4>
  {
    if (p_cli->hist_line_new == true)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800c322:	2b00      	cmp	r3, #0
 800c324:	d006      	beq.n	800c334 <cliLineChange+0x70>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800c32c:	b25a      	sxtb	r2, r3
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800c33a:	461a      	mov	r2, r3
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800c342:	4413      	add	r3, r2
 800c344:	3b01      	subs	r3, #1
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800c34c:	fb93 f1f2 	sdiv	r1, r3, r2
 800c350:	fb01 f202 	mul.w	r2, r1, r2
 800c354:	1a9b      	subs	r3, r3, r2
 800c356:	b25a      	sxtb	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800c364:	73fb      	strb	r3, [r7, #15]
 800c366:	e013      	b.n	800c390 <cliLineChange+0xcc>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800c36e:	3301      	adds	r3, #1
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800c376:	fb93 f1f2 	sdiv	r1, r3, r2
 800c37a:	fb01 f202 	mul.w	r2, r1, r2
 800c37e:	1a9b      	subs	r3, r3, r2
 800c380:	b25a      	sxtb	r2, r3
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800c38e:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 800c390:	7bfa      	ldrb	r2, [r7, #15]
 800c392:	6879      	ldr	r1, [r7, #4]
 800c394:	6878      	ldr	r0, [r7, #4]
 800c396:	4613      	mov	r3, r2
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	4413      	add	r3, r2
 800c39c:	00da      	lsls	r2, r3, #3
 800c39e:	1ad2      	subs	r2, r2, r3
 800c3a0:	1883      	adds	r3, r0, r2
 800c3a2:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800c3a6:	461c      	mov	r4, r3
 800c3a8:	f501 7609 	add.w	r6, r1, #548	; 0x224
 800c3ac:	f104 0c20 	add.w	ip, r4, #32
 800c3b0:	4635      	mov	r5, r6
 800c3b2:	4623      	mov	r3, r4
 800c3b4:	6818      	ldr	r0, [r3, #0]
 800c3b6:	6859      	ldr	r1, [r3, #4]
 800c3b8:	689a      	ldr	r2, [r3, #8]
 800c3ba:	68db      	ldr	r3, [r3, #12]
 800c3bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c3be:	3410      	adds	r4, #16
 800c3c0:	3610      	adds	r6, #16
 800c3c2:	4564      	cmp	r4, ip
 800c3c4:	d1f4      	bne.n	800c3b0 <cliLineChange+0xec>
 800c3c6:	4633      	mov	r3, r6
 800c3c8:	4622      	mov	r2, r4
 800c3ca:	8811      	ldrh	r1, [r2, #0]
 800c3cc:	7892      	ldrb	r2, [r2, #2]
 800c3ce:	8019      	strh	r1, [r3, #0]
 800c3d0:	709a      	strb	r2, [r3, #2]
  p_cli->line.cursor = p_cli->line.count;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	f893 2246 	ldrb.w	r2, [r3, #582]	; 0x246
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

  p_cli->hist_line_new = false;
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	2200      	movs	r2, #0
 800c3e2:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800c3e6:	e000      	b.n	800c3ea <cliLineChange+0x126>
    return;
 800c3e8:	bf00      	nop
}
 800c3ea:	3714      	adds	r7, #20
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3f0:	080152f8 	.word	0x080152f8
 800c3f4:	08015308 	.word	0x08015308

0800c3f8 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b084      	sub	sp, #16
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800c400:	2300      	movs	r3, #0
 800c402:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f857 	bl	800c4b8 <cliParseArgs>
 800c40a:	4603      	mov	r3, r0
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d04c      	beq.n	800c4aa <cliRunCmd+0xb2>
  {
    cliPrintf("\r\n");
 800c410:	4828      	ldr	r0, [pc, #160]	; (800c4b4 <cliRunCmd+0xbc>)
 800c412:	f000 f899 	bl	800c548 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c41c:	4618      	mov	r0, r3
 800c41e:	f000 f8b7 	bl	800c590 <cliToUpper>

    p_cli->is_busy = true;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	2201      	movs	r2, #1
 800c426:	729a      	strb	r2, [r3, #10]
    for (int i=0; i<p_cli->cmd_count; i++)
 800c428:	2300      	movs	r3, #0
 800c42a:	60fb      	str	r3, [r7, #12]
 800c42c:	e033      	b.n	800c496 <cliRunCmd+0x9e>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c434:	68fa      	ldr	r2, [r7, #12]
 800c436:	4613      	mov	r3, r2
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	4413      	add	r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c442:	687a      	ldr	r2, [r7, #4]
 800c444:	4413      	add	r3, r2
 800c446:	3304      	adds	r3, #4
 800c448:	4619      	mov	r1, r3
 800c44a:	f7f3 fee9 	bl	8000220 <strcmp>
 800c44e:	4603      	mov	r3, r0
 800c450:	2b00      	cmp	r3, #0
 800c452:	d11d      	bne.n	800c490 <cliRunCmd+0x98>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 800c45a:	3b01      	subs	r3, #1
 800c45c:	b29a      	uxth	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800c470:	6879      	ldr	r1, [r7, #4]
 800c472:	68fa      	ldr	r2, [r7, #12]
 800c474:	4613      	mov	r3, r2
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	4413      	add	r3, r2
 800c47a:	009b      	lsls	r3, r3, #2
 800c47c:	440b      	add	r3, r1
 800c47e:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	687a      	ldr	r2, [r7, #4]
 800c486:	f502 7263 	add.w	r2, r2, #908	; 0x38c
 800c48a:	4610      	mov	r0, r2
 800c48c:	4798      	blx	r3
        break;
 800c48e:	e009      	b.n	800c4a4 <cliRunCmd+0xac>
    for (int i=0; i<p_cli->cmd_count; i++)
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	3301      	adds	r3, #1
 800c494:	60fb      	str	r3, [r7, #12]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800c49c:	461a      	mov	r2, r3
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	4293      	cmp	r3, r2
 800c4a2:	dbc4      	blt.n	800c42e <cliRunCmd+0x36>
      }
    }
    p_cli->is_busy = false;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	729a      	strb	r2, [r3, #10]
  }

  return ret;
 800c4aa:	7afb      	ldrb	r3, [r7, #11]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3710      	adds	r7, #16
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}
 800c4b4:	08015310 	.word	0x08015310

0800c4b8 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b088      	sub	sp, #32
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  cmdline = (char *)p_cli->line.buf;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800c4d6:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800c4de:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800c4e0:	8afb      	ldrh	r3, [r7, #22]
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	68fa      	ldr	r2, [r7, #12]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800c4ec:	4b15      	ldr	r3, [pc, #84]	; (800c544 <cliParseArgs+0x8c>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f107 0208 	add.w	r2, r7, #8
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	6938      	ldr	r0, [r7, #16]
 800c4f8:	f006 fdf0 	bl	80130dc <strtok_r>
 800c4fc:	61b8      	str	r0, [r7, #24]
 800c4fe:	e010      	b.n	800c522 <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 800c500:	8afb      	ldrh	r3, [r7, #22]
 800c502:	1c5a      	adds	r2, r3, #1
 800c504:	82fa      	strh	r2, [r7, #22]
 800c506:	009b      	lsls	r3, r3, #2
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	4413      	add	r3, r2
 800c50c:	69ba      	ldr	r2, [r7, #24]
 800c50e:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800c510:	4b0c      	ldr	r3, [pc, #48]	; (800c544 <cliParseArgs+0x8c>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f107 0208 	add.w	r2, r7, #8
 800c518:	4619      	mov	r1, r3
 800c51a:	2000      	movs	r0, #0
 800c51c:	f006 fdde 	bl	80130dc <strtok_r>
 800c520:	61b8      	str	r0, [r7, #24]
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d1eb      	bne.n	800c500 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	8afa      	ldrh	r2, [r7, #22]
 800c52c:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  if (argc > 0)
 800c530:	8afb      	ldrh	r3, [r7, #22]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d001      	beq.n	800c53a <cliParseArgs+0x82>
  {
    ret = true;
 800c536:	2301      	movs	r3, #1
 800c538:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 800c53a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c53c:	4618      	mov	r0, r3
 800c53e:	3720      	adds	r7, #32
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}
 800c544:	20000010 	.word	0x20000010

0800c548 <cliPrintf>:

  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 800c548:	b40f      	push	{r0, r1, r2, r3}
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b084      	sub	sp, #16
 800c54e:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 800c550:	f107 031c 	add.w	r3, r7, #28
 800c554:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 800c556:	4b0d      	ldr	r3, [pc, #52]	; (800c58c <cliPrintf+0x44>)
 800c558:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 255, fmt, arg);
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f103 0011 	add.w	r0, r3, #17
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	69ba      	ldr	r2, [r7, #24]
 800c564:	21ff      	movs	r1, #255	; 0xff
 800c566:	f006 fd69 	bl	801303c <vsniprintf>
 800c56a:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	7818      	ldrb	r0, [r3, #0]
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	3311      	adds	r3, #17
 800c574:	68ba      	ldr	r2, [r7, #8]
 800c576:	4619      	mov	r1, r3
 800c578:	f005 f9e8 	bl	801194c <uartWrite>
}
 800c57c:	bf00      	nop
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c586:	b004      	add	sp, #16
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	200003a4 	.word	0x200003a4

0800c590 <cliToUpper>:

  uartWrite(p_cli->ch, &data, 1);
}

void cliToUpper(char *str)
{
 800c590:	b480      	push	{r7}
 800c592:	b085      	sub	sp, #20
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800c598:	2300      	movs	r3, #0
 800c59a:	81fb      	strh	r3, [r7, #14]
 800c59c:	e018      	b.n	800c5d0 <cliToUpper+0x40>
  {
    str_ch = str[i];
 800c59e:	89fb      	ldrh	r3, [r7, #14]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	4413      	add	r3, r2
 800c5a4:	781b      	ldrb	r3, [r3, #0]
 800c5a6:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 800c5a8:	7b7b      	ldrb	r3, [r7, #13]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d014      	beq.n	800c5d8 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800c5ae:	7b7b      	ldrb	r3, [r7, #13]
 800c5b0:	2b60      	cmp	r3, #96	; 0x60
 800c5b2:	d905      	bls.n	800c5c0 <cliToUpper+0x30>
 800c5b4:	7b7b      	ldrb	r3, [r7, #13]
 800c5b6:	2b7a      	cmp	r3, #122	; 0x7a
 800c5b8:	d802      	bhi.n	800c5c0 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800c5ba:	7b7b      	ldrb	r3, [r7, #13]
 800c5bc:	3b20      	subs	r3, #32
 800c5be:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 800c5c0:	89fb      	ldrh	r3, [r7, #14]
 800c5c2:	687a      	ldr	r2, [r7, #4]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	7b7a      	ldrb	r2, [r7, #13]
 800c5c8:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800c5ca:	89fb      	ldrh	r3, [r7, #14]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	81fb      	strh	r3, [r7, #14]
 800c5d0:	89fb      	ldrh	r3, [r7, #14]
 800c5d2:	2b0f      	cmp	r3, #15
 800c5d4:	d9e3      	bls.n	800c59e <cliToUpper+0xe>
 800c5d6:	e000      	b.n	800c5da <cliToUpper+0x4a>
      break;
 800c5d8:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800c5da:	89fb      	ldrh	r3, [r7, #14]
 800c5dc:	2b10      	cmp	r3, #16
 800c5de:	d105      	bne.n	800c5ec <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800c5e0:	89fb      	ldrh	r3, [r7, #14]
 800c5e2:	3b01      	subs	r3, #1
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	4413      	add	r3, r2
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	701a      	strb	r2, [r3, #0]
  }
}
 800c5ec:	bf00      	nop
 800c5ee:	3714      	adds	r7, #20
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b084      	sub	sp, #16
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	4603      	mov	r3, r0
 800c600:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800c602:	2300      	movs	r3, #0
 800c604:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800c606:	4b0f      	ldr	r3, [pc, #60]	; (800c644 <cliArgsGetData+0x4c>)
 800c608:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800c60a:	79fb      	ldrb	r3, [r7, #7]
 800c60c:	b29a      	uxth	r2, r3
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800c614:	429a      	cmp	r2, r3
 800c616:	d301      	bcc.n	800c61c <cliArgsGetData+0x24>
  {
    return 0;
 800c618:	2300      	movs	r3, #0
 800c61a:	e00e      	b.n	800c63a <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800c622:	79fb      	ldrb	r3, [r7, #7]
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	4413      	add	r3, r2
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2200      	movs	r2, #0
 800c62c:	2100      	movs	r1, #0
 800c62e:	4618      	mov	r0, r3
 800c630:	f006 fb96 	bl	8012d60 <strtoul>
 800c634:	4603      	mov	r3, r0
 800c636:	60fb      	str	r3, [r7, #12]

  return ret;
 800c638:	68fb      	ldr	r3, [r7, #12]
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	200003a4 	.word	0x200003a4

0800c648 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 800c648:	b580      	push	{r7, lr}
 800c64a:	b084      	sub	sp, #16
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	4603      	mov	r3, r0
 800c650:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800c652:	f04f 0300 	mov.w	r3, #0
 800c656:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800c658:	4b10      	ldr	r3, [pc, #64]	; (800c69c <cliArgsGetFloat+0x54>)
 800c65a:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800c65c:	79fb      	ldrb	r3, [r7, #7]
 800c65e:	b29a      	uxth	r2, r3
 800c660:	68bb      	ldr	r3, [r7, #8]
 800c662:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800c666:	429a      	cmp	r2, r3
 800c668:	d302      	bcc.n	800c670 <cliArgsGetFloat+0x28>
  {
    return 0;
 800c66a:	f04f 0300 	mov.w	r3, #0
 800c66e:	e00d      	b.n	800c68c <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800c676:	79fb      	ldrb	r3, [r7, #7]
 800c678:	009b      	lsls	r3, r3, #2
 800c67a:	4413      	add	r3, r2
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	2100      	movs	r1, #0
 800c680:	4618      	mov	r0, r3
 800c682:	f006 fa95 	bl	8012bb0 <strtof>
 800c686:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 800c68a:	68fb      	ldr	r3, [r7, #12]
}
 800c68c:	ee07 3a90 	vmov	s15, r3
 800c690:	eeb0 0a67 	vmov.f32	s0, s15
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	200003a4 	.word	0x200003a4

0800c6a0 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b085      	sub	sp, #20
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800c6ae:	4b0d      	ldr	r3, [pc, #52]	; (800c6e4 <cliArgsGetStr+0x44>)
 800c6b0:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800c6b2:	79fb      	ldrb	r3, [r7, #7]
 800c6b4:	b29a      	uxth	r2, r3
 800c6b6:	68bb      	ldr	r3, [r7, #8]
 800c6b8:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d301      	bcc.n	800c6c4 <cliArgsGetStr+0x24>
  {
    return 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	e008      	b.n	800c6d6 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800c6ca:	79fb      	ldrb	r3, [r7, #7]
 800c6cc:	009b      	lsls	r3, r3, #2
 800c6ce:	4413      	add	r3, r2
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	60fb      	str	r3, [r7, #12]

  return ret;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3714      	adds	r7, #20
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr
 800c6e2:	bf00      	nop
 800c6e4:	200003a4 	.word	0x200003a4

0800c6e8 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b084      	sub	sp, #16
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	4603      	mov	r3, r0
 800c6f0:	6039      	str	r1, [r7, #0]
 800c6f2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800c6f4:	2300      	movs	r3, #0
 800c6f6:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 800c6f8:	4b0f      	ldr	r3, [pc, #60]	; (800c738 <cliArgsIsStr+0x50>)
 800c6fa:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800c6fc:	79fb      	ldrb	r3, [r7, #7]
 800c6fe:	b29a      	uxth	r2, r3
 800c700:	68bb      	ldr	r3, [r7, #8]
 800c702:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800c706:	429a      	cmp	r2, r3
 800c708:	d301      	bcc.n	800c70e <cliArgsIsStr+0x26>
  {
    return 0;
 800c70a:	2300      	movs	r3, #0
 800c70c:	e010      	b.n	800c730 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800c714:	79fb      	ldrb	r3, [r7, #7]
 800c716:	009b      	lsls	r3, r3, #2
 800c718:	4413      	add	r3, r2
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	4619      	mov	r1, r3
 800c71e:	6838      	ldr	r0, [r7, #0]
 800c720:	f7f3 fd7e 	bl	8000220 <strcmp>
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d101      	bne.n	800c72e <cliArgsIsStr+0x46>
  {
    ret = true;
 800c72a:	2301      	movs	r3, #1
 800c72c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c72e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c730:	4618      	mov	r0, r3
 800c732:	3710      	adds	r7, #16
 800c734:	46bd      	mov	sp, r7
 800c736:	bd80      	pop	{r7, pc}
 800c738:	200003a4 	.word	0x200003a4

0800c73c <cliKeepLoop>:

bool cliKeepLoop(void)
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b082      	sub	sp, #8
 800c740:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800c742:	4b08      	ldr	r3, [pc, #32]	; (800c764 <cliKeepLoop+0x28>)
 800c744:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	781b      	ldrb	r3, [r3, #0]
 800c74a:	4618      	mov	r0, r3
 800c74c:	f005 f8a0 	bl	8011890 <uartAvailable>
 800c750:	4603      	mov	r3, r0
 800c752:	2b00      	cmp	r3, #0
 800c754:	d101      	bne.n	800c75a <cliKeepLoop+0x1e>
  {
    return true;
 800c756:	2301      	movs	r3, #1
 800c758:	e000      	b.n	800c75c <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 800c75a:	2300      	movs	r3, #0
  }
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	200003a4 	.word	0x200003a4

0800c768 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b086      	sub	sp, #24
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800c772:	2301      	movs	r3, #1
 800c774:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 800c776:	4b20      	ldr	r3, [pc, #128]	; (800c7f8 <cliAdd+0x90>)
 800c778:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800c780:	2b0f      	cmp	r3, #15
 800c782:	d901      	bls.n	800c788 <cliAdd+0x20>
  {
    return false;
 800c784:	2300      	movs	r3, #0
 800c786:	e032      	b.n	800c7ee <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 800c788:	693b      	ldr	r3, [r7, #16]
 800c78a:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800c78e:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800c790:	89fa      	ldrh	r2, [r7, #14]
 800c792:	4613      	mov	r3, r2
 800c794:	009b      	lsls	r3, r3, #2
 800c796:	4413      	add	r3, r2
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c79e:	693a      	ldr	r2, [r7, #16]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	6879      	ldr	r1, [r7, #4]
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f006 fd0f 	bl	80131ca <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800c7ac:	89fa      	ldrh	r2, [r7, #14]
 800c7ae:	6939      	ldr	r1, [r7, #16]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	009b      	lsls	r3, r3, #2
 800c7b4:	4413      	add	r3, r2
 800c7b6:	009b      	lsls	r3, r3, #2
 800c7b8:	440b      	add	r3, r1
 800c7ba:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800c7be:	683a      	ldr	r2, [r7, #0]
 800c7c0:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800c7c2:	89fa      	ldrh	r2, [r7, #14]
 800c7c4:	4613      	mov	r3, r2
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	4413      	add	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c7d0:	693a      	ldr	r2, [r7, #16]
 800c7d2:	4413      	add	r3, r2
 800c7d4:	3304      	adds	r3, #4
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f7ff feda 	bl	800c590 <cliToUpper>

  p_cli->cmd_count++;
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800c7e2:	3301      	adds	r3, #1
 800c7e4:	b29a      	uxth	r2, r3
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  return ret;
 800c7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3718      	adds	r7, #24
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}
 800c7f6:	bf00      	nop
 800c7f8:	200003a4 	.word	0x200003a4

0800c7fc <cliShowList>:
{
  cliPrintf("\x1B[%dB", y);
}

void cliShowList(cli_args_t *args)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 800c804:	4b15      	ldr	r3, [pc, #84]	; (800c85c <cliShowList+0x60>)
 800c806:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 800c808:	4815      	ldr	r0, [pc, #84]	; (800c860 <cliShowList+0x64>)
 800c80a:	f7ff fe9d 	bl	800c548 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800c80e:	4815      	ldr	r0, [pc, #84]	; (800c864 <cliShowList+0x68>)
 800c810:	f7ff fe9a 	bl	800c548 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 800c814:	2300      	movs	r3, #0
 800c816:	60fb      	str	r3, [r7, #12]
 800c818:	e012      	b.n	800c840 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	4613      	mov	r3, r2
 800c81e:	009b      	lsls	r3, r3, #2
 800c820:	4413      	add	r3, r2
 800c822:	009b      	lsls	r3, r3, #2
 800c824:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c828:	68ba      	ldr	r2, [r7, #8]
 800c82a:	4413      	add	r3, r2
 800c82c:	3304      	adds	r3, #4
 800c82e:	4618      	mov	r0, r3
 800c830:	f7ff fe8a 	bl	800c548 <cliPrintf>
    cliPrintf("\r\n");
 800c834:	480a      	ldr	r0, [pc, #40]	; (800c860 <cliShowList+0x64>)
 800c836:	f7ff fe87 	bl	800c548 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	3301      	adds	r3, #1
 800c83e:	60fb      	str	r3, [r7, #12]
 800c840:	68bb      	ldr	r3, [r7, #8]
 800c842:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800c846:	461a      	mov	r2, r3
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	4293      	cmp	r3, r2
 800c84c:	dbe5      	blt.n	800c81a <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800c84e:	4806      	ldr	r0, [pc, #24]	; (800c868 <cliShowList+0x6c>)
 800c850:	f7ff fe7a 	bl	800c548 <cliPrintf>
}
 800c854:	bf00      	nop
 800c856:	3710      	adds	r7, #16
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	200003a4 	.word	0x200003a4
 800c860:	08015310 	.word	0x08015310
 800c864:	08015334 	.word	0x08015334
 800c868:	08015354 	.word	0x08015354

0800c86c <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b08c      	sub	sp, #48	; 0x30
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 800c874:	2310      	movs	r3, #16
 800c876:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	881b      	ldrh	r3, [r3, #0]
 800c87c:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	685b      	ldr	r3, [r3, #4]
 800c882:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	881b      	ldrh	r3, [r3, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d103      	bne.n	800c894 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 800c88c:	4840      	ldr	r0, [pc, #256]	; (800c990 <cliMemoryDump+0x124>)
 800c88e:	f7ff fe5b 	bl	800c548 <cliPrintf>
 800c892:	e07a      	b.n	800c98a <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 800c894:	697b      	ldr	r3, [r7, #20]
 800c896:	2b01      	cmp	r3, #1
 800c898:	dd09      	ble.n	800c8ae <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	3304      	adds	r3, #4
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	4618      	mov	r0, r3
 800c8a6:	f006 fa5b 	bl	8012d60 <strtoul>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f006 fa52 	bl	8012d60 <strtoul>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 800c8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c2:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 800c8c4:	4833      	ldr	r0, [pc, #204]	; (800c994 <cliMemoryDump+0x128>)
 800c8c6:	f7ff fe3f 	bl	800c548 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8ce:	e058      	b.n	800c982 <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 800c8d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d2:	f003 0303 	and.w	r3, r3, #3
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d104      	bne.n	800c8e4 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800c8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8dc:	4619      	mov	r1, r3
 800c8de:	482e      	ldr	r0, [pc, #184]	; (800c998 <cliMemoryDump+0x12c>)
 800c8e0:	f7ff fe32 	bl	800c548 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 800c8e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	482c      	ldr	r0, [pc, #176]	; (800c99c <cliMemoryDump+0x130>)
 800c8ec:	f7ff fe2c 	bl	800c548 <cliPrintf>

    if ((idx%4) == 3)
 800c8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f2:	425a      	negs	r2, r3
 800c8f4:	f003 0303 	and.w	r3, r3, #3
 800c8f8:	f002 0203 	and.w	r2, r2, #3
 800c8fc:	bf58      	it	pl
 800c8fe:	4253      	negpl	r3, r2
 800c900:	2b03      	cmp	r3, #3
 800c902:	d138      	bne.n	800c976 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 800c904:	4826      	ldr	r0, [pc, #152]	; (800c9a0 <cliMemoryDump+0x134>)
 800c906:	f7ff fe1f 	bl	800c548 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 800c90a:	2300      	movs	r3, #0
 800c90c:	623b      	str	r3, [r7, #32]
 800c90e:	e02c      	b.n	800c96a <cliMemoryDump+0xfe>
 800c910:	69bb      	ldr	r3, [r7, #24]
 800c912:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 800c914:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 800c916:	2300      	movs	r3, #0
 800c918:	61fb      	str	r3, [r7, #28]
 800c91a:	e01d      	b.n	800c958 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800c91c:	f107 020c 	add.w	r2, r7, #12
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	4413      	add	r3, r2
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	2b1f      	cmp	r3, #31
 800c928:	d910      	bls.n	800c94c <cliMemoryDump+0xe0>
 800c92a:	f107 020c 	add.w	r2, r7, #12
 800c92e:	69fb      	ldr	r3, [r7, #28]
 800c930:	4413      	add	r3, r2
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	2b7e      	cmp	r3, #126	; 0x7e
 800c936:	d809      	bhi.n	800c94c <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 800c938:	f107 020c 	add.w	r2, r7, #12
 800c93c:	69fb      	ldr	r3, [r7, #28]
 800c93e:	4413      	add	r3, r2
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	4619      	mov	r1, r3
 800c944:	4817      	ldr	r0, [pc, #92]	; (800c9a4 <cliMemoryDump+0x138>)
 800c946:	f7ff fdff 	bl	800c548 <cliPrintf>
 800c94a:	e002      	b.n	800c952 <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 800c94c:	4816      	ldr	r0, [pc, #88]	; (800c9a8 <cliMemoryDump+0x13c>)
 800c94e:	f7ff fdfb 	bl	800c548 <cliPrintf>
        for (i=0;i<4;i++)
 800c952:	69fb      	ldr	r3, [r7, #28]
 800c954:	3301      	adds	r3, #1
 800c956:	61fb      	str	r3, [r7, #28]
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	2b03      	cmp	r3, #3
 800c95c:	ddde      	ble.n	800c91c <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	3304      	adds	r3, #4
 800c962:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 800c964:	6a3b      	ldr	r3, [r7, #32]
 800c966:	3301      	adds	r3, #1
 800c968:	623b      	str	r3, [r7, #32]
 800c96a:	6a3b      	ldr	r3, [r7, #32]
 800c96c:	2b03      	cmp	r3, #3
 800c96e:	ddcf      	ble.n	800c910 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 800c970:	480e      	ldr	r0, [pc, #56]	; (800c9ac <cliMemoryDump+0x140>)
 800c972:	f7ff fde9 	bl	800c548 <cliPrintf>
    }
    addr++;
 800c976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c978:	3304      	adds	r3, #4
 800c97a:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 800c97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97e:	3301      	adds	r3, #1
 800c980:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c986:	429a      	cmp	r2, r3
 800c988:	dba2      	blt.n	800c8d0 <cliMemoryDump+0x64>
  }
}
 800c98a:	3730      	adds	r7, #48	; 0x30
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	08015374 	.word	0x08015374
 800c994:	08015388 	.word	0x08015388
 800c998:	08015390 	.word	0x08015390
 800c99c:	0801539c 	.word	0x0801539c
 800c9a0:	080153a4 	.word	0x080153a4
 800c9a4:	080153a8 	.word	0x080153a8
 800c9a8:	080153ac 	.word	0x080153ac
 800c9ac:	080153b0 	.word	0x080153b0

0800c9b0 <logInit>:




bool logInit(void)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	af00      	add	r7, sp, #0
#ifdef _USE_HW_ROTS
  osMutexDef(mutex_lock);
  mutex_lock = osMutexCreate (osMutex(mutex_lock));
#endif

  log_buf_boot.line_index     = 0;
 800c9b4:	4b14      	ldr	r3, [pc, #80]	; (800ca08 <logInit+0x58>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	801a      	strh	r2, [r3, #0]
  log_buf_boot.buf_length     = 0;
 800c9ba:	4b13      	ldr	r3, [pc, #76]	; (800ca08 <logInit+0x58>)
 800c9bc:	2200      	movs	r2, #0
 800c9be:	805a      	strh	r2, [r3, #2]
  log_buf_boot.buf_length_max = LOG_BOOT_BUF_MAX;
 800c9c0:	4b11      	ldr	r3, [pc, #68]	; (800ca08 <logInit+0x58>)
 800c9c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c9c6:	809a      	strh	r2, [r3, #4]
  log_buf_boot.buf_index      = 0;
 800c9c8:	4b0f      	ldr	r3, [pc, #60]	; (800ca08 <logInit+0x58>)
 800c9ca:	2200      	movs	r2, #0
 800c9cc:	80da      	strh	r2, [r3, #6]
  log_buf_boot.buf            = buf_boot;
 800c9ce:	4b0e      	ldr	r3, [pc, #56]	; (800ca08 <logInit+0x58>)
 800c9d0:	4a0e      	ldr	r2, [pc, #56]	; (800ca0c <logInit+0x5c>)
 800c9d2:	609a      	str	r2, [r3, #8]


  log_buf_list.line_index     = 0;
 800c9d4:	4b0e      	ldr	r3, [pc, #56]	; (800ca10 <logInit+0x60>)
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	801a      	strh	r2, [r3, #0]
  log_buf_list.buf_length     = 0;
 800c9da:	4b0d      	ldr	r3, [pc, #52]	; (800ca10 <logInit+0x60>)
 800c9dc:	2200      	movs	r2, #0
 800c9de:	805a      	strh	r2, [r3, #2]
  log_buf_list.buf_length_max = LOG_LIST_BUF_MAX;
 800c9e0:	4b0b      	ldr	r3, [pc, #44]	; (800ca10 <logInit+0x60>)
 800c9e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c9e6:	809a      	strh	r2, [r3, #4]
  log_buf_list.buf_index      = 0;
 800c9e8:	4b09      	ldr	r3, [pc, #36]	; (800ca10 <logInit+0x60>)
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	80da      	strh	r2, [r3, #6]
  log_buf_list.buf            = buf_list;
 800c9ee:	4b08      	ldr	r3, [pc, #32]	; (800ca10 <logInit+0x60>)
 800c9f0:	4a08      	ldr	r2, [pc, #32]	; (800ca14 <logInit+0x64>)
 800c9f2:	609a      	str	r2, [r3, #8]


  is_init = true;
 800c9f4:	4b08      	ldr	r3, [pc, #32]	; (800ca18 <logInit+0x68>)
 800c9f6:	2201      	movs	r2, #1
 800c9f8:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("log", cliCmd);
 800c9fa:	4908      	ldr	r1, [pc, #32]	; (800ca1c <logInit+0x6c>)
 800c9fc:	4808      	ldr	r0, [pc, #32]	; (800ca20 <logInit+0x70>)
 800c9fe:	f7ff feb3 	bl	800c768 <cliAdd>
#endif

  return true;
 800ca02:	2301      	movs	r3, #1
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	bd80      	pop	{r7, pc}
 800ca08:	20000748 	.word	0x20000748
 800ca0c:	20000760 	.word	0x20000760
 800ca10:	20000754 	.word	0x20000754
 800ca14:	20000b60 	.word	0x20000b60
 800ca18:	20001360 	.word	0x20001360
 800ca1c:	0800cb81 	.word	0x0800cb81
 800ca20:	080153c0 	.word	0x080153c0

0800ca24 <logBufPrintf>:
  is_open  = true;
  return uartOpen(ch, baud);
}

bool logBufPrintf(log_buf_t *p_log, char *p_data, uint32_t length)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b08a      	sub	sp, #40	; 0x28
 800ca28:	af02      	add	r7, sp, #8
 800ca2a:	60f8      	str	r0, [r7, #12]
 800ca2c:	60b9      	str	r1, [r7, #8]
 800ca2e:	607a      	str	r2, [r7, #4]
  uint32_t buf_last;
  uint8_t *p_buf;
  int buf_len;


  buf_last = p_log->buf_index + length + 8;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	88db      	ldrh	r3, [r3, #6]
 800ca34:	461a      	mov	r2, r3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	4413      	add	r3, r2
 800ca3a:	3308      	adds	r3, #8
 800ca3c:	61fb      	str	r3, [r7, #28]
  if (buf_last > p_log->buf_length_max)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	889b      	ldrh	r3, [r3, #4]
 800ca42:	461a      	mov	r2, r3
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	4293      	cmp	r3, r2
 800ca48:	d911      	bls.n	800ca6e <logBufPrintf+0x4a>
  {
    p_log->buf_index = 0;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	80da      	strh	r2, [r3, #6]
    buf_last = p_log->buf_index + length + 8;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	88db      	ldrh	r3, [r3, #6]
 800ca54:	461a      	mov	r2, r3
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	4413      	add	r3, r2
 800ca5a:	3308      	adds	r3, #8
 800ca5c:	61fb      	str	r3, [r7, #28]

    if (buf_last > p_log->buf_length_max)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	889b      	ldrh	r3, [r3, #4]
 800ca62:	461a      	mov	r2, r3
 800ca64:	69fb      	ldr	r3, [r7, #28]
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d901      	bls.n	800ca6e <logBufPrintf+0x4a>
    {
      return false;
 800ca6a:	2300      	movs	r3, #0
 800ca6c:	e033      	b.n	800cad6 <logBufPrintf+0xb2>
    }
  }

  p_buf = &p_log->buf[p_log->buf_index];
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	689b      	ldr	r3, [r3, #8]
 800ca72:	68fa      	ldr	r2, [r7, #12]
 800ca74:	88d2      	ldrh	r2, [r2, #6]
 800ca76:	4413      	add	r3, r2
 800ca78:	61bb      	str	r3, [r7, #24]

  buf_len = snprintf((char *)p_buf, length + 8, "%04X\t%s", p_log->line_index, p_data);
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f103 0108 	add.w	r1, r3, #8
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	881b      	ldrh	r3, [r3, #0]
 800ca84:	461a      	mov	r2, r3
 800ca86:	68bb      	ldr	r3, [r7, #8]
 800ca88:	9300      	str	r3, [sp, #0]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	4a14      	ldr	r2, [pc, #80]	; (800cae0 <logBufPrintf+0xbc>)
 800ca8e:	69b8      	ldr	r0, [r7, #24]
 800ca90:	f006 fa32 	bl	8012ef8 <sniprintf>
 800ca94:	6178      	str	r0, [r7, #20]
  p_log->line_index++;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	881b      	ldrh	r3, [r3, #0]
 800ca9a:	3301      	adds	r3, #1
 800ca9c:	b29a      	uxth	r2, r3
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	801a      	strh	r2, [r3, #0]
  p_log->buf_index += buf_len;
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	88da      	ldrh	r2, [r3, #6]
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	4413      	add	r3, r2
 800caac:	b29a      	uxth	r2, r3
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	80da      	strh	r2, [r3, #6]


  if (buf_len + p_log->buf_length <= p_log->buf_length_max)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	885b      	ldrh	r3, [r3, #2]
 800cab6:	461a      	mov	r2, r3
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	4413      	add	r3, r2
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	8892      	ldrh	r2, [r2, #4]
 800cac0:	4293      	cmp	r3, r2
 800cac2:	dc07      	bgt.n	800cad4 <logBufPrintf+0xb0>
  {
    p_log->buf_length += buf_len;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	885a      	ldrh	r2, [r3, #2]
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	b29b      	uxth	r3, r3
 800cacc:	4413      	add	r3, r2
 800cace:	b29a      	uxth	r2, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	805a      	strh	r2, [r3, #2]
  }

  return true;
 800cad4:	2301      	movs	r3, #1
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3720      	adds	r7, #32
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}
 800cade:	bf00      	nop
 800cae0:	080153c4 	.word	0x080153c4

0800cae4 <logPrintf>:

void logPrintf(const char *fmt, ...)
{
 800cae4:	b40f      	push	{r0, r1, r2, r3}
 800cae6:	b580      	push	{r7, lr}
 800cae8:	b082      	sub	sp, #8
 800caea:	af00      	add	r7, sp, #0
#endif

  va_list args;
  int len;

  if (is_init != true) return;
 800caec:	4b1c      	ldr	r3, [pc, #112]	; (800cb60 <logPrintf+0x7c>)
 800caee:	781b      	ldrb	r3, [r3, #0]
 800caf0:	f083 0301 	eor.w	r3, r3, #1
 800caf4:	b2db      	uxtb	r3, r3
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d12a      	bne.n	800cb50 <logPrintf+0x6c>


  va_start(args, fmt);
 800cafa:	f107 0314 	add.w	r3, r7, #20
 800cafe:	603b      	str	r3, [r7, #0]
  len = vsnprintf(print_buf, 256, fmt, args);
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	693a      	ldr	r2, [r7, #16]
 800cb04:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb08:	4816      	ldr	r0, [pc, #88]	; (800cb64 <logPrintf+0x80>)
 800cb0a:	f006 fa97 	bl	801303c <vsniprintf>
 800cb0e:	6078      	str	r0, [r7, #4]

  if (is_open == true && is_enable == true)
 800cb10:	4b15      	ldr	r3, [pc, #84]	; (800cb68 <logPrintf+0x84>)
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d00a      	beq.n	800cb2e <logPrintf+0x4a>
 800cb18:	4b14      	ldr	r3, [pc, #80]	; (800cb6c <logPrintf+0x88>)
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d006      	beq.n	800cb2e <logPrintf+0x4a>
  {
    uartWrite(log_ch, (uint8_t *)print_buf, len);
 800cb20:	4b13      	ldr	r3, [pc, #76]	; (800cb70 <logPrintf+0x8c>)
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	490f      	ldr	r1, [pc, #60]	; (800cb64 <logPrintf+0x80>)
 800cb28:	4618      	mov	r0, r3
 800cb2a:	f004 ff0f 	bl	801194c <uartWrite>
  }

  if (is_boot_log)
 800cb2e:	4b11      	ldr	r3, [pc, #68]	; (800cb74 <logPrintf+0x90>)
 800cb30:	781b      	ldrb	r3, [r3, #0]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d005      	beq.n	800cb42 <logPrintf+0x5e>
  {
    logBufPrintf(&log_buf_boot, print_buf, len);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	461a      	mov	r2, r3
 800cb3a:	490a      	ldr	r1, [pc, #40]	; (800cb64 <logPrintf+0x80>)
 800cb3c:	480e      	ldr	r0, [pc, #56]	; (800cb78 <logPrintf+0x94>)
 800cb3e:	f7ff ff71 	bl	800ca24 <logBufPrintf>
  }
  logBufPrintf(&log_buf_list, print_buf, len);
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	461a      	mov	r2, r3
 800cb46:	4907      	ldr	r1, [pc, #28]	; (800cb64 <logPrintf+0x80>)
 800cb48:	480c      	ldr	r0, [pc, #48]	; (800cb7c <logPrintf+0x98>)
 800cb4a:	f7ff ff6b 	bl	800ca24 <logBufPrintf>
 800cb4e:	e000      	b.n	800cb52 <logPrintf+0x6e>
  if (is_init != true) return;
 800cb50:	bf00      	nop
  va_end(args);

#ifdef _USE_HW_ROTS
  osMutexRelease(mutex_lock);
#endif
}
 800cb52:	3708      	adds	r7, #8
 800cb54:	46bd      	mov	sp, r7
 800cb56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb5a:	b004      	add	sp, #16
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	20001360 	.word	0x20001360
 800cb64:	20001364 	.word	0x20001364
 800cb68:	20001361 	.word	0x20001361
 800cb6c:	20000015 	.word	0x20000015
 800cb70:	20000016 	.word	0x20000016
 800cb74:	20000014 	.word	0x20000014
 800cb78:	20000748 	.word	0x20000748
 800cb7c:	20000754 	.word	0x20000754

0800cb80 <cliCmd>:


#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b088      	sub	sp, #32
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800cb88:	2300      	movs	r3, #0
 800cb8a:	77fb      	strb	r3, [r7, #31]



  if (args->argc == 1 && args->isStr(0, "info"))
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	881b      	ldrh	r3, [r3, #0]
 800cb90:	2b01      	cmp	r3, #1
 800cb92:	d124      	bne.n	800cbde <cliCmd+0x5e>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	695b      	ldr	r3, [r3, #20]
 800cb98:	494c      	ldr	r1, [pc, #304]	; (800cccc <cliCmd+0x14c>)
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	4798      	blx	r3
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d01c      	beq.n	800cbde <cliCmd+0x5e>
  {
    cliPrintf("boot.line_index %d\n", log_buf_boot.line_index);
 800cba4:	4b4a      	ldr	r3, [pc, #296]	; (800ccd0 <cliCmd+0x150>)
 800cba6:	881b      	ldrh	r3, [r3, #0]
 800cba8:	4619      	mov	r1, r3
 800cbaa:	484a      	ldr	r0, [pc, #296]	; (800ccd4 <cliCmd+0x154>)
 800cbac:	f7ff fccc 	bl	800c548 <cliPrintf>
    cliPrintf("boot.buf_length %d\n", log_buf_boot.buf_length);
 800cbb0:	4b47      	ldr	r3, [pc, #284]	; (800ccd0 <cliCmd+0x150>)
 800cbb2:	885b      	ldrh	r3, [r3, #2]
 800cbb4:	4619      	mov	r1, r3
 800cbb6:	4848      	ldr	r0, [pc, #288]	; (800ccd8 <cliCmd+0x158>)
 800cbb8:	f7ff fcc6 	bl	800c548 <cliPrintf>
    cliPrintf("\n");
 800cbbc:	4847      	ldr	r0, [pc, #284]	; (800ccdc <cliCmd+0x15c>)
 800cbbe:	f7ff fcc3 	bl	800c548 <cliPrintf>
    cliPrintf("list.line_index %d\n", log_buf_list.line_index);
 800cbc2:	4b47      	ldr	r3, [pc, #284]	; (800cce0 <cliCmd+0x160>)
 800cbc4:	881b      	ldrh	r3, [r3, #0]
 800cbc6:	4619      	mov	r1, r3
 800cbc8:	4846      	ldr	r0, [pc, #280]	; (800cce4 <cliCmd+0x164>)
 800cbca:	f7ff fcbd 	bl	800c548 <cliPrintf>
    cliPrintf("list.buf_length %d\n", log_buf_list.buf_length);
 800cbce:	4b44      	ldr	r3, [pc, #272]	; (800cce0 <cliCmd+0x160>)
 800cbd0:	885b      	ldrh	r3, [r3, #2]
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	4844      	ldr	r0, [pc, #272]	; (800cce8 <cliCmd+0x168>)
 800cbd6:	f7ff fcb7 	bl	800c548 <cliPrintf>

    ret = true;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "boot"))
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	881b      	ldrh	r3, [r3, #0]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d12d      	bne.n	800cc42 <cliCmd+0xc2>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	695b      	ldr	r3, [r3, #20]
 800cbea:	4940      	ldr	r1, [pc, #256]	; (800ccec <cliCmd+0x16c>)
 800cbec:	2000      	movs	r0, #0
 800cbee:	4798      	blx	r3
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d025      	beq.n	800cc42 <cliCmd+0xc2>
  {
    uint32_t index = 0;
 800cbf6:	2300      	movs	r3, #0
 800cbf8:	61bb      	str	r3, [r7, #24]

    while(cliKeepLoop())
 800cbfa:	e019      	b.n	800cc30 <cliCmd+0xb0>
    {
      uint32_t buf_len;

      buf_len = log_buf_boot.buf_length - index;
 800cbfc:	4b34      	ldr	r3, [pc, #208]	; (800ccd0 <cliCmd+0x150>)
 800cbfe:	885b      	ldrh	r3, [r3, #2]
 800cc00:	461a      	mov	r2, r3
 800cc02:	69bb      	ldr	r3, [r7, #24]
 800cc04:	1ad3      	subs	r3, r2, r3
 800cc06:	617b      	str	r3, [r7, #20]
      if (buf_len == 0)
 800cc08:	697b      	ldr	r3, [r7, #20]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d016      	beq.n	800cc3c <cliCmd+0xbc>
      {
        break;
      }
      if (buf_len > 64)
 800cc0e:	697b      	ldr	r3, [r7, #20]
 800cc10:	2b40      	cmp	r3, #64	; 0x40
 800cc12:	d901      	bls.n	800cc18 <cliCmd+0x98>
      {
        buf_len = 64;
 800cc14:	2340      	movs	r3, #64	; 0x40
 800cc16:	617b      	str	r3, [r7, #20]

      #ifdef _USE_HW_ROTS
      osMutexWait(mutex_lock, osWaitForever);
      #endif

      cliWrite((uint8_t *)&log_buf_boot.buf[index], buf_len);
 800cc18:	4b2d      	ldr	r3, [pc, #180]	; (800ccd0 <cliCmd+0x150>)
 800cc1a:	689a      	ldr	r2, [r3, #8]
 800cc1c:	69bb      	ldr	r3, [r7, #24]
 800cc1e:	4413      	add	r3, r2
 800cc20:	6979      	ldr	r1, [r7, #20]
 800cc22:	4618      	mov	r0, r3
 800cc24:	f7ff f868 	bl	800bcf8 <cliWrite>
      index += buf_len;
 800cc28:	69ba      	ldr	r2, [r7, #24]
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	61bb      	str	r3, [r7, #24]
    while(cliKeepLoop())
 800cc30:	f7ff fd84 	bl	800c73c <cliKeepLoop>
 800cc34:	4603      	mov	r3, r0
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d1e0      	bne.n	800cbfc <cliCmd+0x7c>
 800cc3a:	e000      	b.n	800cc3e <cliCmd+0xbe>
        break;
 800cc3c:	bf00      	nop

      #ifdef _USE_HW_ROTS
      osMutexRelease(mutex_lock);
      #endif
    }
    ret = true;
 800cc3e:	2301      	movs	r3, #1
 800cc40:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "list"))
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	881b      	ldrh	r3, [r3, #0]
 800cc46:	2b01      	cmp	r3, #1
 800cc48:	d12d      	bne.n	800cca6 <cliCmd+0x126>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	695b      	ldr	r3, [r3, #20]
 800cc4e:	4928      	ldr	r1, [pc, #160]	; (800ccf0 <cliCmd+0x170>)
 800cc50:	2000      	movs	r0, #0
 800cc52:	4798      	blx	r3
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d025      	beq.n	800cca6 <cliCmd+0x126>
  {
    uint32_t index = 0;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	613b      	str	r3, [r7, #16]

    while(cliKeepLoop())
 800cc5e:	e019      	b.n	800cc94 <cliCmd+0x114>
    {
      uint32_t buf_len;

      buf_len = log_buf_list.buf_length - index;
 800cc60:	4b1f      	ldr	r3, [pc, #124]	; (800cce0 <cliCmd+0x160>)
 800cc62:	885b      	ldrh	r3, [r3, #2]
 800cc64:	461a      	mov	r2, r3
 800cc66:	693b      	ldr	r3, [r7, #16]
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	60fb      	str	r3, [r7, #12]
      if (buf_len == 0)
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d016      	beq.n	800cca0 <cliCmd+0x120>
      {
        break;
      }
      if (buf_len > 64)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2b40      	cmp	r3, #64	; 0x40
 800cc76:	d901      	bls.n	800cc7c <cliCmd+0xfc>
      {
        buf_len = 64;
 800cc78:	2340      	movs	r3, #64	; 0x40
 800cc7a:	60fb      	str	r3, [r7, #12]

      #ifdef _USE_HW_ROTS
      osMutexWait(mutex_lock, osWaitForever);
      #endif

      cliWrite((uint8_t *)&log_buf_list.buf[index], buf_len);
 800cc7c:	4b18      	ldr	r3, [pc, #96]	; (800cce0 <cliCmd+0x160>)
 800cc7e:	689a      	ldr	r2, [r3, #8]
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	4413      	add	r3, r2
 800cc84:	68f9      	ldr	r1, [r7, #12]
 800cc86:	4618      	mov	r0, r3
 800cc88:	f7ff f836 	bl	800bcf8 <cliWrite>
      index += buf_len;
 800cc8c:	693a      	ldr	r2, [r7, #16]
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	4413      	add	r3, r2
 800cc92:	613b      	str	r3, [r7, #16]
    while(cliKeepLoop())
 800cc94:	f7ff fd52 	bl	800c73c <cliKeepLoop>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1e0      	bne.n	800cc60 <cliCmd+0xe0>
 800cc9e:	e000      	b.n	800cca2 <cliCmd+0x122>
        break;
 800cca0:	bf00      	nop
      #ifdef _USE_HW_ROTS
      osMutexRelease(mutex_lock);
      #endif

    }
    ret = true;
 800cca2:	2301      	movs	r3, #1
 800cca4:	77fb      	strb	r3, [r7, #31]
  }

  if (ret == false)
 800cca6:	7ffb      	ldrb	r3, [r7, #31]
 800cca8:	f083 0301 	eor.w	r3, r3, #1
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d008      	beq.n	800ccc4 <cliCmd+0x144>
  {
    cliPrintf("log info\n");
 800ccb2:	4810      	ldr	r0, [pc, #64]	; (800ccf4 <cliCmd+0x174>)
 800ccb4:	f7ff fc48 	bl	800c548 <cliPrintf>
    cliPrintf("log boot\n");
 800ccb8:	480f      	ldr	r0, [pc, #60]	; (800ccf8 <cliCmd+0x178>)
 800ccba:	f7ff fc45 	bl	800c548 <cliPrintf>
    cliPrintf("log list\n");
 800ccbe:	480f      	ldr	r0, [pc, #60]	; (800ccfc <cliCmd+0x17c>)
 800ccc0:	f7ff fc42 	bl	800c548 <cliPrintf>
  }
}
 800ccc4:	bf00      	nop
 800ccc6:	3720      	adds	r7, #32
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}
 800cccc:	080153cc 	.word	0x080153cc
 800ccd0:	20000748 	.word	0x20000748
 800ccd4:	080153d4 	.word	0x080153d4
 800ccd8:	080153e8 	.word	0x080153e8
 800ccdc:	080153fc 	.word	0x080153fc
 800cce0:	20000754 	.word	0x20000754
 800cce4:	08015400 	.word	0x08015400
 800cce8:	08015414 	.word	0x08015414
 800ccec:	08015428 	.word	0x08015428
 800ccf0:	08015430 	.word	0x08015430
 800ccf4:	08015438 	.word	0x08015438
 800ccf8:	08015444 	.word	0x08015444
 800ccfc:	08015450 	.word	0x08015450

0800cd00 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800cd00:	b480      	push	{r7}
 800cd02:	b087      	sub	sp, #28
 800cd04:	af00      	add	r7, sp, #0
 800cd06:	60f8      	str	r0, [r7, #12]
 800cd08:	60b9      	str	r1, [r7, #8]
 800cd0a:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	2200      	movs	r2, #0
 800cd14:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	2200      	movs	r2, #0
 800cd1a:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	2201      	movs	r2, #1
 800cd26:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	68ba      	ldr	r2, [r7, #8]
 800cd2c:	611a      	str	r2, [r3, #16]

  return ret;
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	371c      	adds	r7, #28
 800cd34:	46bd      	mov	sp, r7
 800cd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3a:	4770      	bx	lr

0800cd3c <qbufferCreateBySize>:

bool qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 800cd3c:	b480      	push	{r7}
 800cd3e:	b087      	sub	sp, #28
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	60f8      	str	r0, [r7, #12]
 800cd44:	60b9      	str	r1, [r7, #8]
 800cd46:	607a      	str	r2, [r7, #4]
 800cd48:	603b      	str	r3, [r7, #0]
  bool ret = true;
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2200      	movs	r2, #0
 800cd52:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2200      	movs	r2, #0
 800cd58:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	683a      	ldr	r2, [r7, #0]
 800cd5e:	609a      	str	r2, [r3, #8]
  p_node->size  = size;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	68ba      	ldr	r2, [r7, #8]
 800cd6a:	611a      	str	r2, [r3, #16]

  return ret;
 800cd6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	371c      	adds	r7, #28
 800cd72:	46bd      	mov	sp, r7
 800cd74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd78:	4770      	bx	lr

0800cd7a <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800cd7a:	b480      	push	{r7}
 800cd7c:	b08b      	sub	sp, #44	; 0x2c
 800cd7e:	af00      	add	r7, sp, #0
 800cd80:	60f8      	str	r0, [r7, #12]
 800cd82:	60b9      	str	r1, [r7, #8]
 800cd84:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800cd86:	2301      	movs	r3, #1
 800cd88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t next_in;


  for (int i=0; i<length; i++)
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	623b      	str	r3, [r7, #32]
 800cd90:	e043      	b.n	800ce1a <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 800cd92:	68fb      	ldr	r3, [r7, #12]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	3301      	adds	r3, #1
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	6892      	ldr	r2, [r2, #8]
 800cd9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cda0:	fb01 f202 	mul.w	r2, r1, r2
 800cda4:	1a9b      	subs	r3, r3, r2
 800cda6:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	69ba      	ldr	r2, [r7, #24]
 800cdae:	429a      	cmp	r2, r3
 800cdb0:	d02c      	beq.n	800ce0c <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d024      	beq.n	800ce04 <qbufferWrite+0x8a>
 800cdba:	68bb      	ldr	r3, [r7, #8]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d021      	beq.n	800ce04 <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	691a      	ldr	r2, [r3, #16]
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	68f9      	ldr	r1, [r7, #12]
 800cdca:	68c9      	ldr	r1, [r1, #12]
 800cdcc:	fb01 f303 	mul.w	r3, r1, r3
 800cdd0:	4413      	add	r3, r2
 800cdd2:	617b      	str	r3, [r7, #20]
        for (int j=0; j<p_node->size; j++)
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	61fb      	str	r3, [r7, #28]
 800cdd8:	e00a      	b.n	800cdf0 <qbufferWrite+0x76>
        {
          p_buf[j] = p_data[j];
 800cdda:	69fb      	ldr	r3, [r7, #28]
 800cddc:	68ba      	ldr	r2, [r7, #8]
 800cdde:	441a      	add	r2, r3
 800cde0:	69fb      	ldr	r3, [r7, #28]
 800cde2:	6979      	ldr	r1, [r7, #20]
 800cde4:	440b      	add	r3, r1
 800cde6:	7812      	ldrb	r2, [r2, #0]
 800cde8:	701a      	strb	r2, [r3, #0]
        for (int j=0; j<p_node->size; j++)
 800cdea:	69fb      	ldr	r3, [r7, #28]
 800cdec:	3301      	adds	r3, #1
 800cdee:	61fb      	str	r3, [r7, #28]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	68da      	ldr	r2, [r3, #12]
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	429a      	cmp	r2, r3
 800cdf8:	d8ef      	bhi.n	800cdda <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	68db      	ldr	r3, [r3, #12]
 800cdfe:	68ba      	ldr	r2, [r7, #8]
 800ce00:	4413      	add	r3, r2
 800ce02:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	69ba      	ldr	r2, [r7, #24]
 800ce08:	601a      	str	r2, [r3, #0]
 800ce0a:	e003      	b.n	800ce14 <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800ce12:	e006      	b.n	800ce22 <qbufferWrite+0xa8>
  for (int i=0; i<length; i++)
 800ce14:	6a3b      	ldr	r3, [r7, #32]
 800ce16:	3301      	adds	r3, #1
 800ce18:	623b      	str	r3, [r7, #32]
 800ce1a:	6a3b      	ldr	r3, [r7, #32]
 800ce1c:	687a      	ldr	r2, [r7, #4]
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d8b7      	bhi.n	800cd92 <qbufferWrite+0x18>
    }
  }

  return ret;
 800ce22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	372c      	adds	r7, #44	; 0x2c
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce30:	4770      	bx	lr

0800ce32 <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800ce32:	b480      	push	{r7}
 800ce34:	b089      	sub	sp, #36	; 0x24
 800ce36:	af00      	add	r7, sp, #0
 800ce38:	60f8      	str	r0, [r7, #12]
 800ce3a:	60b9      	str	r1, [r7, #8]
 800ce3c:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800ce3e:	2301      	movs	r3, #1
 800ce40:	77fb      	strb	r3, [r7, #31]


  for (int i=0; i<length; i++)
 800ce42:	2300      	movs	r3, #0
 800ce44:	61bb      	str	r3, [r7, #24]
 800ce46:	e041      	b.n	800cecc <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	691b      	ldr	r3, [r3, #16]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d024      	beq.n	800ce9a <qbufferRead+0x68>
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d021      	beq.n	800ce9a <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	691a      	ldr	r2, [r3, #16]
 800ce5a:	68fb      	ldr	r3, [r7, #12]
 800ce5c:	685b      	ldr	r3, [r3, #4]
 800ce5e:	68f9      	ldr	r1, [r7, #12]
 800ce60:	68c9      	ldr	r1, [r1, #12]
 800ce62:	fb01 f303 	mul.w	r3, r1, r3
 800ce66:	4413      	add	r3, r2
 800ce68:	613b      	str	r3, [r7, #16]
      for (int j=0; j<p_node->size; j++)
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	617b      	str	r3, [r7, #20]
 800ce6e:	e00a      	b.n	800ce86 <qbufferRead+0x54>
      {
        p_data[j] = p_buf[j];
 800ce70:	697b      	ldr	r3, [r7, #20]
 800ce72:	693a      	ldr	r2, [r7, #16]
 800ce74:	441a      	add	r2, r3
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	68b9      	ldr	r1, [r7, #8]
 800ce7a:	440b      	add	r3, r1
 800ce7c:	7812      	ldrb	r2, [r2, #0]
 800ce7e:	701a      	strb	r2, [r3, #0]
      for (int j=0; j<p_node->size; j++)
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	3301      	adds	r3, #1
 800ce84:	617b      	str	r3, [r7, #20]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	68da      	ldr	r2, [r3, #12]
 800ce8a:	697b      	ldr	r3, [r7, #20]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d8ef      	bhi.n	800ce70 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	68db      	ldr	r3, [r3, #12]
 800ce94:	68ba      	ldr	r2, [r7, #8]
 800ce96:	4413      	add	r3, r2
 800ce98:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	685a      	ldr	r2, [r3, #4]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	429a      	cmp	r2, r3
 800cea4:	d00c      	beq.n	800cec0 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	685b      	ldr	r3, [r3, #4]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	68fa      	ldr	r2, [r7, #12]
 800ceae:	6892      	ldr	r2, [r2, #8]
 800ceb0:	fbb3 f1f2 	udiv	r1, r3, r2
 800ceb4:	fb01 f202 	mul.w	r2, r1, r2
 800ceb8:	1a9a      	subs	r2, r3, r2
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	605a      	str	r2, [r3, #4]
 800cebe:	e002      	b.n	800cec6 <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 800cec0:	2300      	movs	r3, #0
 800cec2:	77fb      	strb	r3, [r7, #31]
      break;
 800cec4:	e006      	b.n	800ced4 <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	3301      	adds	r3, #1
 800ceca:	61bb      	str	r3, [r7, #24]
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d8b9      	bhi.n	800ce48 <qbufferRead+0x16>
    }
  }

  return ret;
 800ced4:	7ffb      	ldrb	r3, [r7, #31]
}
 800ced6:	4618      	mov	r0, r3
 800ced8:	3724      	adds	r7, #36	; 0x24
 800ceda:	46bd      	mov	sp, r7
 800cedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee0:	4770      	bx	lr

0800cee2 <qbufferPeekWrite>:

uint8_t *qbufferPeekWrite(qbuffer_t *p_node)
{
 800cee2:	b480      	push	{r7}
 800cee4:	b083      	sub	sp, #12
 800cee6:	af00      	add	r7, sp, #0
 800cee8:	6078      	str	r0, [r7, #4]
  return &p_node->p_buf[p_node->in*p_node->size];
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	691a      	ldr	r2, [r3, #16]
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	6879      	ldr	r1, [r7, #4]
 800cef4:	68c9      	ldr	r1, [r1, #12]
 800cef6:	fb01 f303 	mul.w	r3, r1, r3
 800cefa:	4413      	add	r3, r2
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	370c      	adds	r7, #12
 800cf00:	46bd      	mov	sp, r7
 800cf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf06:	4770      	bx	lr

0800cf08 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	689a      	ldr	r2, [r3, #8]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	441a      	add	r2, r3
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	687a      	ldr	r2, [r7, #4]
 800cf22:	6892      	ldr	r2, [r2, #8]
 800cf24:	fbb3 f1f2 	udiv	r1, r3, r2
 800cf28:	fb01 f202 	mul.w	r2, r1, r2
 800cf2c:	1a9b      	subs	r3, r3, r2
 800cf2e:	60fb      	str	r3, [r7, #12]

  return ret;
 800cf30:	68fb      	ldr	r3, [r7, #12]
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3714      	adds	r7, #20
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr

0800cf3e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cf3e:	b580      	push	{r7, lr}
 800cf40:	b086      	sub	sp, #24
 800cf42:	af00      	add	r7, sp, #0
 800cf44:	60f8      	str	r0, [r7, #12]
 800cf46:	60b9      	str	r1, [r7, #8]
 800cf48:	4613      	mov	r3, r2
 800cf4a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d101      	bne.n	800cf56 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cf52:	2303      	movs	r3, #3
 800cf54:	e01f      	b.n	800cf96 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	2200      	movs	r2, #0
 800cf62:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	2200      	movs	r2, #0
 800cf6a:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d003      	beq.n	800cf7c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	68ba      	ldr	r2, [r7, #8]
 800cf78:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	2201      	movs	r2, #1
 800cf80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	79fa      	ldrb	r2, [r7, #7]
 800cf88:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f002 f802 	bl	800ef94 <USBD_LL_Init>
 800cf90:	4603      	mov	r3, r0
 800cf92:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cf94:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf96:	4618      	mov	r0, r3
 800cf98:	3718      	adds	r7, #24
 800cf9a:	46bd      	mov	sp, r7
 800cf9c:	bd80      	pop	{r7, pc}

0800cf9e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cf9e:	b580      	push	{r7, lr}
 800cfa0:	b084      	sub	sp, #16
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
 800cfa6:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d101      	bne.n	800cfb6 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800cfb2:	2303      	movs	r3, #3
 800cfb4:	e016      	b.n	800cfe4 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	683a      	ldr	r2, [r7, #0]
 800cfba:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d00b      	beq.n	800cfe2 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd2:	f107 020e 	add.w	r2, r7, #14
 800cfd6:	4610      	mov	r0, r2
 800cfd8:	4798      	blx	r3
 800cfda:	4602      	mov	r2, r0
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800cfe2:	2300      	movs	r3, #0
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3710      	adds	r7, #16
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b082      	sub	sp, #8
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cff4:	6878      	ldr	r0, [r7, #4]
 800cff6:	f002 f82d 	bl	800f054 <USBD_LL_Start>
 800cffa:	4603      	mov	r3, r0
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3708      	adds	r7, #8
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d004:	b480      	push	{r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d00c:	2300      	movs	r3, #0
}
 800d00e:	4618      	mov	r0, r3
 800d010:	370c      	adds	r7, #12
 800d012:	46bd      	mov	sp, r7
 800d014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d018:	4770      	bx	lr

0800d01a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d01a:	b580      	push	{r7, lr}
 800d01c:	b084      	sub	sp, #16
 800d01e:	af00      	add	r7, sp, #0
 800d020:	6078      	str	r0, [r7, #4]
 800d022:	460b      	mov	r3, r1
 800d024:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d026:	2303      	movs	r3, #3
 800d028:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d030:	2b00      	cmp	r3, #0
 800d032:	d009      	beq.n	800d048 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	78fa      	ldrb	r2, [r7, #3]
 800d03e:	4611      	mov	r1, r2
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	4798      	blx	r3
 800d044:	4603      	mov	r3, r0
 800d046:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d048:	7bfb      	ldrb	r3, [r7, #15]
}
 800d04a:	4618      	mov	r0, r3
 800d04c:	3710      	adds	r7, #16
 800d04e:	46bd      	mov	sp, r7
 800d050:	bd80      	pop	{r7, pc}

0800d052 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d052:	b580      	push	{r7, lr}
 800d054:	b082      	sub	sp, #8
 800d056:	af00      	add	r7, sp, #0
 800d058:	6078      	str	r0, [r7, #4]
 800d05a:	460b      	mov	r3, r1
 800d05c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d064:	2b00      	cmp	r3, #0
 800d066:	d007      	beq.n	800d078 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d06e:	685b      	ldr	r3, [r3, #4]
 800d070:	78fa      	ldrb	r2, [r7, #3]
 800d072:	4611      	mov	r1, r2
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	4798      	blx	r3
  }

  return USBD_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b084      	sub	sp, #16
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
 800d08a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d092:	6839      	ldr	r1, [r7, #0]
 800d094:	4618      	mov	r0, r3
 800d096:	f000 ff26 	bl	800dee6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2201      	movs	r2, #1
 800d09e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d0a8:	461a      	mov	r2, r3
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d0b6:	f003 031f 	and.w	r3, r3, #31
 800d0ba:	2b02      	cmp	r3, #2
 800d0bc:	d01a      	beq.n	800d0f4 <USBD_LL_SetupStage+0x72>
 800d0be:	2b02      	cmp	r3, #2
 800d0c0:	d822      	bhi.n	800d108 <USBD_LL_SetupStage+0x86>
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d002      	beq.n	800d0cc <USBD_LL_SetupStage+0x4a>
 800d0c6:	2b01      	cmp	r3, #1
 800d0c8:	d00a      	beq.n	800d0e0 <USBD_LL_SetupStage+0x5e>
 800d0ca:	e01d      	b.n	800d108 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d0d2:	4619      	mov	r1, r3
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 f9d7 	bl	800d488 <USBD_StdDevReq>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	73fb      	strb	r3, [r7, #15]
      break;
 800d0de:	e020      	b.n	800d122 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d0e6:	4619      	mov	r1, r3
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f000 fa3b 	bl	800d564 <USBD_StdItfReq>
 800d0ee:	4603      	mov	r3, r0
 800d0f0:	73fb      	strb	r3, [r7, #15]
      break;
 800d0f2:	e016      	b.n	800d122 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6878      	ldr	r0, [r7, #4]
 800d0fe:	f000 fa79 	bl	800d5f4 <USBD_StdEPReq>
 800d102:	4603      	mov	r3, r0
 800d104:	73fb      	strb	r3, [r7, #15]
      break;
 800d106:	e00c      	b.n	800d122 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d10e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d112:	b2db      	uxtb	r3, r3
 800d114:	4619      	mov	r1, r3
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f001 fffc 	bl	800f114 <USBD_LL_StallEP>
 800d11c:	4603      	mov	r3, r0
 800d11e:	73fb      	strb	r3, [r7, #15]
      break;
 800d120:	bf00      	nop
  }

  return ret;
 800d122:	7bfb      	ldrb	r3, [r7, #15]
}
 800d124:	4618      	mov	r0, r3
 800d126:	3710      	adds	r7, #16
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b086      	sub	sp, #24
 800d130:	af00      	add	r7, sp, #0
 800d132:	60f8      	str	r0, [r7, #12]
 800d134:	460b      	mov	r3, r1
 800d136:	607a      	str	r2, [r7, #4]
 800d138:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d13a:	7afb      	ldrb	r3, [r7, #11]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d137      	bne.n	800d1b0 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d146:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d14e:	2b03      	cmp	r3, #3
 800d150:	d14a      	bne.n	800d1e8 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d152:	693b      	ldr	r3, [r7, #16]
 800d154:	689a      	ldr	r2, [r3, #8]
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d913      	bls.n	800d186 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d15e:	693b      	ldr	r3, [r7, #16]
 800d160:	689a      	ldr	r2, [r3, #8]
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	68db      	ldr	r3, [r3, #12]
 800d166:	1ad2      	subs	r2, r2, r3
 800d168:	693b      	ldr	r3, [r7, #16]
 800d16a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d16c:	693b      	ldr	r3, [r7, #16]
 800d16e:	68da      	ldr	r2, [r3, #12]
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	689b      	ldr	r3, [r3, #8]
 800d174:	4293      	cmp	r3, r2
 800d176:	bf28      	it	cs
 800d178:	4613      	movcs	r3, r2
 800d17a:	461a      	mov	r2, r3
 800d17c:	6879      	ldr	r1, [r7, #4]
 800d17e:	68f8      	ldr	r0, [r7, #12]
 800d180:	f000 ffa5 	bl	800e0ce <USBD_CtlContinueRx>
 800d184:	e030      	b.n	800d1e8 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d18c:	691b      	ldr	r3, [r3, #16]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d00a      	beq.n	800d1a8 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d198:	2b03      	cmp	r3, #3
 800d19a:	d105      	bne.n	800d1a8 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1a2:	691b      	ldr	r3, [r3, #16]
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800d1a8:	68f8      	ldr	r0, [r7, #12]
 800d1aa:	f000 ffa1 	bl	800e0f0 <USBD_CtlSendStatus>
 800d1ae:	e01b      	b.n	800d1e8 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1b6:	699b      	ldr	r3, [r3, #24]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d013      	beq.n	800d1e4 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d1c2:	2b03      	cmp	r3, #3
 800d1c4:	d10e      	bne.n	800d1e4 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1cc:	699b      	ldr	r3, [r3, #24]
 800d1ce:	7afa      	ldrb	r2, [r7, #11]
 800d1d0:	4611      	mov	r1, r2
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	4798      	blx	r3
 800d1d6:	4603      	mov	r3, r0
 800d1d8:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d1da:	7dfb      	ldrb	r3, [r7, #23]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d003      	beq.n	800d1e8 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800d1e0:	7dfb      	ldrb	r3, [r7, #23]
 800d1e2:	e002      	b.n	800d1ea <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d1e4:	2303      	movs	r3, #3
 800d1e6:	e000      	b.n	800d1ea <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800d1e8:	2300      	movs	r3, #0
}
 800d1ea:	4618      	mov	r0, r3
 800d1ec:	3718      	adds	r7, #24
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	bd80      	pop	{r7, pc}

0800d1f2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d1f2:	b580      	push	{r7, lr}
 800d1f4:	b086      	sub	sp, #24
 800d1f6:	af00      	add	r7, sp, #0
 800d1f8:	60f8      	str	r0, [r7, #12]
 800d1fa:	460b      	mov	r3, r1
 800d1fc:	607a      	str	r2, [r7, #4]
 800d1fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d200:	7afb      	ldrb	r3, [r7, #11]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d16a      	bne.n	800d2dc <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	3314      	adds	r3, #20
 800d20a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d212:	2b02      	cmp	r3, #2
 800d214:	d155      	bne.n	800d2c2 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800d216:	693b      	ldr	r3, [r7, #16]
 800d218:	689a      	ldr	r2, [r3, #8]
 800d21a:	693b      	ldr	r3, [r7, #16]
 800d21c:	68db      	ldr	r3, [r3, #12]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d914      	bls.n	800d24c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d222:	693b      	ldr	r3, [r7, #16]
 800d224:	689a      	ldr	r2, [r3, #8]
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	68db      	ldr	r3, [r3, #12]
 800d22a:	1ad2      	subs	r2, r2, r3
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d230:	693b      	ldr	r3, [r7, #16]
 800d232:	689b      	ldr	r3, [r3, #8]
 800d234:	461a      	mov	r2, r3
 800d236:	6879      	ldr	r1, [r7, #4]
 800d238:	68f8      	ldr	r0, [r7, #12]
 800d23a:	f000 ff1a 	bl	800e072 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d23e:	2300      	movs	r3, #0
 800d240:	2200      	movs	r2, #0
 800d242:	2100      	movs	r1, #0
 800d244:	68f8      	ldr	r0, [r7, #12]
 800d246:	f002 f80f 	bl	800f268 <USBD_LL_PrepareReceive>
 800d24a:	e03a      	b.n	800d2c2 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	68da      	ldr	r2, [r3, #12]
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	429a      	cmp	r2, r3
 800d256:	d11c      	bne.n	800d292 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	685a      	ldr	r2, [r3, #4]
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d260:	429a      	cmp	r2, r3
 800d262:	d316      	bcc.n	800d292 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d264:	693b      	ldr	r3, [r7, #16]
 800d266:	685a      	ldr	r2, [r3, #4]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d26e:	429a      	cmp	r2, r3
 800d270:	d20f      	bcs.n	800d292 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d272:	2200      	movs	r2, #0
 800d274:	2100      	movs	r1, #0
 800d276:	68f8      	ldr	r0, [r7, #12]
 800d278:	f000 fefb 	bl	800e072 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	2200      	movs	r2, #0
 800d280:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d284:	2300      	movs	r3, #0
 800d286:	2200      	movs	r2, #0
 800d288:	2100      	movs	r1, #0
 800d28a:	68f8      	ldr	r0, [r7, #12]
 800d28c:	f001 ffec 	bl	800f268 <USBD_LL_PrepareReceive>
 800d290:	e017      	b.n	800d2c2 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d00a      	beq.n	800d2b4 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d2a4:	2b03      	cmp	r3, #3
 800d2a6:	d105      	bne.n	800d2b4 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	68f8      	ldr	r0, [r7, #12]
 800d2b2:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2b4:	2180      	movs	r1, #128	; 0x80
 800d2b6:	68f8      	ldr	r0, [r7, #12]
 800d2b8:	f001 ff2c 	bl	800f114 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d2bc:	68f8      	ldr	r0, [r7, #12]
 800d2be:	f000 ff2a 	bl	800e116 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d123      	bne.n	800d314 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f7ff fe99 	bl	800d004 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d2da:	e01b      	b.n	800d314 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2e2:	695b      	ldr	r3, [r3, #20]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d013      	beq.n	800d310 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800d2ee:	2b03      	cmp	r3, #3
 800d2f0:	d10e      	bne.n	800d310 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2f8:	695b      	ldr	r3, [r3, #20]
 800d2fa:	7afa      	ldrb	r2, [r7, #11]
 800d2fc:	4611      	mov	r1, r2
 800d2fe:	68f8      	ldr	r0, [r7, #12]
 800d300:	4798      	blx	r3
 800d302:	4603      	mov	r3, r0
 800d304:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d306:	7dfb      	ldrb	r3, [r7, #23]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d003      	beq.n	800d314 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800d30c:	7dfb      	ldrb	r3, [r7, #23]
 800d30e:	e002      	b.n	800d316 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d310:	2303      	movs	r3, #3
 800d312:	e000      	b.n	800d316 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800d314:	2300      	movs	r3, #0
}
 800d316:	4618      	mov	r0, r3
 800d318:	3718      	adds	r7, #24
 800d31a:	46bd      	mov	sp, r7
 800d31c:	bd80      	pop	{r7, pc}

0800d31e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d31e:	b580      	push	{r7, lr}
 800d320:	b082      	sub	sp, #8
 800d322:	af00      	add	r7, sp, #0
 800d324:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2201      	movs	r2, #1
 800d32a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2200      	movs	r2, #0
 800d332:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2200      	movs	r2, #0
 800d33a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2200      	movs	r2, #0
 800d340:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d009      	beq.n	800d362 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d354:	685b      	ldr	r3, [r3, #4]
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	6852      	ldr	r2, [r2, #4]
 800d35a:	b2d2      	uxtb	r2, r2
 800d35c:	4611      	mov	r1, r2
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d362:	2340      	movs	r3, #64	; 0x40
 800d364:	2200      	movs	r2, #0
 800d366:	2100      	movs	r1, #0
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f001 fe8e 	bl	800f08a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	2201      	movs	r2, #1
 800d372:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2240      	movs	r2, #64	; 0x40
 800d37a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d37e:	2340      	movs	r3, #64	; 0x40
 800d380:	2200      	movs	r2, #0
 800d382:	2180      	movs	r1, #128	; 0x80
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f001 fe80 	bl	800f08a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2201      	movs	r2, #1
 800d38e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2240      	movs	r2, #64	; 0x40
 800d394:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d396:	2300      	movs	r3, #0
}
 800d398:	4618      	mov	r0, r3
 800d39a:	3708      	adds	r7, #8
 800d39c:	46bd      	mov	sp, r7
 800d39e:	bd80      	pop	{r7, pc}

0800d3a0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d3a0:	b480      	push	{r7}
 800d3a2:	b083      	sub	sp, #12
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	6078      	str	r0, [r7, #4]
 800d3a8:	460b      	mov	r3, r1
 800d3aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	78fa      	ldrb	r2, [r7, #3]
 800d3b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d3b2:	2300      	movs	r3, #0
}
 800d3b4:	4618      	mov	r0, r3
 800d3b6:	370c      	adds	r7, #12
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	b083      	sub	sp, #12
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	2204      	movs	r2, #4
 800d3d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d3dc:	2300      	movs	r3, #0
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	370c      	adds	r7, #12
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e8:	4770      	bx	lr

0800d3ea <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d3ea:	b480      	push	{r7}
 800d3ec:	b083      	sub	sp, #12
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3f8:	2b04      	cmp	r3, #4
 800d3fa:	d105      	bne.n	800d408 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d408:	2300      	movs	r3, #0
}
 800d40a:	4618      	mov	r0, r3
 800d40c:	370c      	adds	r7, #12
 800d40e:	46bd      	mov	sp, r7
 800d410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d414:	4770      	bx	lr

0800d416 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b082      	sub	sp, #8
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d424:	2b03      	cmp	r3, #3
 800d426:	d10b      	bne.n	800d440 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d42e:	69db      	ldr	r3, [r3, #28]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d005      	beq.n	800d440 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d43a:	69db      	ldr	r3, [r3, #28]
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	3708      	adds	r7, #8
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d44a:	b480      	push	{r7}
 800d44c:	b087      	sub	sp, #28
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d456:	697b      	ldr	r3, [r7, #20]
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	3301      	adds	r3, #1
 800d460:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	781b      	ldrb	r3, [r3, #0]
 800d466:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d468:	8a3b      	ldrh	r3, [r7, #16]
 800d46a:	021b      	lsls	r3, r3, #8
 800d46c:	b21a      	sxth	r2, r3
 800d46e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d472:	4313      	orrs	r3, r2
 800d474:	b21b      	sxth	r3, r3
 800d476:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d478:	89fb      	ldrh	r3, [r7, #14]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	371c      	adds	r7, #28
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr
	...

0800d488 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b084      	sub	sp, #16
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d492:	2300      	movs	r3, #0
 800d494:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d49e:	2b40      	cmp	r3, #64	; 0x40
 800d4a0:	d005      	beq.n	800d4ae <USBD_StdDevReq+0x26>
 800d4a2:	2b40      	cmp	r3, #64	; 0x40
 800d4a4:	d853      	bhi.n	800d54e <USBD_StdDevReq+0xc6>
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d00b      	beq.n	800d4c2 <USBD_StdDevReq+0x3a>
 800d4aa:	2b20      	cmp	r3, #32
 800d4ac:	d14f      	bne.n	800d54e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4b4:	689b      	ldr	r3, [r3, #8]
 800d4b6:	6839      	ldr	r1, [r7, #0]
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	4798      	blx	r3
 800d4bc:	4603      	mov	r3, r0
 800d4be:	73fb      	strb	r3, [r7, #15]
    break;
 800d4c0:	e04a      	b.n	800d558 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	785b      	ldrb	r3, [r3, #1]
 800d4c6:	2b09      	cmp	r3, #9
 800d4c8:	d83b      	bhi.n	800d542 <USBD_StdDevReq+0xba>
 800d4ca:	a201      	add	r2, pc, #4	; (adr r2, 800d4d0 <USBD_StdDevReq+0x48>)
 800d4cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4d0:	0800d525 	.word	0x0800d525
 800d4d4:	0800d539 	.word	0x0800d539
 800d4d8:	0800d543 	.word	0x0800d543
 800d4dc:	0800d52f 	.word	0x0800d52f
 800d4e0:	0800d543 	.word	0x0800d543
 800d4e4:	0800d503 	.word	0x0800d503
 800d4e8:	0800d4f9 	.word	0x0800d4f9
 800d4ec:	0800d543 	.word	0x0800d543
 800d4f0:	0800d51b 	.word	0x0800d51b
 800d4f4:	0800d50d 	.word	0x0800d50d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800d4f8:	6839      	ldr	r1, [r7, #0]
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 f9da 	bl	800d8b4 <USBD_GetDescriptor>
      break;
 800d500:	e024      	b.n	800d54c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800d502:	6839      	ldr	r1, [r7, #0]
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 fb69 	bl	800dbdc <USBD_SetAddress>
      break;
 800d50a:	e01f      	b.n	800d54c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800d50c:	6839      	ldr	r1, [r7, #0]
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f000 fba8 	bl	800dc64 <USBD_SetConfig>
 800d514:	4603      	mov	r3, r0
 800d516:	73fb      	strb	r3, [r7, #15]
      break;
 800d518:	e018      	b.n	800d54c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800d51a:	6839      	ldr	r1, [r7, #0]
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f000 fc45 	bl	800ddac <USBD_GetConfig>
      break;
 800d522:	e013      	b.n	800d54c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800d524:	6839      	ldr	r1, [r7, #0]
 800d526:	6878      	ldr	r0, [r7, #4]
 800d528:	f000 fc75 	bl	800de16 <USBD_GetStatus>
      break;
 800d52c:	e00e      	b.n	800d54c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800d52e:	6839      	ldr	r1, [r7, #0]
 800d530:	6878      	ldr	r0, [r7, #4]
 800d532:	f000 fca3 	bl	800de7c <USBD_SetFeature>
      break;
 800d536:	e009      	b.n	800d54c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800d538:	6839      	ldr	r1, [r7, #0]
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 fcb2 	bl	800dea4 <USBD_ClrFeature>
      break;
 800d540:	e004      	b.n	800d54c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800d542:	6839      	ldr	r1, [r7, #0]
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 fd08 	bl	800df5a <USBD_CtlError>
      break;
 800d54a:	bf00      	nop
    }
    break;
 800d54c:	e004      	b.n	800d558 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800d54e:	6839      	ldr	r1, [r7, #0]
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 fd02 	bl	800df5a <USBD_CtlError>
    break;
 800d556:	bf00      	nop
  }

  return ret;
 800d558:	7bfb      	ldrb	r3, [r7, #15]
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3710      	adds	r7, #16
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop

0800d564 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d56e:	2300      	movs	r3, #0
 800d570:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d57a:	2b40      	cmp	r3, #64	; 0x40
 800d57c:	d005      	beq.n	800d58a <USBD_StdItfReq+0x26>
 800d57e:	2b40      	cmp	r3, #64	; 0x40
 800d580:	d82e      	bhi.n	800d5e0 <USBD_StdItfReq+0x7c>
 800d582:	2b00      	cmp	r3, #0
 800d584:	d001      	beq.n	800d58a <USBD_StdItfReq+0x26>
 800d586:	2b20      	cmp	r3, #32
 800d588:	d12a      	bne.n	800d5e0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d590:	3b01      	subs	r3, #1
 800d592:	2b02      	cmp	r3, #2
 800d594:	d81d      	bhi.n	800d5d2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d596:	683b      	ldr	r3, [r7, #0]
 800d598:	889b      	ldrh	r3, [r3, #4]
 800d59a:	b2db      	uxtb	r3, r3
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	d813      	bhi.n	800d5c8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	6839      	ldr	r1, [r7, #0]
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	4798      	blx	r3
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	88db      	ldrh	r3, [r3, #6]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d110      	bne.n	800d5dc <USBD_StdItfReq+0x78>
 800d5ba:	7bfb      	ldrb	r3, [r7, #15]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d10d      	bne.n	800d5dc <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800d5c0:	6878      	ldr	r0, [r7, #4]
 800d5c2:	f000 fd95 	bl	800e0f0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d5c6:	e009      	b.n	800d5dc <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800d5c8:	6839      	ldr	r1, [r7, #0]
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 fcc5 	bl	800df5a <USBD_CtlError>
      break;
 800d5d0:	e004      	b.n	800d5dc <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800d5d2:	6839      	ldr	r1, [r7, #0]
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 fcc0 	bl	800df5a <USBD_CtlError>
      break;
 800d5da:	e000      	b.n	800d5de <USBD_StdItfReq+0x7a>
      break;
 800d5dc:	bf00      	nop
    }
    break;
 800d5de:	e004      	b.n	800d5ea <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800d5e0:	6839      	ldr	r1, [r7, #0]
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 fcb9 	bl	800df5a <USBD_CtlError>
    break;
 800d5e8:	bf00      	nop
  }

  return ret;
 800d5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3710      	adds	r7, #16
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
 800d5fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d5fe:	2300      	movs	r3, #0
 800d600:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d602:	683b      	ldr	r3, [r7, #0]
 800d604:	889b      	ldrh	r3, [r3, #4]
 800d606:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d610:	2b40      	cmp	r3, #64	; 0x40
 800d612:	d007      	beq.n	800d624 <USBD_StdEPReq+0x30>
 800d614:	2b40      	cmp	r3, #64	; 0x40
 800d616:	f200 8142 	bhi.w	800d89e <USBD_StdEPReq+0x2aa>
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d00c      	beq.n	800d638 <USBD_StdEPReq+0x44>
 800d61e:	2b20      	cmp	r3, #32
 800d620:	f040 813d 	bne.w	800d89e <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d62a:	689b      	ldr	r3, [r3, #8]
 800d62c:	6839      	ldr	r1, [r7, #0]
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	4798      	blx	r3
 800d632:	4603      	mov	r3, r0
 800d634:	73fb      	strb	r3, [r7, #15]
    break;
 800d636:	e137      	b.n	800d8a8 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800d638:	683b      	ldr	r3, [r7, #0]
 800d63a:	785b      	ldrb	r3, [r3, #1]
 800d63c:	2b03      	cmp	r3, #3
 800d63e:	d007      	beq.n	800d650 <USBD_StdEPReq+0x5c>
 800d640:	2b03      	cmp	r3, #3
 800d642:	f300 8126 	bgt.w	800d892 <USBD_StdEPReq+0x29e>
 800d646:	2b00      	cmp	r3, #0
 800d648:	d07d      	beq.n	800d746 <USBD_StdEPReq+0x152>
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d03b      	beq.n	800d6c6 <USBD_StdEPReq+0xd2>
 800d64e:	e120      	b.n	800d892 <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d656:	2b02      	cmp	r3, #2
 800d658:	d002      	beq.n	800d660 <USBD_StdEPReq+0x6c>
 800d65a:	2b03      	cmp	r3, #3
 800d65c:	d016      	beq.n	800d68c <USBD_StdEPReq+0x98>
 800d65e:	e02c      	b.n	800d6ba <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d660:	7bbb      	ldrb	r3, [r7, #14]
 800d662:	2b00      	cmp	r3, #0
 800d664:	d00d      	beq.n	800d682 <USBD_StdEPReq+0x8e>
 800d666:	7bbb      	ldrb	r3, [r7, #14]
 800d668:	2b80      	cmp	r3, #128	; 0x80
 800d66a:	d00a      	beq.n	800d682 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800d66c:	7bbb      	ldrb	r3, [r7, #14]
 800d66e:	4619      	mov	r1, r3
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f001 fd4f 	bl	800f114 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d676:	2180      	movs	r1, #128	; 0x80
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f001 fd4b 	bl	800f114 <USBD_LL_StallEP>
 800d67e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d680:	e020      	b.n	800d6c4 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800d682:	6839      	ldr	r1, [r7, #0]
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 fc68 	bl	800df5a <USBD_CtlError>
        break;
 800d68a:	e01b      	b.n	800d6c4 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	885b      	ldrh	r3, [r3, #2]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10e      	bne.n	800d6b2 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d694:	7bbb      	ldrb	r3, [r7, #14]
 800d696:	2b00      	cmp	r3, #0
 800d698:	d00b      	beq.n	800d6b2 <USBD_StdEPReq+0xbe>
 800d69a:	7bbb      	ldrb	r3, [r7, #14]
 800d69c:	2b80      	cmp	r3, #128	; 0x80
 800d69e:	d008      	beq.n	800d6b2 <USBD_StdEPReq+0xbe>
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	88db      	ldrh	r3, [r3, #6]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d104      	bne.n	800d6b2 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800d6a8:	7bbb      	ldrb	r3, [r7, #14]
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	6878      	ldr	r0, [r7, #4]
 800d6ae:	f001 fd31 	bl	800f114 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f000 fd1c 	bl	800e0f0 <USBD_CtlSendStatus>

        break;
 800d6b8:	e004      	b.n	800d6c4 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800d6ba:	6839      	ldr	r1, [r7, #0]
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f000 fc4c 	bl	800df5a <USBD_CtlError>
        break;
 800d6c2:	bf00      	nop
      }
      break;
 800d6c4:	e0ea      	b.n	800d89c <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6cc:	2b02      	cmp	r3, #2
 800d6ce:	d002      	beq.n	800d6d6 <USBD_StdEPReq+0xe2>
 800d6d0:	2b03      	cmp	r3, #3
 800d6d2:	d016      	beq.n	800d702 <USBD_StdEPReq+0x10e>
 800d6d4:	e030      	b.n	800d738 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d6d6:	7bbb      	ldrb	r3, [r7, #14]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00d      	beq.n	800d6f8 <USBD_StdEPReq+0x104>
 800d6dc:	7bbb      	ldrb	r3, [r7, #14]
 800d6de:	2b80      	cmp	r3, #128	; 0x80
 800d6e0:	d00a      	beq.n	800d6f8 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800d6e2:	7bbb      	ldrb	r3, [r7, #14]
 800d6e4:	4619      	mov	r1, r3
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f001 fd14 	bl	800f114 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d6ec:	2180      	movs	r1, #128	; 0x80
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f001 fd10 	bl	800f114 <USBD_LL_StallEP>
 800d6f4:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d6f6:	e025      	b.n	800d744 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800d6f8:	6839      	ldr	r1, [r7, #0]
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 fc2d 	bl	800df5a <USBD_CtlError>
        break;
 800d700:	e020      	b.n	800d744 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	885b      	ldrh	r3, [r3, #2]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d11b      	bne.n	800d742 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d70a:	7bbb      	ldrb	r3, [r7, #14]
 800d70c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d710:	2b00      	cmp	r3, #0
 800d712:	d004      	beq.n	800d71e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d714:	7bbb      	ldrb	r3, [r7, #14]
 800d716:	4619      	mov	r1, r3
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f001 fd1a 	bl	800f152 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 fce6 	bl	800e0f0 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d72a:	689b      	ldr	r3, [r3, #8]
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	4798      	blx	r3
 800d732:	4603      	mov	r3, r0
 800d734:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800d736:	e004      	b.n	800d742 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800d738:	6839      	ldr	r1, [r7, #0]
 800d73a:	6878      	ldr	r0, [r7, #4]
 800d73c:	f000 fc0d 	bl	800df5a <USBD_CtlError>
        break;
 800d740:	e000      	b.n	800d744 <USBD_StdEPReq+0x150>
        break;
 800d742:	bf00      	nop
      }
      break;
 800d744:	e0aa      	b.n	800d89c <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d74c:	2b02      	cmp	r3, #2
 800d74e:	d002      	beq.n	800d756 <USBD_StdEPReq+0x162>
 800d750:	2b03      	cmp	r3, #3
 800d752:	d032      	beq.n	800d7ba <USBD_StdEPReq+0x1c6>
 800d754:	e097      	b.n	800d886 <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d756:	7bbb      	ldrb	r3, [r7, #14]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d007      	beq.n	800d76c <USBD_StdEPReq+0x178>
 800d75c:	7bbb      	ldrb	r3, [r7, #14]
 800d75e:	2b80      	cmp	r3, #128	; 0x80
 800d760:	d004      	beq.n	800d76c <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 800d762:	6839      	ldr	r1, [r7, #0]
 800d764:	6878      	ldr	r0, [r7, #4]
 800d766:	f000 fbf8 	bl	800df5a <USBD_CtlError>
          break;
 800d76a:	e091      	b.n	800d890 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d76c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d770:	2b00      	cmp	r3, #0
 800d772:	da0b      	bge.n	800d78c <USBD_StdEPReq+0x198>
 800d774:	7bbb      	ldrb	r3, [r7, #14]
 800d776:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d77a:	4613      	mov	r3, r2
 800d77c:	009b      	lsls	r3, r3, #2
 800d77e:	4413      	add	r3, r2
 800d780:	009b      	lsls	r3, r3, #2
 800d782:	3310      	adds	r3, #16
 800d784:	687a      	ldr	r2, [r7, #4]
 800d786:	4413      	add	r3, r2
 800d788:	3304      	adds	r3, #4
 800d78a:	e00b      	b.n	800d7a4 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800d78c:	7bbb      	ldrb	r3, [r7, #14]
 800d78e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d792:	4613      	mov	r3, r2
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	4413      	add	r3, r2
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d79e:	687a      	ldr	r2, [r7, #4]
 800d7a0:	4413      	add	r3, r2
 800d7a2:	3304      	adds	r3, #4
 800d7a4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	2202      	movs	r2, #2
 800d7b0:	4619      	mov	r1, r3
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 fc42 	bl	800e03c <USBD_CtlSendData>
        break;
 800d7b8:	e06a      	b.n	800d890 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800d7ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	da11      	bge.n	800d7e6 <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d7c2:	7bbb      	ldrb	r3, [r7, #14]
 800d7c4:	f003 020f 	and.w	r2, r3, #15
 800d7c8:	6879      	ldr	r1, [r7, #4]
 800d7ca:	4613      	mov	r3, r2
 800d7cc:	009b      	lsls	r3, r3, #2
 800d7ce:	4413      	add	r3, r2
 800d7d0:	009b      	lsls	r3, r3, #2
 800d7d2:	440b      	add	r3, r1
 800d7d4:	3324      	adds	r3, #36	; 0x24
 800d7d6:	881b      	ldrh	r3, [r3, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d117      	bne.n	800d80c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800d7dc:	6839      	ldr	r1, [r7, #0]
 800d7de:	6878      	ldr	r0, [r7, #4]
 800d7e0:	f000 fbbb 	bl	800df5a <USBD_CtlError>
            break;
 800d7e4:	e054      	b.n	800d890 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d7e6:	7bbb      	ldrb	r3, [r7, #14]
 800d7e8:	f003 020f 	and.w	r2, r3, #15
 800d7ec:	6879      	ldr	r1, [r7, #4]
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	009b      	lsls	r3, r3, #2
 800d7f2:	4413      	add	r3, r2
 800d7f4:	009b      	lsls	r3, r3, #2
 800d7f6:	440b      	add	r3, r1
 800d7f8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d7fc:	881b      	ldrh	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d104      	bne.n	800d80c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800d802:	6839      	ldr	r1, [r7, #0]
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f000 fba8 	bl	800df5a <USBD_CtlError>
            break;
 800d80a:	e041      	b.n	800d890 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d80c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d810:	2b00      	cmp	r3, #0
 800d812:	da0b      	bge.n	800d82c <USBD_StdEPReq+0x238>
 800d814:	7bbb      	ldrb	r3, [r7, #14]
 800d816:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d81a:	4613      	mov	r3, r2
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	4413      	add	r3, r2
 800d820:	009b      	lsls	r3, r3, #2
 800d822:	3310      	adds	r3, #16
 800d824:	687a      	ldr	r2, [r7, #4]
 800d826:	4413      	add	r3, r2
 800d828:	3304      	adds	r3, #4
 800d82a:	e00b      	b.n	800d844 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 800d82c:	7bbb      	ldrb	r3, [r7, #14]
 800d82e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d832:	4613      	mov	r3, r2
 800d834:	009b      	lsls	r3, r3, #2
 800d836:	4413      	add	r3, r2
 800d838:	009b      	lsls	r3, r3, #2
 800d83a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d83e:	687a      	ldr	r2, [r7, #4]
 800d840:	4413      	add	r3, r2
 800d842:	3304      	adds	r3, #4
 800d844:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d846:	7bbb      	ldrb	r3, [r7, #14]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d002      	beq.n	800d852 <USBD_StdEPReq+0x25e>
 800d84c:	7bbb      	ldrb	r3, [r7, #14]
 800d84e:	2b80      	cmp	r3, #128	; 0x80
 800d850:	d103      	bne.n	800d85a <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	2200      	movs	r2, #0
 800d856:	601a      	str	r2, [r3, #0]
 800d858:	e00e      	b.n	800d878 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d85a:	7bbb      	ldrb	r3, [r7, #14]
 800d85c:	4619      	mov	r1, r3
 800d85e:	6878      	ldr	r0, [r7, #4]
 800d860:	f001 fc96 	bl	800f190 <USBD_LL_IsStallEP>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	d003      	beq.n	800d872 <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	2201      	movs	r2, #1
 800d86e:	601a      	str	r2, [r3, #0]
 800d870:	e002      	b.n	800d878 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	2200      	movs	r2, #0
 800d876:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d878:	68bb      	ldr	r3, [r7, #8]
 800d87a:	2202      	movs	r2, #2
 800d87c:	4619      	mov	r1, r3
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 fbdc 	bl	800e03c <USBD_CtlSendData>
          break;
 800d884:	e004      	b.n	800d890 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 800d886:	6839      	ldr	r1, [r7, #0]
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 fb66 	bl	800df5a <USBD_CtlError>
        break;
 800d88e:	bf00      	nop
      }
      break;
 800d890:	e004      	b.n	800d89c <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 800d892:	6839      	ldr	r1, [r7, #0]
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 fb60 	bl	800df5a <USBD_CtlError>
      break;
 800d89a:	bf00      	nop
    }
    break;
 800d89c:	e004      	b.n	800d8a8 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800d89e:	6839      	ldr	r1, [r7, #0]
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 fb5a 	bl	800df5a <USBD_CtlError>
    break;
 800d8a6:	bf00      	nop
  }

  return ret;
 800d8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	3710      	adds	r7, #16
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	bd80      	pop	{r7, pc}
	...

0800d8b4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d8be:	2300      	movs	r3, #0
 800d8c0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d8c6:	2300      	movs	r3, #0
 800d8c8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	885b      	ldrh	r3, [r3, #2]
 800d8ce:	0a1b      	lsrs	r3, r3, #8
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	2b0e      	cmp	r3, #14
 800d8d6:	f200 8152 	bhi.w	800db7e <USBD_GetDescriptor+0x2ca>
 800d8da:	a201      	add	r2, pc, #4	; (adr r2, 800d8e0 <USBD_GetDescriptor+0x2c>)
 800d8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8e0:	0800d951 	.word	0x0800d951
 800d8e4:	0800d969 	.word	0x0800d969
 800d8e8:	0800d9a9 	.word	0x0800d9a9
 800d8ec:	0800db7f 	.word	0x0800db7f
 800d8f0:	0800db7f 	.word	0x0800db7f
 800d8f4:	0800db1f 	.word	0x0800db1f
 800d8f8:	0800db4b 	.word	0x0800db4b
 800d8fc:	0800db7f 	.word	0x0800db7f
 800d900:	0800db7f 	.word	0x0800db7f
 800d904:	0800db7f 	.word	0x0800db7f
 800d908:	0800db7f 	.word	0x0800db7f
 800d90c:	0800db7f 	.word	0x0800db7f
 800d910:	0800db7f 	.word	0x0800db7f
 800d914:	0800db7f 	.word	0x0800db7f
 800d918:	0800d91d 	.word	0x0800d91d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d922:	69db      	ldr	r3, [r3, #28]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00b      	beq.n	800d940 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d92e:	69db      	ldr	r3, [r3, #28]
 800d930:	687a      	ldr	r2, [r7, #4]
 800d932:	7c12      	ldrb	r2, [r2, #16]
 800d934:	f107 0108 	add.w	r1, r7, #8
 800d938:	4610      	mov	r0, r2
 800d93a:	4798      	blx	r3
 800d93c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800d93e:	e126      	b.n	800db8e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800d940:	6839      	ldr	r1, [r7, #0]
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f000 fb09 	bl	800df5a <USBD_CtlError>
      err++;
 800d948:	7afb      	ldrb	r3, [r7, #11]
 800d94a:	3301      	adds	r3, #1
 800d94c:	72fb      	strb	r3, [r7, #11]
    break;
 800d94e:	e11e      	b.n	800db8e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	687a      	ldr	r2, [r7, #4]
 800d95a:	7c12      	ldrb	r2, [r2, #16]
 800d95c:	f107 0108 	add.w	r1, r7, #8
 800d960:	4610      	mov	r0, r2
 800d962:	4798      	blx	r3
 800d964:	60f8      	str	r0, [r7, #12]
    break;
 800d966:	e112      	b.n	800db8e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	7c1b      	ldrb	r3, [r3, #16]
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d10d      	bne.n	800d98c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d978:	f107 0208 	add.w	r2, r7, #8
 800d97c:	4610      	mov	r0, r2
 800d97e:	4798      	blx	r3
 800d980:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	3301      	adds	r3, #1
 800d986:	2202      	movs	r2, #2
 800d988:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d98a:	e100      	b.n	800db8e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d994:	f107 0208 	add.w	r2, r7, #8
 800d998:	4610      	mov	r0, r2
 800d99a:	4798      	blx	r3
 800d99c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	3301      	adds	r3, #1
 800d9a2:	2202      	movs	r2, #2
 800d9a4:	701a      	strb	r2, [r3, #0]
    break;
 800d9a6:	e0f2      	b.n	800db8e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d9a8:	683b      	ldr	r3, [r7, #0]
 800d9aa:	885b      	ldrh	r3, [r3, #2]
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	2b05      	cmp	r3, #5
 800d9b0:	f200 80ac 	bhi.w	800db0c <USBD_GetDescriptor+0x258>
 800d9b4:	a201      	add	r2, pc, #4	; (adr r2, 800d9bc <USBD_GetDescriptor+0x108>)
 800d9b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9ba:	bf00      	nop
 800d9bc:	0800d9d5 	.word	0x0800d9d5
 800d9c0:	0800da09 	.word	0x0800da09
 800d9c4:	0800da3d 	.word	0x0800da3d
 800d9c8:	0800da71 	.word	0x0800da71
 800d9cc:	0800daa5 	.word	0x0800daa5
 800d9d0:	0800dad9 	.word	0x0800dad9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d00b      	beq.n	800d9f8 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d9e6:	685b      	ldr	r3, [r3, #4]
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	7c12      	ldrb	r2, [r2, #16]
 800d9ec:	f107 0108 	add.w	r1, r7, #8
 800d9f0:	4610      	mov	r0, r2
 800d9f2:	4798      	blx	r3
 800d9f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d9f6:	e091      	b.n	800db1c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800d9f8:	6839      	ldr	r1, [r7, #0]
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 faad 	bl	800df5a <USBD_CtlError>
        err++;
 800da00:	7afb      	ldrb	r3, [r7, #11]
 800da02:	3301      	adds	r3, #1
 800da04:	72fb      	strb	r3, [r7, #11]
      break;
 800da06:	e089      	b.n	800db1c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da0e:	689b      	ldr	r3, [r3, #8]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00b      	beq.n	800da2c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	687a      	ldr	r2, [r7, #4]
 800da1e:	7c12      	ldrb	r2, [r2, #16]
 800da20:	f107 0108 	add.w	r1, r7, #8
 800da24:	4610      	mov	r0, r2
 800da26:	4798      	blx	r3
 800da28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da2a:	e077      	b.n	800db1c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800da2c:	6839      	ldr	r1, [r7, #0]
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 fa93 	bl	800df5a <USBD_CtlError>
        err++;
 800da34:	7afb      	ldrb	r3, [r7, #11]
 800da36:	3301      	adds	r3, #1
 800da38:	72fb      	strb	r3, [r7, #11]
      break;
 800da3a:	e06f      	b.n	800db1c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00b      	beq.n	800da60 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	7c12      	ldrb	r2, [r2, #16]
 800da54:	f107 0108 	add.w	r1, r7, #8
 800da58:	4610      	mov	r0, r2
 800da5a:	4798      	blx	r3
 800da5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da5e:	e05d      	b.n	800db1c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800da60:	6839      	ldr	r1, [r7, #0]
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 fa79 	bl	800df5a <USBD_CtlError>
        err++;
 800da68:	7afb      	ldrb	r3, [r7, #11]
 800da6a:	3301      	adds	r3, #1
 800da6c:	72fb      	strb	r3, [r7, #11]
      break;
 800da6e:	e055      	b.n	800db1c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da76:	691b      	ldr	r3, [r3, #16]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d00b      	beq.n	800da94 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800da82:	691b      	ldr	r3, [r3, #16]
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	7c12      	ldrb	r2, [r2, #16]
 800da88:	f107 0108 	add.w	r1, r7, #8
 800da8c:	4610      	mov	r0, r2
 800da8e:	4798      	blx	r3
 800da90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800da92:	e043      	b.n	800db1c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800da94:	6839      	ldr	r1, [r7, #0]
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f000 fa5f 	bl	800df5a <USBD_CtlError>
        err++;
 800da9c:	7afb      	ldrb	r3, [r7, #11]
 800da9e:	3301      	adds	r3, #1
 800daa0:	72fb      	strb	r3, [r7, #11]
      break;
 800daa2:	e03b      	b.n	800db1c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daaa:	695b      	ldr	r3, [r3, #20]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d00b      	beq.n	800dac8 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dab6:	695b      	ldr	r3, [r3, #20]
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	7c12      	ldrb	r2, [r2, #16]
 800dabc:	f107 0108 	add.w	r1, r7, #8
 800dac0:	4610      	mov	r0, r2
 800dac2:	4798      	blx	r3
 800dac4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dac6:	e029      	b.n	800db1c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800dac8:	6839      	ldr	r1, [r7, #0]
 800daca:	6878      	ldr	r0, [r7, #4]
 800dacc:	f000 fa45 	bl	800df5a <USBD_CtlError>
        err++;
 800dad0:	7afb      	ldrb	r3, [r7, #11]
 800dad2:	3301      	adds	r3, #1
 800dad4:	72fb      	strb	r3, [r7, #11]
      break;
 800dad6:	e021      	b.n	800db1c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dade:	699b      	ldr	r3, [r3, #24]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00b      	beq.n	800dafc <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daea:	699b      	ldr	r3, [r3, #24]
 800daec:	687a      	ldr	r2, [r7, #4]
 800daee:	7c12      	ldrb	r2, [r2, #16]
 800daf0:	f107 0108 	add.w	r1, r7, #8
 800daf4:	4610      	mov	r0, r2
 800daf6:	4798      	blx	r3
 800daf8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dafa:	e00f      	b.n	800db1c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800dafc:	6839      	ldr	r1, [r7, #0]
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 fa2b 	bl	800df5a <USBD_CtlError>
        err++;
 800db04:	7afb      	ldrb	r3, [r7, #11]
 800db06:	3301      	adds	r3, #1
 800db08:	72fb      	strb	r3, [r7, #11]
      break;
 800db0a:	e007      	b.n	800db1c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800db0c:	6839      	ldr	r1, [r7, #0]
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 fa23 	bl	800df5a <USBD_CtlError>
      err++;
 800db14:	7afb      	ldrb	r3, [r7, #11]
 800db16:	3301      	adds	r3, #1
 800db18:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800db1a:	bf00      	nop
    }
    break;
 800db1c:	e037      	b.n	800db8e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	7c1b      	ldrb	r3, [r3, #16]
 800db22:	2b00      	cmp	r3, #0
 800db24:	d109      	bne.n	800db3a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800db2e:	f107 0208 	add.w	r2, r7, #8
 800db32:	4610      	mov	r0, r2
 800db34:	4798      	blx	r3
 800db36:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800db38:	e029      	b.n	800db8e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800db3a:	6839      	ldr	r1, [r7, #0]
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f000 fa0c 	bl	800df5a <USBD_CtlError>
      err++;
 800db42:	7afb      	ldrb	r3, [r7, #11]
 800db44:	3301      	adds	r3, #1
 800db46:	72fb      	strb	r3, [r7, #11]
    break;
 800db48:	e021      	b.n	800db8e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	7c1b      	ldrb	r3, [r3, #16]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d10d      	bne.n	800db6e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800db5a:	f107 0208 	add.w	r2, r7, #8
 800db5e:	4610      	mov	r0, r2
 800db60:	4798      	blx	r3
 800db62:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	3301      	adds	r3, #1
 800db68:	2207      	movs	r2, #7
 800db6a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800db6c:	e00f      	b.n	800db8e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800db6e:	6839      	ldr	r1, [r7, #0]
 800db70:	6878      	ldr	r0, [r7, #4]
 800db72:	f000 f9f2 	bl	800df5a <USBD_CtlError>
      err++;
 800db76:	7afb      	ldrb	r3, [r7, #11]
 800db78:	3301      	adds	r3, #1
 800db7a:	72fb      	strb	r3, [r7, #11]
    break;
 800db7c:	e007      	b.n	800db8e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800db7e:	6839      	ldr	r1, [r7, #0]
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f000 f9ea 	bl	800df5a <USBD_CtlError>
    err++;
 800db86:	7afb      	ldrb	r3, [r7, #11]
 800db88:	3301      	adds	r3, #1
 800db8a:	72fb      	strb	r3, [r7, #11]
    break;
 800db8c:	bf00      	nop
  }

  if (err != 0U)
 800db8e:	7afb      	ldrb	r3, [r7, #11]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d11e      	bne.n	800dbd2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	88db      	ldrh	r3, [r3, #6]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d016      	beq.n	800dbca <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800db9c:	893b      	ldrh	r3, [r7, #8]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d00e      	beq.n	800dbc0 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800dba2:	683b      	ldr	r3, [r7, #0]
 800dba4:	88da      	ldrh	r2, [r3, #6]
 800dba6:	893b      	ldrh	r3, [r7, #8]
 800dba8:	4293      	cmp	r3, r2
 800dbaa:	bf28      	it	cs
 800dbac:	4613      	movcs	r3, r2
 800dbae:	b29b      	uxth	r3, r3
 800dbb0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800dbb2:	893b      	ldrh	r3, [r7, #8]
 800dbb4:	461a      	mov	r2, r3
 800dbb6:	68f9      	ldr	r1, [r7, #12]
 800dbb8:	6878      	ldr	r0, [r7, #4]
 800dbba:	f000 fa3f 	bl	800e03c <USBD_CtlSendData>
 800dbbe:	e009      	b.n	800dbd4 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800dbc0:	6839      	ldr	r1, [r7, #0]
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 f9c9 	bl	800df5a <USBD_CtlError>
 800dbc8:	e004      	b.n	800dbd4 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800dbca:	6878      	ldr	r0, [r7, #4]
 800dbcc:	f000 fa90 	bl	800e0f0 <USBD_CtlSendStatus>
 800dbd0:	e000      	b.n	800dbd4 <USBD_GetDescriptor+0x320>
    return;
 800dbd2:	bf00      	nop
    }
  }
}
 800dbd4:	3710      	adds	r7, #16
 800dbd6:	46bd      	mov	sp, r7
 800dbd8:	bd80      	pop	{r7, pc}
 800dbda:	bf00      	nop

0800dbdc <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbdc:	b580      	push	{r7, lr}
 800dbde:	b084      	sub	sp, #16
 800dbe0:	af00      	add	r7, sp, #0
 800dbe2:	6078      	str	r0, [r7, #4]
 800dbe4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	889b      	ldrh	r3, [r3, #4]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d130      	bne.n	800dc50 <USBD_SetAddress+0x74>
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	88db      	ldrh	r3, [r3, #6]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d12c      	bne.n	800dc50 <USBD_SetAddress+0x74>
 800dbf6:	683b      	ldr	r3, [r7, #0]
 800dbf8:	885b      	ldrh	r3, [r3, #2]
 800dbfa:	2b7f      	cmp	r3, #127	; 0x7f
 800dbfc:	d828      	bhi.n	800dc50 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	885b      	ldrh	r3, [r3, #2]
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc08:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc10:	2b03      	cmp	r3, #3
 800dc12:	d104      	bne.n	800dc1e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800dc14:	6839      	ldr	r1, [r7, #0]
 800dc16:	6878      	ldr	r0, [r7, #4]
 800dc18:	f000 f99f 	bl	800df5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc1c:	e01d      	b.n	800dc5a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	7bfa      	ldrb	r2, [r7, #15]
 800dc22:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dc26:	7bfb      	ldrb	r3, [r7, #15]
 800dc28:	4619      	mov	r1, r3
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f001 fadc 	bl	800f1e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 fa5d 	bl	800e0f0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dc36:	7bfb      	ldrb	r3, [r7, #15]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d004      	beq.n	800dc46 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2202      	movs	r2, #2
 800dc40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc44:	e009      	b.n	800dc5a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2201      	movs	r2, #1
 800dc4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc4e:	e004      	b.n	800dc5a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dc50:	6839      	ldr	r1, [r7, #0]
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 f981 	bl	800df5a <USBD_CtlError>
  }
}
 800dc58:	bf00      	nop
 800dc5a:	bf00      	nop
 800dc5c:	3710      	adds	r7, #16
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	bd80      	pop	{r7, pc}
	...

0800dc64 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b084      	sub	sp, #16
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc6e:	2300      	movs	r3, #0
 800dc70:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	885b      	ldrh	r3, [r3, #2]
 800dc76:	b2da      	uxtb	r2, r3
 800dc78:	4b4b      	ldr	r3, [pc, #300]	; (800dda8 <USBD_SetConfig+0x144>)
 800dc7a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dc7c:	4b4a      	ldr	r3, [pc, #296]	; (800dda8 <USBD_SetConfig+0x144>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	2b01      	cmp	r3, #1
 800dc82:	d905      	bls.n	800dc90 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800dc84:	6839      	ldr	r1, [r7, #0]
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 f967 	bl	800df5a <USBD_CtlError>
    return USBD_FAIL;
 800dc8c:	2303      	movs	r3, #3
 800dc8e:	e087      	b.n	800dda0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc96:	2b02      	cmp	r3, #2
 800dc98:	d002      	beq.n	800dca0 <USBD_SetConfig+0x3c>
 800dc9a:	2b03      	cmp	r3, #3
 800dc9c:	d025      	beq.n	800dcea <USBD_SetConfig+0x86>
 800dc9e:	e071      	b.n	800dd84 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800dca0:	4b41      	ldr	r3, [pc, #260]	; (800dda8 <USBD_SetConfig+0x144>)
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d01c      	beq.n	800dce2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800dca8:	4b3f      	ldr	r3, [pc, #252]	; (800dda8 <USBD_SetConfig+0x144>)
 800dcaa:	781b      	ldrb	r3, [r3, #0]
 800dcac:	461a      	mov	r2, r3
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800dcb2:	4b3d      	ldr	r3, [pc, #244]	; (800dda8 <USBD_SetConfig+0x144>)
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7ff f9ae 	bl	800d01a <USBD_SetClassConfig>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800dcc2:	7bfb      	ldrb	r3, [r7, #15]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d004      	beq.n	800dcd2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800dcc8:	6839      	ldr	r1, [r7, #0]
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 f945 	bl	800df5a <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800dcd0:	e065      	b.n	800dd9e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f000 fa0c 	bl	800e0f0 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2203      	movs	r2, #3
 800dcdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800dce0:	e05d      	b.n	800dd9e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f000 fa04 	bl	800e0f0 <USBD_CtlSendStatus>
    break;
 800dce8:	e059      	b.n	800dd9e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800dcea:	4b2f      	ldr	r3, [pc, #188]	; (800dda8 <USBD_SetConfig+0x144>)
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d112      	bne.n	800dd18 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	2202      	movs	r2, #2
 800dcf6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800dcfa:	4b2b      	ldr	r3, [pc, #172]	; (800dda8 <USBD_SetConfig+0x144>)
 800dcfc:	781b      	ldrb	r3, [r3, #0]
 800dcfe:	461a      	mov	r2, r3
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dd04:	4b28      	ldr	r3, [pc, #160]	; (800dda8 <USBD_SetConfig+0x144>)
 800dd06:	781b      	ldrb	r3, [r3, #0]
 800dd08:	4619      	mov	r1, r3
 800dd0a:	6878      	ldr	r0, [r7, #4]
 800dd0c:	f7ff f9a1 	bl	800d052 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f000 f9ed 	bl	800e0f0 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800dd16:	e042      	b.n	800dd9e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800dd18:	4b23      	ldr	r3, [pc, #140]	; (800dda8 <USBD_SetConfig+0x144>)
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	685b      	ldr	r3, [r3, #4]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d02a      	beq.n	800dd7c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	685b      	ldr	r3, [r3, #4]
 800dd2a:	b2db      	uxtb	r3, r3
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f7ff f98f 	bl	800d052 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800dd34:	4b1c      	ldr	r3, [pc, #112]	; (800dda8 <USBD_SetConfig+0x144>)
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	461a      	mov	r2, r3
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800dd3e:	4b1a      	ldr	r3, [pc, #104]	; (800dda8 <USBD_SetConfig+0x144>)
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	4619      	mov	r1, r3
 800dd44:	6878      	ldr	r0, [r7, #4]
 800dd46:	f7ff f968 	bl	800d01a <USBD_SetClassConfig>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800dd4e:	7bfb      	ldrb	r3, [r7, #15]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d00f      	beq.n	800dd74 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800dd54:	6839      	ldr	r1, [r7, #0]
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 f8ff 	bl	800df5a <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	b2db      	uxtb	r3, r3
 800dd62:	4619      	mov	r1, r3
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f7ff f974 	bl	800d052 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2202      	movs	r2, #2
 800dd6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800dd72:	e014      	b.n	800dd9e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 f9bb 	bl	800e0f0 <USBD_CtlSendStatus>
    break;
 800dd7a:	e010      	b.n	800dd9e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800dd7c:	6878      	ldr	r0, [r7, #4]
 800dd7e:	f000 f9b7 	bl	800e0f0 <USBD_CtlSendStatus>
    break;
 800dd82:	e00c      	b.n	800dd9e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800dd84:	6839      	ldr	r1, [r7, #0]
 800dd86:	6878      	ldr	r0, [r7, #4]
 800dd88:	f000 f8e7 	bl	800df5a <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dd8c:	4b06      	ldr	r3, [pc, #24]	; (800dda8 <USBD_SetConfig+0x144>)
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	4619      	mov	r1, r3
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f7ff f95d 	bl	800d052 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800dd98:	2303      	movs	r3, #3
 800dd9a:	73fb      	strb	r3, [r7, #15]
    break;
 800dd9c:	bf00      	nop
  }

  return ret;
 800dd9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dda0:	4618      	mov	r0, r3
 800dda2:	3710      	adds	r7, #16
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	20001464 	.word	0x20001464

0800ddac <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	88db      	ldrh	r3, [r3, #6]
 800ddba:	2b01      	cmp	r3, #1
 800ddbc:	d004      	beq.n	800ddc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ddbe:	6839      	ldr	r1, [r7, #0]
 800ddc0:	6878      	ldr	r0, [r7, #4]
 800ddc2:	f000 f8ca 	bl	800df5a <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ddc6:	e022      	b.n	800de0e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	dc02      	bgt.n	800ddd8 <USBD_GetConfig+0x2c>
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	dc03      	bgt.n	800ddde <USBD_GetConfig+0x32>
 800ddd6:	e015      	b.n	800de04 <USBD_GetConfig+0x58>
 800ddd8:	2b03      	cmp	r3, #3
 800ddda:	d00b      	beq.n	800ddf4 <USBD_GetConfig+0x48>
 800dddc:	e012      	b.n	800de04 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2200      	movs	r2, #0
 800dde2:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	3308      	adds	r3, #8
 800dde8:	2201      	movs	r2, #1
 800ddea:	4619      	mov	r1, r3
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f000 f925 	bl	800e03c <USBD_CtlSendData>
      break;
 800ddf2:	e00c      	b.n	800de0e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	3304      	adds	r3, #4
 800ddf8:	2201      	movs	r2, #1
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f91d 	bl	800e03c <USBD_CtlSendData>
      break;
 800de02:	e004      	b.n	800de0e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800de04:	6839      	ldr	r1, [r7, #0]
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f000 f8a7 	bl	800df5a <USBD_CtlError>
      break;
 800de0c:	bf00      	nop
}
 800de0e:	bf00      	nop
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}

0800de16 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de16:	b580      	push	{r7, lr}
 800de18:	b082      	sub	sp, #8
 800de1a:	af00      	add	r7, sp, #0
 800de1c:	6078      	str	r0, [r7, #4]
 800de1e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de26:	3b01      	subs	r3, #1
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d81e      	bhi.n	800de6a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800de2c:	683b      	ldr	r3, [r7, #0]
 800de2e:	88db      	ldrh	r3, [r3, #6]
 800de30:	2b02      	cmp	r3, #2
 800de32:	d004      	beq.n	800de3e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800de34:	6839      	ldr	r1, [r7, #0]
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 f88f 	bl	800df5a <USBD_CtlError>
      break;
 800de3c:	e01a      	b.n	800de74 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	2201      	movs	r2, #1
 800de42:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d005      	beq.n	800de5a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	f043 0202 	orr.w	r2, r3, #2
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	330c      	adds	r3, #12
 800de5e:	2202      	movs	r2, #2
 800de60:	4619      	mov	r1, r3
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f000 f8ea 	bl	800e03c <USBD_CtlSendData>
    break;
 800de68:	e004      	b.n	800de74 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800de6a:	6839      	ldr	r1, [r7, #0]
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 f874 	bl	800df5a <USBD_CtlError>
    break;
 800de72:	bf00      	nop
  }
}
 800de74:	bf00      	nop
 800de76:	3708      	adds	r7, #8
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b082      	sub	sp, #8
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
 800de84:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800de86:	683b      	ldr	r3, [r7, #0]
 800de88:	885b      	ldrh	r3, [r3, #2]
 800de8a:	2b01      	cmp	r3, #1
 800de8c:	d106      	bne.n	800de9c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2201      	movs	r2, #1
 800de92:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800de96:	6878      	ldr	r0, [r7, #4]
 800de98:	f000 f92a 	bl	800e0f0 <USBD_CtlSendStatus>
  }
}
 800de9c:	bf00      	nop
 800de9e:	3708      	adds	r7, #8
 800dea0:	46bd      	mov	sp, r7
 800dea2:	bd80      	pop	{r7, pc}

0800dea4 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dea4:	b580      	push	{r7, lr}
 800dea6:	b082      	sub	sp, #8
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
 800deac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800deb4:	3b01      	subs	r3, #1
 800deb6:	2b02      	cmp	r3, #2
 800deb8:	d80b      	bhi.n	800ded2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	885b      	ldrh	r3, [r3, #2]
 800debe:	2b01      	cmp	r3, #1
 800dec0:	d10c      	bne.n	800dedc <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	2200      	movs	r2, #0
 800dec6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 f910 	bl	800e0f0 <USBD_CtlSendStatus>
      }
      break;
 800ded0:	e004      	b.n	800dedc <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ded2:	6839      	ldr	r1, [r7, #0]
 800ded4:	6878      	ldr	r0, [r7, #4]
 800ded6:	f000 f840 	bl	800df5a <USBD_CtlError>
      break;
 800deda:	e000      	b.n	800dede <USBD_ClrFeature+0x3a>
      break;
 800dedc:	bf00      	nop
  }
}
 800dede:	bf00      	nop
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}

0800dee6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dee6:	b580      	push	{r7, lr}
 800dee8:	b084      	sub	sp, #16
 800deea:	af00      	add	r7, sp, #0
 800deec:	6078      	str	r0, [r7, #4]
 800deee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800def0:	683b      	ldr	r3, [r7, #0]
 800def2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	781a      	ldrb	r2, [r3, #0]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	3301      	adds	r3, #1
 800df00:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	781a      	ldrb	r2, [r3, #0]
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	3301      	adds	r3, #1
 800df0e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800df10:	68f8      	ldr	r0, [r7, #12]
 800df12:	f7ff fa9a 	bl	800d44a <SWAPBYTE>
 800df16:	4603      	mov	r3, r0
 800df18:	461a      	mov	r2, r3
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	3301      	adds	r3, #1
 800df22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	3301      	adds	r3, #1
 800df28:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f7ff fa8d 	bl	800d44a <SWAPBYTE>
 800df30:	4603      	mov	r3, r0
 800df32:	461a      	mov	r2, r3
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	3301      	adds	r3, #1
 800df3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	3301      	adds	r3, #1
 800df42:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800df44:	68f8      	ldr	r0, [r7, #12]
 800df46:	f7ff fa80 	bl	800d44a <SWAPBYTE>
 800df4a:	4603      	mov	r3, r0
 800df4c:	461a      	mov	r2, r3
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	80da      	strh	r2, [r3, #6]
}
 800df52:	bf00      	nop
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b082      	sub	sp, #8
 800df5e:	af00      	add	r7, sp, #0
 800df60:	6078      	str	r0, [r7, #4]
 800df62:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800df64:	2180      	movs	r1, #128	; 0x80
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f001 f8d4 	bl	800f114 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800df6c:	2100      	movs	r1, #0
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f001 f8d0 	bl	800f114 <USBD_LL_StallEP>
}
 800df74:	bf00      	nop
 800df76:	3708      	adds	r7, #8
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}

0800df7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b086      	sub	sp, #24
 800df80:	af00      	add	r7, sp, #0
 800df82:	60f8      	str	r0, [r7, #12]
 800df84:	60b9      	str	r1, [r7, #8]
 800df86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800df88:	2300      	movs	r3, #0
 800df8a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d036      	beq.n	800e000 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800df96:	6938      	ldr	r0, [r7, #16]
 800df98:	f000 f836 	bl	800e008 <USBD_GetLen>
 800df9c:	4603      	mov	r3, r0
 800df9e:	3301      	adds	r3, #1
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	005b      	lsls	r3, r3, #1
 800dfa4:	b29a      	uxth	r2, r3
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dfaa:	7dfb      	ldrb	r3, [r7, #23]
 800dfac:	68ba      	ldr	r2, [r7, #8]
 800dfae:	4413      	add	r3, r2
 800dfb0:	687a      	ldr	r2, [r7, #4]
 800dfb2:	7812      	ldrb	r2, [r2, #0]
 800dfb4:	701a      	strb	r2, [r3, #0]
  idx++;
 800dfb6:	7dfb      	ldrb	r3, [r7, #23]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dfbc:	7dfb      	ldrb	r3, [r7, #23]
 800dfbe:	68ba      	ldr	r2, [r7, #8]
 800dfc0:	4413      	add	r3, r2
 800dfc2:	2203      	movs	r2, #3
 800dfc4:	701a      	strb	r2, [r3, #0]
  idx++;
 800dfc6:	7dfb      	ldrb	r3, [r7, #23]
 800dfc8:	3301      	adds	r3, #1
 800dfca:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dfcc:	e013      	b.n	800dff6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dfce:	7dfb      	ldrb	r3, [r7, #23]
 800dfd0:	68ba      	ldr	r2, [r7, #8]
 800dfd2:	4413      	add	r3, r2
 800dfd4:	693a      	ldr	r2, [r7, #16]
 800dfd6:	7812      	ldrb	r2, [r2, #0]
 800dfd8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	3301      	adds	r3, #1
 800dfde:	613b      	str	r3, [r7, #16]
    idx++;
 800dfe0:	7dfb      	ldrb	r3, [r7, #23]
 800dfe2:	3301      	adds	r3, #1
 800dfe4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dfe6:	7dfb      	ldrb	r3, [r7, #23]
 800dfe8:	68ba      	ldr	r2, [r7, #8]
 800dfea:	4413      	add	r3, r2
 800dfec:	2200      	movs	r2, #0
 800dfee:	701a      	strb	r2, [r3, #0]
    idx++;
 800dff0:	7dfb      	ldrb	r3, [r7, #23]
 800dff2:	3301      	adds	r3, #1
 800dff4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	781b      	ldrb	r3, [r3, #0]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d1e7      	bne.n	800dfce <USBD_GetString+0x52>
 800dffe:	e000      	b.n	800e002 <USBD_GetString+0x86>
    return;
 800e000:	bf00      	nop
  }
}
 800e002:	3718      	adds	r7, #24
 800e004:	46bd      	mov	sp, r7
 800e006:	bd80      	pop	{r7, pc}

0800e008 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e008:	b480      	push	{r7}
 800e00a:	b085      	sub	sp, #20
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e010:	2300      	movs	r3, #0
 800e012:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e018:	e005      	b.n	800e026 <USBD_GetLen+0x1e>
  {
    len++;
 800e01a:	7bfb      	ldrb	r3, [r7, #15]
 800e01c:	3301      	adds	r3, #1
 800e01e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	3301      	adds	r3, #1
 800e024:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	781b      	ldrb	r3, [r3, #0]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d1f5      	bne.n	800e01a <USBD_GetLen+0x12>
  }

  return len;
 800e02e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e030:	4618      	mov	r0, r3
 800e032:	3714      	adds	r7, #20
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr

0800e03c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	60f8      	str	r0, [r7, #12]
 800e044:	60b9      	str	r1, [r7, #8]
 800e046:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	2202      	movs	r2, #2
 800e04c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	687a      	ldr	r2, [r7, #4]
 800e05a:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	68ba      	ldr	r2, [r7, #8]
 800e060:	2100      	movs	r1, #0
 800e062:	68f8      	ldr	r0, [r7, #12]
 800e064:	f001 f8df 	bl	800f226 <USBD_LL_Transmit>

  return USBD_OK;
 800e068:	2300      	movs	r3, #0
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}

0800e072 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e072:	b580      	push	{r7, lr}
 800e074:	b084      	sub	sp, #16
 800e076:	af00      	add	r7, sp, #0
 800e078:	60f8      	str	r0, [r7, #12]
 800e07a:	60b9      	str	r1, [r7, #8]
 800e07c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	68ba      	ldr	r2, [r7, #8]
 800e082:	2100      	movs	r1, #0
 800e084:	68f8      	ldr	r0, [r7, #12]
 800e086:	f001 f8ce 	bl	800f226 <USBD_LL_Transmit>

  return USBD_OK;
 800e08a:	2300      	movs	r3, #0
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3710      	adds	r7, #16
 800e090:	46bd      	mov	sp, r7
 800e092:	bd80      	pop	{r7, pc}

0800e094 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e094:	b580      	push	{r7, lr}
 800e096:	b084      	sub	sp, #16
 800e098:	af00      	add	r7, sp, #0
 800e09a:	60f8      	str	r0, [r7, #12]
 800e09c:	60b9      	str	r1, [r7, #8]
 800e09e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2203      	movs	r2, #3
 800e0a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	687a      	ldr	r2, [r7, #4]
 800e0ac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	68ba      	ldr	r2, [r7, #8]
 800e0bc:	2100      	movs	r1, #0
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	f001 f8d2 	bl	800f268 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b084      	sub	sp, #16
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	60f8      	str	r0, [r7, #12]
 800e0d6:	60b9      	str	r1, [r7, #8]
 800e0d8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	68ba      	ldr	r2, [r7, #8]
 800e0de:	2100      	movs	r1, #0
 800e0e0:	68f8      	ldr	r0, [r7, #12]
 800e0e2:	f001 f8c1 	bl	800f268 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e0e6:	2300      	movs	r3, #0
}
 800e0e8:	4618      	mov	r0, r3
 800e0ea:	3710      	adds	r7, #16
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	bd80      	pop	{r7, pc}

0800e0f0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e0f0:	b580      	push	{r7, lr}
 800e0f2:	b082      	sub	sp, #8
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2204      	movs	r2, #4
 800e0fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e100:	2300      	movs	r3, #0
 800e102:	2200      	movs	r2, #0
 800e104:	2100      	movs	r1, #0
 800e106:	6878      	ldr	r0, [r7, #4]
 800e108:	f001 f88d 	bl	800f226 <USBD_LL_Transmit>

  return USBD_OK;
 800e10c:	2300      	movs	r3, #0
}
 800e10e:	4618      	mov	r0, r3
 800e110:	3708      	adds	r7, #8
 800e112:	46bd      	mov	sp, r7
 800e114:	bd80      	pop	{r7, pc}

0800e116 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e116:	b580      	push	{r7, lr}
 800e118:	b082      	sub	sp, #8
 800e11a:	af00      	add	r7, sp, #0
 800e11c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	2205      	movs	r2, #5
 800e122:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e126:	2300      	movs	r3, #0
 800e128:	2200      	movs	r2, #0
 800e12a:	2100      	movs	r1, #0
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f001 f89b 	bl	800f268 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e132:	2300      	movs	r3, #0
}
 800e134:	4618      	mov	r0, r3
 800e136:	3708      	adds	r7, #8
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	460b      	mov	r3, r1
 800e146:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e148:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e14c:	f001 f8f6 	bl	800f33c <USBD_static_malloc>
 800e150:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d105      	bne.n	800e164 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	2200      	movs	r2, #0
 800e15c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e160:	2302      	movs	r3, #2
 800e162:	e066      	b.n	800e232 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	68fa      	ldr	r2, [r7, #12]
 800e168:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	7c1b      	ldrb	r3, [r3, #16]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d119      	bne.n	800e1a8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e174:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e178:	2202      	movs	r2, #2
 800e17a:	2181      	movs	r1, #129	; 0x81
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f000 ff84 	bl	800f08a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2201      	movs	r2, #1
 800e186:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e188:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e18c:	2202      	movs	r2, #2
 800e18e:	2101      	movs	r1, #1
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f000 ff7a 	bl	800f08a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2201      	movs	r2, #1
 800e19a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2210      	movs	r2, #16
 800e1a2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e1a6:	e016      	b.n	800e1d6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e1a8:	2340      	movs	r3, #64	; 0x40
 800e1aa:	2202      	movs	r2, #2
 800e1ac:	2181      	movs	r1, #129	; 0x81
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f000 ff6b 	bl	800f08a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	2201      	movs	r2, #1
 800e1b8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e1ba:	2340      	movs	r3, #64	; 0x40
 800e1bc:	2202      	movs	r2, #2
 800e1be:	2101      	movs	r1, #1
 800e1c0:	6878      	ldr	r0, [r7, #4]
 800e1c2:	f000 ff62 	bl	800f08a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2201      	movs	r2, #1
 800e1ca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	2210      	movs	r2, #16
 800e1d2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e1d6:	2308      	movs	r3, #8
 800e1d8:	2203      	movs	r2, #3
 800e1da:	2182      	movs	r1, #130	; 0x82
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f000 ff54 	bl	800f08a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	2200      	movs	r2, #0
 800e200:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	7c1b      	ldrb	r3, [r3, #16]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d109      	bne.n	800e220 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e212:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e216:	2101      	movs	r1, #1
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f001 f825 	bl	800f268 <USBD_LL_PrepareReceive>
 800e21e:	e007      	b.n	800e230 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e226:	2340      	movs	r3, #64	; 0x40
 800e228:	2101      	movs	r1, #1
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f001 f81c 	bl	800f268 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e230:	2300      	movs	r3, #0
}
 800e232:	4618      	mov	r0, r3
 800e234:	3710      	adds	r7, #16
 800e236:	46bd      	mov	sp, r7
 800e238:	bd80      	pop	{r7, pc}

0800e23a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e23a:	b580      	push	{r7, lr}
 800e23c:	b082      	sub	sp, #8
 800e23e:	af00      	add	r7, sp, #0
 800e240:	6078      	str	r0, [r7, #4]
 800e242:	460b      	mov	r3, r1
 800e244:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e246:	2181      	movs	r1, #129	; 0x81
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f000 ff44 	bl	800f0d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	2200      	movs	r2, #0
 800e252:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e254:	2101      	movs	r1, #1
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f000 ff3d 	bl	800f0d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2200      	movs	r2, #0
 800e260:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e264:	2182      	movs	r1, #130	; 0x82
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f000 ff35 	bl	800f0d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2200      	movs	r2, #0
 800e270:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2200      	movs	r2, #0
 800e278:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e282:	2b00      	cmp	r3, #0
 800e284:	d00e      	beq.n	800e2a4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e28c:	685b      	ldr	r3, [r3, #4]
 800e28e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e296:	4618      	mov	r0, r3
 800e298:	f001 f85e 	bl	800f358 <USBD_static_free>
    pdev->pClassData = NULL;
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2200      	movs	r2, #0
 800e2a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e2a4:	2300      	movs	r3, #0
}
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3708      	adds	r7, #8
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
	...

0800e2b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b086      	sub	sp, #24
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2c0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e2c6:	2300      	movs	r3, #0
 800e2c8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2ce:	683b      	ldr	r3, [r7, #0]
 800e2d0:	781b      	ldrb	r3, [r3, #0]
 800e2d2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d03a      	beq.n	800e350 <USBD_CDC_Setup+0xa0>
 800e2da:	2b20      	cmp	r3, #32
 800e2dc:	f040 8097 	bne.w	800e40e <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	88db      	ldrh	r3, [r3, #6]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d029      	beq.n	800e33c <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	781b      	ldrb	r3, [r3, #0]
 800e2ec:	b25b      	sxtb	r3, r3
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	da11      	bge.n	800e316 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e2f8:	689b      	ldr	r3, [r3, #8]
 800e2fa:	683a      	ldr	r2, [r7, #0]
 800e2fc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800e2fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e300:	683a      	ldr	r2, [r7, #0]
 800e302:	88d2      	ldrh	r2, [r2, #6]
 800e304:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e306:	6939      	ldr	r1, [r7, #16]
 800e308:	683b      	ldr	r3, [r7, #0]
 800e30a:	88db      	ldrh	r3, [r3, #6]
 800e30c:	461a      	mov	r2, r3
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f7ff fe94 	bl	800e03c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800e314:	e082      	b.n	800e41c <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800e316:	683b      	ldr	r3, [r7, #0]
 800e318:	785a      	ldrb	r2, [r3, #1]
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	88db      	ldrh	r3, [r3, #6]
 800e324:	b2da      	uxtb	r2, r3
 800e326:	693b      	ldr	r3, [r7, #16]
 800e328:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800e32c:	6939      	ldr	r1, [r7, #16]
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	88db      	ldrh	r3, [r3, #6]
 800e332:	461a      	mov	r2, r3
 800e334:	6878      	ldr	r0, [r7, #4]
 800e336:	f7ff fead 	bl	800e094 <USBD_CtlPrepareRx>
      break;
 800e33a:	e06f      	b.n	800e41c <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e342:	689b      	ldr	r3, [r3, #8]
 800e344:	683a      	ldr	r2, [r7, #0]
 800e346:	7850      	ldrb	r0, [r2, #1]
 800e348:	2200      	movs	r2, #0
 800e34a:	6839      	ldr	r1, [r7, #0]
 800e34c:	4798      	blx	r3
      break;
 800e34e:	e065      	b.n	800e41c <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	785b      	ldrb	r3, [r3, #1]
 800e354:	2b0b      	cmp	r3, #11
 800e356:	d84f      	bhi.n	800e3f8 <USBD_CDC_Setup+0x148>
 800e358:	a201      	add	r2, pc, #4	; (adr r2, 800e360 <USBD_CDC_Setup+0xb0>)
 800e35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e35e:	bf00      	nop
 800e360:	0800e391 	.word	0x0800e391
 800e364:	0800e407 	.word	0x0800e407
 800e368:	0800e3f9 	.word	0x0800e3f9
 800e36c:	0800e3f9 	.word	0x0800e3f9
 800e370:	0800e3f9 	.word	0x0800e3f9
 800e374:	0800e3f9 	.word	0x0800e3f9
 800e378:	0800e3f9 	.word	0x0800e3f9
 800e37c:	0800e3f9 	.word	0x0800e3f9
 800e380:	0800e3f9 	.word	0x0800e3f9
 800e384:	0800e3f9 	.word	0x0800e3f9
 800e388:	0800e3b9 	.word	0x0800e3b9
 800e38c:	0800e3e1 	.word	0x0800e3e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e396:	2b03      	cmp	r3, #3
 800e398:	d107      	bne.n	800e3aa <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e39a:	f107 030c 	add.w	r3, r7, #12
 800e39e:	2202      	movs	r2, #2
 800e3a0:	4619      	mov	r1, r3
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f7ff fe4a 	bl	800e03c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e3a8:	e030      	b.n	800e40c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800e3aa:	6839      	ldr	r1, [r7, #0]
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f7ff fdd4 	bl	800df5a <USBD_CtlError>
            ret = USBD_FAIL;
 800e3b2:	2303      	movs	r3, #3
 800e3b4:	75fb      	strb	r3, [r7, #23]
          break;
 800e3b6:	e029      	b.n	800e40c <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3be:	2b03      	cmp	r3, #3
 800e3c0:	d107      	bne.n	800e3d2 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e3c2:	f107 030f 	add.w	r3, r7, #15
 800e3c6:	2201      	movs	r2, #1
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f7ff fe36 	bl	800e03c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e3d0:	e01c      	b.n	800e40c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800e3d2:	6839      	ldr	r1, [r7, #0]
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f7ff fdc0 	bl	800df5a <USBD_CtlError>
            ret = USBD_FAIL;
 800e3da:	2303      	movs	r3, #3
 800e3dc:	75fb      	strb	r3, [r7, #23]
          break;
 800e3de:	e015      	b.n	800e40c <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3e6:	2b03      	cmp	r3, #3
 800e3e8:	d00f      	beq.n	800e40a <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800e3ea:	6839      	ldr	r1, [r7, #0]
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7ff fdb4 	bl	800df5a <USBD_CtlError>
            ret = USBD_FAIL;
 800e3f2:	2303      	movs	r3, #3
 800e3f4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e3f6:	e008      	b.n	800e40a <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e3f8:	6839      	ldr	r1, [r7, #0]
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f7ff fdad 	bl	800df5a <USBD_CtlError>
          ret = USBD_FAIL;
 800e400:	2303      	movs	r3, #3
 800e402:	75fb      	strb	r3, [r7, #23]
          break;
 800e404:	e002      	b.n	800e40c <USBD_CDC_Setup+0x15c>
          break;
 800e406:	bf00      	nop
 800e408:	e008      	b.n	800e41c <USBD_CDC_Setup+0x16c>
          break;
 800e40a:	bf00      	nop
      }
      break;
 800e40c:	e006      	b.n	800e41c <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800e40e:	6839      	ldr	r1, [r7, #0]
 800e410:	6878      	ldr	r0, [r7, #4]
 800e412:	f7ff fda2 	bl	800df5a <USBD_CtlError>
      ret = USBD_FAIL;
 800e416:	2303      	movs	r3, #3
 800e418:	75fb      	strb	r3, [r7, #23]
      break;
 800e41a:	bf00      	nop
  }

  return (uint8_t)ret;
 800e41c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3718      	adds	r7, #24
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop

0800e428 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b084      	sub	sp, #16
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
 800e430:	460b      	mov	r3, r1
 800e432:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e43a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e442:	2b00      	cmp	r3, #0
 800e444:	d101      	bne.n	800e44a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e446:	2303      	movs	r3, #3
 800e448:	e04f      	b.n	800e4ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e450:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e452:	78fa      	ldrb	r2, [r7, #3]
 800e454:	6879      	ldr	r1, [r7, #4]
 800e456:	4613      	mov	r3, r2
 800e458:	009b      	lsls	r3, r3, #2
 800e45a:	4413      	add	r3, r2
 800e45c:	009b      	lsls	r3, r3, #2
 800e45e:	440b      	add	r3, r1
 800e460:	3318      	adds	r3, #24
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d029      	beq.n	800e4bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e468:	78fa      	ldrb	r2, [r7, #3]
 800e46a:	6879      	ldr	r1, [r7, #4]
 800e46c:	4613      	mov	r3, r2
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	4413      	add	r3, r2
 800e472:	009b      	lsls	r3, r3, #2
 800e474:	440b      	add	r3, r1
 800e476:	3318      	adds	r3, #24
 800e478:	681a      	ldr	r2, [r3, #0]
 800e47a:	78f9      	ldrb	r1, [r7, #3]
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	460b      	mov	r3, r1
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	440b      	add	r3, r1
 800e484:	00db      	lsls	r3, r3, #3
 800e486:	4403      	add	r3, r0
 800e488:	3320      	adds	r3, #32
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e490:	fb01 f303 	mul.w	r3, r1, r3
 800e494:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e496:	2b00      	cmp	r3, #0
 800e498:	d110      	bne.n	800e4bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e49a:	78fa      	ldrb	r2, [r7, #3]
 800e49c:	6879      	ldr	r1, [r7, #4]
 800e49e:	4613      	mov	r3, r2
 800e4a0:	009b      	lsls	r3, r3, #2
 800e4a2:	4413      	add	r3, r2
 800e4a4:	009b      	lsls	r3, r3, #2
 800e4a6:	440b      	add	r3, r1
 800e4a8:	3318      	adds	r3, #24
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e4ae:	78f9      	ldrb	r1, [r7, #3]
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f000 feb6 	bl	800f226 <USBD_LL_Transmit>
 800e4ba:	e015      	b.n	800e4e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4ca:	691b      	ldr	r3, [r3, #16]
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d00b      	beq.n	800e4e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e4d6:	691b      	ldr	r3, [r3, #16]
 800e4d8:	68ba      	ldr	r2, [r7, #8]
 800e4da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e4de:	68ba      	ldr	r2, [r7, #8]
 800e4e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e4e4:	78fa      	ldrb	r2, [r7, #3]
 800e4e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e4e8:	2300      	movs	r3, #0
}
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	3710      	adds	r7, #16
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}

0800e4f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e4f2:	b580      	push	{r7, lr}
 800e4f4:	b084      	sub	sp, #16
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
 800e4fa:	460b      	mov	r3, r1
 800e4fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e504:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d101      	bne.n	800e514 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e510:	2303      	movs	r3, #3
 800e512:	e015      	b.n	800e540 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e514:	78fb      	ldrb	r3, [r7, #3]
 800e516:	4619      	mov	r1, r3
 800e518:	6878      	ldr	r0, [r7, #4]
 800e51a:	f000 fec6 	bl	800f2aa <USBD_LL_GetRxDataSize>
 800e51e:	4602      	mov	r2, r0
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e52c:	68db      	ldr	r3, [r3, #12]
 800e52e:	68fa      	ldr	r2, [r7, #12]
 800e530:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e534:	68fa      	ldr	r2, [r7, #12]
 800e536:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e53a:	4611      	mov	r1, r2
 800e53c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e53e:	2300      	movs	r3, #0
}
 800e540:	4618      	mov	r0, r3
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b084      	sub	sp, #16
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e556:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d015      	beq.n	800e58e <USBD_CDC_EP0_RxReady+0x46>
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e568:	2bff      	cmp	r3, #255	; 0xff
 800e56a:	d010      	beq.n	800e58e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e572:	689b      	ldr	r3, [r3, #8]
 800e574:	68fa      	ldr	r2, [r7, #12]
 800e576:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e57a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e57c:	68fa      	ldr	r2, [r7, #12]
 800e57e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e582:	b292      	uxth	r2, r2
 800e584:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	22ff      	movs	r2, #255	; 0xff
 800e58a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e58e:	2300      	movs	r3, #0
}
 800e590:	4618      	mov	r0, r3
 800e592:	3710      	adds	r7, #16
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}

0800e598 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e598:	b480      	push	{r7}
 800e59a:	b083      	sub	sp, #12
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2243      	movs	r2, #67	; 0x43
 800e5a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e5a6:	4b03      	ldr	r3, [pc, #12]	; (800e5b4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	370c      	adds	r7, #12
 800e5ac:	46bd      	mov	sp, r7
 800e5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b2:	4770      	bx	lr
 800e5b4:	200000a0 	.word	0x200000a0

0800e5b8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e5b8:	b480      	push	{r7}
 800e5ba:	b083      	sub	sp, #12
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2243      	movs	r2, #67	; 0x43
 800e5c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e5c6:	4b03      	ldr	r3, [pc, #12]	; (800e5d4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	370c      	adds	r7, #12
 800e5cc:	46bd      	mov	sp, r7
 800e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d2:	4770      	bx	lr
 800e5d4:	2000005c 	.word	0x2000005c

0800e5d8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b083      	sub	sp, #12
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2243      	movs	r2, #67	; 0x43
 800e5e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e5e6:	4b03      	ldr	r3, [pc, #12]	; (800e5f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	370c      	adds	r7, #12
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f2:	4770      	bx	lr
 800e5f4:	200000e4 	.word	0x200000e4

0800e5f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b083      	sub	sp, #12
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	220a      	movs	r2, #10
 800e604:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e606:	4b03      	ldr	r3, [pc, #12]	; (800e614 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e608:	4618      	mov	r0, r3
 800e60a:	370c      	adds	r7, #12
 800e60c:	46bd      	mov	sp, r7
 800e60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e612:	4770      	bx	lr
 800e614:	20000018 	.word	0x20000018

0800e618 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e618:	b480      	push	{r7}
 800e61a:	b083      	sub	sp, #12
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e622:	683b      	ldr	r3, [r7, #0]
 800e624:	2b00      	cmp	r3, #0
 800e626:	d101      	bne.n	800e62c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e628:	2303      	movs	r3, #3
 800e62a:	e004      	b.n	800e636 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	683a      	ldr	r2, [r7, #0]
 800e630:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e634:	2300      	movs	r3, #0
}
 800e636:	4618      	mov	r0, r3
 800e638:	370c      	adds	r7, #12
 800e63a:	46bd      	mov	sp, r7
 800e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e640:	4770      	bx	lr

0800e642 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e642:	b480      	push	{r7}
 800e644:	b087      	sub	sp, #28
 800e646:	af00      	add	r7, sp, #0
 800e648:	60f8      	str	r0, [r7, #12]
 800e64a:	60b9      	str	r1, [r7, #8]
 800e64c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e654:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	68ba      	ldr	r2, [r7, #8]
 800e65a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e65e:	697b      	ldr	r3, [r7, #20]
 800e660:	687a      	ldr	r2, [r7, #4]
 800e662:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e666:	2300      	movs	r3, #0
}
 800e668:	4618      	mov	r0, r3
 800e66a:	371c      	adds	r7, #28
 800e66c:	46bd      	mov	sp, r7
 800e66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e672:	4770      	bx	lr

0800e674 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e674:	b480      	push	{r7}
 800e676:	b085      	sub	sp, #20
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e684:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	683a      	ldr	r2, [r7, #0]
 800e68a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e68e:	2300      	movs	r3, #0
}
 800e690:	4618      	mov	r0, r3
 800e692:	3714      	adds	r7, #20
 800e694:	46bd      	mov	sp, r7
 800e696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69a:	4770      	bx	lr

0800e69c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b084      	sub	sp, #16
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6aa:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e6ac:	2301      	movs	r3, #1
 800e6ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d101      	bne.n	800e6be <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e6ba:	2303      	movs	r3, #3
 800e6bc:	e01a      	b.n	800e6f4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e6be:	68bb      	ldr	r3, [r7, #8]
 800e6c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d114      	bne.n	800e6f2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e6d0:	68bb      	ldr	r3, [r7, #8]
 800e6d2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e6e0:	68bb      	ldr	r3, [r7, #8]
 800e6e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e6e6:	2181      	movs	r1, #129	; 0x81
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f000 fd9c 	bl	800f226 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e6f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3710      	adds	r7, #16
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}

0800e6fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b084      	sub	sp, #16
 800e700:	af00      	add	r7, sp, #0
 800e702:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e70a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e712:	2b00      	cmp	r3, #0
 800e714:	d101      	bne.n	800e71a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e716:	2303      	movs	r3, #3
 800e718:	e016      	b.n	800e748 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	7c1b      	ldrb	r3, [r3, #16]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d109      	bne.n	800e736 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e728:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e72c:	2101      	movs	r1, #1
 800e72e:	6878      	ldr	r0, [r7, #4]
 800e730:	f000 fd9a 	bl	800f268 <USBD_LL_PrepareReceive>
 800e734:	e007      	b.n	800e746 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e73c:	2340      	movs	r3, #64	; 0x40
 800e73e:	2101      	movs	r1, #1
 800e740:	6878      	ldr	r0, [r7, #4]
 800e742:	f000 fd91 	bl	800f268 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e746:	2300      	movs	r3, #0
}
 800e748:	4618      	mov	r0, r3
 800e74a:	3710      	adds	r7, #16
 800e74c:	46bd      	mov	sp, r7
 800e74e:	bd80      	pop	{r7, pc}

0800e750 <cdcIfInit>:
static bool is_opened = false;
static bool is_rx_full = false;


bool cdcIfInit(void)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	af00      	add	r7, sp, #0
  is_opened = false;
 800e754:	4b08      	ldr	r3, [pc, #32]	; (800e778 <cdcIfInit+0x28>)
 800e756:	2200      	movs	r2, #0
 800e758:	701a      	strb	r2, [r3, #0]
  qbufferCreate(&q_rx, q_rx_buf, 1024);
 800e75a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e75e:	4907      	ldr	r1, [pc, #28]	; (800e77c <cdcIfInit+0x2c>)
 800e760:	4807      	ldr	r0, [pc, #28]	; (800e780 <cdcIfInit+0x30>)
 800e762:	f7fe facd 	bl	800cd00 <qbufferCreate>
  qbufferCreate(&q_tx, q_tx_buf, 1024);
 800e766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e76a:	4906      	ldr	r1, [pc, #24]	; (800e784 <cdcIfInit+0x34>)
 800e76c:	4806      	ldr	r0, [pc, #24]	; (800e788 <cdcIfInit+0x38>)
 800e76e:	f7fe fac7 	bl	800cd00 <qbufferCreate>

  return true;
 800e772:	2301      	movs	r3, #1
}
 800e774:	4618      	mov	r0, r3
 800e776:	bd80      	pop	{r7, pc}
 800e778:	20002460 	.word	0x20002460
 800e77c:	20001c60 	.word	0x20001c60
 800e780:	20001c38 	.word	0x20001c38
 800e784:	20002060 	.word	0x20002060
 800e788:	20001c4c 	.word	0x20001c4c

0800e78c <cdcIfAvailable>:

uint32_t cdcIfAvailable(void)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	af00      	add	r7, sp, #0
  return qbufferAvailable(&q_rx);
 800e790:	4802      	ldr	r0, [pc, #8]	; (800e79c <cdcIfAvailable+0x10>)
 800e792:	f7fe fbb9 	bl	800cf08 <qbufferAvailable>
 800e796:	4603      	mov	r3, r0
}
 800e798:	4618      	mov	r0, r3
 800e79a:	bd80      	pop	{r7, pc}
 800e79c:	20001c38 	.word	0x20001c38

0800e7a0 <cdcIfRead>:

uint8_t cdcIfRead(void)
{
 800e7a0:	b580      	push	{r7, lr}
 800e7a2:	b082      	sub	sp, #8
 800e7a4:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	71fb      	strb	r3, [r7, #7]

  qbufferRead(&q_rx, &ret, 1);
 800e7aa:	1dfb      	adds	r3, r7, #7
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	4619      	mov	r1, r3
 800e7b0:	4803      	ldr	r0, [pc, #12]	; (800e7c0 <cdcIfRead+0x20>)
 800e7b2:	f7fe fb3e 	bl	800ce32 <qbufferRead>

  return ret;
 800e7b6:	79fb      	ldrb	r3, [r7, #7]
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3708      	adds	r7, #8
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	20001c38 	.word	0x20001c38

0800e7c4 <cdcIfWrite>:

uint32_t cdcIfWrite(uint8_t *p_data, uint32_t length)
{
 800e7c4:	b590      	push	{r4, r7, lr}
 800e7c6:	b087      	sub	sp, #28
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	6039      	str	r1, [r7, #0]
  uint32_t tx_len;
  uint32_t buf_len;
  uint32_t sent_len;


  if (cdcIfIsConnected() != true) return 0;
 800e7ce:	f000 f84d 	bl	800e86c <cdcIfIsConnected>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	f083 0301 	eor.w	r3, r3, #1
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d001      	beq.n	800e7e2 <cdcIfWrite+0x1e>
 800e7de:	2300      	movs	r3, #0
 800e7e0:	e03e      	b.n	800e860 <cdcIfWrite+0x9c>


  sent_len = 0;
 800e7e2:	2300      	movs	r3, #0
 800e7e4:	613b      	str	r3, [r7, #16]

  pre_time = millis();
 800e7e6:	f7fc ffba 	bl	800b75e <millis>
 800e7ea:	60f8      	str	r0, [r7, #12]
  while(sent_len < length)
 800e7ec:	e02f      	b.n	800e84e <cdcIfWrite+0x8a>
  {
    buf_len = (q_tx.len - qbufferAvailable(&q_tx)) - 1;
 800e7ee:	4b1e      	ldr	r3, [pc, #120]	; (800e868 <cdcIfWrite+0xa4>)
 800e7f0:	689c      	ldr	r4, [r3, #8]
 800e7f2:	481d      	ldr	r0, [pc, #116]	; (800e868 <cdcIfWrite+0xa4>)
 800e7f4:	f7fe fb88 	bl	800cf08 <qbufferAvailable>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	1ae3      	subs	r3, r4, r3
 800e7fc:	3b01      	subs	r3, #1
 800e7fe:	60bb      	str	r3, [r7, #8]
    tx_len = length;
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	617b      	str	r3, [r7, #20]

    if (tx_len > buf_len)
 800e804:	697a      	ldr	r2, [r7, #20]
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	429a      	cmp	r2, r3
 800e80a:	d901      	bls.n	800e810 <cdcIfWrite+0x4c>
    {
      tx_len = buf_len;
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	617b      	str	r3, [r7, #20]
    }

    if (tx_len > 0)
 800e810:	697b      	ldr	r3, [r7, #20]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d00c      	beq.n	800e830 <cdcIfWrite+0x6c>
    {
      qbufferWrite(&q_tx, p_data, tx_len);
 800e816:	697a      	ldr	r2, [r7, #20]
 800e818:	6879      	ldr	r1, [r7, #4]
 800e81a:	4813      	ldr	r0, [pc, #76]	; (800e868 <cdcIfWrite+0xa4>)
 800e81c:	f7fe faad 	bl	800cd7a <qbufferWrite>
      p_data += tx_len;
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	4413      	add	r3, r2
 800e826:	607b      	str	r3, [r7, #4]
      sent_len += tx_len;
 800e828:	693a      	ldr	r2, [r7, #16]
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	4413      	add	r3, r2
 800e82e:	613b      	str	r3, [r7, #16]
    }

    if (cdcIfIsConnected() != true)
 800e830:	f000 f81c 	bl	800e86c <cdcIfIsConnected>
 800e834:	4603      	mov	r3, r0
 800e836:	f083 0301 	eor.w	r3, r3, #1
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d10b      	bne.n	800e858 <cdcIfWrite+0x94>
    {
      break;
    }

    if (millis()-pre_time >= 100)
 800e840:	f7fc ff8d 	bl	800b75e <millis>
 800e844:	4602      	mov	r2, r0
 800e846:	68fb      	ldr	r3, [r7, #12]
 800e848:	1ad3      	subs	r3, r2, r3
 800e84a:	2b63      	cmp	r3, #99	; 0x63
 800e84c:	d806      	bhi.n	800e85c <cdcIfWrite+0x98>
  while(sent_len < length)
 800e84e:	693a      	ldr	r2, [r7, #16]
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	429a      	cmp	r2, r3
 800e854:	d3cb      	bcc.n	800e7ee <cdcIfWrite+0x2a>
 800e856:	e002      	b.n	800e85e <cdcIfWrite+0x9a>
      break;
 800e858:	bf00      	nop
 800e85a:	e000      	b.n	800e85e <cdcIfWrite+0x9a>
    {
      break;
 800e85c:	bf00      	nop
    }
  }

  return sent_len;
 800e85e:	693b      	ldr	r3, [r7, #16]
}
 800e860:	4618      	mov	r0, r3
 800e862:	371c      	adds	r7, #28
 800e864:	46bd      	mov	sp, r7
 800e866:	bd90      	pop	{r4, r7, pc}
 800e868:	20001c4c 	.word	0x20001c4c

0800e86c <cdcIfIsConnected>:
{
  return LineCoding.bitrate;
}

bool cdcIfIsConnected(void)
{
 800e86c:	b480      	push	{r7}
 800e86e:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData == NULL)
 800e870:	4b11      	ldr	r3, [pc, #68]	; (800e8b8 <cdcIfIsConnected+0x4c>)
 800e872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e876:	2b00      	cmp	r3, #0
 800e878:	d101      	bne.n	800e87e <cdcIfIsConnected+0x12>
  {
    return false;
 800e87a:	2300      	movs	r3, #0
 800e87c:	e016      	b.n	800e8ac <cdcIfIsConnected+0x40>
  }
  if (is_opened == false)
 800e87e:	4b0f      	ldr	r3, [pc, #60]	; (800e8bc <cdcIfIsConnected+0x50>)
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	f083 0301 	eor.w	r3, r3, #1
 800e886:	b2db      	uxtb	r3, r3
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d001      	beq.n	800e890 <cdcIfIsConnected+0x24>
  {
    return false;
 800e88c:	2300      	movs	r3, #0
 800e88e:	e00d      	b.n	800e8ac <cdcIfIsConnected+0x40>
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 800e890:	4b09      	ldr	r3, [pc, #36]	; (800e8b8 <cdcIfIsConnected+0x4c>)
 800e892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e896:	2b03      	cmp	r3, #3
 800e898:	d001      	beq.n	800e89e <cdcIfIsConnected+0x32>
  {
    return false;
 800e89a:	2300      	movs	r3, #0
 800e89c:	e006      	b.n	800e8ac <cdcIfIsConnected+0x40>
  }
  if (hUsbDeviceFS.dev_config == 0)
 800e89e:	4b06      	ldr	r3, [pc, #24]	; (800e8b8 <cdcIfIsConnected+0x4c>)
 800e8a0:	685b      	ldr	r3, [r3, #4]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d101      	bne.n	800e8aa <cdcIfIsConnected+0x3e>
  {
    return false;
 800e8a6:	2300      	movs	r3, #0
 800e8a8:	e000      	b.n	800e8ac <cdcIfIsConnected+0x40>
  }

  return true;
 800e8aa:	2301      	movs	r3, #1
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b4:	4770      	bx	lr
 800e8b6:	bf00      	nop
 800e8b8:	20004108 	.word	0x20004108
 800e8bc:	20002460 	.word	0x20002460

0800e8c0 <CDC_SoF_ISR>:


uint8_t CDC_SoF_ISR(struct _USBD_HandleTypeDef *pdev)
{
 800e8c0:	b590      	push	{r4, r7, lr}
 800e8c2:	b087      	sub	sp, #28
 800e8c4:	af00      	add	r7, sp, #0
 800e8c6:	6078      	str	r0, [r7, #4]

  //-- RX
  //
  if (is_rx_full)
 800e8c8:	4b23      	ldr	r3, [pc, #140]	; (800e958 <CDC_SoF_ISR+0x98>)
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d015      	beq.n	800e8fc <CDC_SoF_ISR+0x3c>
  {
    uint32_t buf_len;

    buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 800e8d0:	4b22      	ldr	r3, [pc, #136]	; (800e95c <CDC_SoF_ISR+0x9c>)
 800e8d2:	689c      	ldr	r4, [r3, #8]
 800e8d4:	4821      	ldr	r0, [pc, #132]	; (800e95c <CDC_SoF_ISR+0x9c>)
 800e8d6:	f7fe fb17 	bl	800cf08 <qbufferAvailable>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	1ae3      	subs	r3, r4, r3
 800e8de:	3b01      	subs	r3, #1
 800e8e0:	613b      	str	r3, [r7, #16]

    if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 800e8e2:	693b      	ldr	r3, [r7, #16]
 800e8e4:	2b3f      	cmp	r3, #63	; 0x3f
 800e8e6:	d909      	bls.n	800e8fc <CDC_SoF_ISR+0x3c>
    {
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 800e8e8:	491d      	ldr	r1, [pc, #116]	; (800e960 <CDC_SoF_ISR+0xa0>)
 800e8ea:	481e      	ldr	r0, [pc, #120]	; (800e964 <CDC_SoF_ISR+0xa4>)
 800e8ec:	f7ff fec2 	bl	800e674 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e8f0:	481c      	ldr	r0, [pc, #112]	; (800e964 <CDC_SoF_ISR+0xa4>)
 800e8f2:	f7ff ff03 	bl	800e6fc <USBD_CDC_ReceivePacket>
      is_rx_full = false;
 800e8f6:	4b18      	ldr	r3, [pc, #96]	; (800e958 <CDC_SoF_ISR+0x98>)
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	701a      	strb	r2, [r3, #0]


  //-- TX
  //
  uint32_t tx_len;
  tx_len = qbufferAvailable(&q_tx);
 800e8fc:	481a      	ldr	r0, [pc, #104]	; (800e968 <CDC_SoF_ISR+0xa8>)
 800e8fe:	f7fe fb03 	bl	800cf08 <qbufferAvailable>
 800e902:	6178      	str	r0, [r7, #20]

  if (tx_len%CDC_DATA_FS_MAX_PACKET_SIZE == 0)
 800e904:	697b      	ldr	r3, [r7, #20]
 800e906:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d105      	bne.n	800e91a <CDC_SoF_ISR+0x5a>
  {
    if (tx_len > 0)
 800e90e:	697b      	ldr	r3, [r7, #20]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d002      	beq.n	800e91a <CDC_SoF_ISR+0x5a>
    {
      tx_len = tx_len - 1;
 800e914:	697b      	ldr	r3, [r7, #20]
 800e916:	3b01      	subs	r3, #1
 800e918:	617b      	str	r3, [r7, #20]
    }
  }

  if (tx_len > 0)
 800e91a:	697b      	ldr	r3, [r7, #20]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d015      	beq.n	800e94c <CDC_SoF_ISR+0x8c>
  {
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e920:	4b10      	ldr	r3, [pc, #64]	; (800e964 <CDC_SoF_ISR+0xa4>)
 800e922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e926:	60fb      	str	r3, [r7, #12]
    if (hcdc->TxState == 0)
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d10c      	bne.n	800e94c <CDC_SoF_ISR+0x8c>
    {
      qbufferRead(&q_tx, UserTxBufferFS, tx_len);
 800e932:	697a      	ldr	r2, [r7, #20]
 800e934:	490d      	ldr	r1, [pc, #52]	; (800e96c <CDC_SoF_ISR+0xac>)
 800e936:	480c      	ldr	r0, [pc, #48]	; (800e968 <CDC_SoF_ISR+0xa8>)
 800e938:	f7fe fa7b 	bl	800ce32 <qbufferRead>

      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, tx_len);
 800e93c:	697a      	ldr	r2, [r7, #20]
 800e93e:	490b      	ldr	r1, [pc, #44]	; (800e96c <CDC_SoF_ISR+0xac>)
 800e940:	4808      	ldr	r0, [pc, #32]	; (800e964 <CDC_SoF_ISR+0xa4>)
 800e942:	f7ff fe7e 	bl	800e642 <USBD_CDC_SetTxBuffer>
      USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e946:	4807      	ldr	r0, [pc, #28]	; (800e964 <CDC_SoF_ISR+0xa4>)
 800e948:	f7ff fea8 	bl	800e69c <USBD_CDC_TransmitPacket>
    }
  }

  return 0;
 800e94c:	2300      	movs	r3, #0
}
 800e94e:	4618      	mov	r0, r3
 800e950:	371c      	adds	r7, #28
 800e952:	46bd      	mov	sp, r7
 800e954:	bd90      	pop	{r4, r7, pc}
 800e956:	bf00      	nop
 800e958:	20002461 	.word	0x20002461
 800e95c:	20001c38 	.word	0x20001c38
 800e960:	20001468 	.word	0x20001468
 800e964:	20004108 	.word	0x20004108
 800e968:	20001c4c 	.word	0x20001c4c
 800e96c:	20001850 	.word	0x20001850

0800e970 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	af00      	add	r7, sp, #0
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e974:	2200      	movs	r2, #0
 800e976:	4907      	ldr	r1, [pc, #28]	; (800e994 <CDC_Init_FS+0x24>)
 800e978:	4807      	ldr	r0, [pc, #28]	; (800e998 <CDC_Init_FS+0x28>)
 800e97a:	f7ff fe62 	bl	800e642 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e97e:	4907      	ldr	r1, [pc, #28]	; (800e99c <CDC_Init_FS+0x2c>)
 800e980:	4805      	ldr	r0, [pc, #20]	; (800e998 <CDC_Init_FS+0x28>)
 800e982:	f7ff fe77 	bl	800e674 <USBD_CDC_SetRxBuffer>

  is_opened = false;
 800e986:	4b06      	ldr	r3, [pc, #24]	; (800e9a0 <CDC_Init_FS+0x30>)
 800e988:	2200      	movs	r2, #0
 800e98a:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800e98c:	2300      	movs	r3, #0
}
 800e98e:	4618      	mov	r0, r3
 800e990:	bd80      	pop	{r7, pc}
 800e992:	bf00      	nop
 800e994:	20001850 	.word	0x20001850
 800e998:	20004108 	.word	0x20004108
 800e99c:	20001468 	.word	0x20001468
 800e9a0:	20002460 	.word	0x20002460

0800e9a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	af00      	add	r7, sp, #0

  is_opened = false;
 800e9a8:	4b04      	ldr	r3, [pc, #16]	; (800e9bc <CDC_DeInit_FS+0x18>)
 800e9aa:	2200      	movs	r2, #0
 800e9ac:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800e9ae:	2300      	movs	r3, #0
}
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b8:	4770      	bx	lr
 800e9ba:	bf00      	nop
 800e9bc:	20002460 	.word	0x20002460

0800e9c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e9c0:	b480      	push	{r7}
 800e9c2:	b085      	sub	sp, #20
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	4603      	mov	r3, r0
 800e9c8:	6039      	str	r1, [r7, #0]
 800e9ca:	71fb      	strb	r3, [r7, #7]
 800e9cc:	4613      	mov	r3, r2
 800e9ce:	80bb      	strh	r3, [r7, #4]
  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 800e9d0:	683b      	ldr	r3, [r7, #0]
 800e9d2:	60fb      	str	r3, [r7, #12]


  switch(cmd)
 800e9d4:	79fb      	ldrb	r3, [r7, #7]
 800e9d6:	2b23      	cmp	r3, #35	; 0x23
 800e9d8:	f200 80af 	bhi.w	800eb3a <CDC_Control_FS+0x17a>
 800e9dc:	a201      	add	r2, pc, #4	; (adr r2, 800e9e4 <CDC_Control_FS+0x24>)
 800e9de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e2:	bf00      	nop
 800e9e4:	0800eb3b 	.word	0x0800eb3b
 800e9e8:	0800eb3b 	.word	0x0800eb3b
 800e9ec:	0800eb3b 	.word	0x0800eb3b
 800e9f0:	0800eb3b 	.word	0x0800eb3b
 800e9f4:	0800eb3b 	.word	0x0800eb3b
 800e9f8:	0800eb3b 	.word	0x0800eb3b
 800e9fc:	0800eb3b 	.word	0x0800eb3b
 800ea00:	0800eb3b 	.word	0x0800eb3b
 800ea04:	0800eb3b 	.word	0x0800eb3b
 800ea08:	0800eb3b 	.word	0x0800eb3b
 800ea0c:	0800eb3b 	.word	0x0800eb3b
 800ea10:	0800eb3b 	.word	0x0800eb3b
 800ea14:	0800eb3b 	.word	0x0800eb3b
 800ea18:	0800eb3b 	.word	0x0800eb3b
 800ea1c:	0800eb3b 	.word	0x0800eb3b
 800ea20:	0800eb3b 	.word	0x0800eb3b
 800ea24:	0800eb3b 	.word	0x0800eb3b
 800ea28:	0800eb3b 	.word	0x0800eb3b
 800ea2c:	0800eb3b 	.word	0x0800eb3b
 800ea30:	0800eb3b 	.word	0x0800eb3b
 800ea34:	0800eb3b 	.word	0x0800eb3b
 800ea38:	0800eb3b 	.word	0x0800eb3b
 800ea3c:	0800eb3b 	.word	0x0800eb3b
 800ea40:	0800eb3b 	.word	0x0800eb3b
 800ea44:	0800eb3b 	.word	0x0800eb3b
 800ea48:	0800eb3b 	.word	0x0800eb3b
 800ea4c:	0800eb3b 	.word	0x0800eb3b
 800ea50:	0800eb3b 	.word	0x0800eb3b
 800ea54:	0800eb3b 	.word	0x0800eb3b
 800ea58:	0800eb3b 	.word	0x0800eb3b
 800ea5c:	0800eb3b 	.word	0x0800eb3b
 800ea60:	0800eb3b 	.word	0x0800eb3b
 800ea64:	0800ea75 	.word	0x0800ea75
 800ea68:	0800eacf 	.word	0x0800eacf
 800ea6c:	0800eb23 	.word	0x0800eb23
 800ea70:	0800eb3b 	.word	0x0800eb3b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	781b      	ldrb	r3, [r3, #0]
 800ea78:	461a      	mov	r2, r3
 800ea7a:	4b34      	ldr	r3, [pc, #208]	; (800eb4c <CDC_Control_FS+0x18c>)
 800ea7c:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 800ea7e:	4b33      	ldr	r3, [pc, #204]	; (800eb4c <CDC_Control_FS+0x18c>)
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	683a      	ldr	r2, [r7, #0]
 800ea84:	3201      	adds	r2, #1
 800ea86:	7812      	ldrb	r2, [r2, #0]
 800ea88:	0212      	lsls	r2, r2, #8
 800ea8a:	4313      	orrs	r3, r2
 800ea8c:	4a2f      	ldr	r2, [pc, #188]	; (800eb4c <CDC_Control_FS+0x18c>)
 800ea8e:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 800ea90:	4b2e      	ldr	r3, [pc, #184]	; (800eb4c <CDC_Control_FS+0x18c>)
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	683a      	ldr	r2, [r7, #0]
 800ea96:	3202      	adds	r2, #2
 800ea98:	7812      	ldrb	r2, [r2, #0]
 800ea9a:	0412      	lsls	r2, r2, #16
 800ea9c:	4313      	orrs	r3, r2
 800ea9e:	4a2b      	ldr	r2, [pc, #172]	; (800eb4c <CDC_Control_FS+0x18c>)
 800eaa0:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 800eaa2:	4b2a      	ldr	r3, [pc, #168]	; (800eb4c <CDC_Control_FS+0x18c>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	683a      	ldr	r2, [r7, #0]
 800eaa8:	3203      	adds	r2, #3
 800eaaa:	7812      	ldrb	r2, [r2, #0]
 800eaac:	0612      	lsls	r2, r2, #24
 800eaae:	4313      	orrs	r3, r2
 800eab0:	4a26      	ldr	r2, [pc, #152]	; (800eb4c <CDC_Control_FS+0x18c>)
 800eab2:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	791a      	ldrb	r2, [r3, #4]
 800eab8:	4b24      	ldr	r3, [pc, #144]	; (800eb4c <CDC_Control_FS+0x18c>)
 800eaba:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 800eabc:	683b      	ldr	r3, [r7, #0]
 800eabe:	795a      	ldrb	r2, [r3, #5]
 800eac0:	4b22      	ldr	r3, [pc, #136]	; (800eb4c <CDC_Control_FS+0x18c>)
 800eac2:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	799a      	ldrb	r2, [r3, #6]
 800eac8:	4b20      	ldr	r3, [pc, #128]	; (800eb4c <CDC_Control_FS+0x18c>)
 800eaca:	719a      	strb	r2, [r3, #6]
    break;
 800eacc:	e036      	b.n	800eb3c <CDC_Control_FS+0x17c>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800eace:	4b1f      	ldr	r3, [pc, #124]	; (800eb4c <CDC_Control_FS+0x18c>)
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	b2da      	uxtb	r2, r3
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800ead8:	4b1c      	ldr	r3, [pc, #112]	; (800eb4c <CDC_Control_FS+0x18c>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	0a1a      	lsrs	r2, r3, #8
 800eade:	683b      	ldr	r3, [r7, #0]
 800eae0:	3301      	adds	r3, #1
 800eae2:	b2d2      	uxtb	r2, r2
 800eae4:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800eae6:	4b19      	ldr	r3, [pc, #100]	; (800eb4c <CDC_Control_FS+0x18c>)
 800eae8:	681b      	ldr	r3, [r3, #0]
 800eaea:	0c1a      	lsrs	r2, r3, #16
 800eaec:	683b      	ldr	r3, [r7, #0]
 800eaee:	3302      	adds	r3, #2
 800eaf0:	b2d2      	uxtb	r2, r2
 800eaf2:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 800eaf4:	4b15      	ldr	r3, [pc, #84]	; (800eb4c <CDC_Control_FS+0x18c>)
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	0e1a      	lsrs	r2, r3, #24
 800eafa:	683b      	ldr	r3, [r7, #0]
 800eafc:	3303      	adds	r3, #3
 800eafe:	b2d2      	uxtb	r2, r2
 800eb00:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	3304      	adds	r3, #4
 800eb06:	4a11      	ldr	r2, [pc, #68]	; (800eb4c <CDC_Control_FS+0x18c>)
 800eb08:	7912      	ldrb	r2, [r2, #4]
 800eb0a:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	3305      	adds	r3, #5
 800eb10:	4a0e      	ldr	r2, [pc, #56]	; (800eb4c <CDC_Control_FS+0x18c>)
 800eb12:	7952      	ldrb	r2, [r2, #5]
 800eb14:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800eb16:	683b      	ldr	r3, [r7, #0]
 800eb18:	3306      	adds	r3, #6
 800eb1a:	4a0c      	ldr	r2, [pc, #48]	; (800eb4c <CDC_Control_FS+0x18c>)
 800eb1c:	7992      	ldrb	r2, [r2, #6]
 800eb1e:	701a      	strb	r2, [r3, #0]
    break;
 800eb20:	e00c      	b.n	800eb3c <CDC_Control_FS+0x17c>

    case CDC_SET_CONTROL_LINE_STATE:
      is_opened = req->wValue & 0x01; // 0 bit:DTR, 1 bit:RTS
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	885b      	ldrh	r3, [r3, #2]
 800eb26:	f003 0301 	and.w	r3, r3, #1
 800eb2a:	2b00      	cmp	r3, #0
 800eb2c:	bf14      	ite	ne
 800eb2e:	2301      	movne	r3, #1
 800eb30:	2300      	moveq	r3, #0
 800eb32:	b2da      	uxtb	r2, r3
 800eb34:	4b06      	ldr	r3, [pc, #24]	; (800eb50 <CDC_Control_FS+0x190>)
 800eb36:	701a      	strb	r2, [r3, #0]
    break;
 800eb38:	e000      	b.n	800eb3c <CDC_Control_FS+0x17c>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eb3a:	bf00      	nop
  }

  return (USBD_OK);
 800eb3c:	2300      	movs	r3, #0
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3714      	adds	r7, #20
 800eb42:	46bd      	mov	sp, r7
 800eb44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb48:	4770      	bx	lr
 800eb4a:	bf00      	nop
 800eb4c:	2000013c 	.word	0x2000013c
 800eb50:	20002460 	.word	0x20002460

0800eb54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eb54:	b590      	push	{r4, r7, lr}
 800eb56:	b085      	sub	sp, #20
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
  qbufferWrite(&q_rx, Buf, *Len);
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	461a      	mov	r2, r3
 800eb64:	6879      	ldr	r1, [r7, #4]
 800eb66:	480f      	ldr	r0, [pc, #60]	; (800eba4 <CDC_Receive_FS+0x50>)
 800eb68:	f7fe f907 	bl	800cd7a <qbufferWrite>


  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 800eb6c:	4b0d      	ldr	r3, [pc, #52]	; (800eba4 <CDC_Receive_FS+0x50>)
 800eb6e:	689c      	ldr	r4, [r3, #8]
 800eb70:	480c      	ldr	r0, [pc, #48]	; (800eba4 <CDC_Receive_FS+0x50>)
 800eb72:	f7fe f9c9 	bl	800cf08 <qbufferAvailable>
 800eb76:	4603      	mov	r3, r0
 800eb78:	1ae3      	subs	r3, r4, r3
 800eb7a:	3b01      	subs	r3, #1
 800eb7c:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2b3f      	cmp	r3, #63	; 0x3f
 800eb82:	d907      	bls.n	800eb94 <CDC_Receive_FS+0x40>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eb84:	6879      	ldr	r1, [r7, #4]
 800eb86:	4808      	ldr	r0, [pc, #32]	; (800eba8 <CDC_Receive_FS+0x54>)
 800eb88:	f7ff fd74 	bl	800e674 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eb8c:	4806      	ldr	r0, [pc, #24]	; (800eba8 <CDC_Receive_FS+0x54>)
 800eb8e:	f7ff fdb5 	bl	800e6fc <USBD_CDC_ReceivePacket>
 800eb92:	e002      	b.n	800eb9a <CDC_Receive_FS+0x46>
  }
  else
  {
    is_rx_full = true;
 800eb94:	4b05      	ldr	r3, [pc, #20]	; (800ebac <CDC_Receive_FS+0x58>)
 800eb96:	2201      	movs	r2, #1
 800eb98:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3714      	adds	r7, #20
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd90      	pop	{r4, r7, pc}
 800eba4:	20001c38 	.word	0x20001c38
 800eba8:	20004108 	.word	0x20004108
 800ebac:	20002461 	.word	0x20002461

0800ebb0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	b087      	sub	sp, #28
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	60f8      	str	r0, [r7, #12]
 800ebb8:	60b9      	str	r1, [r7, #8]
 800ebba:	4613      	mov	r3, r2
 800ebbc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	75fb      	strb	r3, [r7, #23]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  return result;
 800ebc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebc6:	4618      	mov	r0, r3
 800ebc8:	371c      	adds	r7, #28
 800ebca:	46bd      	mov	sp, r7
 800ebcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd0:	4770      	bx	lr
	...

0800ebd4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b083      	sub	sp, #12
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	4603      	mov	r3, r0
 800ebdc:	6039      	str	r1, [r7, #0]
 800ebde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	2212      	movs	r2, #18
 800ebe4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800ebe6:	4b03      	ldr	r3, [pc, #12]	; (800ebf4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	370c      	adds	r7, #12
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr
 800ebf4:	20000164 	.word	0x20000164

0800ebf8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b083      	sub	sp, #12
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	4603      	mov	r3, r0
 800ec00:	6039      	str	r1, [r7, #0]
 800ec02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ec04:	683b      	ldr	r3, [r7, #0]
 800ec06:	2204      	movs	r2, #4
 800ec08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ec0a:	4b03      	ldr	r3, [pc, #12]	; (800ec18 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	370c      	adds	r7, #12
 800ec10:	46bd      	mov	sp, r7
 800ec12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec16:	4770      	bx	lr
 800ec18:	20000178 	.word	0x20000178

0800ec1c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b082      	sub	sp, #8
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	4603      	mov	r3, r0
 800ec24:	6039      	str	r1, [r7, #0]
 800ec26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec28:	79fb      	ldrb	r3, [r7, #7]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d105      	bne.n	800ec3a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ec2e:	683a      	ldr	r2, [r7, #0]
 800ec30:	4907      	ldr	r1, [pc, #28]	; (800ec50 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ec32:	4808      	ldr	r0, [pc, #32]	; (800ec54 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ec34:	f7ff f9a2 	bl	800df7c <USBD_GetString>
 800ec38:	e004      	b.n	800ec44 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800ec3a:	683a      	ldr	r2, [r7, #0]
 800ec3c:	4904      	ldr	r1, [pc, #16]	; (800ec50 <USBD_CDC_ProductStrDescriptor+0x34>)
 800ec3e:	4805      	ldr	r0, [pc, #20]	; (800ec54 <USBD_CDC_ProductStrDescriptor+0x38>)
 800ec40:	f7ff f99c 	bl	800df7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec44:	4b02      	ldr	r3, [pc, #8]	; (800ec50 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800ec46:	4618      	mov	r0, r3
 800ec48:	3708      	adds	r7, #8
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	20002464 	.word	0x20002464
 800ec54:	0801545c 	.word	0x0801545c

0800ec58 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b082      	sub	sp, #8
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	4603      	mov	r3, r0
 800ec60:	6039      	str	r1, [r7, #0]
 800ec62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ec64:	683a      	ldr	r2, [r7, #0]
 800ec66:	4904      	ldr	r1, [pc, #16]	; (800ec78 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800ec68:	4804      	ldr	r0, [pc, #16]	; (800ec7c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800ec6a:	f7ff f987 	bl	800df7c <USBD_GetString>
  return USBD_StrDesc;
 800ec6e:	4b02      	ldr	r3, [pc, #8]	; (800ec78 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3708      	adds	r7, #8
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}
 800ec78:	20002464 	.word	0x20002464
 800ec7c:	08015474 	.word	0x08015474

0800ec80 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b082      	sub	sp, #8
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	4603      	mov	r3, r0
 800ec88:	6039      	str	r1, [r7, #0]
 800ec8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	221a      	movs	r2, #26
 800ec90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ec92:	f000 f843 	bl	800ed1c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800ec96:	4b02      	ldr	r3, [pc, #8]	; (800eca0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800ec98:	4618      	mov	r0, r3
 800ec9a:	3708      	adds	r7, #8
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	bd80      	pop	{r7, pc}
 800eca0:	2000017c 	.word	0x2000017c

0800eca4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eca4:	b580      	push	{r7, lr}
 800eca6:	b082      	sub	sp, #8
 800eca8:	af00      	add	r7, sp, #0
 800ecaa:	4603      	mov	r3, r0
 800ecac:	6039      	str	r1, [r7, #0]
 800ecae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ecb0:	79fb      	ldrb	r3, [r7, #7]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d105      	bne.n	800ecc2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ecb6:	683a      	ldr	r2, [r7, #0]
 800ecb8:	4907      	ldr	r1, [pc, #28]	; (800ecd8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ecba:	4808      	ldr	r0, [pc, #32]	; (800ecdc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ecbc:	f7ff f95e 	bl	800df7c <USBD_GetString>
 800ecc0:	e004      	b.n	800eccc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800ecc2:	683a      	ldr	r2, [r7, #0]
 800ecc4:	4904      	ldr	r1, [pc, #16]	; (800ecd8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800ecc6:	4805      	ldr	r0, [pc, #20]	; (800ecdc <USBD_CDC_ConfigStrDescriptor+0x38>)
 800ecc8:	f7ff f958 	bl	800df7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800eccc:	4b02      	ldr	r3, [pc, #8]	; (800ecd8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	3708      	adds	r7, #8
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	bd80      	pop	{r7, pc}
 800ecd6:	bf00      	nop
 800ecd8:	20002464 	.word	0x20002464
 800ecdc:	08015488 	.word	0x08015488

0800ece0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ece0:	b580      	push	{r7, lr}
 800ece2:	b082      	sub	sp, #8
 800ece4:	af00      	add	r7, sp, #0
 800ece6:	4603      	mov	r3, r0
 800ece8:	6039      	str	r1, [r7, #0]
 800ecea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ecec:	79fb      	ldrb	r3, [r7, #7]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d105      	bne.n	800ecfe <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ecf2:	683a      	ldr	r2, [r7, #0]
 800ecf4:	4907      	ldr	r1, [pc, #28]	; (800ed14 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ecf6:	4808      	ldr	r0, [pc, #32]	; (800ed18 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ecf8:	f7ff f940 	bl	800df7c <USBD_GetString>
 800ecfc:	e004      	b.n	800ed08 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800ecfe:	683a      	ldr	r2, [r7, #0]
 800ed00:	4904      	ldr	r1, [pc, #16]	; (800ed14 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800ed02:	4805      	ldr	r0, [pc, #20]	; (800ed18 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800ed04:	f7ff f93a 	bl	800df7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed08:	4b02      	ldr	r3, [pc, #8]	; (800ed14 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	20002464 	.word	0x20002464
 800ed18:	08015494 	.word	0x08015494

0800ed1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b084      	sub	sp, #16
 800ed20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ed22:	4b0f      	ldr	r3, [pc, #60]	; (800ed60 <Get_SerialNum+0x44>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ed28:	4b0e      	ldr	r3, [pc, #56]	; (800ed64 <Get_SerialNum+0x48>)
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ed2e:	4b0e      	ldr	r3, [pc, #56]	; (800ed68 <Get_SerialNum+0x4c>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ed34:	68fa      	ldr	r2, [r7, #12]
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	4413      	add	r3, r2
 800ed3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d009      	beq.n	800ed56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ed42:	2208      	movs	r2, #8
 800ed44:	4909      	ldr	r1, [pc, #36]	; (800ed6c <Get_SerialNum+0x50>)
 800ed46:	68f8      	ldr	r0, [r7, #12]
 800ed48:	f000 f814 	bl	800ed74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ed4c:	2204      	movs	r2, #4
 800ed4e:	4908      	ldr	r1, [pc, #32]	; (800ed70 <Get_SerialNum+0x54>)
 800ed50:	68b8      	ldr	r0, [r7, #8]
 800ed52:	f000 f80f 	bl	800ed74 <IntToUnicode>
  }
}
 800ed56:	bf00      	nop
 800ed58:	3710      	adds	r7, #16
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}
 800ed5e:	bf00      	nop
 800ed60:	1fff7590 	.word	0x1fff7590
 800ed64:	1fff7594 	.word	0x1fff7594
 800ed68:	1fff7598 	.word	0x1fff7598
 800ed6c:	2000017e 	.word	0x2000017e
 800ed70:	2000018e 	.word	0x2000018e

0800ed74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ed74:	b480      	push	{r7}
 800ed76:	b087      	sub	sp, #28
 800ed78:	af00      	add	r7, sp, #0
 800ed7a:	60f8      	str	r0, [r7, #12]
 800ed7c:	60b9      	str	r1, [r7, #8]
 800ed7e:	4613      	mov	r3, r2
 800ed80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ed82:	2300      	movs	r3, #0
 800ed84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ed86:	2300      	movs	r3, #0
 800ed88:	75fb      	strb	r3, [r7, #23]
 800ed8a:	e027      	b.n	800eddc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	0f1b      	lsrs	r3, r3, #28
 800ed90:	2b09      	cmp	r3, #9
 800ed92:	d80b      	bhi.n	800edac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	0f1b      	lsrs	r3, r3, #28
 800ed98:	b2da      	uxtb	r2, r3
 800ed9a:	7dfb      	ldrb	r3, [r7, #23]
 800ed9c:	005b      	lsls	r3, r3, #1
 800ed9e:	4619      	mov	r1, r3
 800eda0:	68bb      	ldr	r3, [r7, #8]
 800eda2:	440b      	add	r3, r1
 800eda4:	3230      	adds	r2, #48	; 0x30
 800eda6:	b2d2      	uxtb	r2, r2
 800eda8:	701a      	strb	r2, [r3, #0]
 800edaa:	e00a      	b.n	800edc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	0f1b      	lsrs	r3, r3, #28
 800edb0:	b2da      	uxtb	r2, r3
 800edb2:	7dfb      	ldrb	r3, [r7, #23]
 800edb4:	005b      	lsls	r3, r3, #1
 800edb6:	4619      	mov	r1, r3
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	440b      	add	r3, r1
 800edbc:	3237      	adds	r2, #55	; 0x37
 800edbe:	b2d2      	uxtb	r2, r2
 800edc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	011b      	lsls	r3, r3, #4
 800edc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800edc8:	7dfb      	ldrb	r3, [r7, #23]
 800edca:	005b      	lsls	r3, r3, #1
 800edcc:	3301      	adds	r3, #1
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	4413      	add	r3, r2
 800edd2:	2200      	movs	r2, #0
 800edd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800edd6:	7dfb      	ldrb	r3, [r7, #23]
 800edd8:	3301      	adds	r3, #1
 800edda:	75fb      	strb	r3, [r7, #23]
 800eddc:	7dfa      	ldrb	r2, [r7, #23]
 800edde:	79fb      	ldrb	r3, [r7, #7]
 800ede0:	429a      	cmp	r2, r3
 800ede2:	d3d3      	bcc.n	800ed8c <IntToUnicode+0x18>
  }
}
 800ede4:	bf00      	nop
 800ede6:	bf00      	nop
 800ede8:	371c      	adds	r7, #28
 800edea:	46bd      	mov	sp, r7
 800edec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf0:	4770      	bx	lr
	...

0800edf4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b084      	sub	sp, #16
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	4a0d      	ldr	r2, [pc, #52]	; (800ee38 <HAL_PCD_MspInit+0x44>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	d113      	bne.n	800ee2e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ee06:	4b0d      	ldr	r3, [pc, #52]	; (800ee3c <HAL_PCD_MspInit+0x48>)
 800ee08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee0a:	4a0c      	ldr	r2, [pc, #48]	; (800ee3c <HAL_PCD_MspInit+0x48>)
 800ee0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ee10:	6593      	str	r3, [r2, #88]	; 0x58
 800ee12:	4b0a      	ldr	r3, [pc, #40]	; (800ee3c <HAL_PCD_MspInit+0x48>)
 800ee14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee16:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ee1a:	60fb      	str	r3, [r7, #12]
 800ee1c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800ee1e:	2200      	movs	r2, #0
 800ee20:	2105      	movs	r1, #5
 800ee22:	2014      	movs	r0, #20
 800ee24:	f7f2 fa85 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800ee28:	2014      	movs	r0, #20
 800ee2a:	f7f2 fa9c 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800ee2e:	bf00      	nop
 800ee30:	3710      	adds	r7, #16
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	40005c00 	.word	0x40005c00
 800ee3c:	40021000 	.word	0x40021000

0800ee40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b082      	sub	sp, #8
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800ee54:	4619      	mov	r1, r3
 800ee56:	4610      	mov	r0, r2
 800ee58:	f7fe f913 	bl	800d082 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800ee5c:	bf00      	nop
 800ee5e:	3708      	adds	r7, #8
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bd80      	pop	{r7, pc}

0800ee64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee64:	b580      	push	{r7, lr}
 800ee66:	b082      	sub	sp, #8
 800ee68:	af00      	add	r7, sp, #0
 800ee6a:	6078      	str	r0, [r7, #4]
 800ee6c:	460b      	mov	r3, r1
 800ee6e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800ee76:	78fa      	ldrb	r2, [r7, #3]
 800ee78:	6879      	ldr	r1, [r7, #4]
 800ee7a:	4613      	mov	r3, r2
 800ee7c:	009b      	lsls	r3, r3, #2
 800ee7e:	4413      	add	r3, r2
 800ee80:	00db      	lsls	r3, r3, #3
 800ee82:	440b      	add	r3, r1
 800ee84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ee88:	681a      	ldr	r2, [r3, #0]
 800ee8a:	78fb      	ldrb	r3, [r7, #3]
 800ee8c:	4619      	mov	r1, r3
 800ee8e:	f7fe f94d 	bl	800d12c <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ee92:	bf00      	nop
 800ee94:	3708      	adds	r7, #8
 800ee96:	46bd      	mov	sp, r7
 800ee98:	bd80      	pop	{r7, pc}

0800ee9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee9a:	b580      	push	{r7, lr}
 800ee9c:	b082      	sub	sp, #8
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	6078      	str	r0, [r7, #4]
 800eea2:	460b      	mov	r3, r1
 800eea4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800eeac:	78fa      	ldrb	r2, [r7, #3]
 800eeae:	6879      	ldr	r1, [r7, #4]
 800eeb0:	4613      	mov	r3, r2
 800eeb2:	009b      	lsls	r3, r3, #2
 800eeb4:	4413      	add	r3, r2
 800eeb6:	00db      	lsls	r3, r3, #3
 800eeb8:	440b      	add	r3, r1
 800eeba:	3324      	adds	r3, #36	; 0x24
 800eebc:	681a      	ldr	r2, [r3, #0]
 800eebe:	78fb      	ldrb	r3, [r7, #3]
 800eec0:	4619      	mov	r1, r3
 800eec2:	f7fe f996 	bl	800d1f2 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800eec6:	bf00      	nop
 800eec8:	3708      	adds	r7, #8
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}

0800eece <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eece:	b580      	push	{r7, lr}
 800eed0:	b082      	sub	sp, #8
 800eed2:	af00      	add	r7, sp, #0
 800eed4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800eedc:	4618      	mov	r0, r3
 800eede:	f7fe fa9a 	bl	800d416 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800eee2:	bf00      	nop
 800eee4:	3708      	adds	r7, #8
 800eee6:	46bd      	mov	sp, r7
 800eee8:	bd80      	pop	{r7, pc}

0800eeea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eeea:	b580      	push	{r7, lr}
 800eeec:	b084      	sub	sp, #16
 800eeee:	af00      	add	r7, sp, #0
 800eef0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eef2:	2301      	movs	r3, #1
 800eef4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	795b      	ldrb	r3, [r3, #5]
 800eefa:	2b02      	cmp	r3, #2
 800eefc:	d001      	beq.n	800ef02 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800eefe:	f003 f843 	bl	8011f88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ef08:	7bfa      	ldrb	r2, [r7, #15]
 800ef0a:	4611      	mov	r1, r2
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7fe fa47 	bl	800d3a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ef18:	4618      	mov	r0, r3
 800ef1a:	f7fe fa00 	bl	800d31e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ef1e:	bf00      	nop
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}
	...

0800ef28 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b082      	sub	sp, #8
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7fe fa42 	bl	800d3c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	7a5b      	ldrb	r3, [r3, #9]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d005      	beq.n	800ef50 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef44:	4b04      	ldr	r3, [pc, #16]	; (800ef58 <HAL_PCD_SuspendCallback+0x30>)
 800ef46:	691b      	ldr	r3, [r3, #16]
 800ef48:	4a03      	ldr	r2, [pc, #12]	; (800ef58 <HAL_PCD_SuspendCallback+0x30>)
 800ef4a:	f043 0306 	orr.w	r3, r3, #6
 800ef4e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ef50:	bf00      	nop
 800ef52:	3708      	adds	r7, #8
 800ef54:	46bd      	mov	sp, r7
 800ef56:	bd80      	pop	{r7, pc}
 800ef58:	e000ed00 	.word	0xe000ed00

0800ef5c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	7a5b      	ldrb	r3, [r3, #9]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d007      	beq.n	800ef7c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ef6c:	4b08      	ldr	r3, [pc, #32]	; (800ef90 <HAL_PCD_ResumeCallback+0x34>)
 800ef6e:	691b      	ldr	r3, [r3, #16]
 800ef70:	4a07      	ldr	r2, [pc, #28]	; (800ef90 <HAL_PCD_ResumeCallback+0x34>)
 800ef72:	f023 0306 	bic.w	r3, r3, #6
 800ef76:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ef78:	f000 f9f8 	bl	800f36c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fe fa31 	bl	800d3ea <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ef88:	bf00      	nop
 800ef8a:	3708      	adds	r7, #8
 800ef8c:	46bd      	mov	sp, r7
 800ef8e:	bd80      	pop	{r7, pc}
 800ef90:	e000ed00 	.word	0xe000ed00

0800ef94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ef9c:	4a2b      	ldr	r2, [pc, #172]	; (800f04c <USBD_LL_Init+0xb8>)
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	4a29      	ldr	r2, [pc, #164]	; (800f04c <USBD_LL_Init+0xb8>)
 800efa8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800efac:	4b27      	ldr	r3, [pc, #156]	; (800f04c <USBD_LL_Init+0xb8>)
 800efae:	4a28      	ldr	r2, [pc, #160]	; (800f050 <USBD_LL_Init+0xbc>)
 800efb0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800efb2:	4b26      	ldr	r3, [pc, #152]	; (800f04c <USBD_LL_Init+0xb8>)
 800efb4:	2208      	movs	r2, #8
 800efb6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800efb8:	4b24      	ldr	r3, [pc, #144]	; (800f04c <USBD_LL_Init+0xb8>)
 800efba:	2202      	movs	r2, #2
 800efbc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800efbe:	4b23      	ldr	r3, [pc, #140]	; (800f04c <USBD_LL_Init+0xb8>)
 800efc0:	2202      	movs	r2, #2
 800efc2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = ENABLE;
 800efc4:	4b21      	ldr	r3, [pc, #132]	; (800f04c <USBD_LL_Init+0xb8>)
 800efc6:	2201      	movs	r2, #1
 800efc8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800efca:	4b20      	ldr	r3, [pc, #128]	; (800f04c <USBD_LL_Init+0xb8>)
 800efcc:	2200      	movs	r2, #0
 800efce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800efd0:	4b1e      	ldr	r3, [pc, #120]	; (800f04c <USBD_LL_Init+0xb8>)
 800efd2:	2200      	movs	r2, #0
 800efd4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800efd6:	4b1d      	ldr	r3, [pc, #116]	; (800f04c <USBD_LL_Init+0xb8>)
 800efd8:	2200      	movs	r2, #0
 800efda:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800efdc:	481b      	ldr	r0, [pc, #108]	; (800f04c <USBD_LL_Init+0xb8>)
 800efde:	f7f5 fde6 	bl	8004bae <HAL_PCD_Init>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d001      	beq.n	800efec <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800efe8:	f002 ffce 	bl	8011f88 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800eff2:	2318      	movs	r3, #24
 800eff4:	2200      	movs	r2, #0
 800eff6:	2100      	movs	r1, #0
 800eff8:	f7f7 faa0 	bl	800653c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f002:	2358      	movs	r3, #88	; 0x58
 800f004:	2200      	movs	r2, #0
 800f006:	2180      	movs	r1, #128	; 0x80
 800f008:	f7f7 fa98 	bl	800653c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f012:	23c0      	movs	r3, #192	; 0xc0
 800f014:	2200      	movs	r2, #0
 800f016:	2181      	movs	r1, #129	; 0x81
 800f018:	f7f7 fa90 	bl	800653c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f022:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f026:	2200      	movs	r2, #0
 800f028:	2101      	movs	r1, #1
 800f02a:	f7f7 fa87 	bl	800653c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f034:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f038:	2200      	movs	r2, #0
 800f03a:	2182      	movs	r1, #130	; 0x82
 800f03c:	f7f7 fa7e 	bl	800653c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f040:	2300      	movs	r3, #0
}
 800f042:	4618      	mov	r0, r3
 800f044:	3708      	adds	r7, #8
 800f046:	46bd      	mov	sp, r7
 800f048:	bd80      	pop	{r7, pc}
 800f04a:	bf00      	nop
 800f04c:	20002664 	.word	0x20002664
 800f050:	40005c00 	.word	0x40005c00

0800f054 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b084      	sub	sp, #16
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f05c:	2300      	movs	r3, #0
 800f05e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f060:	2300      	movs	r3, #0
 800f062:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7f5 fe6d 	bl	8004d4a <HAL_PCD_Start>
 800f070:	4603      	mov	r3, r0
 800f072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f074:	7bfb      	ldrb	r3, [r7, #15]
 800f076:	4618      	mov	r0, r3
 800f078:	f000 f97e 	bl	800f378 <USBD_Get_USB_Status>
 800f07c:	4603      	mov	r3, r0
 800f07e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f080:	7bbb      	ldrb	r3, [r7, #14]
}
 800f082:	4618      	mov	r0, r3
 800f084:	3710      	adds	r7, #16
 800f086:	46bd      	mov	sp, r7
 800f088:	bd80      	pop	{r7, pc}

0800f08a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f08a:	b580      	push	{r7, lr}
 800f08c:	b084      	sub	sp, #16
 800f08e:	af00      	add	r7, sp, #0
 800f090:	6078      	str	r0, [r7, #4]
 800f092:	4608      	mov	r0, r1
 800f094:	4611      	mov	r1, r2
 800f096:	461a      	mov	r2, r3
 800f098:	4603      	mov	r3, r0
 800f09a:	70fb      	strb	r3, [r7, #3]
 800f09c:	460b      	mov	r3, r1
 800f09e:	70bb      	strb	r3, [r7, #2]
 800f0a0:	4613      	mov	r3, r2
 800f0a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f0b2:	78bb      	ldrb	r3, [r7, #2]
 800f0b4:	883a      	ldrh	r2, [r7, #0]
 800f0b6:	78f9      	ldrb	r1, [r7, #3]
 800f0b8:	f7f5 ffb4 	bl	8005024 <HAL_PCD_EP_Open>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0c0:	7bfb      	ldrb	r3, [r7, #15]
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f000 f958 	bl	800f378 <USBD_Get_USB_Status>
 800f0c8:	4603      	mov	r3, r0
 800f0ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	3710      	adds	r7, #16
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	bd80      	pop	{r7, pc}

0800f0d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0d6:	b580      	push	{r7, lr}
 800f0d8:	b084      	sub	sp, #16
 800f0da:	af00      	add	r7, sp, #0
 800f0dc:	6078      	str	r0, [r7, #4]
 800f0de:	460b      	mov	r3, r1
 800f0e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f0f0:	78fa      	ldrb	r2, [r7, #3]
 800f0f2:	4611      	mov	r1, r2
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7f5 fff2 	bl	80050de <HAL_PCD_EP_Close>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0fe:	7bfb      	ldrb	r3, [r7, #15]
 800f100:	4618      	mov	r0, r3
 800f102:	f000 f939 	bl	800f378 <USBD_Get_USB_Status>
 800f106:	4603      	mov	r3, r0
 800f108:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f10a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f10c:	4618      	mov	r0, r3
 800f10e:	3710      	adds	r7, #16
 800f110:	46bd      	mov	sp, r7
 800f112:	bd80      	pop	{r7, pc}

0800f114 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f114:	b580      	push	{r7, lr}
 800f116:	b084      	sub	sp, #16
 800f118:	af00      	add	r7, sp, #0
 800f11a:	6078      	str	r0, [r7, #4]
 800f11c:	460b      	mov	r3, r1
 800f11e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f120:	2300      	movs	r3, #0
 800f122:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f124:	2300      	movs	r3, #0
 800f126:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f128:	687b      	ldr	r3, [r7, #4]
 800f12a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f12e:	78fa      	ldrb	r2, [r7, #3]
 800f130:	4611      	mov	r1, r2
 800f132:	4618      	mov	r0, r3
 800f134:	f7f6 f89b 	bl	800526e <HAL_PCD_EP_SetStall>
 800f138:	4603      	mov	r3, r0
 800f13a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f13c:	7bfb      	ldrb	r3, [r7, #15]
 800f13e:	4618      	mov	r0, r3
 800f140:	f000 f91a 	bl	800f378 <USBD_Get_USB_Status>
 800f144:	4603      	mov	r3, r0
 800f146:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f148:	7bbb      	ldrb	r3, [r7, #14]
}
 800f14a:	4618      	mov	r0, r3
 800f14c:	3710      	adds	r7, #16
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}

0800f152 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f152:	b580      	push	{r7, lr}
 800f154:	b084      	sub	sp, #16
 800f156:	af00      	add	r7, sp, #0
 800f158:	6078      	str	r0, [r7, #4]
 800f15a:	460b      	mov	r3, r1
 800f15c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f15e:	2300      	movs	r3, #0
 800f160:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f162:	2300      	movs	r3, #0
 800f164:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f16c:	78fa      	ldrb	r2, [r7, #3]
 800f16e:	4611      	mov	r1, r2
 800f170:	4618      	mov	r0, r3
 800f172:	f7f6 f8ce 	bl	8005312 <HAL_PCD_EP_ClrStall>
 800f176:	4603      	mov	r3, r0
 800f178:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f17a:	7bfb      	ldrb	r3, [r7, #15]
 800f17c:	4618      	mov	r0, r3
 800f17e:	f000 f8fb 	bl	800f378 <USBD_Get_USB_Status>
 800f182:	4603      	mov	r3, r0
 800f184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f186:	7bbb      	ldrb	r3, [r7, #14]
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3710      	adds	r7, #16
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f190:	b480      	push	{r7}
 800f192:	b085      	sub	sp, #20
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	460b      	mov	r3, r1
 800f19a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f1a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f1a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f1a8:	2b00      	cmp	r3, #0
 800f1aa:	da0b      	bge.n	800f1c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f1ac:	78fb      	ldrb	r3, [r7, #3]
 800f1ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1b2:	68f9      	ldr	r1, [r7, #12]
 800f1b4:	4613      	mov	r3, r2
 800f1b6:	009b      	lsls	r3, r3, #2
 800f1b8:	4413      	add	r3, r2
 800f1ba:	00db      	lsls	r3, r3, #3
 800f1bc:	440b      	add	r3, r1
 800f1be:	3312      	adds	r3, #18
 800f1c0:	781b      	ldrb	r3, [r3, #0]
 800f1c2:	e00b      	b.n	800f1dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f1c4:	78fb      	ldrb	r3, [r7, #3]
 800f1c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f1ca:	68f9      	ldr	r1, [r7, #12]
 800f1cc:	4613      	mov	r3, r2
 800f1ce:	009b      	lsls	r3, r3, #2
 800f1d0:	4413      	add	r3, r2
 800f1d2:	00db      	lsls	r3, r3, #3
 800f1d4:	440b      	add	r3, r1
 800f1d6:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800f1da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3714      	adds	r7, #20
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e6:	4770      	bx	lr

0800f1e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f202:	78fa      	ldrb	r2, [r7, #3]
 800f204:	4611      	mov	r1, r2
 800f206:	4618      	mov	r0, r3
 800f208:	f7f5 fee8 	bl	8004fdc <HAL_PCD_SetAddress>
 800f20c:	4603      	mov	r3, r0
 800f20e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f210:	7bfb      	ldrb	r3, [r7, #15]
 800f212:	4618      	mov	r0, r3
 800f214:	f000 f8b0 	bl	800f378 <USBD_Get_USB_Status>
 800f218:	4603      	mov	r3, r0
 800f21a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f21c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3710      	adds	r7, #16
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f226:	b580      	push	{r7, lr}
 800f228:	b086      	sub	sp, #24
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	60f8      	str	r0, [r7, #12]
 800f22e:	607a      	str	r2, [r7, #4]
 800f230:	603b      	str	r3, [r7, #0]
 800f232:	460b      	mov	r3, r1
 800f234:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f236:	2300      	movs	r3, #0
 800f238:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f23a:	2300      	movs	r3, #0
 800f23c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f244:	7af9      	ldrb	r1, [r7, #11]
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	687a      	ldr	r2, [r7, #4]
 800f24a:	f7f5 ffd9 	bl	8005200 <HAL_PCD_EP_Transmit>
 800f24e:	4603      	mov	r3, r0
 800f250:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f252:	7dfb      	ldrb	r3, [r7, #23]
 800f254:	4618      	mov	r0, r3
 800f256:	f000 f88f 	bl	800f378 <USBD_Get_USB_Status>
 800f25a:	4603      	mov	r3, r0
 800f25c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f25e:	7dbb      	ldrb	r3, [r7, #22]
}
 800f260:	4618      	mov	r0, r3
 800f262:	3718      	adds	r7, #24
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	607a      	str	r2, [r7, #4]
 800f272:	603b      	str	r3, [r7, #0]
 800f274:	460b      	mov	r3, r1
 800f276:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f278:	2300      	movs	r3, #0
 800f27a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f27c:	2300      	movs	r3, #0
 800f27e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f286:	7af9      	ldrb	r1, [r7, #11]
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	f7f5 ff6f 	bl	800516e <HAL_PCD_EP_Receive>
 800f290:	4603      	mov	r3, r0
 800f292:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f294:	7dfb      	ldrb	r3, [r7, #23]
 800f296:	4618      	mov	r0, r3
 800f298:	f000 f86e 	bl	800f378 <USBD_Get_USB_Status>
 800f29c:	4603      	mov	r3, r0
 800f29e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f2a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3718      	adds	r7, #24
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}

0800f2aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2aa:	b580      	push	{r7, lr}
 800f2ac:	b082      	sub	sp, #8
 800f2ae:	af00      	add	r7, sp, #0
 800f2b0:	6078      	str	r0, [r7, #4]
 800f2b2:	460b      	mov	r3, r1
 800f2b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f2bc:	78fa      	ldrb	r2, [r7, #3]
 800f2be:	4611      	mov	r1, r2
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f7f5 ff85 	bl	80051d0 <HAL_PCD_EP_GetRxCount>
 800f2c6:	4603      	mov	r3, r0
}
 800f2c8:	4618      	mov	r0, r3
 800f2ca:	3708      	adds	r7, #8
 800f2cc:	46bd      	mov	sp, r7
 800f2ce:	bd80      	pop	{r7, pc}

0800f2d0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	460b      	mov	r3, r1
 800f2da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f2dc:	78fb      	ldrb	r3, [r7, #3]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d002      	beq.n	800f2e8 <HAL_PCDEx_LPM_Callback+0x18>
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	d013      	beq.n	800f30e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f2e6:	e023      	b.n	800f330 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	7a5b      	ldrb	r3, [r3, #9]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d007      	beq.n	800f300 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800f2f0:	f000 f83c 	bl	800f36c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2f4:	4b10      	ldr	r3, [pc, #64]	; (800f338 <HAL_PCDEx_LPM_Callback+0x68>)
 800f2f6:	691b      	ldr	r3, [r3, #16]
 800f2f8:	4a0f      	ldr	r2, [pc, #60]	; (800f338 <HAL_PCDEx_LPM_Callback+0x68>)
 800f2fa:	f023 0306 	bic.w	r3, r3, #6
 800f2fe:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f306:	4618      	mov	r0, r3
 800f308:	f7fe f86f 	bl	800d3ea <USBD_LL_Resume>
    break;
 800f30c:	e010      	b.n	800f330 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f314:	4618      	mov	r0, r3
 800f316:	f7fe f853 	bl	800d3c0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	7a5b      	ldrb	r3, [r3, #9]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d005      	beq.n	800f32e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f322:	4b05      	ldr	r3, [pc, #20]	; (800f338 <HAL_PCDEx_LPM_Callback+0x68>)
 800f324:	691b      	ldr	r3, [r3, #16]
 800f326:	4a04      	ldr	r2, [pc, #16]	; (800f338 <HAL_PCDEx_LPM_Callback+0x68>)
 800f328:	f043 0306 	orr.w	r3, r3, #6
 800f32c:	6113      	str	r3, [r2, #16]
    break;
 800f32e:	bf00      	nop
}
 800f330:	bf00      	nop
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	e000ed00 	.word	0xe000ed00

0800f33c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f33c:	b480      	push	{r7}
 800f33e:	b083      	sub	sp, #12
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f344:	4b03      	ldr	r3, [pc, #12]	; (800f354 <USBD_static_malloc+0x18>)
}
 800f346:	4618      	mov	r0, r3
 800f348:	370c      	adds	r7, #12
 800f34a:	46bd      	mov	sp, r7
 800f34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f350:	4770      	bx	lr
 800f352:	bf00      	nop
 800f354:	20002940 	.word	0x20002940

0800f358 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f358:	b480      	push	{r7}
 800f35a:	b083      	sub	sp, #12
 800f35c:	af00      	add	r7, sp, #0
 800f35e:	6078      	str	r0, [r7, #4]

}
 800f360:	bf00      	nop
 800f362:	370c      	adds	r7, #12
 800f364:	46bd      	mov	sp, r7
 800f366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f36a:	4770      	bx	lr

0800f36c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800f370:	f002 fdb0 	bl	8011ed4 <SystemClock_Config>
}
 800f374:	bf00      	nop
 800f376:	bd80      	pop	{r7, pc}

0800f378 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f378:	b480      	push	{r7}
 800f37a:	b085      	sub	sp, #20
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	4603      	mov	r3, r0
 800f380:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f382:	2300      	movs	r3, #0
 800f384:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f386:	79fb      	ldrb	r3, [r7, #7]
 800f388:	2b03      	cmp	r3, #3
 800f38a:	d817      	bhi.n	800f3bc <USBD_Get_USB_Status+0x44>
 800f38c:	a201      	add	r2, pc, #4	; (adr r2, 800f394 <USBD_Get_USB_Status+0x1c>)
 800f38e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f392:	bf00      	nop
 800f394:	0800f3a5 	.word	0x0800f3a5
 800f398:	0800f3ab 	.word	0x0800f3ab
 800f39c:	0800f3b1 	.word	0x0800f3b1
 800f3a0:	0800f3b7 	.word	0x0800f3b7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800f3a8:	e00b      	b.n	800f3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f3aa:	2303      	movs	r3, #3
 800f3ac:	73fb      	strb	r3, [r7, #15]
    break;
 800f3ae:	e008      	b.n	800f3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f3b0:	2301      	movs	r3, #1
 800f3b2:	73fb      	strb	r3, [r7, #15]
    break;
 800f3b4:	e005      	b.n	800f3c2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f3b6:	2303      	movs	r3, #3
 800f3b8:	73fb      	strb	r3, [r7, #15]
    break;
 800f3ba:	e002      	b.n	800f3c2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f3bc:	2303      	movs	r3, #3
 800f3be:	73fb      	strb	r3, [r7, #15]
    break;
 800f3c0:	bf00      	nop
  }
  return usb_status;
 800f3c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3714      	adds	r7, #20
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ce:	4770      	bx	lr

0800f3d0 <canInit>:
#endif

static void canErrUpdate(uint8_t ch);

bool canInit(void)
{
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
  bool ret = true;
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	71bb      	strb	r3, [r7, #6]

  uint8_t i;


  for(i = 0; i < CAN_MAX_CH; i++)
 800f3da:	2300      	movs	r3, #0
 800f3dc:	71fb      	strb	r3, [r7, #7]
 800f3de:	e070      	b.n	800f4c2 <canInit+0xf2>
  {
    can_tbl[i].is_init  = true;
 800f3e0:	79fb      	ldrb	r3, [r7, #7]
 800f3e2:	4a3e      	ldr	r2, [pc, #248]	; (800f4dc <canInit+0x10c>)
 800f3e4:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f3e8:	fb01 f303 	mul.w	r3, r1, r3
 800f3ec:	4413      	add	r3, r2
 800f3ee:	2201      	movs	r2, #1
 800f3f0:	701a      	strb	r2, [r3, #0]
    can_tbl[i].is_open  = false;
 800f3f2:	79fb      	ldrb	r3, [r7, #7]
 800f3f4:	4a39      	ldr	r2, [pc, #228]	; (800f4dc <canInit+0x10c>)
 800f3f6:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f3fa:	fb01 f303 	mul.w	r3, r1, r3
 800f3fe:	4413      	add	r3, r2
 800f400:	3301      	adds	r3, #1
 800f402:	2200      	movs	r2, #0
 800f404:	701a      	strb	r2, [r3, #0]
    can_tbl[i].err_code = CAN_ERR_NONE;
 800f406:	79fb      	ldrb	r3, [r7, #7]
 800f408:	4a34      	ldr	r2, [pc, #208]	; (800f4dc <canInit+0x10c>)
 800f40a:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f40e:	fb01 f303 	mul.w	r3, r1, r3
 800f412:	4413      	add	r3, r2
 800f414:	3304      	adds	r3, #4
 800f416:	2200      	movs	r2, #0
 800f418:	601a      	str	r2, [r3, #0]
    can_tbl[i].state    = 0;
 800f41a:	79fb      	ldrb	r3, [r7, #7]
 800f41c:	4a2f      	ldr	r2, [pc, #188]	; (800f4dc <canInit+0x10c>)
 800f41e:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f422:	fb01 f303 	mul.w	r3, r1, r3
 800f426:	4413      	add	r3, r2
 800f428:	3308      	adds	r3, #8
 800f42a:	2200      	movs	r2, #0
 800f42c:	701a      	strb	r2, [r3, #0]
    can_tbl[i].recovery_cnt = 0;
 800f42e:	79fb      	ldrb	r3, [r7, #7]
 800f430:	4a2a      	ldr	r2, [pc, #168]	; (800f4dc <canInit+0x10c>)
 800f432:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f436:	fb01 f303 	mul.w	r3, r1, r3
 800f43a:	4413      	add	r3, r2
 800f43c:	330c      	adds	r3, #12
 800f43e:	2200      	movs	r2, #0
 800f440:	601a      	str	r2, [r3, #0]

    can_tbl[i].q_rx_full_cnt = 0;
 800f442:	79fb      	ldrb	r3, [r7, #7]
 800f444:	4a25      	ldr	r2, [pc, #148]	; (800f4dc <canInit+0x10c>)
 800f446:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f44a:	fb01 f303 	mul.w	r3, r1, r3
 800f44e:	4413      	add	r3, r2
 800f450:	3310      	adds	r3, #16
 800f452:	2200      	movs	r2, #0
 800f454:	601a      	str	r2, [r3, #0]
    can_tbl[i].q_tx_full_cnt = 0;
 800f456:	79fb      	ldrb	r3, [r7, #7]
 800f458:	4a20      	ldr	r2, [pc, #128]	; (800f4dc <canInit+0x10c>)
 800f45a:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f45e:	fb01 f303 	mul.w	r3, r1, r3
 800f462:	4413      	add	r3, r2
 800f464:	3314      	adds	r3, #20
 800f466:	2200      	movs	r2, #0
 800f468:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_full_cnt = 0;
 800f46a:	79fb      	ldrb	r3, [r7, #7]
 800f46c:	4a1b      	ldr	r2, [pc, #108]	; (800f4dc <canInit+0x10c>)
 800f46e:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f472:	fb01 f303 	mul.w	r3, r1, r3
 800f476:	4413      	add	r3, r2
 800f478:	3318      	adds	r3, #24
 800f47a:	2200      	movs	r2, #0
 800f47c:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_lost_cnt = 0;
 800f47e:	79fb      	ldrb	r3, [r7, #7]
 800f480:	4a16      	ldr	r2, [pc, #88]	; (800f4dc <canInit+0x10c>)
 800f482:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f486:	fb01 f303 	mul.w	r3, r1, r3
 800f48a:	4413      	add	r3, r2
 800f48c:	331c      	adds	r3, #28
 800f48e:	2200      	movs	r2, #0
 800f490:	601a      	str	r2, [r3, #0]

    qbufferCreateBySize(&can_tbl[i].q_msg, (uint8_t *)&can_tbl[i].can_msg[0], sizeof(can_msg_t), CAN_MSG_RX_BUF_MAX);
 800f492:	79fb      	ldrb	r3, [r7, #7]
 800f494:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800f498:	fb02 f303 	mul.w	r3, r2, r3
 800f49c:	3390      	adds	r3, #144	; 0x90
 800f49e:	4a0f      	ldr	r2, [pc, #60]	; (800f4dc <canInit+0x10c>)
 800f4a0:	4413      	add	r3, r2
 800f4a2:	1d18      	adds	r0, r3, #4
 800f4a4:	79fb      	ldrb	r3, [r7, #7]
 800f4a6:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800f4aa:	fb02 f303 	mul.w	r3, r2, r3
 800f4ae:	33a8      	adds	r3, #168	; 0xa8
 800f4b0:	4a0a      	ldr	r2, [pc, #40]	; (800f4dc <canInit+0x10c>)
 800f4b2:	1899      	adds	r1, r3, r2
 800f4b4:	2310      	movs	r3, #16
 800f4b6:	224c      	movs	r2, #76	; 0x4c
 800f4b8:	f7fd fc40 	bl	800cd3c <qbufferCreateBySize>
  for(i = 0; i < CAN_MAX_CH; i++)
 800f4bc:	79fb      	ldrb	r3, [r7, #7]
 800f4be:	3301      	adds	r3, #1
 800f4c0:	71fb      	strb	r3, [r7, #7]
 800f4c2:	79fb      	ldrb	r3, [r7, #7]
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	d98b      	bls.n	800f3e0 <canInit+0x10>
  }

#ifdef _USE_HW_CLI
  cliAdd("can", cliCan);
 800f4c8:	4905      	ldr	r1, [pc, #20]	; (800f4e0 <canInit+0x110>)
 800f4ca:	4806      	ldr	r0, [pc, #24]	; (800f4e4 <canInit+0x114>)
 800f4cc:	f7fd f94c 	bl	800c768 <cliAdd>
#endif
  return ret;
 800f4d0:	79bb      	ldrb	r3, [r7, #6]
}
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	3708      	adds	r7, #8
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}
 800f4da:	bf00      	nop
 800f4dc:	20002b60 	.word	0x20002b60
 800f4e0:	0801001d 	.word	0x0801001d
 800f4e4:	080154a4 	.word	0x080154a4

0800f4e8 <canOpen>:

bool canOpen(uint8_t ch, can_mode_t mode, can_frame_t frame, can_baud_t baud, can_baud_t baud_data)
{
 800f4e8:	b590      	push	{r4, r7, lr}
 800f4ea:	b089      	sub	sp, #36	; 0x24
 800f4ec:	af02      	add	r7, sp, #8
 800f4ee:	4604      	mov	r4, r0
 800f4f0:	4608      	mov	r0, r1
 800f4f2:	4611      	mov	r1, r2
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	4623      	mov	r3, r4
 800f4f8:	71fb      	strb	r3, [r7, #7]
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	71bb      	strb	r3, [r7, #6]
 800f4fe:	460b      	mov	r3, r1
 800f500:	717b      	strb	r3, [r7, #5]
 800f502:	4613      	mov	r3, r2
 800f504:	713b      	strb	r3, [r7, #4]
  bool ret = true;
 800f506:	2301      	movs	r3, #1
 800f508:	75fb      	strb	r3, [r7, #23]
  FDCAN_HandleTypeDef  *p_can;
  uint32_t tdc_offset;


  if (ch >= CAN_MAX_CH) return false;
 800f50a:	79fb      	ldrb	r3, [r7, #7]
 800f50c:	2b01      	cmp	r3, #1
 800f50e:	d901      	bls.n	800f514 <canOpen+0x2c>
 800f510:	2300      	movs	r3, #0
 800f512:	e121      	b.n	800f758 <canOpen+0x270>


  p_can = &can_tbl[ch].hfdcan;
 800f514:	79fb      	ldrb	r3, [r7, #7]
 800f516:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800f51a:	fb02 f303 	mul.w	r3, r2, r3
 800f51e:	3328      	adds	r3, #40	; 0x28
 800f520:	4a8f      	ldr	r2, [pc, #572]	; (800f760 <canOpen+0x278>)
 800f522:	4413      	add	r3, r2
 800f524:	3304      	adds	r3, #4
 800f526:	613b      	str	r3, [r7, #16]

  switch(ch)
 800f528:	79fb      	ldrb	r3, [r7, #7]
 800f52a:	2b01      	cmp	r3, #1
 800f52c:	f040 80a8 	bne.w	800f680 <canOpen+0x198>
  {
    case _DEF_CAN2:
      p_can->Instance                   = FDCAN2;
 800f530:	693b      	ldr	r3, [r7, #16]
 800f532:	4a8c      	ldr	r2, [pc, #560]	; (800f764 <canOpen+0x27c>)
 800f534:	601a      	str	r2, [r3, #0]
      p_can->Init.ClockDivider          = FDCAN_CLOCK_DIV1;
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	2200      	movs	r2, #0
 800f53a:	605a      	str	r2, [r3, #4]
      p_can->Init.FrameFormat           = frame_tbl[frame];
 800f53c:	797b      	ldrb	r3, [r7, #5]
 800f53e:	4a8a      	ldr	r2, [pc, #552]	; (800f768 <canOpen+0x280>)
 800f540:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	609a      	str	r2, [r3, #8]
      p_can->Init.Mode                  = mode_tbl[mode];
 800f548:	79bb      	ldrb	r3, [r7, #6]
 800f54a:	4a88      	ldr	r2, [pc, #544]	; (800f76c <canOpen+0x284>)
 800f54c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f550:	693b      	ldr	r3, [r7, #16]
 800f552:	60da      	str	r2, [r3, #12]
      p_can->Init.AutoRetransmission    = ENABLE;
 800f554:	693b      	ldr	r3, [r7, #16]
 800f556:	2201      	movs	r2, #1
 800f558:	741a      	strb	r2, [r3, #16]
      p_can->Init.TransmitPause         = ENABLE;
 800f55a:	693b      	ldr	r3, [r7, #16]
 800f55c:	2201      	movs	r2, #1
 800f55e:	745a      	strb	r2, [r3, #17]
      p_can->Init.ProtocolException     = ENABLE;
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	2201      	movs	r2, #1
 800f564:	749a      	strb	r2, [r3, #18]
      p_can->Init.NominalPrescaler      = p_baud_normal[baud].prescaler;
 800f566:	4b82      	ldr	r3, [pc, #520]	; (800f770 <canOpen+0x288>)
 800f568:	681a      	ldr	r2, [r3, #0]
 800f56a:	793b      	ldrb	r3, [r7, #4]
 800f56c:	011b      	lsls	r3, r3, #4
 800f56e:	4413      	add	r3, r2
 800f570:	681a      	ldr	r2, [r3, #0]
 800f572:	693b      	ldr	r3, [r7, #16]
 800f574:	615a      	str	r2, [r3, #20]
      p_can->Init.NominalSyncJumpWidth  = p_baud_normal[baud].sjw;
 800f576:	4b7e      	ldr	r3, [pc, #504]	; (800f770 <canOpen+0x288>)
 800f578:	681a      	ldr	r2, [r3, #0]
 800f57a:	793b      	ldrb	r3, [r7, #4]
 800f57c:	011b      	lsls	r3, r3, #4
 800f57e:	4413      	add	r3, r2
 800f580:	685a      	ldr	r2, [r3, #4]
 800f582:	693b      	ldr	r3, [r7, #16]
 800f584:	619a      	str	r2, [r3, #24]
      p_can->Init.NominalTimeSeg1       = p_baud_normal[baud].tseg1;
 800f586:	4b7a      	ldr	r3, [pc, #488]	; (800f770 <canOpen+0x288>)
 800f588:	681a      	ldr	r2, [r3, #0]
 800f58a:	793b      	ldrb	r3, [r7, #4]
 800f58c:	011b      	lsls	r3, r3, #4
 800f58e:	4413      	add	r3, r2
 800f590:	689a      	ldr	r2, [r3, #8]
 800f592:	693b      	ldr	r3, [r7, #16]
 800f594:	61da      	str	r2, [r3, #28]
      p_can->Init.NominalTimeSeg2       = p_baud_normal[baud].tseg2;
 800f596:	4b76      	ldr	r3, [pc, #472]	; (800f770 <canOpen+0x288>)
 800f598:	681a      	ldr	r2, [r3, #0]
 800f59a:	793b      	ldrb	r3, [r7, #4]
 800f59c:	011b      	lsls	r3, r3, #4
 800f59e:	4413      	add	r3, r2
 800f5a0:	68da      	ldr	r2, [r3, #12]
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	621a      	str	r2, [r3, #32]
      p_can->Init.DataPrescaler         = p_baud_data[baud_data].prescaler;
 800f5a6:	4b73      	ldr	r3, [pc, #460]	; (800f774 <canOpen+0x28c>)
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f5ae:	011b      	lsls	r3, r3, #4
 800f5b0:	4413      	add	r3, r2
 800f5b2:	681a      	ldr	r2, [r3, #0]
 800f5b4:	693b      	ldr	r3, [r7, #16]
 800f5b6:	625a      	str	r2, [r3, #36]	; 0x24
      p_can->Init.DataSyncJumpWidth     = p_baud_data[baud_data].sjw;
 800f5b8:	4b6e      	ldr	r3, [pc, #440]	; (800f774 <canOpen+0x28c>)
 800f5ba:	681a      	ldr	r2, [r3, #0]
 800f5bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f5c0:	011b      	lsls	r3, r3, #4
 800f5c2:	4413      	add	r3, r2
 800f5c4:	685a      	ldr	r2, [r3, #4]
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	629a      	str	r2, [r3, #40]	; 0x28
      p_can->Init.DataTimeSeg1          = p_baud_data[baud_data].tseg1;
 800f5ca:	4b6a      	ldr	r3, [pc, #424]	; (800f774 <canOpen+0x28c>)
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f5d2:	011b      	lsls	r3, r3, #4
 800f5d4:	4413      	add	r3, r2
 800f5d6:	689a      	ldr	r2, [r3, #8]
 800f5d8:	693b      	ldr	r3, [r7, #16]
 800f5da:	62da      	str	r2, [r3, #44]	; 0x2c
      p_can->Init.DataTimeSeg2          = p_baud_data[baud_data].tseg2;
 800f5dc:	4b65      	ldr	r3, [pc, #404]	; (800f774 <canOpen+0x28c>)
 800f5de:	681a      	ldr	r2, [r3, #0]
 800f5e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f5e4:	011b      	lsls	r3, r3, #4
 800f5e6:	4413      	add	r3, r2
 800f5e8:	68da      	ldr	r2, [r3, #12]
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	631a      	str	r2, [r3, #48]	; 0x30
      p_can->Init.StdFiltersNbr         = 28;
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	221c      	movs	r2, #28
 800f5f2:	635a      	str	r2, [r3, #52]	; 0x34
      p_can->Init.ExtFiltersNbr         = 8;
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	2208      	movs	r2, #8
 800f5f8:	639a      	str	r2, [r3, #56]	; 0x38
      p_can->Init.TxFifoQueueMode       = FDCAN_TX_FIFO_OPERATION;
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	63da      	str	r2, [r3, #60]	; 0x3c

      can_tbl[ch].mode                  = mode;
 800f600:	79fb      	ldrb	r3, [r7, #7]
 800f602:	4a57      	ldr	r2, [pc, #348]	; (800f760 <canOpen+0x278>)
 800f604:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f608:	fb01 f303 	mul.w	r3, r1, r3
 800f60c:	4413      	add	r3, r2
 800f60e:	3328      	adds	r3, #40	; 0x28
 800f610:	79ba      	ldrb	r2, [r7, #6]
 800f612:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].frame                 = frame;
 800f614:	79fb      	ldrb	r3, [r7, #7]
 800f616:	4a52      	ldr	r2, [pc, #328]	; (800f760 <canOpen+0x278>)
 800f618:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f61c:	fb01 f303 	mul.w	r3, r1, r3
 800f620:	4413      	add	r3, r2
 800f622:	3329      	adds	r3, #41	; 0x29
 800f624:	797a      	ldrb	r2, [r7, #5]
 800f626:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud                  = baud;
 800f628:	79fb      	ldrb	r3, [r7, #7]
 800f62a:	4a4d      	ldr	r2, [pc, #308]	; (800f760 <canOpen+0x278>)
 800f62c:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f630:	fb01 f303 	mul.w	r3, r1, r3
 800f634:	4413      	add	r3, r2
 800f636:	332a      	adds	r3, #42	; 0x2a
 800f638:	793a      	ldrb	r2, [r7, #4]
 800f63a:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud_data             = baud_data;
 800f63c:	79fb      	ldrb	r3, [r7, #7]
 800f63e:	4a48      	ldr	r2, [pc, #288]	; (800f760 <canOpen+0x278>)
 800f640:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f644:	fb01 f303 	mul.w	r3, r1, r3
 800f648:	4413      	add	r3, r2
 800f64a:	332b      	adds	r3, #43	; 0x2b
 800f64c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f650:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].fifo_idx              = FDCAN_RX_FIFO0;
 800f652:	79fb      	ldrb	r3, [r7, #7]
 800f654:	4a42      	ldr	r2, [pc, #264]	; (800f760 <canOpen+0x278>)
 800f656:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f65a:	fb01 f303 	mul.w	r3, r1, r3
 800f65e:	4413      	add	r3, r2
 800f660:	3320      	adds	r3, #32
 800f662:	2240      	movs	r2, #64	; 0x40
 800f664:	601a      	str	r2, [r3, #0]
      can_tbl[ch].enable_int            = FDCAN_IT_LIST_RX_FIFO0 |
 800f666:	79fb      	ldrb	r3, [r7, #7]
 800f668:	4a3d      	ldr	r2, [pc, #244]	; (800f760 <canOpen+0x278>)
 800f66a:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f66e:	fb01 f303 	mul.w	r3, r1, r3
 800f672:	4413      	add	r3, r2
 800f674:	3324      	adds	r3, #36	; 0x24
 800f676:	4a40      	ldr	r2, [pc, #256]	; (800f778 <canOpen+0x290>)
 800f678:	601a      	str	r2, [r3, #0]
                                          FDCAN_IT_BUS_OFF |
                                          FDCAN_IT_ERROR_WARNING |
                                          FDCAN_IT_ERROR_PASSIVE;
      ret = true;
 800f67a:	2301      	movs	r3, #1
 800f67c:	75fb      	strb	r3, [r7, #23]
      break;
 800f67e:	bf00      	nop
  }

  if (ret != true)
 800f680:	7dfb      	ldrb	r3, [r7, #23]
 800f682:	f083 0301 	eor.w	r3, r3, #1
 800f686:	b2db      	uxtb	r3, r3
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d001      	beq.n	800f690 <canOpen+0x1a8>
  {
    return false;
 800f68c:	2300      	movs	r3, #0
 800f68e:	e063      	b.n	800f758 <canOpen+0x270>
  }

  if (HAL_FDCAN_Init(p_can) != HAL_OK)
 800f690:	6938      	ldr	r0, [r7, #16]
 800f692:	f7f2 f9d7 	bl	8001a44 <HAL_FDCAN_Init>
 800f696:	4603      	mov	r3, r0
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d001      	beq.n	800f6a0 <canOpen+0x1b8>
  {
    return false;
 800f69c:	2300      	movs	r3, #0
 800f69e:	e05b      	b.n	800f758 <canOpen+0x270>
  }



  canConfigFilter(ch, 0, CAN_STD, 0x0000, 0x0000);
 800f6a0:	79f8      	ldrb	r0, [r7, #7]
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	9300      	str	r3, [sp, #0]
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	2100      	movs	r1, #0
 800f6ac:	f000 f866 	bl	800f77c <canConfigFilter>
  canConfigFilter(ch, 0, CAN_EXT, 0x0000, 0x0000);
 800f6b0:	79f8      	ldrb	r0, [r7, #7]
 800f6b2:	2300      	movs	r3, #0
 800f6b4:	9300      	str	r3, [sp, #0]
 800f6b6:	2300      	movs	r3, #0
 800f6b8:	2201      	movs	r2, #1
 800f6ba:	2100      	movs	r1, #0
 800f6bc:	f000 f85e 	bl	800f77c <canConfigFilter>


  if (HAL_FDCAN_ConfigGlobalFilter(p_can, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	9300      	str	r3, [sp, #0]
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	2202      	movs	r2, #2
 800f6c8:	2102      	movs	r1, #2
 800f6ca:	6938      	ldr	r0, [r7, #16]
 800f6cc:	f7f2 fb6e 	bl	8001dac <HAL_FDCAN_ConfigGlobalFilter>
 800f6d0:	4603      	mov	r3, r0
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d001      	beq.n	800f6da <canOpen+0x1f2>
  {
    return false;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	e03e      	b.n	800f758 <canOpen+0x270>
  }
  if (HAL_FDCAN_ActivateNotification(p_can, can_tbl[ch].enable_int, 0) != HAL_OK)
 800f6da:	79fb      	ldrb	r3, [r7, #7]
 800f6dc:	4a20      	ldr	r2, [pc, #128]	; (800f760 <canOpen+0x278>)
 800f6de:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f6e2:	fb01 f303 	mul.w	r3, r1, r3
 800f6e6:	4413      	add	r3, r2
 800f6e8:	3324      	adds	r3, #36	; 0x24
 800f6ea:	681b      	ldr	r3, [r3, #0]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	4619      	mov	r1, r3
 800f6f0:	6938      	ldr	r0, [r7, #16]
 800f6f2:	f7f2 fe3a 	bl	800236a <HAL_FDCAN_ActivateNotification>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d001      	beq.n	800f700 <canOpen+0x218>
  {
    return false;
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	e02b      	b.n	800f758 <canOpen+0x270>
  }


  tdc_offset = p_can->Init.DataPrescaler * p_can->Init.DataTimeSeg1;
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f704:	693a      	ldr	r2, [r7, #16]
 800f706:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f708:	fb02 f303 	mul.w	r3, r2, r3
 800f70c:	60fb      	str	r3, [r7, #12]

  if (HAL_FDCAN_ConfigTxDelayCompensation(p_can, tdc_offset, 0) != HAL_OK) return false;
 800f70e:	2200      	movs	r2, #0
 800f710:	68f9      	ldr	r1, [r7, #12]
 800f712:	6938      	ldr	r0, [r7, #16]
 800f714:	f7f2 fb7b 	bl	8001e0e <HAL_FDCAN_ConfigTxDelayCompensation>
 800f718:	4603      	mov	r3, r0
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d001      	beq.n	800f722 <canOpen+0x23a>
 800f71e:	2300      	movs	r3, #0
 800f720:	e01a      	b.n	800f758 <canOpen+0x270>
  if (HAL_FDCAN_EnableTxDelayCompensation(p_can) != HAL_OK)                return false;
 800f722:	6938      	ldr	r0, [r7, #16]
 800f724:	f7f2 fb95 	bl	8001e52 <HAL_FDCAN_EnableTxDelayCompensation>
 800f728:	4603      	mov	r3, r0
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d001      	beq.n	800f732 <canOpen+0x24a>
 800f72e:	2300      	movs	r3, #0
 800f730:	e012      	b.n	800f758 <canOpen+0x270>


  if (HAL_FDCAN_Start(p_can) != HAL_OK)
 800f732:	6938      	ldr	r0, [r7, #16]
 800f734:	f7f2 fbae 	bl	8001e94 <HAL_FDCAN_Start>
 800f738:	4603      	mov	r3, r0
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d001      	beq.n	800f742 <canOpen+0x25a>
  {
    return false;
 800f73e:	2300      	movs	r3, #0
 800f740:	e00a      	b.n	800f758 <canOpen+0x270>
  }


  can_tbl[ch].is_open = true;
 800f742:	79fb      	ldrb	r3, [r7, #7]
 800f744:	4a06      	ldr	r2, [pc, #24]	; (800f760 <canOpen+0x278>)
 800f746:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f74a:	fb01 f303 	mul.w	r3, r1, r3
 800f74e:	4413      	add	r3, r2
 800f750:	3301      	adds	r3, #1
 800f752:	2201      	movs	r2, #1
 800f754:	701a      	strb	r2, [r3, #0]


  return ret;
 800f756:	7dfb      	ldrb	r3, [r7, #23]
}
 800f758:	4618      	mov	r0, r3
 800f75a:	371c      	adds	r7, #28
 800f75c:	46bd      	mov	sp, r7
 800f75e:	bd90      	pop	{r4, r7, pc}
 800f760:	20002b60 	.word	0x20002b60
 800f764:	40006800 	.word	0x40006800
 800f768:	08015b74 	.word	0x08015b74
 800f76c:	08015b80 	.word	0x08015b80
 800f770:	20000198 	.word	0x20000198
 800f774:	2000019c 	.word	0x2000019c
 800f778:	000e0007 	.word	0x000e0007

0800f77c <canConfigFilter>:
{

}

bool canConfigFilter(uint8_t ch, uint8_t index, can_id_type_t id_type, uint32_t id, uint32_t id_mask)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b08a      	sub	sp, #40	; 0x28
 800f780:	af00      	add	r7, sp, #0
 800f782:	603b      	str	r3, [r7, #0]
 800f784:	4603      	mov	r3, r0
 800f786:	71fb      	strb	r3, [r7, #7]
 800f788:	460b      	mov	r3, r1
 800f78a:	71bb      	strb	r3, [r7, #6]
 800f78c:	4613      	mov	r3, r2
 800f78e:	717b      	strb	r3, [r7, #5]
  bool ret = false;
 800f790:	2300      	movs	r3, #0
 800f792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  FDCAN_FilterTypeDef sFilterConfig;


  if (ch >= CAN_MAX_CH) return false;
 800f796:	79fb      	ldrb	r3, [r7, #7]
 800f798:	2b01      	cmp	r3, #1
 800f79a:	d901      	bls.n	800f7a0 <canConfigFilter+0x24>
 800f79c:	2300      	movs	r3, #0
 800f79e:	e037      	b.n	800f810 <canConfigFilter+0x94>


  if (id_type == CAN_STD)
 800f7a0:	797b      	ldrb	r3, [r7, #5]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d102      	bne.n	800f7ac <canConfigFilter+0x30>
  {
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	60fb      	str	r3, [r7, #12]
 800f7aa:	e002      	b.n	800f7b2 <canConfigFilter+0x36>
  }
  else
  {
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800f7ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f7b0:	60fb      	str	r3, [r7, #12]
  }

  if (can_tbl[ch].fifo_idx == FDCAN_RX_FIFO0)
 800f7b2:	79fb      	ldrb	r3, [r7, #7]
 800f7b4:	4a18      	ldr	r2, [pc, #96]	; (800f818 <canConfigFilter+0x9c>)
 800f7b6:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f7ba:	fb01 f303 	mul.w	r3, r1, r3
 800f7be:	4413      	add	r3, r2
 800f7c0:	3320      	adds	r3, #32
 800f7c2:	681b      	ldr	r3, [r3, #0]
 800f7c4:	2b40      	cmp	r3, #64	; 0x40
 800f7c6:	d102      	bne.n	800f7ce <canConfigFilter+0x52>
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO0;
 800f7c8:	2301      	movs	r3, #1
 800f7ca:	61bb      	str	r3, [r7, #24]
 800f7cc:	e001      	b.n	800f7d2 <canConfigFilter+0x56>
  }
  else
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO1;
 800f7ce:	2302      	movs	r3, #2
 800f7d0:	61bb      	str	r3, [r7, #24]
  }

  sFilterConfig.FilterIndex   = index;
 800f7d2:	79bb      	ldrb	r3, [r7, #6]
 800f7d4:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterType    = FDCAN_FILTER_MASK;
 800f7d6:	2302      	movs	r3, #2
 800f7d8:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterID1     = id;
 800f7da:	683b      	ldr	r3, [r7, #0]
 800f7dc:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterID2     = id_mask;
 800f7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e0:	623b      	str	r3, [r7, #32]

  if (HAL_FDCAN_ConfigFilter(&can_tbl[ch].hfdcan, &sFilterConfig) == HAL_OK)
 800f7e2:	79fb      	ldrb	r3, [r7, #7]
 800f7e4:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800f7e8:	fb02 f303 	mul.w	r3, r2, r3
 800f7ec:	3328      	adds	r3, #40	; 0x28
 800f7ee:	4a0a      	ldr	r2, [pc, #40]	; (800f818 <canConfigFilter+0x9c>)
 800f7f0:	4413      	add	r3, r2
 800f7f2:	3304      	adds	r3, #4
 800f7f4:	f107 020c 	add.w	r2, r7, #12
 800f7f8:	4611      	mov	r1, r2
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	f7f2 fa7c 	bl	8001cf8 <HAL_FDCAN_ConfigFilter>
 800f800:	4603      	mov	r3, r0
 800f802:	2b00      	cmp	r3, #0
 800f804:	d102      	bne.n	800f80c <canConfigFilter+0x90>
  {
    ret = true;
 800f806:	2301      	movs	r3, #1
 800f808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 800f80c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f810:	4618      	mov	r0, r3
 800f812:	3728      	adds	r7, #40	; 0x28
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}
 800f818:	20002b60 	.word	0x20002b60

0800f81c <canMsgAvailable>:

uint32_t canMsgAvailable(uint8_t ch)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
 800f822:	4603      	mov	r3, r0
 800f824:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return 0;
 800f826:	79fb      	ldrb	r3, [r7, #7]
 800f828:	2b02      	cmp	r3, #2
 800f82a:	d901      	bls.n	800f830 <canMsgAvailable+0x14>
 800f82c:	2300      	movs	r3, #0
 800f82e:	e00c      	b.n	800f84a <canMsgAvailable+0x2e>

  return qbufferAvailable(&can_tbl[ch].q_msg);
 800f830:	79fb      	ldrb	r3, [r7, #7]
 800f832:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800f836:	fb02 f303 	mul.w	r3, r2, r3
 800f83a:	3390      	adds	r3, #144	; 0x90
 800f83c:	4a05      	ldr	r2, [pc, #20]	; (800f854 <canMsgAvailable+0x38>)
 800f83e:	4413      	add	r3, r2
 800f840:	3304      	adds	r3, #4
 800f842:	4618      	mov	r0, r3
 800f844:	f7fd fb60 	bl	800cf08 <qbufferAvailable>
 800f848:	4603      	mov	r3, r0
}
 800f84a:	4618      	mov	r0, r3
 800f84c:	3708      	adds	r7, #8
 800f84e:	46bd      	mov	sp, r7
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	20002b60 	.word	0x20002b60

0800f858 <canMsgWrite>:
  p_msg->length  = dlc_len_tbl[dlc];
  return true;
}

bool canMsgWrite(uint8_t ch, can_msg_t *p_msg, uint32_t timeout)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b090      	sub	sp, #64	; 0x40
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	4603      	mov	r3, r0
 800f860:	60b9      	str	r1, [r7, #8]
 800f862:	607a      	str	r2, [r7, #4]
 800f864:	73fb      	strb	r3, [r7, #15]
  FDCAN_HandleTypeDef  *p_can;
  FDCAN_TxHeaderTypeDef tx_header;
  uint32_t pre_time;
  bool ret = true;
 800f866:	2301      	movs	r3, #1
 800f868:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


  if(ch > CAN_MAX_CH) return false;
 800f86c:	7bfb      	ldrb	r3, [r7, #15]
 800f86e:	2b02      	cmp	r3, #2
 800f870:	d901      	bls.n	800f876 <canMsgWrite+0x1e>
 800f872:	2300      	movs	r3, #0
 800f874:	e087      	b.n	800f986 <canMsgWrite+0x12e>

  if (can_tbl[ch].err_code & CAN_ERR_BUS_OFF) return false;
 800f876:	7bfb      	ldrb	r3, [r7, #15]
 800f878:	4a45      	ldr	r2, [pc, #276]	; (800f990 <canMsgWrite+0x138>)
 800f87a:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800f87e:	fb01 f303 	mul.w	r3, r1, r3
 800f882:	4413      	add	r3, r2
 800f884:	3304      	adds	r3, #4
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f003 0304 	and.w	r3, r3, #4
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d001      	beq.n	800f894 <canMsgWrite+0x3c>
 800f890:	2300      	movs	r3, #0
 800f892:	e078      	b.n	800f986 <canMsgWrite+0x12e>


  p_can = &can_tbl[ch].hfdcan;
 800f894:	7bfb      	ldrb	r3, [r7, #15]
 800f896:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800f89a:	fb02 f303 	mul.w	r3, r2, r3
 800f89e:	3328      	adds	r3, #40	; 0x28
 800f8a0:	4a3b      	ldr	r2, [pc, #236]	; (800f990 <canMsgWrite+0x138>)
 800f8a2:	4413      	add	r3, r2
 800f8a4:	3304      	adds	r3, #4
 800f8a6:	63bb      	str	r3, [r7, #56]	; 0x38

  switch(p_msg->id_type)
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d002      	beq.n	800f8b8 <canMsgWrite+0x60>
 800f8b2:	2b01      	cmp	r3, #1
 800f8b4:	d003      	beq.n	800f8be <canMsgWrite+0x66>
 800f8b6:	e006      	b.n	800f8c6 <canMsgWrite+0x6e>
  {
    case CAN_STD :
      tx_header.IdType = FDCAN_STANDARD_ID;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	617b      	str	r3, [r7, #20]
      break;
 800f8bc:	e003      	b.n	800f8c6 <canMsgWrite+0x6e>

    case CAN_EXT :
      tx_header.IdType = FDCAN_EXTENDED_ID;
 800f8be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f8c2:	617b      	str	r3, [r7, #20]
      break;
 800f8c4:	bf00      	nop
  }

  switch(p_msg->frame)
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800f8cc:	2b02      	cmp	r3, #2
 800f8ce:	d011      	beq.n	800f8f4 <canMsgWrite+0x9c>
 800f8d0:	2b02      	cmp	r3, #2
 800f8d2:	dc16      	bgt.n	800f902 <canMsgWrite+0xaa>
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d002      	beq.n	800f8de <canMsgWrite+0x86>
 800f8d8:	2b01      	cmp	r3, #1
 800f8da:	d005      	beq.n	800f8e8 <canMsgWrite+0x90>
 800f8dc:	e011      	b.n	800f902 <canMsgWrite+0xaa>
  {
    case CAN_CLASSIC:
      tx_header.FDFormat      = FDCAN_CLASSIC_CAN;
 800f8de:	2300      	movs	r3, #0
 800f8e0:	62bb      	str	r3, [r7, #40]	; 0x28
      tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f8e6:	e00c      	b.n	800f902 <canMsgWrite+0xaa>

    case CAN_FD_NO_BRS:
      tx_header.FDFormat      = FDCAN_FD_CAN;
 800f8e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f8ec:	62bb      	str	r3, [r7, #40]	; 0x28
      tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f8f2:	e006      	b.n	800f902 <canMsgWrite+0xaa>

    case CAN_FD_BRS:
      tx_header.FDFormat      = FDCAN_FD_CAN;
 800f8f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f8f8:	62bb      	str	r3, [r7, #40]	; 0x28
      tx_header.BitRateSwitch = FDCAN_BRS_ON;
 800f8fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f8fe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800f900:	bf00      	nop
  }

  tx_header.Identifier          = p_msg->id;
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	681b      	ldr	r3, [r3, #0]
 800f906:	613b      	str	r3, [r7, #16]
  tx_header.MessageMarker       = 0;
 800f908:	2300      	movs	r3, #0
 800f90a:	633b      	str	r3, [r7, #48]	; 0x30
  tx_header.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 800f90c:	2300      	movs	r3, #0
 800f90e:	62fb      	str	r3, [r7, #44]	; 0x2c
  tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800f910:	2300      	movs	r3, #0
 800f912:	623b      	str	r3, [r7, #32]
  tx_header.TxFrameType         = FDCAN_DATA_FRAME;
 800f914:	2300      	movs	r3, #0
 800f916:	61bb      	str	r3, [r7, #24]
  tx_header.DataLength          = dlc_tbl[p_msg->dlc];
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f91e:	461a      	mov	r2, r3
 800f920:	4b1c      	ldr	r3, [pc, #112]	; (800f994 <canMsgWrite+0x13c>)
 800f922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f926:	61fb      	str	r3, [r7, #28]


  if (HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 800f928:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f92a:	f7f2 fd0c 	bl	8002346 <HAL_FDCAN_GetTxFifoFreeLevel>
 800f92e:	4603      	mov	r3, r0
 800f930:	2b00      	cmp	r3, #0
 800f932:	d101      	bne.n	800f938 <canMsgWrite+0xe0>
  {
    return false;
 800f934:	2300      	movs	r3, #0
 800f936:	e026      	b.n	800f986 <canMsgWrite+0x12e>
  }


  pre_time = millis();
 800f938:	f7fb ff11 	bl	800b75e <millis>
 800f93c:	6378      	str	r0, [r7, #52]	; 0x34
  if(HAL_FDCAN_AddMessageToTxFifoQ(p_can, &tx_header, p_msg->data) == HAL_OK)
 800f93e:	68bb      	ldr	r3, [r7, #8]
 800f940:	1d9a      	adds	r2, r3, #6
 800f942:	f107 0310 	add.w	r3, r7, #16
 800f946:	4619      	mov	r1, r3
 800f948:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f94a:	f7f2 fb3b 	bl	8001fc4 <HAL_FDCAN_AddMessageToTxFifoQ>
 800f94e:	4603      	mov	r3, r0
 800f950:	2b00      	cmp	r3, #0
 800f952:	d113      	bne.n	800f97c <canMsgWrite+0x124>
  {
    /* Wait transmission complete */
    while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 800f954:	e00b      	b.n	800f96e <canMsgWrite+0x116>
    {
      if (millis()-pre_time >= timeout)
 800f956:	f7fb ff02 	bl	800b75e <millis>
 800f95a:	4602      	mov	r2, r0
 800f95c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f95e:	1ad3      	subs	r3, r2, r3
 800f960:	687a      	ldr	r2, [r7, #4]
 800f962:	429a      	cmp	r2, r3
 800f964:	d803      	bhi.n	800f96e <canMsgWrite+0x116>
      {
        ret = false;
 800f966:	2300      	movs	r3, #0
 800f968:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 800f96c:	e009      	b.n	800f982 <canMsgWrite+0x12a>
    while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 800f96e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f970:	f7f2 fce9 	bl	8002346 <HAL_FDCAN_GetTxFifoFreeLevel>
 800f974:	4603      	mov	r3, r0
 800f976:	2b00      	cmp	r3, #0
 800f978:	d0ed      	beq.n	800f956 <canMsgWrite+0xfe>
 800f97a:	e002      	b.n	800f982 <canMsgWrite+0x12a>
      }
    }
  }
  else
  {
    ret = false;
 800f97c:	2300      	movs	r3, #0
 800f97e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return ret;
 800f982:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800f986:	4618      	mov	r0, r3
 800f988:	3740      	adds	r7, #64	; 0x40
 800f98a:	46bd      	mov	sp, r7
 800f98c:	bd80      	pop	{r7, pc}
 800f98e:	bf00      	nop
 800f990:	20002b60 	.word	0x20002b60
 800f994:	08015b34 	.word	0x08015b34

0800f998 <canMsgRead>:

bool canMsgRead(uint8_t ch, can_msg_t *p_msg)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	4603      	mov	r3, r0
 800f9a0:	6039      	str	r1, [r7, #0]
 800f9a2:	71fb      	strb	r3, [r7, #7]
  bool ret = true;
 800f9a4:	2301      	movs	r3, #1
 800f9a6:	73fb      	strb	r3, [r7, #15]


  if(ch > CAN_MAX_CH) return 0;
 800f9a8:	79fb      	ldrb	r3, [r7, #7]
 800f9aa:	2b02      	cmp	r3, #2
 800f9ac:	d901      	bls.n	800f9b2 <canMsgRead+0x1a>
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	e010      	b.n	800f9d4 <canMsgRead+0x3c>

  ret = qbufferRead(&can_tbl[ch].q_msg, (uint8_t *)p_msg, 1);
 800f9b2:	79fb      	ldrb	r3, [r7, #7]
 800f9b4:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800f9b8:	fb02 f303 	mul.w	r3, r2, r3
 800f9bc:	3390      	adds	r3, #144	; 0x90
 800f9be:	4a07      	ldr	r2, [pc, #28]	; (800f9dc <canMsgRead+0x44>)
 800f9c0:	4413      	add	r3, r2
 800f9c2:	3304      	adds	r3, #4
 800f9c4:	2201      	movs	r2, #1
 800f9c6:	6839      	ldr	r1, [r7, #0]
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7fd fa32 	bl	800ce32 <qbufferRead>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	73fb      	strb	r3, [r7, #15]

  return ret;
 800f9d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	3710      	adds	r7, #16
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	bd80      	pop	{r7, pc}
 800f9dc:	20002b60 	.word	0x20002b60

0800f9e0 <canGetRxErrCount>:

uint16_t canGetRxErrCount(uint8_t ch)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b088      	sub	sp, #32
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	4603      	mov	r3, r0
 800f9e8:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 800f9ee:	79fb      	ldrb	r3, [r7, #7]
 800f9f0:	2b02      	cmp	r3, #2
 800f9f2:	d901      	bls.n	800f9f8 <canGetRxErrCount+0x18>
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	e016      	b.n	800fa26 <canGetRxErrCount+0x46>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 800f9f8:	79fb      	ldrb	r3, [r7, #7]
 800f9fa:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800f9fe:	fb02 f303 	mul.w	r3, r2, r3
 800fa02:	3328      	adds	r3, #40	; 0x28
 800fa04:	4a0a      	ldr	r2, [pc, #40]	; (800fa30 <canGetRxErrCount+0x50>)
 800fa06:	4413      	add	r3, r2
 800fa08:	3304      	adds	r3, #4
 800fa0a:	f107 020c 	add.w	r2, r7, #12
 800fa0e:	4611      	mov	r1, r2
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7f2 fc73 	bl	80022fc <HAL_FDCAN_GetErrorCounters>
 800fa16:	4603      	mov	r3, r0
 800fa18:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 800fa1a:	7f7b      	ldrb	r3, [r7, #29]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d101      	bne.n	800fa24 <canGetRxErrCount+0x44>
  {
    ret = error_counters.RxErrorCnt;
 800fa20:	693b      	ldr	r3, [r7, #16]
 800fa22:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 800fa24:	8bfb      	ldrh	r3, [r7, #30]
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3720      	adds	r7, #32
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
 800fa2e:	bf00      	nop
 800fa30:	20002b60 	.word	0x20002b60

0800fa34 <canGetTxErrCount>:

uint16_t canGetTxErrCount(uint8_t ch)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b088      	sub	sp, #32
 800fa38:	af00      	add	r7, sp, #0
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 800fa42:	79fb      	ldrb	r3, [r7, #7]
 800fa44:	2b02      	cmp	r3, #2
 800fa46:	d901      	bls.n	800fa4c <canGetTxErrCount+0x18>
 800fa48:	2300      	movs	r3, #0
 800fa4a:	e016      	b.n	800fa7a <canGetTxErrCount+0x46>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 800fa4c:	79fb      	ldrb	r3, [r7, #7]
 800fa4e:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800fa52:	fb02 f303 	mul.w	r3, r2, r3
 800fa56:	3328      	adds	r3, #40	; 0x28
 800fa58:	4a0a      	ldr	r2, [pc, #40]	; (800fa84 <canGetTxErrCount+0x50>)
 800fa5a:	4413      	add	r3, r2
 800fa5c:	3304      	adds	r3, #4
 800fa5e:	f107 020c 	add.w	r2, r7, #12
 800fa62:	4611      	mov	r1, r2
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7f2 fc49 	bl	80022fc <HAL_FDCAN_GetErrorCounters>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 800fa6e:	7f7b      	ldrb	r3, [r7, #29]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d101      	bne.n	800fa78 <canGetTxErrCount+0x44>
  {
    ret = error_counters.TxErrorCnt;
 800fa74:	68fb      	ldr	r3, [r7, #12]
 800fa76:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 800fa78:	8bfb      	ldrh	r3, [r7, #30]
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3720      	adds	r7, #32
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
 800fa82:	bf00      	nop
 800fa84:	20002b60 	.word	0x20002b60

0800fa88 <canRecovery>:

  can_tbl[ch].handler = NULL;
}

void canRecovery(uint8_t ch)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	4603      	mov	r3, r0
 800fa90:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return;
 800fa92:	79fb      	ldrb	r3, [r7, #7]
 800fa94:	2b02      	cmp	r3, #2
 800fa96:	d82a      	bhi.n	800faee <canRecovery+0x66>

  HAL_FDCAN_Stop(&can_tbl[ch].hfdcan);
 800fa98:	79fb      	ldrb	r3, [r7, #7]
 800fa9a:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800fa9e:	fb02 f303 	mul.w	r3, r2, r3
 800faa2:	3328      	adds	r3, #40	; 0x28
 800faa4:	4a14      	ldr	r2, [pc, #80]	; (800faf8 <canRecovery+0x70>)
 800faa6:	4413      	add	r3, r2
 800faa8:	3304      	adds	r3, #4
 800faaa:	4618      	mov	r0, r3
 800faac:	f7f2 fa1a 	bl	8001ee4 <HAL_FDCAN_Stop>
  HAL_FDCAN_Start(&can_tbl[ch].hfdcan);
 800fab0:	79fb      	ldrb	r3, [r7, #7]
 800fab2:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800fab6:	fb02 f303 	mul.w	r3, r2, r3
 800faba:	3328      	adds	r3, #40	; 0x28
 800fabc:	4a0e      	ldr	r2, [pc, #56]	; (800faf8 <canRecovery+0x70>)
 800fabe:	4413      	add	r3, r2
 800fac0:	3304      	adds	r3, #4
 800fac2:	4618      	mov	r0, r3
 800fac4:	f7f2 f9e6 	bl	8001e94 <HAL_FDCAN_Start>

  can_tbl[ch].recovery_cnt++;
 800fac8:	79fb      	ldrb	r3, [r7, #7]
 800faca:	490b      	ldr	r1, [pc, #44]	; (800faf8 <canRecovery+0x70>)
 800facc:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800fad0:	fb03 f202 	mul.w	r2, r3, r2
 800fad4:	440a      	add	r2, r1
 800fad6:	320c      	adds	r2, #12
 800fad8:	6812      	ldr	r2, [r2, #0]
 800fada:	3201      	adds	r2, #1
 800fadc:	4906      	ldr	r1, [pc, #24]	; (800faf8 <canRecovery+0x70>)
 800fade:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 800fae2:	fb00 f303 	mul.w	r3, r0, r3
 800fae6:	440b      	add	r3, r1
 800fae8:	330c      	adds	r3, #12
 800faea:	601a      	str	r2, [r3, #0]
 800faec:	e000      	b.n	800faf0 <canRecovery+0x68>
  if(ch > CAN_MAX_CH) return;
 800faee:	bf00      	nop
}
 800faf0:	3708      	adds	r7, #8
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	20002b60 	.word	0x20002b60

0800fafc <canUpdate>:

bool canUpdate(void)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
  bool ret = false;
 800fb02:	2300      	movs	r3, #0
 800fb04:	73fb      	strb	r3, [r7, #15]
  can_tbl_t *p_can;


  for (int i=0; i<CAN_MAX_CH; i++)
 800fb06:	2300      	movs	r3, #0
 800fb08:	60bb      	str	r3, [r7, #8]
 800fb0a:	e02f      	b.n	800fb6c <canUpdate+0x70>
  {
    p_can = &can_tbl[i];
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800fb12:	fb02 f303 	mul.w	r3, r2, r3
 800fb16:	4a19      	ldr	r2, [pc, #100]	; (800fb7c <canUpdate+0x80>)
 800fb18:	4413      	add	r3, r2
 800fb1a:	607b      	str	r3, [r7, #4]


    switch(p_can->state)
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	7a1b      	ldrb	r3, [r3, #8]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d002      	beq.n	800fb2a <canUpdate+0x2e>
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d011      	beq.n	800fb4c <canUpdate+0x50>
 800fb28:	e01d      	b.n	800fb66 <canUpdate+0x6a>
    {
      case 0:
        if (p_can->err_code & CAN_ERR_BUS_OFF)
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	f003 0304 	and.w	r3, r3, #4
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d014      	beq.n	800fb60 <canUpdate+0x64>
        {
          canRecovery(i);
 800fb36:	68bb      	ldr	r3, [r7, #8]
 800fb38:	b2db      	uxtb	r3, r3
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7ff ffa4 	bl	800fa88 <canRecovery>
          p_can->state = 1;
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	2201      	movs	r2, #1
 800fb44:	721a      	strb	r2, [r3, #8]
          ret = true;
 800fb46:	2301      	movs	r3, #1
 800fb48:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800fb4a:	e009      	b.n	800fb60 <canUpdate+0x64>

      case 1:
        if ((p_can->err_code & CAN_ERR_BUS_OFF) == 0)
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	685b      	ldr	r3, [r3, #4]
 800fb50:	f003 0304 	and.w	r3, r3, #4
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d105      	bne.n	800fb64 <canUpdate+0x68>
        {
          p_can->state = 0;
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	721a      	strb	r2, [r3, #8]
        }
        break;
 800fb5e:	e001      	b.n	800fb64 <canUpdate+0x68>
        break;
 800fb60:	bf00      	nop
 800fb62:	e000      	b.n	800fb66 <canUpdate+0x6a>
        break;
 800fb64:	bf00      	nop
  for (int i=0; i<CAN_MAX_CH; i++)
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	3301      	adds	r3, #1
 800fb6a:	60bb      	str	r3, [r7, #8]
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	2b01      	cmp	r3, #1
 800fb70:	ddcc      	ble.n	800fb0c <canUpdate+0x10>
    }
  }

  return ret;
 800fb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3710      	adds	r7, #16
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}
 800fb7c:	20002b60 	.word	0x20002b60

0800fb80 <canRxFifoCallback>:

void canRxFifoCallback(uint8_t ch, FDCAN_HandleTypeDef *hfdcan)
{
 800fb80:	b580      	push	{r7, lr}
 800fb82:	b08e      	sub	sp, #56	; 0x38
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	4603      	mov	r3, r0
 800fb88:	6039      	str	r1, [r7, #0]
 800fb8a:	71fb      	strb	r3, [r7, #7]
  can_msg_t *rx_buf;
  FDCAN_RxHeaderTypeDef rx_header;


  rx_buf  = (can_msg_t *)qbufferPeekWrite(&can_tbl[ch].q_msg);
 800fb8c:	79fb      	ldrb	r3, [r7, #7]
 800fb8e:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800fb92:	fb02 f303 	mul.w	r3, r2, r3
 800fb96:	3390      	adds	r3, #144	; 0x90
 800fb98:	4a4b      	ldr	r2, [pc, #300]	; (800fcc8 <canRxFifoCallback+0x148>)
 800fb9a:	4413      	add	r3, r2
 800fb9c:	3304      	adds	r3, #4
 800fb9e:	4618      	mov	r0, r3
 800fba0:	f7fd f99f 	bl	800cee2 <qbufferPeekWrite>
 800fba4:	6378      	str	r0, [r7, #52]	; 0x34

  if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header, rx_buf->data) == HAL_OK)
 800fba6:	79fb      	ldrb	r3, [r7, #7]
 800fba8:	4a47      	ldr	r2, [pc, #284]	; (800fcc8 <canRxFifoCallback+0x148>)
 800fbaa:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fbae:	fb01 f303 	mul.w	r3, r1, r3
 800fbb2:	4413      	add	r3, r2
 800fbb4:	3320      	adds	r3, #32
 800fbb6:	6819      	ldr	r1, [r3, #0]
 800fbb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbba:	3306      	adds	r3, #6
 800fbbc:	f107 020c 	add.w	r2, r7, #12
 800fbc0:	6838      	ldr	r0, [r7, #0]
 800fbc2:	f7f2 fa43 	bl	800204c <HAL_FDCAN_GetRxMessage>
 800fbc6:	4603      	mov	r3, r0
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d178      	bne.n	800fcbe <canRxFifoCallback+0x13e>
  {
    if(rx_header.IdType == FDCAN_STANDARD_ID)
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d107      	bne.n	800fbe2 <canRxFifoCallback+0x62>
    {
      rx_buf->id      = rx_header.Identifier;
 800fbd2:	68fa      	ldr	r2, [r7, #12]
 800fbd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbd6:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_STD;
 800fbd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbda:	2200      	movs	r2, #0
 800fbdc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 800fbe0:	e006      	b.n	800fbf0 <canRxFifoCallback+0x70>
    }
    else
    {
      rx_buf->id      = rx_header.Identifier;
 800fbe2:	68fa      	ldr	r2, [r7, #12]
 800fbe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbe6:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_EXT;
 800fbe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbea:	2201      	movs	r2, #1
 800fbec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    }
    rx_buf->length = rx_header.DataLength;//dlc_len_tbl[(rx_header.DataLength >> 16) & 0x0F];
 800fbf0:	69bb      	ldr	r3, [r7, #24]
 800fbf2:	b29a      	uxth	r2, r3
 800fbf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbf6:	809a      	strh	r2, [r3, #4]


    if (rx_header.FDFormat == FDCAN_FD_CAN)
 800fbf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fbfe:	d10d      	bne.n	800fc1c <canRxFifoCallback+0x9c>
    {
      if (rx_header.BitRateSwitch == FDCAN_BRS_ON)
 800fc00:	6a3b      	ldr	r3, [r7, #32]
 800fc02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc06:	d104      	bne.n	800fc12 <canRxFifoCallback+0x92>
      {
        rx_buf->frame = CAN_FD_BRS;
 800fc08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc0a:	2202      	movs	r2, #2
 800fc0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800fc10:	e008      	b.n	800fc24 <canRxFifoCallback+0xa4>
      }
      else
      {
        rx_buf->frame = CAN_FD_NO_BRS;
 800fc12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc14:	2201      	movs	r2, #1
 800fc16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 800fc1a:	e003      	b.n	800fc24 <canRxFifoCallback+0xa4>
      }
    }
    else
    {
      rx_buf->frame = CAN_CLASSIC;
 800fc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc1e:	2200      	movs	r2, #0
 800fc20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    }

    if (qbufferWrite(&can_tbl[ch].q_msg, NULL, 1) != true)
 800fc24:	79fb      	ldrb	r3, [r7, #7]
 800fc26:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800fc2a:	fb02 f303 	mul.w	r3, r2, r3
 800fc2e:	3390      	adds	r3, #144	; 0x90
 800fc30:	4a25      	ldr	r2, [pc, #148]	; (800fcc8 <canRxFifoCallback+0x148>)
 800fc32:	4413      	add	r3, r2
 800fc34:	3304      	adds	r3, #4
 800fc36:	2201      	movs	r2, #1
 800fc38:	2100      	movs	r1, #0
 800fc3a:	4618      	mov	r0, r3
 800fc3c:	f7fd f89d 	bl	800cd7a <qbufferWrite>
 800fc40:	4603      	mov	r3, r0
 800fc42:	f083 0301 	eor.w	r3, r3, #1
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d011      	beq.n	800fc70 <canRxFifoCallback+0xf0>
    {
      can_tbl[ch].q_rx_full_cnt++;
 800fc4c:	79fb      	ldrb	r3, [r7, #7]
 800fc4e:	491e      	ldr	r1, [pc, #120]	; (800fcc8 <canRxFifoCallback+0x148>)
 800fc50:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800fc54:	fb03 f202 	mul.w	r2, r3, r2
 800fc58:	440a      	add	r2, r1
 800fc5a:	3210      	adds	r2, #16
 800fc5c:	6812      	ldr	r2, [r2, #0]
 800fc5e:	3201      	adds	r2, #1
 800fc60:	4919      	ldr	r1, [pc, #100]	; (800fcc8 <canRxFifoCallback+0x148>)
 800fc62:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 800fc66:	fb00 f303 	mul.w	r3, r0, r3
 800fc6a:	440b      	add	r3, r1
 800fc6c:	3310      	adds	r3, #16
 800fc6e:	601a      	str	r2, [r3, #0]
    }

    if( can_tbl[ch].handler != NULL )
 800fc70:	79fb      	ldrb	r3, [r7, #7]
 800fc72:	4a15      	ldr	r2, [pc, #84]	; (800fcc8 <canRxFifoCallback+0x148>)
 800fc74:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fc78:	fb01 f303 	mul.w	r3, r1, r3
 800fc7c:	4413      	add	r3, r2
 800fc7e:	3390      	adds	r3, #144	; 0x90
 800fc80:	681b      	ldr	r3, [r3, #0]
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d01b      	beq.n	800fcbe <canRxFifoCallback+0x13e>
    {
      if ((*can_tbl[ch].handler)((void *)rx_buf) == true)
 800fc86:	79fb      	ldrb	r3, [r7, #7]
 800fc88:	4a0f      	ldr	r2, [pc, #60]	; (800fcc8 <canRxFifoCallback+0x148>)
 800fc8a:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fc8e:	fb01 f303 	mul.w	r3, r1, r3
 800fc92:	4413      	add	r3, r2
 800fc94:	3390      	adds	r3, #144	; 0x90
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800fc9a:	4798      	blx	r3
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d00d      	beq.n	800fcbe <canRxFifoCallback+0x13e>
      {
        qbufferRead(&can_tbl[ch].q_msg, NULL, 1);
 800fca2:	79fb      	ldrb	r3, [r7, #7]
 800fca4:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800fca8:	fb02 f303 	mul.w	r3, r2, r3
 800fcac:	3390      	adds	r3, #144	; 0x90
 800fcae:	4a06      	ldr	r2, [pc, #24]	; (800fcc8 <canRxFifoCallback+0x148>)
 800fcb0:	4413      	add	r3, r2
 800fcb2:	3304      	adds	r3, #4
 800fcb4:	2201      	movs	r2, #1
 800fcb6:	2100      	movs	r1, #0
 800fcb8:	4618      	mov	r0, r3
 800fcba:	f7fd f8ba 	bl	800ce32 <qbufferRead>
      }
    }
  }
}
 800fcbe:	bf00      	nop
 800fcc0:	3738      	adds	r7, #56	; 0x38
 800fcc2:	46bd      	mov	sp, r7
 800fcc4:	bd80      	pop	{r7, pc}
 800fcc6:	bf00      	nop
 800fcc8:	20002b60 	.word	0x20002b60

0800fccc <canErrPrint>:

  can_tbl[ch].err_code = CAN_ERR_NONE;
}

void canErrPrint(uint8_t ch)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b084      	sub	sp, #16
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	4603      	mov	r3, r0
 800fcd4:	71fb      	strb	r3, [r7, #7]
  uint32_t err_code;


  if(ch > CAN_MAX_CH) return;
 800fcd6:	79fb      	ldrb	r3, [r7, #7]
 800fcd8:	2b02      	cmp	r3, #2
 800fcda:	d822      	bhi.n	800fd22 <canErrPrint+0x56>

  err_code = can_tbl[ch].err_code;
 800fcdc:	79fb      	ldrb	r3, [r7, #7]
 800fcde:	4a13      	ldr	r2, [pc, #76]	; (800fd2c <canErrPrint+0x60>)
 800fce0:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fce4:	fb01 f303 	mul.w	r3, r1, r3
 800fce8:	4413      	add	r3, r2
 800fcea:	3304      	adds	r3, #4
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	60fb      	str	r3, [r7, #12]

  if (err_code & CAN_ERR_PASSIVE) logPrintf("  ERR : CAN_ERR_PASSIVE\n");
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	f003 0301 	and.w	r3, r3, #1
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d002      	beq.n	800fd00 <canErrPrint+0x34>
 800fcfa:	480d      	ldr	r0, [pc, #52]	; (800fd30 <canErrPrint+0x64>)
 800fcfc:	f7fc fef2 	bl	800cae4 <logPrintf>
  if (err_code & CAN_ERR_WARNING) logPrintf("  ERR : CAN_ERR_WARNING\n");
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f003 0302 	and.w	r3, r3, #2
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d002      	beq.n	800fd10 <canErrPrint+0x44>
 800fd0a:	480a      	ldr	r0, [pc, #40]	; (800fd34 <canErrPrint+0x68>)
 800fd0c:	f7fc feea 	bl	800cae4 <logPrintf>
  if (err_code & CAN_ERR_BUS_OFF) logPrintf("  ERR : CAN_ERR_BUS_OFF\n");
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f003 0304 	and.w	r3, r3, #4
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d004      	beq.n	800fd24 <canErrPrint+0x58>
 800fd1a:	4807      	ldr	r0, [pc, #28]	; (800fd38 <canErrPrint+0x6c>)
 800fd1c:	f7fc fee2 	bl	800cae4 <logPrintf>
 800fd20:	e000      	b.n	800fd24 <canErrPrint+0x58>
  if(ch > CAN_MAX_CH) return;
 800fd22:	bf00      	nop
}
 800fd24:	3710      	adds	r7, #16
 800fd26:	46bd      	mov	sp, r7
 800fd28:	bd80      	pop	{r7, pc}
 800fd2a:	bf00      	nop
 800fd2c:	20002b60 	.word	0x20002b60
 800fd30:	080154a8 	.word	0x080154a8
 800fd34:	080154c4 	.word	0x080154c4
 800fd38:	080154e0 	.word	0x080154e0

0800fd3c <canErrUpdate>:

void canErrUpdate(uint8_t ch)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b08e      	sub	sp, #56	; 0x38
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	4603      	mov	r3, r0
 800fd44:	71fb      	strb	r3, [r7, #7]
  FDCAN_ProtocolStatusTypeDef protocol_status;

  HAL_FDCAN_GetProtocolStatus(&can_tbl[ch].hfdcan, &protocol_status);
 800fd46:	79fb      	ldrb	r3, [r7, #7]
 800fd48:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800fd4c:	fb02 f303 	mul.w	r3, r2, r3
 800fd50:	3328      	adds	r3, #40	; 0x28
 800fd52:	4a48      	ldr	r2, [pc, #288]	; (800fe74 <canErrUpdate+0x138>)
 800fd54:	4413      	add	r3, r2
 800fd56:	3304      	adds	r3, #4
 800fd58:	f107 020c 	add.w	r2, r7, #12
 800fd5c:	4611      	mov	r1, r2
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7f2 fa7c 	bl	800225c <HAL_FDCAN_GetProtocolStatus>

  if (protocol_status.ErrorPassive)
 800fd64:	69bb      	ldr	r3, [r7, #24]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d014      	beq.n	800fd94 <canErrUpdate+0x58>
  {
    can_tbl[ch].err_code |= CAN_ERR_PASSIVE;
 800fd6a:	79fb      	ldrb	r3, [r7, #7]
 800fd6c:	4a41      	ldr	r2, [pc, #260]	; (800fe74 <canErrUpdate+0x138>)
 800fd6e:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fd72:	fb01 f303 	mul.w	r3, r1, r3
 800fd76:	4413      	add	r3, r2
 800fd78:	3304      	adds	r3, #4
 800fd7a:	681a      	ldr	r2, [r3, #0]
 800fd7c:	79fb      	ldrb	r3, [r7, #7]
 800fd7e:	f042 0201 	orr.w	r2, r2, #1
 800fd82:	493c      	ldr	r1, [pc, #240]	; (800fe74 <canErrUpdate+0x138>)
 800fd84:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 800fd88:	fb00 f303 	mul.w	r3, r0, r3
 800fd8c:	440b      	add	r3, r1
 800fd8e:	3304      	adds	r3, #4
 800fd90:	601a      	str	r2, [r3, #0]
 800fd92:	e013      	b.n	800fdbc <canErrUpdate+0x80>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_PASSIVE;
 800fd94:	79fb      	ldrb	r3, [r7, #7]
 800fd96:	4a37      	ldr	r2, [pc, #220]	; (800fe74 <canErrUpdate+0x138>)
 800fd98:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fd9c:	fb01 f303 	mul.w	r3, r1, r3
 800fda0:	4413      	add	r3, r2
 800fda2:	3304      	adds	r3, #4
 800fda4:	681a      	ldr	r2, [r3, #0]
 800fda6:	79fb      	ldrb	r3, [r7, #7]
 800fda8:	f022 0201 	bic.w	r2, r2, #1
 800fdac:	4931      	ldr	r1, [pc, #196]	; (800fe74 <canErrUpdate+0x138>)
 800fdae:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 800fdb2:	fb00 f303 	mul.w	r3, r0, r3
 800fdb6:	440b      	add	r3, r1
 800fdb8:	3304      	adds	r3, #4
 800fdba:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.Warning)
 800fdbc:	69fb      	ldr	r3, [r7, #28]
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d014      	beq.n	800fdec <canErrUpdate+0xb0>
  {
    can_tbl[ch].err_code |= CAN_ERR_WARNING;
 800fdc2:	79fb      	ldrb	r3, [r7, #7]
 800fdc4:	4a2b      	ldr	r2, [pc, #172]	; (800fe74 <canErrUpdate+0x138>)
 800fdc6:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fdca:	fb01 f303 	mul.w	r3, r1, r3
 800fdce:	4413      	add	r3, r2
 800fdd0:	3304      	adds	r3, #4
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	79fb      	ldrb	r3, [r7, #7]
 800fdd6:	f042 0202 	orr.w	r2, r2, #2
 800fdda:	4926      	ldr	r1, [pc, #152]	; (800fe74 <canErrUpdate+0x138>)
 800fddc:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 800fde0:	fb00 f303 	mul.w	r3, r0, r3
 800fde4:	440b      	add	r3, r1
 800fde6:	3304      	adds	r3, #4
 800fde8:	601a      	str	r2, [r3, #0]
 800fdea:	e013      	b.n	800fe14 <canErrUpdate+0xd8>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_WARNING;
 800fdec:	79fb      	ldrb	r3, [r7, #7]
 800fdee:	4a21      	ldr	r2, [pc, #132]	; (800fe74 <canErrUpdate+0x138>)
 800fdf0:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fdf4:	fb01 f303 	mul.w	r3, r1, r3
 800fdf8:	4413      	add	r3, r2
 800fdfa:	3304      	adds	r3, #4
 800fdfc:	681a      	ldr	r2, [r3, #0]
 800fdfe:	79fb      	ldrb	r3, [r7, #7]
 800fe00:	f022 0202 	bic.w	r2, r2, #2
 800fe04:	491b      	ldr	r1, [pc, #108]	; (800fe74 <canErrUpdate+0x138>)
 800fe06:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 800fe0a:	fb00 f303 	mul.w	r3, r0, r3
 800fe0e:	440b      	add	r3, r1
 800fe10:	3304      	adds	r3, #4
 800fe12:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.BusOff)
 800fe14:	6a3b      	ldr	r3, [r7, #32]
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d014      	beq.n	800fe44 <canErrUpdate+0x108>
  {
    can_tbl[ch].err_code |= CAN_ERR_BUS_OFF;
 800fe1a:	79fb      	ldrb	r3, [r7, #7]
 800fe1c:	4a15      	ldr	r2, [pc, #84]	; (800fe74 <canErrUpdate+0x138>)
 800fe1e:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fe22:	fb01 f303 	mul.w	r3, r1, r3
 800fe26:	4413      	add	r3, r2
 800fe28:	3304      	adds	r3, #4
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	79fb      	ldrb	r3, [r7, #7]
 800fe2e:	f042 0204 	orr.w	r2, r2, #4
 800fe32:	4910      	ldr	r1, [pc, #64]	; (800fe74 <canErrUpdate+0x138>)
 800fe34:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 800fe38:	fb00 f303 	mul.w	r3, r0, r3
 800fe3c:	440b      	add	r3, r1
 800fe3e:	3304      	adds	r3, #4
 800fe40:	601a      	str	r2, [r3, #0]
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
  }
}
 800fe42:	e013      	b.n	800fe6c <canErrUpdate+0x130>
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
 800fe44:	79fb      	ldrb	r3, [r7, #7]
 800fe46:	4a0b      	ldr	r2, [pc, #44]	; (800fe74 <canErrUpdate+0x138>)
 800fe48:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fe4c:	fb01 f303 	mul.w	r3, r1, r3
 800fe50:	4413      	add	r3, r2
 800fe52:	3304      	adds	r3, #4
 800fe54:	681a      	ldr	r2, [r3, #0]
 800fe56:	79fb      	ldrb	r3, [r7, #7]
 800fe58:	f022 0204 	bic.w	r2, r2, #4
 800fe5c:	4905      	ldr	r1, [pc, #20]	; (800fe74 <canErrUpdate+0x138>)
 800fe5e:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 800fe62:	fb00 f303 	mul.w	r3, r0, r3
 800fe66:	440b      	add	r3, r1
 800fe68:	3304      	adds	r3, #4
 800fe6a:	601a      	str	r2, [r3, #0]
}
 800fe6c:	bf00      	nop
 800fe6e:	3738      	adds	r7, #56	; 0x38
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}
 800fe74:	20002b60 	.word	0x20002b60

0800fe78 <HAL_FDCAN_ErrorStatusCallback>:




void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
 800fe80:	6039      	str	r1, [r7, #0]
  uint8_t ch = _DEF_CAN2;
 800fe82:	2301      	movs	r3, #1
 800fe84:	73fb      	strb	r3, [r7, #15]

  canErrUpdate(ch);
 800fe86:	7bfb      	ldrb	r3, [r7, #15]
 800fe88:	4618      	mov	r0, r3
 800fe8a:	f7ff ff57 	bl	800fd3c <canErrUpdate>
}
 800fe8e:	bf00      	nop
 800fe90:	3710      	adds	r7, #16
 800fe92:	46bd      	mov	sp, r7
 800fe94:	bd80      	pop	{r7, pc}
	...

0800fe98 <HAL_FDCAN_ErrorCallback>:

void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800fe98:	b480      	push	{r7}
 800fe9a:	b085      	sub	sp, #20
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  uint8_t ch = _DEF_CAN2;
 800fea0:	2301      	movs	r3, #1
 800fea2:	73fb      	strb	r3, [r7, #15]

  err_int_cnt++;
 800fea4:	4b11      	ldr	r3, [pc, #68]	; (800feec <HAL_FDCAN_ErrorCallback+0x54>)
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	3301      	adds	r3, #1
 800feaa:	4a10      	ldr	r2, [pc, #64]	; (800feec <HAL_FDCAN_ErrorCallback+0x54>)
 800feac:	6013      	str	r3, [r2, #0]

  if (hfdcan->ErrorCode > 0)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d013      	beq.n	800fede <HAL_FDCAN_ErrorCallback+0x46>
  {
    can_tbl[ch].err_code |= CAN_ERR_ETC;
 800feb6:	7bfb      	ldrb	r3, [r7, #15]
 800feb8:	4a0d      	ldr	r2, [pc, #52]	; (800fef0 <HAL_FDCAN_ErrorCallback+0x58>)
 800feba:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800febe:	fb01 f303 	mul.w	r3, r1, r3
 800fec2:	4413      	add	r3, r2
 800fec4:	3304      	adds	r3, #4
 800fec6:	681a      	ldr	r2, [r3, #0]
 800fec8:	7bfb      	ldrb	r3, [r7, #15]
 800feca:	f042 0210 	orr.w	r2, r2, #16
 800fece:	4908      	ldr	r1, [pc, #32]	; (800fef0 <HAL_FDCAN_ErrorCallback+0x58>)
 800fed0:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 800fed4:	fb00 f303 	mul.w	r3, r0, r3
 800fed8:	440b      	add	r3, r1
 800feda:	3304      	adds	r3, #4
 800fedc:	601a      	str	r2, [r3, #0]
  }
}
 800fede:	bf00      	nop
 800fee0:	3714      	adds	r7, #20
 800fee2:	46bd      	mov	sp, r7
 800fee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fee8:	4770      	bx	lr
 800feea:	bf00      	nop
 800feec:	20003630 	.word	0x20003630
 800fef0:	20002b60 	.word	0x20002b60

0800fef4 <FDCAN2_IT0_IRQHandler>:

void FDCAN2_IT0_IRQHandler(void)
{
 800fef4:	b580      	push	{r7, lr}
 800fef6:	af00      	add	r7, sp, #0
  HAL_FDCAN_IRQHandler(&can_tbl[_DEF_CAN2].hfdcan);
 800fef8:	4802      	ldr	r0, [pc, #8]	; (800ff04 <FDCAN2_IT0_IRQHandler+0x10>)
 800fefa:	f7f2 fb1c 	bl	8002536 <HAL_FDCAN_IRQHandler>
}
 800fefe:	bf00      	nop
 800ff00:	bd80      	pop	{r7, pc}
 800ff02:	bf00      	nop
 800ff04:	200030f4 	.word	0x200030f4

0800ff08 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b082      	sub	sp, #8
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	f003 0301 	and.w	r3, r3, #1
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d003      	beq.n	800ff24 <HAL_FDCAN_RxFifo0Callback+0x1c>
  {
    canRxFifoCallback(_DEF_CAN2, hfdcan);
 800ff1c:	6879      	ldr	r1, [r7, #4]
 800ff1e:	2001      	movs	r0, #1
 800ff20:	f7ff fe2e 	bl	800fb80 <canRxFifoCallback>
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_FULL) != RESET)
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	f003 0302 	and.w	r3, r3, #2
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d006      	beq.n	800ff3c <HAL_FDCAN_RxFifo0Callback+0x34>
  {
    can_tbl[_DEF_CAN2].fifo_full_cnt++;
 800ff2e:	4b0b      	ldr	r3, [pc, #44]	; (800ff5c <HAL_FDCAN_RxFifo0Callback+0x54>)
 800ff30:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 800ff34:	3301      	adds	r3, #1
 800ff36:	4a09      	ldr	r2, [pc, #36]	; (800ff5c <HAL_FDCAN_RxFifo0Callback+0x54>)
 800ff38:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_MESSAGE_LOST) != RESET)
 800ff3c:	683b      	ldr	r3, [r7, #0]
 800ff3e:	f003 0304 	and.w	r3, r3, #4
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d006      	beq.n	800ff54 <HAL_FDCAN_RxFifo0Callback+0x4c>
  {
    can_tbl[_DEF_CAN2].fifo_lost_cnt++;
 800ff46:	4b05      	ldr	r3, [pc, #20]	; (800ff5c <HAL_FDCAN_RxFifo0Callback+0x54>)
 800ff48:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 800ff4c:	3301      	adds	r3, #1
 800ff4e:	4a03      	ldr	r2, [pc, #12]	; (800ff5c <HAL_FDCAN_RxFifo0Callback+0x54>)
 800ff50:	f8c2 3584 	str.w	r3, [r2, #1412]	; 0x584
  }
}
 800ff54:	bf00      	nop
 800ff56:	3708      	adds	r7, #8
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	20002b60 	.word	0x20002b60

0800ff60 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b09e      	sub	sp, #120	; 0x78
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ff68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800ff6c:	2200      	movs	r2, #0
 800ff6e:	601a      	str	r2, [r3, #0]
 800ff70:	605a      	str	r2, [r3, #4]
 800ff72:	609a      	str	r2, [r3, #8]
 800ff74:	60da      	str	r2, [r3, #12]
 800ff76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ff78:	f107 0310 	add.w	r3, r7, #16
 800ff7c:	2254      	movs	r2, #84	; 0x54
 800ff7e:	2100      	movs	r1, #0
 800ff80:	4618      	mov	r0, r3
 800ff82:	f003 f869 	bl	8013058 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	4a21      	ldr	r2, [pc, #132]	; (8010010 <HAL_FDCAN_MspInit+0xb0>)
 800ff8c:	4293      	cmp	r3, r2
 800ff8e:	d13b      	bne.n	8010008 <HAL_FDCAN_MspInit+0xa8>
  {

    /** Initializes the peripherals clocks
    */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800ff90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ff94:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800ff96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ff9a:	64bb      	str	r3, [r7, #72]	; 0x48
  	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 800ff9c:	f107 0310 	add.w	r3, r7, #16
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	f7f7 f92b 	bl	80071fc <HAL_RCCEx_PeriphCLKConfig>
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800ffa6:	4b1b      	ldr	r3, [pc, #108]	; (8010014 <HAL_FDCAN_MspInit+0xb4>)
 800ffa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffaa:	4a1a      	ldr	r2, [pc, #104]	; (8010014 <HAL_FDCAN_MspInit+0xb4>)
 800ffac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ffb0:	6593      	str	r3, [r2, #88]	; 0x58
 800ffb2:	4b18      	ldr	r3, [pc, #96]	; (8010014 <HAL_FDCAN_MspInit+0xb4>)
 800ffb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ffb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ffba:	60fb      	str	r3, [r7, #12]
 800ffbc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ffbe:	4b15      	ldr	r3, [pc, #84]	; (8010014 <HAL_FDCAN_MspInit+0xb4>)
 800ffc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffc2:	4a14      	ldr	r2, [pc, #80]	; (8010014 <HAL_FDCAN_MspInit+0xb4>)
 800ffc4:	f043 0302 	orr.w	r3, r3, #2
 800ffc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ffca:	4b12      	ldr	r3, [pc, #72]	; (8010014 <HAL_FDCAN_MspInit+0xb4>)
 800ffcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffce:	f003 0302 	and.w	r3, r3, #2
 800ffd2:	60bb      	str	r3, [r7, #8]
 800ffd4:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 800ffd6:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 800ffda:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ffdc:	2302      	movs	r3, #2
 800ffde:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ffe0:	2300      	movs	r3, #0
 800ffe2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 800ffe8:	2309      	movs	r3, #9
 800ffea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ffec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800fff0:	4619      	mov	r1, r3
 800fff2:	4809      	ldr	r0, [pc, #36]	; (8010018 <HAL_FDCAN_MspInit+0xb8>)
 800fff4:	f7f2 fd00 	bl	80029f8 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 800fff8:	2200      	movs	r2, #0
 800fffa:	2100      	movs	r1, #0
 800fffc:	2056      	movs	r0, #86	; 0x56
 800fffe:	f7f1 f998 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8010002:	2056      	movs	r0, #86	; 0x56
 8010004:	f7f1 f9af 	bl	8001366 <HAL_NVIC_EnableIRQ>
  }
}
 8010008:	bf00      	nop
 801000a:	3778      	adds	r7, #120	; 0x78
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}
 8010010:	40006800 	.word	0x40006800
 8010014:	40021000 	.word	0x40021000
 8010018:	48000400 	.word	0x48000400

0801001c <cliCan>:
}


#ifdef _USE_HW_CLI
void cliCan(cli_args_t *args)
{
 801001c:	b590      	push	{r4, r7, lr}
 801001e:	b09f      	sub	sp, #124	; 0x7c
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8010024:	2300      	movs	r3, #0
 8010026:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



  if (args->argc == 1 && args->isStr(0, "info"))
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	881b      	ldrh	r3, [r3, #0]
 801002e:	2b01      	cmp	r3, #1
 8010030:	d159      	bne.n	80100e6 <cliCan+0xca>
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	695b      	ldr	r3, [r3, #20]
 8010036:	498d      	ldr	r1, [pc, #564]	; (801026c <cliCan+0x250>)
 8010038:	2000      	movs	r0, #0
 801003a:	4798      	blx	r3
 801003c:	4603      	mov	r3, r0
 801003e:	2b00      	cmp	r3, #0
 8010040:	d051      	beq.n	80100e6 <cliCan+0xca>
  {
    for (int i=0; i<CAN_MAX_CH; i++)
 8010042:	2300      	movs	r3, #0
 8010044:	673b      	str	r3, [r7, #112]	; 0x70
 8010046:	e048      	b.n	80100da <cliCan+0xbe>
    {
      cliPrintf("is_open       : %d\n", can_tbl[i].is_open);
 8010048:	4a89      	ldr	r2, [pc, #548]	; (8010270 <cliCan+0x254>)
 801004a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801004c:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 8010050:	fb01 f303 	mul.w	r3, r1, r3
 8010054:	4413      	add	r3, r2
 8010056:	3301      	adds	r3, #1
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	4619      	mov	r1, r3
 801005c:	4885      	ldr	r0, [pc, #532]	; (8010274 <cliCan+0x258>)
 801005e:	f7fc fa73 	bl	800c548 <cliPrintf>

      cliPrintf("q_rx_full_cnt : %d\n", can_tbl[i].q_rx_full_cnt);
 8010062:	4a83      	ldr	r2, [pc, #524]	; (8010270 <cliCan+0x254>)
 8010064:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010066:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 801006a:	fb01 f303 	mul.w	r3, r1, r3
 801006e:	4413      	add	r3, r2
 8010070:	3310      	adds	r3, #16
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	4619      	mov	r1, r3
 8010076:	4880      	ldr	r0, [pc, #512]	; (8010278 <cliCan+0x25c>)
 8010078:	f7fc fa66 	bl	800c548 <cliPrintf>
      cliPrintf("q_tx_full_cnt : %d\n", can_tbl[i].q_tx_full_cnt);
 801007c:	4a7c      	ldr	r2, [pc, #496]	; (8010270 <cliCan+0x254>)
 801007e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010080:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 8010084:	fb01 f303 	mul.w	r3, r1, r3
 8010088:	4413      	add	r3, r2
 801008a:	3314      	adds	r3, #20
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	4619      	mov	r1, r3
 8010090:	487a      	ldr	r0, [pc, #488]	; (801027c <cliCan+0x260>)
 8010092:	f7fc fa59 	bl	800c548 <cliPrintf>
      cliPrintf("fifo_full_cnt : %d\n", can_tbl[i].fifo_full_cnt);
 8010096:	4a76      	ldr	r2, [pc, #472]	; (8010270 <cliCan+0x254>)
 8010098:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801009a:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 801009e:	fb01 f303 	mul.w	r3, r1, r3
 80100a2:	4413      	add	r3, r2
 80100a4:	3318      	adds	r3, #24
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	4619      	mov	r1, r3
 80100aa:	4875      	ldr	r0, [pc, #468]	; (8010280 <cliCan+0x264>)
 80100ac:	f7fc fa4c 	bl	800c548 <cliPrintf>
      cliPrintf("fifo_lost_cnt : %d\n", can_tbl[i].fifo_lost_cnt);
 80100b0:	4a6f      	ldr	r2, [pc, #444]	; (8010270 <cliCan+0x254>)
 80100b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80100b4:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 80100b8:	fb01 f303 	mul.w	r3, r1, r3
 80100bc:	4413      	add	r3, r2
 80100be:	331c      	adds	r3, #28
 80100c0:	681b      	ldr	r3, [r3, #0]
 80100c2:	4619      	mov	r1, r3
 80100c4:	486f      	ldr	r0, [pc, #444]	; (8010284 <cliCan+0x268>)
 80100c6:	f7fc fa3f 	bl	800c548 <cliPrintf>
      canErrPrint(i);
 80100ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7ff fdfc 	bl	800fccc <canErrPrint>
    for (int i=0; i<CAN_MAX_CH; i++)
 80100d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80100d6:	3301      	adds	r3, #1
 80100d8:	673b      	str	r3, [r7, #112]	; 0x70
 80100da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80100dc:	2b01      	cmp	r3, #1
 80100de:	ddb3      	ble.n	8010048 <cliCan+0x2c>
    }
    ret = true;
 80100e0:	2301      	movs	r3, #1
 80100e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  }

  if (args->argc == 1 && args->isStr(0, "read"))
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	881b      	ldrh	r3, [r3, #0]
 80100ea:	2b01      	cmp	r3, #1
 80100ec:	d158      	bne.n	80101a0 <cliCan+0x184>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	695b      	ldr	r3, [r3, #20]
 80100f2:	4965      	ldr	r1, [pc, #404]	; (8010288 <cliCan+0x26c>)
 80100f4:	2000      	movs	r0, #0
 80100f6:	4798      	blx	r3
 80100f8:	4603      	mov	r3, r0
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d050      	beq.n	80101a0 <cliCan+0x184>
  {
    uint32_t index = 0;
 80100fe:	2300      	movs	r3, #0
 8010100:	66fb      	str	r3, [r7, #108]	; 0x6c

    while(cliKeepLoop())
 8010102:	e045      	b.n	8010190 <cliCan+0x174>
    {
      if (canMsgAvailable(_DEF_CAN2))
 8010104:	2001      	movs	r0, #1
 8010106:	f7ff fb89 	bl	800f81c <canMsgAvailable>
 801010a:	4603      	mov	r3, r0
 801010c:	2b00      	cmp	r3, #0
 801010e:	d03f      	beq.n	8010190 <cliCan+0x174>
      {
        can_msg_t msg;

        canMsgRead(_DEF_CAN2, &msg);
 8010110:	f107 0308 	add.w	r3, r7, #8
 8010114:	4619      	mov	r1, r3
 8010116:	2001      	movs	r0, #1
 8010118:	f7ff fc3e 	bl	800f998 <canMsgRead>

        index %= 1000;
 801011c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801011e:	4a5b      	ldr	r2, [pc, #364]	; (801028c <cliCan+0x270>)
 8010120:	fba2 1203 	umull	r1, r2, r2, r3
 8010124:	0992      	lsrs	r2, r2, #6
 8010126:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801012a:	fb01 f202 	mul.w	r2, r1, r2
 801012e:	1a9b      	subs	r3, r3, r2
 8010130:	66fb      	str	r3, [r7, #108]	; 0x6c
        cliPrintf("%03d(R) <- id ", index++);
 8010132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010134:	1c5a      	adds	r2, r3, #1
 8010136:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010138:	4619      	mov	r1, r3
 801013a:	4855      	ldr	r0, [pc, #340]	; (8010290 <cliCan+0x274>)
 801013c:	f7fc fa04 	bl	800c548 <cliPrintf>
        if (msg.id_type == CAN_STD)
 8010140:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010144:	2b00      	cmp	r3, #0
 8010146:	d103      	bne.n	8010150 <cliCan+0x134>
        {
          cliPrintf("std ");
 8010148:	4852      	ldr	r0, [pc, #328]	; (8010294 <cliCan+0x278>)
 801014a:	f7fc f9fd 	bl	800c548 <cliPrintf>
 801014e:	e002      	b.n	8010156 <cliCan+0x13a>
        }
        else
        {
          cliPrintf("ext ");
 8010150:	4851      	ldr	r0, [pc, #324]	; (8010298 <cliCan+0x27c>)
 8010152:	f7fc f9f9 	bl	800c548 <cliPrintf>
        }
        cliPrintf(": 0x%08X, L:%02d, ", msg.id, msg.length);
 8010156:	68bb      	ldr	r3, [r7, #8]
 8010158:	89ba      	ldrh	r2, [r7, #12]
 801015a:	4619      	mov	r1, r3
 801015c:	484f      	ldr	r0, [pc, #316]	; (801029c <cliCan+0x280>)
 801015e:	f7fc f9f3 	bl	800c548 <cliPrintf>
        for (int i=0; i<msg.length; i++)
 8010162:	2300      	movs	r3, #0
 8010164:	66bb      	str	r3, [r7, #104]	; 0x68
 8010166:	e00b      	b.n	8010180 <cliCan+0x164>
        {
          cliPrintf("0x%02X ", msg.data[i]);
 8010168:	f107 020e 	add.w	r2, r7, #14
 801016c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801016e:	4413      	add	r3, r2
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	4619      	mov	r1, r3
 8010174:	484a      	ldr	r0, [pc, #296]	; (80102a0 <cliCan+0x284>)
 8010176:	f7fc f9e7 	bl	800c548 <cliPrintf>
        for (int i=0; i<msg.length; i++)
 801017a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801017c:	3301      	adds	r3, #1
 801017e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010180:	89bb      	ldrh	r3, [r7, #12]
 8010182:	461a      	mov	r2, r3
 8010184:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010186:	4293      	cmp	r3, r2
 8010188:	dbee      	blt.n	8010168 <cliCan+0x14c>
        }
        cliPrintf("\n");
 801018a:	4846      	ldr	r0, [pc, #280]	; (80102a4 <cliCan+0x288>)
 801018c:	f7fc f9dc 	bl	800c548 <cliPrintf>
    while(cliKeepLoop())
 8010190:	f7fc fad4 	bl	800c73c <cliKeepLoop>
 8010194:	4603      	mov	r3, r0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d1b4      	bne.n	8010104 <cliCan+0xe8>
      }
    }
    ret = true;
 801019a:	2301      	movs	r3, #1
 801019c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  }

  if (args->argc == 1 && args->isStr(0, "send"))
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	881b      	ldrh	r3, [r3, #0]
 80101a4:	2b01      	cmp	r3, #1
 80101a6:	f040 8129 	bne.w	80103fc <cliCan+0x3e0>
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	695b      	ldr	r3, [r3, #20]
 80101ae:	493e      	ldr	r1, [pc, #248]	; (80102a8 <cliCan+0x28c>)
 80101b0:	2000      	movs	r0, #0
 80101b2:	4798      	blx	r3
 80101b4:	4603      	mov	r3, r0
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	f000 8120 	beq.w	80103fc <cliCan+0x3e0>
  {
    uint32_t pre_time;
    uint32_t index = 0;
 80101bc:	2300      	movs	r3, #0
 80101be:	663b      	str	r3, [r7, #96]	; 0x60
    uint32_t err_code;


    err_code = can_tbl[_DEF_CAN2].err_code;
 80101c0:	4b2b      	ldr	r3, [pc, #172]	; (8010270 <cliCan+0x254>)
 80101c2:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
 80101c6:	65fb      	str	r3, [r7, #92]	; 0x5c

    while(cliKeepLoop())
 80101c8:	e10f      	b.n	80103ea <cliCan+0x3ce>
    {
      can_msg_t msg;

      if (millis()-pre_time >= 1000)
 80101ca:	f7fb fac8 	bl	800b75e <millis>
 80101ce:	4602      	mov	r2, r0
 80101d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80101d2:	1ad3      	subs	r3, r2, r3
 80101d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80101d8:	f0c0 80a5 	bcc.w	8010326 <cliCan+0x30a>
      {
        pre_time = millis();
 80101dc:	f7fb fabf 	bl	800b75e <millis>
 80101e0:	6678      	str	r0, [r7, #100]	; 0x64

        msg.frame   = CAN_CLASSIC;
 80101e2:	2300      	movs	r3, #0
 80101e4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        msg.id_type = CAN_EXT;
 80101e8:	2301      	movs	r3, #1
 80101ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        msg.dlc     = CAN_DLC_3;
 80101ee:	2303      	movs	r3, #3
 80101f0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
        msg.id      = 0x314;
 80101f4:	f44f 7345 	mov.w	r3, #788	; 0x314
 80101f8:	60bb      	str	r3, [r7, #8]
        msg.length  = 3;
 80101fa:	2303      	movs	r3, #3
 80101fc:	81bb      	strh	r3, [r7, #12]
        msg.data[0] = 1;
 80101fe:	2301      	movs	r3, #1
 8010200:	73bb      	strb	r3, [r7, #14]
        msg.data[1] = 2;
 8010202:	2302      	movs	r3, #2
 8010204:	73fb      	strb	r3, [r7, #15]
        msg.data[2] = 3;
 8010206:	2303      	movs	r3, #3
 8010208:	743b      	strb	r3, [r7, #16]
        if (canMsgWrite(_DEF_CAN2, &msg, 10) > 0)
 801020a:	f107 0308 	add.w	r3, r7, #8
 801020e:	220a      	movs	r2, #10
 8010210:	4619      	mov	r1, r3
 8010212:	2001      	movs	r0, #1
 8010214:	f7ff fb20 	bl	800f858 <canMsgWrite>
 8010218:	4603      	mov	r3, r0
 801021a:	2b00      	cmp	r3, #0
 801021c:	d05c      	beq.n	80102d8 <cliCan+0x2bc>
        {
          index %= 1000;
 801021e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010220:	4a1a      	ldr	r2, [pc, #104]	; (801028c <cliCan+0x270>)
 8010222:	fba2 1203 	umull	r1, r2, r2, r3
 8010226:	0992      	lsrs	r2, r2, #6
 8010228:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801022c:	fb01 f202 	mul.w	r2, r1, r2
 8010230:	1a9b      	subs	r3, r3, r2
 8010232:	663b      	str	r3, [r7, #96]	; 0x60
          cliPrintf("%03d(T) -> id ", index++);
 8010234:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010236:	1c5a      	adds	r2, r3, #1
 8010238:	663a      	str	r2, [r7, #96]	; 0x60
 801023a:	4619      	mov	r1, r3
 801023c:	481b      	ldr	r0, [pc, #108]	; (80102ac <cliCan+0x290>)
 801023e:	f7fc f983 	bl	800c548 <cliPrintf>
          if (msg.id_type == CAN_STD)
 8010242:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010246:	2b00      	cmp	r3, #0
 8010248:	d103      	bne.n	8010252 <cliCan+0x236>
          {
            cliPrintf("std ");
 801024a:	4812      	ldr	r0, [pc, #72]	; (8010294 <cliCan+0x278>)
 801024c:	f7fc f97c 	bl	800c548 <cliPrintf>
 8010250:	e002      	b.n	8010258 <cliCan+0x23c>
          }
          else
          {
            cliPrintf("ext ");
 8010252:	4811      	ldr	r0, [pc, #68]	; (8010298 <cliCan+0x27c>)
 8010254:	f7fc f978 	bl	800c548 <cliPrintf>
          }
          cliPrintf(": 0x%08X, L:%02d, ", msg.id, msg.length);
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	89ba      	ldrh	r2, [r7, #12]
 801025c:	4619      	mov	r1, r3
 801025e:	480f      	ldr	r0, [pc, #60]	; (801029c <cliCan+0x280>)
 8010260:	f7fc f972 	bl	800c548 <cliPrintf>
          for (int i=0; i<msg.length; i++)
 8010264:	2300      	movs	r3, #0
 8010266:	65bb      	str	r3, [r7, #88]	; 0x58
 8010268:	e02e      	b.n	80102c8 <cliCan+0x2ac>
 801026a:	bf00      	nop
 801026c:	080154fc 	.word	0x080154fc
 8010270:	20002b60 	.word	0x20002b60
 8010274:	08015504 	.word	0x08015504
 8010278:	08015518 	.word	0x08015518
 801027c:	0801552c 	.word	0x0801552c
 8010280:	08015540 	.word	0x08015540
 8010284:	08015554 	.word	0x08015554
 8010288:	08015568 	.word	0x08015568
 801028c:	10624dd3 	.word	0x10624dd3
 8010290:	08015570 	.word	0x08015570
 8010294:	08015580 	.word	0x08015580
 8010298:	08015588 	.word	0x08015588
 801029c:	08015590 	.word	0x08015590
 80102a0:	080155a4 	.word	0x080155a4
 80102a4:	080155ac 	.word	0x080155ac
 80102a8:	080155b0 	.word	0x080155b0
 80102ac:	080155b8 	.word	0x080155b8
          {
            cliPrintf("0x%02X ", msg.data[i]);
 80102b0:	f107 020e 	add.w	r2, r7, #14
 80102b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102b6:	4413      	add	r3, r2
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	4619      	mov	r1, r3
 80102bc:	4859      	ldr	r0, [pc, #356]	; (8010424 <cliCan+0x408>)
 80102be:	f7fc f943 	bl	800c548 <cliPrintf>
          for (int i=0; i<msg.length; i++)
 80102c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102c4:	3301      	adds	r3, #1
 80102c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80102c8:	89bb      	ldrh	r3, [r7, #12]
 80102ca:	461a      	mov	r2, r3
 80102cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102ce:	4293      	cmp	r3, r2
 80102d0:	dbee      	blt.n	80102b0 <cliCan+0x294>
          }
          cliPrintf("\n");
 80102d2:	4855      	ldr	r0, [pc, #340]	; (8010428 <cliCan+0x40c>)
 80102d4:	f7fc f938 	bl	800c548 <cliPrintf>
        }

        if (canGetRxErrCount(_DEF_CAN2) > 0 || canGetTxErrCount(_DEF_CAN2) > 0)
 80102d8:	2001      	movs	r0, #1
 80102da:	f7ff fb81 	bl	800f9e0 <canGetRxErrCount>
 80102de:	4603      	mov	r3, r0
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d105      	bne.n	80102f0 <cliCan+0x2d4>
 80102e4:	2001      	movs	r0, #1
 80102e6:	f7ff fba5 	bl	800fa34 <canGetTxErrCount>
 80102ea:	4603      	mov	r3, r0
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d00d      	beq.n	801030c <cliCan+0x2f0>
        {
          cliPrintf("ErrCnt : %d, %d\n", canGetRxErrCount(_DEF_CAN2), canGetTxErrCount(_DEF_CAN2));
 80102f0:	2001      	movs	r0, #1
 80102f2:	f7ff fb75 	bl	800f9e0 <canGetRxErrCount>
 80102f6:	4603      	mov	r3, r0
 80102f8:	461c      	mov	r4, r3
 80102fa:	2001      	movs	r0, #1
 80102fc:	f7ff fb9a 	bl	800fa34 <canGetTxErrCount>
 8010300:	4603      	mov	r3, r0
 8010302:	461a      	mov	r2, r3
 8010304:	4621      	mov	r1, r4
 8010306:	4849      	ldr	r0, [pc, #292]	; (801042c <cliCan+0x410>)
 8010308:	f7fc f91e 	bl	800c548 <cliPrintf>
        }

        if (err_int_cnt > 0)
 801030c:	4b48      	ldr	r3, [pc, #288]	; (8010430 <cliCan+0x414>)
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d008      	beq.n	8010326 <cliCan+0x30a>
        {
          cliPrintf("Cnt : %d\n",err_int_cnt);
 8010314:	4b46      	ldr	r3, [pc, #280]	; (8010430 <cliCan+0x414>)
 8010316:	681b      	ldr	r3, [r3, #0]
 8010318:	4619      	mov	r1, r3
 801031a:	4846      	ldr	r0, [pc, #280]	; (8010434 <cliCan+0x418>)
 801031c:	f7fc f914 	bl	800c548 <cliPrintf>
          err_int_cnt = 0;
 8010320:	4b43      	ldr	r3, [pc, #268]	; (8010430 <cliCan+0x414>)
 8010322:	2200      	movs	r2, #0
 8010324:	601a      	str	r2, [r3, #0]
        }
      }

      if (can_tbl[_DEF_CAN2].err_code != err_code)
 8010326:	4b44      	ldr	r3, [pc, #272]	; (8010438 <cliCan+0x41c>)
 8010328:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
 801032c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801032e:	429a      	cmp	r2, r3
 8010330:	d00d      	beq.n	801034e <cliCan+0x332>
      {
        cliPrintf("ErrCode : 0x%X\n", can_tbl[_DEF_CAN2].err_code);
 8010332:	4b41      	ldr	r3, [pc, #260]	; (8010438 <cliCan+0x41c>)
 8010334:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
 8010338:	4619      	mov	r1, r3
 801033a:	4840      	ldr	r0, [pc, #256]	; (801043c <cliCan+0x420>)
 801033c:	f7fc f904 	bl	800c548 <cliPrintf>
        canErrPrint(_DEF_CAN2);
 8010340:	2001      	movs	r0, #1
 8010342:	f7ff fcc3 	bl	800fccc <canErrPrint>
        err_code = can_tbl[_DEF_CAN2].err_code;
 8010346:	4b3c      	ldr	r3, [pc, #240]	; (8010438 <cliCan+0x41c>)
 8010348:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
 801034c:	65fb      	str	r3, [r7, #92]	; 0x5c
      }

      if (canUpdate())
 801034e:	f7ff fbd5 	bl	800fafc <canUpdate>
 8010352:	4603      	mov	r3, r0
 8010354:	2b00      	cmp	r3, #0
 8010356:	d002      	beq.n	801035e <cliCan+0x342>
      {
        cliPrintf("BusOff Recovery\n");
 8010358:	4839      	ldr	r0, [pc, #228]	; (8010440 <cliCan+0x424>)
 801035a:	f7fc f8f5 	bl	800c548 <cliPrintf>
      }


      if (canMsgAvailable(_DEF_CAN2))
 801035e:	2001      	movs	r0, #1
 8010360:	f7ff fa5c 	bl	800f81c <canMsgAvailable>
 8010364:	4603      	mov	r3, r0
 8010366:	2b00      	cmp	r3, #0
 8010368:	d03f      	beq.n	80103ea <cliCan+0x3ce>
      {
        canMsgRead(_DEF_CAN2, &msg);
 801036a:	f107 0308 	add.w	r3, r7, #8
 801036e:	4619      	mov	r1, r3
 8010370:	2001      	movs	r0, #1
 8010372:	f7ff fb11 	bl	800f998 <canMsgRead>

        index %= 1000;
 8010376:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010378:	4a32      	ldr	r2, [pc, #200]	; (8010444 <cliCan+0x428>)
 801037a:	fba2 1203 	umull	r1, r2, r2, r3
 801037e:	0992      	lsrs	r2, r2, #6
 8010380:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010384:	fb01 f202 	mul.w	r2, r1, r2
 8010388:	1a9b      	subs	r3, r3, r2
 801038a:	663b      	str	r3, [r7, #96]	; 0x60
        cliPrintf("%03d(R) <- id ", index++);
 801038c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801038e:	1c5a      	adds	r2, r3, #1
 8010390:	663a      	str	r2, [r7, #96]	; 0x60
 8010392:	4619      	mov	r1, r3
 8010394:	482c      	ldr	r0, [pc, #176]	; (8010448 <cliCan+0x42c>)
 8010396:	f7fc f8d7 	bl	800c548 <cliPrintf>
        if (msg.id_type == CAN_STD)
 801039a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d103      	bne.n	80103aa <cliCan+0x38e>
        {
          cliPrintf("std ");
 80103a2:	482a      	ldr	r0, [pc, #168]	; (801044c <cliCan+0x430>)
 80103a4:	f7fc f8d0 	bl	800c548 <cliPrintf>
 80103a8:	e002      	b.n	80103b0 <cliCan+0x394>
        }
        else
        {
          cliPrintf("ext ");
 80103aa:	4829      	ldr	r0, [pc, #164]	; (8010450 <cliCan+0x434>)
 80103ac:	f7fc f8cc 	bl	800c548 <cliPrintf>
        }
        cliPrintf(": 0x%08X, L:%02d, ", msg.id, msg.length);
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	89ba      	ldrh	r2, [r7, #12]
 80103b4:	4619      	mov	r1, r3
 80103b6:	4827      	ldr	r0, [pc, #156]	; (8010454 <cliCan+0x438>)
 80103b8:	f7fc f8c6 	bl	800c548 <cliPrintf>
        for (int i=0; i<msg.length; i++)
 80103bc:	2300      	movs	r3, #0
 80103be:	657b      	str	r3, [r7, #84]	; 0x54
 80103c0:	e00b      	b.n	80103da <cliCan+0x3be>
        {
          cliPrintf("0x%02X ", msg.data[i]);
 80103c2:	f107 020e 	add.w	r2, r7, #14
 80103c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103c8:	4413      	add	r3, r2
 80103ca:	781b      	ldrb	r3, [r3, #0]
 80103cc:	4619      	mov	r1, r3
 80103ce:	4815      	ldr	r0, [pc, #84]	; (8010424 <cliCan+0x408>)
 80103d0:	f7fc f8ba 	bl	800c548 <cliPrintf>
        for (int i=0; i<msg.length; i++)
 80103d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103d6:	3301      	adds	r3, #1
 80103d8:	657b      	str	r3, [r7, #84]	; 0x54
 80103da:	89bb      	ldrh	r3, [r7, #12]
 80103dc:	461a      	mov	r2, r3
 80103de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80103e0:	4293      	cmp	r3, r2
 80103e2:	dbee      	blt.n	80103c2 <cliCan+0x3a6>
        }
        cliPrintf("\n");
 80103e4:	4810      	ldr	r0, [pc, #64]	; (8010428 <cliCan+0x40c>)
 80103e6:	f7fc f8af 	bl	800c548 <cliPrintf>
    while(cliKeepLoop())
 80103ea:	f7fc f9a7 	bl	800c73c <cliKeepLoop>
 80103ee:	4603      	mov	r3, r0
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	f47f aeea 	bne.w	80101ca <cliCan+0x1ae>
      }
    }
    ret = true;
 80103f6:	2301      	movs	r3, #1
 80103f8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  }

  if (ret == false)
 80103fc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010400:	f083 0301 	eor.w	r3, r3, #1
 8010404:	b2db      	uxtb	r3, r3
 8010406:	2b00      	cmp	r3, #0
 8010408:	d008      	beq.n	801041c <cliCan+0x400>
  {
    cliPrintf("can info\n");
 801040a:	4813      	ldr	r0, [pc, #76]	; (8010458 <cliCan+0x43c>)
 801040c:	f7fc f89c 	bl	800c548 <cliPrintf>
    cliPrintf("can read\n");
 8010410:	4812      	ldr	r0, [pc, #72]	; (801045c <cliCan+0x440>)
 8010412:	f7fc f899 	bl	800c548 <cliPrintf>
    cliPrintf("can send\n");
 8010416:	4812      	ldr	r0, [pc, #72]	; (8010460 <cliCan+0x444>)
 8010418:	f7fc f896 	bl	800c548 <cliPrintf>
  }
}
 801041c:	bf00      	nop
 801041e:	377c      	adds	r7, #124	; 0x7c
 8010420:	46bd      	mov	sp, r7
 8010422:	bd90      	pop	{r4, r7, pc}
 8010424:	080155a4 	.word	0x080155a4
 8010428:	080155ac 	.word	0x080155ac
 801042c:	080155c8 	.word	0x080155c8
 8010430:	20003630 	.word	0x20003630
 8010434:	080155dc 	.word	0x080155dc
 8010438:	20002b60 	.word	0x20002b60
 801043c:	080155e8 	.word	0x080155e8
 8010440:	080155f8 	.word	0x080155f8
 8010444:	10624dd3 	.word	0x10624dd3
 8010448:	08015570 	.word	0x08015570
 801044c:	08015580 	.word	0x08015580
 8010450:	08015588 	.word	0x08015588
 8010454:	08015590 	.word	0x08015590
 8010458:	0801560c 	.word	0x0801560c
 801045c:	08015618 	.word	0x08015618
 8010460:	08015624 	.word	0x08015624

08010464 <cdcInit>:


static bool is_init = false;

bool cdcInit(void)
{
 8010464:	b580      	push	{r7, lr}
 8010466:	b082      	sub	sp, #8
 8010468:	af00      	add	r7, sp, #0
  bool ret = true;
 801046a:	2301      	movs	r3, #1
 801046c:	71fb      	strb	r3, [r7, #7]


  ret = cdcIfInit();
 801046e:	f7fe f96f 	bl	800e750 <cdcIfInit>
 8010472:	4603      	mov	r3, r0
 8010474:	71fb      	strb	r3, [r7, #7]

  is_init = ret;
 8010476:	4a04      	ldr	r2, [pc, #16]	; (8010488 <cdcInit+0x24>)
 8010478:	79fb      	ldrb	r3, [r7, #7]
 801047a:	7013      	strb	r3, [r2, #0]

  return ret;
 801047c:	79fb      	ldrb	r3, [r7, #7]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3708      	adds	r7, #8
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	20003634 	.word	0x20003634

0801048c <cdcIsConnect>:
{
  return is_init;
}

bool cdcIsConnect(void)
{
 801048c:	b580      	push	{r7, lr}
 801048e:	af00      	add	r7, sp, #0
  return cdcIfIsConnected();
 8010490:	f7fe f9ec 	bl	800e86c <cdcIfIsConnected>
 8010494:	4603      	mov	r3, r0
}
 8010496:	4618      	mov	r0, r3
 8010498:	bd80      	pop	{r7, pc}

0801049a <cdcAvailable>:

uint32_t cdcAvailable(void)
{
 801049a:	b580      	push	{r7, lr}
 801049c:	af00      	add	r7, sp, #0
  return cdcIfAvailable();
 801049e:	f7fe f975 	bl	800e78c <cdcIfAvailable>
 80104a2:	4603      	mov	r3, r0
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	bd80      	pop	{r7, pc}

080104a8 <cdcRead>:

uint8_t cdcRead(void)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	af00      	add	r7, sp, #0
  return cdcIfRead();
 80104ac:	f7fe f978 	bl	800e7a0 <cdcIfRead>
 80104b0:	4603      	mov	r3, r0
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	bd80      	pop	{r7, pc}

080104b6 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 80104b6:	b580      	push	{r7, lr}
 80104b8:	b082      	sub	sp, #8
 80104ba:	af00      	add	r7, sp, #0
 80104bc:	6078      	str	r0, [r7, #4]
 80104be:	6039      	str	r1, [r7, #0]
  return cdcIfWrite(p_data, length);
 80104c0:	6839      	ldr	r1, [r7, #0]
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f7fe f97e 	bl	800e7c4 <cdcIfWrite>
 80104c8:	4603      	mov	r3, r0
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3708      	adds	r7, #8
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd80      	pop	{r7, pc}
	...

080104d4 <gpioInit>:
#ifdef _USE_HW_CLI
static void cliGpio(cli_args_t *args);
#endif

bool gpioInit(void)
{
 80104d4:	b580      	push	{r7, lr}
 80104d6:	b086      	sub	sp, #24
 80104d8:	af00      	add	r7, sp, #0
  bool ret = true;
 80104da:	2301      	movs	r3, #1
 80104dc:	74fb      	strb	r3, [r7, #19]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80104de:	4b32      	ldr	r3, [pc, #200]	; (80105a8 <gpioInit+0xd4>)
 80104e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104e2:	4a31      	ldr	r2, [pc, #196]	; (80105a8 <gpioInit+0xd4>)
 80104e4:	f043 0304 	orr.w	r3, r3, #4
 80104e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80104ea:	4b2f      	ldr	r3, [pc, #188]	; (80105a8 <gpioInit+0xd4>)
 80104ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104ee:	f003 0304 	and.w	r3, r3, #4
 80104f2:	60fb      	str	r3, [r7, #12]
 80104f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80104f6:	4b2c      	ldr	r3, [pc, #176]	; (80105a8 <gpioInit+0xd4>)
 80104f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104fa:	4a2b      	ldr	r2, [pc, #172]	; (80105a8 <gpioInit+0xd4>)
 80104fc:	f043 0308 	orr.w	r3, r3, #8
 8010500:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010502:	4b29      	ldr	r3, [pc, #164]	; (80105a8 <gpioInit+0xd4>)
 8010504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010506:	f003 0308 	and.w	r3, r3, #8
 801050a:	60bb      	str	r3, [r7, #8]
 801050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801050e:	4b26      	ldr	r3, [pc, #152]	; (80105a8 <gpioInit+0xd4>)
 8010510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010512:	4a25      	ldr	r2, [pc, #148]	; (80105a8 <gpioInit+0xd4>)
 8010514:	f043 0301 	orr.w	r3, r3, #1
 8010518:	64d3      	str	r3, [r2, #76]	; 0x4c
 801051a:	4b23      	ldr	r3, [pc, #140]	; (80105a8 <gpioInit+0xd4>)
 801051c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801051e:	f003 0301 	and.w	r3, r3, #1
 8010522:	607b      	str	r3, [r7, #4]
 8010524:	687b      	ldr	r3, [r7, #4]


  for (int i=0; i<GPIO_MAX_CH; i++)
 8010526:	2300      	movs	r3, #0
 8010528:	617b      	str	r3, [r7, #20]
 801052a:	e01e      	b.n	801056a <gpioInit+0x96>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 801052c:	697b      	ldr	r3, [r7, #20]
 801052e:	b2d8      	uxtb	r0, r3
 8010530:	491e      	ldr	r1, [pc, #120]	; (80105ac <gpioInit+0xd8>)
 8010532:	697a      	ldr	r2, [r7, #20]
 8010534:	4613      	mov	r3, r2
 8010536:	005b      	lsls	r3, r3, #1
 8010538:	4413      	add	r3, r2
 801053a:	009b      	lsls	r3, r3, #2
 801053c:	440b      	add	r3, r1
 801053e:	3308      	adds	r3, #8
 8010540:	781b      	ldrb	r3, [r3, #0]
 8010542:	4619      	mov	r1, r3
 8010544:	f000 f83e 	bl	80105c4 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8010548:	697b      	ldr	r3, [r7, #20]
 801054a:	b2d8      	uxtb	r0, r3
 801054c:	4917      	ldr	r1, [pc, #92]	; (80105ac <gpioInit+0xd8>)
 801054e:	697a      	ldr	r2, [r7, #20]
 8010550:	4613      	mov	r3, r2
 8010552:	005b      	lsls	r3, r3, #1
 8010554:	4413      	add	r3, r2
 8010556:	009b      	lsls	r3, r3, #2
 8010558:	440b      	add	r3, r1
 801055a:	330b      	adds	r3, #11
 801055c:	781b      	ldrb	r3, [r3, #0]
 801055e:	4619      	mov	r1, r3
 8010560:	f000 f8b8 	bl	80106d4 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 8010564:	697b      	ldr	r3, [r7, #20]
 8010566:	3301      	adds	r3, #1
 8010568:	617b      	str	r3, [r7, #20]
 801056a:	697b      	ldr	r3, [r7, #20]
 801056c:	2b01      	cmp	r3, #1
 801056e:	dddd      	ble.n	801052c <gpioInit+0x58>
  }

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8010570:	2200      	movs	r2, #0
 8010572:	2100      	movs	r1, #0
 8010574:	2028      	movs	r0, #40	; 0x28
 8010576:	f7f0 fedc 	bl	8001332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 801057a:	2028      	movs	r0, #40	; 0x28
 801057c:	f7f0 fef3 	bl	8001366 <HAL_NVIC_EnableIRQ>

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 8010580:	490b      	ldr	r1, [pc, #44]	; (80105b0 <gpioInit+0xdc>)
 8010582:	480c      	ldr	r0, [pc, #48]	; (80105b4 <gpioInit+0xe0>)
 8010584:	f7fc f8f0 	bl	800c768 <cliAdd>
#endif
#ifdef _USE_HW_LOG
  logPrintf("[%s] gpio_Init()\r\n", ret ? "OK":"NG");
 8010588:	7cfb      	ldrb	r3, [r7, #19]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d001      	beq.n	8010592 <gpioInit+0xbe>
 801058e:	4b0a      	ldr	r3, [pc, #40]	; (80105b8 <gpioInit+0xe4>)
 8010590:	e000      	b.n	8010594 <gpioInit+0xc0>
 8010592:	4b0a      	ldr	r3, [pc, #40]	; (80105bc <gpioInit+0xe8>)
 8010594:	4619      	mov	r1, r3
 8010596:	480a      	ldr	r0, [pc, #40]	; (80105c0 <gpioInit+0xec>)
 8010598:	f7fc faa4 	bl	800cae4 <logPrintf>
#endif
  return ret;
 801059c:	7cfb      	ldrb	r3, [r7, #19]
}
 801059e:	4618      	mov	r0, r3
 80105a0:	3718      	adds	r7, #24
 80105a2:	46bd      	mov	sp, r7
 80105a4:	bd80      	pop	{r7, pc}
 80105a6:	bf00      	nop
 80105a8:	40021000 	.word	0x40021000
 80105ac:	08015b8c 	.word	0x08015b8c
 80105b0:	08010831 	.word	0x08010831
 80105b4:	08015630 	.word	0x08015630
 80105b8:	08015638 	.word	0x08015638
 80105bc:	0801563c 	.word	0x0801563c
 80105c0:	08015640 	.word	0x08015640

080105c4 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b088      	sub	sp, #32
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	4603      	mov	r3, r0
 80105cc:	460a      	mov	r2, r1
 80105ce:	71fb      	strb	r3, [r7, #7]
 80105d0:	4613      	mov	r3, r2
 80105d2:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 80105d4:	2301      	movs	r3, #1
 80105d6:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80105d8:	f107 0308 	add.w	r3, r7, #8
 80105dc:	2200      	movs	r2, #0
 80105de:	601a      	str	r2, [r3, #0]
 80105e0:	605a      	str	r2, [r3, #4]
 80105e2:	609a      	str	r2, [r3, #8]
 80105e4:	60da      	str	r2, [r3, #12]
 80105e6:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 80105e8:	79fb      	ldrb	r3, [r7, #7]
 80105ea:	2b01      	cmp	r3, #1
 80105ec:	d901      	bls.n	80105f2 <gpioPinMode+0x2e>
  {
    return false;
 80105ee:	2300      	movs	r3, #0
 80105f0:	e069      	b.n	80106c6 <gpioPinMode+0x102>
  }

  switch(mode)
 80105f2:	79bb      	ldrb	r3, [r7, #6]
 80105f4:	2b08      	cmp	r3, #8
 80105f6:	d84d      	bhi.n	8010694 <gpioPinMode+0xd0>
 80105f8:	a201      	add	r2, pc, #4	; (adr r2, 8010600 <gpioPinMode+0x3c>)
 80105fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80105fe:	bf00      	nop
 8010600:	08010625 	.word	0x08010625
 8010604:	0801062f 	.word	0x0801062f
 8010608:	0801063d 	.word	0x0801063d
 801060c:	08010647 	.word	0x08010647
 8010610:	08010657 	.word	0x08010657
 8010614:	08010665 	.word	0x08010665
 8010618:	08010673 	.word	0x08010673
 801061c:	0801067d 	.word	0x0801067d
 8010620:	0801068b 	.word	0x0801068b
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010624:	2300      	movs	r3, #0
 8010626:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010628:	2300      	movs	r3, #0
 801062a:	613b      	str	r3, [r7, #16]
      break;
 801062c:	e032      	b.n	8010694 <gpioPinMode+0xd0>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801062e:	2300      	movs	r3, #0
 8010630:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010632:	2301      	movs	r3, #1
 8010634:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010636:	2302      	movs	r3, #2
 8010638:	617b      	str	r3, [r7, #20]
      break;
 801063a:	e02b      	b.n	8010694 <gpioPinMode+0xd0>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801063c:	2300      	movs	r3, #0
 801063e:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8010640:	2302      	movs	r3, #2
 8010642:	613b      	str	r3, [r7, #16]
      break;
 8010644:	e026      	b.n	8010694 <gpioPinMode+0xd0>

    case _DEF_INPUT_IT_RISING:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010646:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 801064a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 801064c:	2300      	movs	r3, #0
 801064e:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010650:	2302      	movs	r3, #2
 8010652:	617b      	str	r3, [r7, #20]
      break;
 8010654:	e01e      	b.n	8010694 <gpioPinMode+0xd0>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010656:	2301      	movs	r3, #1
 8010658:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 801065a:	2300      	movs	r3, #0
 801065c:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801065e:	2302      	movs	r3, #2
 8010660:	617b      	str	r3, [r7, #20]
      break;
 8010662:	e017      	b.n	8010694 <gpioPinMode+0xd0>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010664:	2301      	movs	r3, #1
 8010666:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010668:	2301      	movs	r3, #1
 801066a:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 801066c:	2302      	movs	r3, #2
 801066e:	617b      	str	r3, [r7, #20]
      break;
 8010670:	e010      	b.n	8010694 <gpioPinMode+0xd0>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010672:	2301      	movs	r3, #1
 8010674:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8010676:	2302      	movs	r3, #2
 8010678:	613b      	str	r3, [r7, #16]
      break;
 801067a:	e00b      	b.n	8010694 <gpioPinMode+0xd0>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801067c:	2302      	movs	r3, #2
 801067e:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010680:	2300      	movs	r3, #0
 8010682:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010684:	2300      	movs	r3, #0
 8010686:	617b      	str	r3, [r7, #20]
      break;
 8010688:	e004      	b.n	8010694 <gpioPinMode+0xd0>

    case _DEF_INPUT_ANALOG:
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 801068a:	2303      	movs	r3, #3
 801068c:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 801068e:	2300      	movs	r3, #0
 8010690:	613b      	str	r3, [r7, #16]
      break;
 8010692:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8010694:	79fa      	ldrb	r2, [r7, #7]
 8010696:	490e      	ldr	r1, [pc, #56]	; (80106d0 <gpioPinMode+0x10c>)
 8010698:	4613      	mov	r3, r2
 801069a:	005b      	lsls	r3, r3, #1
 801069c:	4413      	add	r3, r2
 801069e:	009b      	lsls	r3, r3, #2
 80106a0:	440b      	add	r3, r1
 80106a2:	3304      	adds	r3, #4
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 80106a8:	79fa      	ldrb	r2, [r7, #7]
 80106aa:	4909      	ldr	r1, [pc, #36]	; (80106d0 <gpioPinMode+0x10c>)
 80106ac:	4613      	mov	r3, r2
 80106ae:	005b      	lsls	r3, r3, #1
 80106b0:	4413      	add	r3, r2
 80106b2:	009b      	lsls	r3, r3, #2
 80106b4:	440b      	add	r3, r1
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	f107 0208 	add.w	r2, r7, #8
 80106bc:	4611      	mov	r1, r2
 80106be:	4618      	mov	r0, r3
 80106c0:	f7f2 f99a 	bl	80029f8 <HAL_GPIO_Init>

  return ret;
 80106c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80106c6:	4618      	mov	r0, r3
 80106c8:	3720      	adds	r7, #32
 80106ca:	46bd      	mov	sp, r7
 80106cc:	bd80      	pop	{r7, pc}
 80106ce:	bf00      	nop
 80106d0:	08015b8c 	.word	0x08015b8c

080106d4 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 80106d4:	b590      	push	{r4, r7, lr}
 80106d6:	b083      	sub	sp, #12
 80106d8:	af00      	add	r7, sp, #0
 80106da:	4603      	mov	r3, r0
 80106dc:	460a      	mov	r2, r1
 80106de:	71fb      	strb	r3, [r7, #7]
 80106e0:	4613      	mov	r3, r2
 80106e2:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 80106e4:	79fb      	ldrb	r3, [r7, #7]
 80106e6:	2b01      	cmp	r3, #1
 80106e8:	d840      	bhi.n	801076c <gpioPinWrite+0x98>
  {
    return;
  }

  if (value)
 80106ea:	79bb      	ldrb	r3, [r7, #6]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d01e      	beq.n	801072e <gpioPinWrite+0x5a>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 80106f0:	79fa      	ldrb	r2, [r7, #7]
 80106f2:	4920      	ldr	r1, [pc, #128]	; (8010774 <gpioPinWrite+0xa0>)
 80106f4:	4613      	mov	r3, r2
 80106f6:	005b      	lsls	r3, r3, #1
 80106f8:	4413      	add	r3, r2
 80106fa:	009b      	lsls	r3, r3, #2
 80106fc:	440b      	add	r3, r1
 80106fe:	6818      	ldr	r0, [r3, #0]
 8010700:	79fa      	ldrb	r2, [r7, #7]
 8010702:	491c      	ldr	r1, [pc, #112]	; (8010774 <gpioPinWrite+0xa0>)
 8010704:	4613      	mov	r3, r2
 8010706:	005b      	lsls	r3, r3, #1
 8010708:	4413      	add	r3, r2
 801070a:	009b      	lsls	r3, r3, #2
 801070c:	440b      	add	r3, r1
 801070e:	3304      	adds	r3, #4
 8010710:	681b      	ldr	r3, [r3, #0]
 8010712:	b299      	uxth	r1, r3
 8010714:	79fa      	ldrb	r2, [r7, #7]
 8010716:	4c17      	ldr	r4, [pc, #92]	; (8010774 <gpioPinWrite+0xa0>)
 8010718:	4613      	mov	r3, r2
 801071a:	005b      	lsls	r3, r3, #1
 801071c:	4413      	add	r3, r2
 801071e:	009b      	lsls	r3, r3, #2
 8010720:	4423      	add	r3, r4
 8010722:	3309      	adds	r3, #9
 8010724:	781b      	ldrb	r3, [r3, #0]
 8010726:	461a      	mov	r2, r3
 8010728:	f7f2 fbe2 	bl	8002ef0 <HAL_GPIO_WritePin>
 801072c:	e01f      	b.n	801076e <gpioPinWrite+0x9a>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 801072e:	79fa      	ldrb	r2, [r7, #7]
 8010730:	4910      	ldr	r1, [pc, #64]	; (8010774 <gpioPinWrite+0xa0>)
 8010732:	4613      	mov	r3, r2
 8010734:	005b      	lsls	r3, r3, #1
 8010736:	4413      	add	r3, r2
 8010738:	009b      	lsls	r3, r3, #2
 801073a:	440b      	add	r3, r1
 801073c:	6818      	ldr	r0, [r3, #0]
 801073e:	79fa      	ldrb	r2, [r7, #7]
 8010740:	490c      	ldr	r1, [pc, #48]	; (8010774 <gpioPinWrite+0xa0>)
 8010742:	4613      	mov	r3, r2
 8010744:	005b      	lsls	r3, r3, #1
 8010746:	4413      	add	r3, r2
 8010748:	009b      	lsls	r3, r3, #2
 801074a:	440b      	add	r3, r1
 801074c:	3304      	adds	r3, #4
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	b299      	uxth	r1, r3
 8010752:	79fa      	ldrb	r2, [r7, #7]
 8010754:	4c07      	ldr	r4, [pc, #28]	; (8010774 <gpioPinWrite+0xa0>)
 8010756:	4613      	mov	r3, r2
 8010758:	005b      	lsls	r3, r3, #1
 801075a:	4413      	add	r3, r2
 801075c:	009b      	lsls	r3, r3, #2
 801075e:	4423      	add	r3, r4
 8010760:	330a      	adds	r3, #10
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	461a      	mov	r2, r3
 8010766:	f7f2 fbc3 	bl	8002ef0 <HAL_GPIO_WritePin>
 801076a:	e000      	b.n	801076e <gpioPinWrite+0x9a>
    return;
 801076c:	bf00      	nop
  }
}
 801076e:	370c      	adds	r7, #12
 8010770:	46bd      	mov	sp, r7
 8010772:	bd90      	pop	{r4, r7, pc}
 8010774:	08015b8c 	.word	0x08015b8c

08010778 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b084      	sub	sp, #16
 801077c:	af00      	add	r7, sp, #0
 801077e:	4603      	mov	r3, r0
 8010780:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8010782:	2300      	movs	r3, #0
 8010784:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 8010786:	79fb      	ldrb	r3, [r7, #7]
 8010788:	2b01      	cmp	r3, #1
 801078a:	d901      	bls.n	8010790 <gpioPinRead+0x18>
  {
    return false;
 801078c:	2300      	movs	r3, #0
 801078e:	e024      	b.n	80107da <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8010790:	79fa      	ldrb	r2, [r7, #7]
 8010792:	4914      	ldr	r1, [pc, #80]	; (80107e4 <gpioPinRead+0x6c>)
 8010794:	4613      	mov	r3, r2
 8010796:	005b      	lsls	r3, r3, #1
 8010798:	4413      	add	r3, r2
 801079a:	009b      	lsls	r3, r3, #2
 801079c:	440b      	add	r3, r1
 801079e:	6818      	ldr	r0, [r3, #0]
 80107a0:	79fa      	ldrb	r2, [r7, #7]
 80107a2:	4910      	ldr	r1, [pc, #64]	; (80107e4 <gpioPinRead+0x6c>)
 80107a4:	4613      	mov	r3, r2
 80107a6:	005b      	lsls	r3, r3, #1
 80107a8:	4413      	add	r3, r2
 80107aa:	009b      	lsls	r3, r3, #2
 80107ac:	440b      	add	r3, r1
 80107ae:	3304      	adds	r3, #4
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	b29b      	uxth	r3, r3
 80107b4:	4619      	mov	r1, r3
 80107b6:	f7f2 fb83 	bl	8002ec0 <HAL_GPIO_ReadPin>
 80107ba:	4603      	mov	r3, r0
 80107bc:	4618      	mov	r0, r3
 80107be:	79fa      	ldrb	r2, [r7, #7]
 80107c0:	4908      	ldr	r1, [pc, #32]	; (80107e4 <gpioPinRead+0x6c>)
 80107c2:	4613      	mov	r3, r2
 80107c4:	005b      	lsls	r3, r3, #1
 80107c6:	4413      	add	r3, r2
 80107c8:	009b      	lsls	r3, r3, #2
 80107ca:	440b      	add	r3, r1
 80107cc:	3309      	adds	r3, #9
 80107ce:	781b      	ldrb	r3, [r3, #0]
 80107d0:	4298      	cmp	r0, r3
 80107d2:	d101      	bne.n	80107d8 <gpioPinRead+0x60>
  {
    ret = true;
 80107d4:	2301      	movs	r3, #1
 80107d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80107d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3710      	adds	r7, #16
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
 80107e2:	bf00      	nop
 80107e4:	08015b8c 	.word	0x08015b8c

080107e8 <gpioPinToggle>:

void gpioPinToggle(uint8_t ch)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	4603      	mov	r3, r0
 80107f0:	71fb      	strb	r3, [r7, #7]
  if (ch >= GPIO_MAX_CH)
 80107f2:	79fb      	ldrb	r3, [r7, #7]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d815      	bhi.n	8010824 <gpioPinToggle+0x3c>
  {
    return;
  }

  HAL_GPIO_TogglePin(gpio_tbl[ch].port, gpio_tbl[ch].pin);
 80107f8:	79fa      	ldrb	r2, [r7, #7]
 80107fa:	490c      	ldr	r1, [pc, #48]	; (801082c <gpioPinToggle+0x44>)
 80107fc:	4613      	mov	r3, r2
 80107fe:	005b      	lsls	r3, r3, #1
 8010800:	4413      	add	r3, r2
 8010802:	009b      	lsls	r3, r3, #2
 8010804:	440b      	add	r3, r1
 8010806:	6818      	ldr	r0, [r3, #0]
 8010808:	79fa      	ldrb	r2, [r7, #7]
 801080a:	4908      	ldr	r1, [pc, #32]	; (801082c <gpioPinToggle+0x44>)
 801080c:	4613      	mov	r3, r2
 801080e:	005b      	lsls	r3, r3, #1
 8010810:	4413      	add	r3, r2
 8010812:	009b      	lsls	r3, r3, #2
 8010814:	440b      	add	r3, r1
 8010816:	3304      	adds	r3, #4
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	b29b      	uxth	r3, r3
 801081c:	4619      	mov	r1, r3
 801081e:	f7f2 fb7f 	bl	8002f20 <HAL_GPIO_TogglePin>
 8010822:	e000      	b.n	8010826 <gpioPinToggle+0x3e>
    return;
 8010824:	bf00      	nop
}
 8010826:	3708      	adds	r7, #8
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}
 801082c:	08015b8c 	.word	0x08015b8c

08010830 <cliGpio>:

#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8010830:	b590      	push	{r4, r7, lr}
 8010832:	b087      	sub	sp, #28
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8010838:	2300      	movs	r3, #0
 801083a:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	881b      	ldrh	r3, [r3, #0]
 8010840:	2b01      	cmp	r3, #1
 8010842:	d128      	bne.n	8010896 <cliGpio+0x66>
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	695b      	ldr	r3, [r3, #20]
 8010848:	4947      	ldr	r1, [pc, #284]	; (8010968 <cliGpio+0x138>)
 801084a:	2000      	movs	r0, #0
 801084c:	4798      	blx	r3
 801084e:	4603      	mov	r3, r0
 8010850:	2b00      	cmp	r3, #0
 8010852:	d020      	beq.n	8010896 <cliGpio+0x66>
  {
    while(cliKeepLoop())
 8010854:	e018      	b.n	8010888 <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 8010856:	2300      	movs	r3, #0
 8010858:	613b      	str	r3, [r7, #16]
 801085a:	e00c      	b.n	8010876 <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	b2db      	uxtb	r3, r3
 8010860:	4618      	mov	r0, r3
 8010862:	f7ff ff89 	bl	8010778 <gpioPinRead>
 8010866:	4603      	mov	r3, r0
 8010868:	4619      	mov	r1, r3
 801086a:	4840      	ldr	r0, [pc, #256]	; (801096c <cliGpio+0x13c>)
 801086c:	f7fb fe6c 	bl	800c548 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	3301      	adds	r3, #1
 8010874:	613b      	str	r3, [r7, #16]
 8010876:	693b      	ldr	r3, [r7, #16]
 8010878:	2b01      	cmp	r3, #1
 801087a:	ddef      	ble.n	801085c <cliGpio+0x2c>
      }
      cliPrintf("\r\n");
 801087c:	483c      	ldr	r0, [pc, #240]	; (8010970 <cliGpio+0x140>)
 801087e:	f7fb fe63 	bl	800c548 <cliPrintf>
      delay(100);
 8010882:	2064      	movs	r0, #100	; 0x64
 8010884:	f7fa ff58 	bl	800b738 <delay>
    while(cliKeepLoop())
 8010888:	f7fb ff58 	bl	800c73c <cliKeepLoop>
 801088c:	4603      	mov	r3, r0
 801088e:	2b00      	cmp	r3, #0
 8010890:	d1e1      	bne.n	8010856 <cliGpio+0x26>
    }
    ret = true;
 8010892:	2301      	movs	r3, #1
 8010894:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	881b      	ldrh	r3, [r3, #0]
 801089a:	2b02      	cmp	r3, #2
 801089c:	d123      	bne.n	80108e6 <cliGpio+0xb6>
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	695b      	ldr	r3, [r3, #20]
 80108a2:	4934      	ldr	r1, [pc, #208]	; (8010974 <cliGpio+0x144>)
 80108a4:	2000      	movs	r0, #0
 80108a6:	4798      	blx	r3
 80108a8:	4603      	mov	r3, r0
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d01b      	beq.n	80108e6 <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	689b      	ldr	r3, [r3, #8]
 80108b2:	2001      	movs	r0, #1
 80108b4:	4798      	blx	r3
 80108b6:	4603      	mov	r3, r0
 80108b8:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 80108ba:	e00d      	b.n	80108d8 <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\r\n", ch, gpioPinRead(ch));
 80108bc:	7bfc      	ldrb	r4, [r7, #15]
 80108be:	7bfb      	ldrb	r3, [r7, #15]
 80108c0:	4618      	mov	r0, r3
 80108c2:	f7ff ff59 	bl	8010778 <gpioPinRead>
 80108c6:	4603      	mov	r3, r0
 80108c8:	461a      	mov	r2, r3
 80108ca:	4621      	mov	r1, r4
 80108cc:	482a      	ldr	r0, [pc, #168]	; (8010978 <cliGpio+0x148>)
 80108ce:	f7fb fe3b 	bl	800c548 <cliPrintf>
      delay(100);
 80108d2:	2064      	movs	r0, #100	; 0x64
 80108d4:	f7fa ff30 	bl	800b738 <delay>
    while(cliKeepLoop())
 80108d8:	f7fb ff30 	bl	800c73c <cliKeepLoop>
 80108dc:	4603      	mov	r3, r0
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d1ec      	bne.n	80108bc <cliGpio+0x8c>
    }

    ret = true;
 80108e2:	2301      	movs	r3, #1
 80108e4:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	881b      	ldrh	r3, [r3, #0]
 80108ea:	2b03      	cmp	r3, #3
 80108ec:	d126      	bne.n	801093c <cliGpio+0x10c>
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	695b      	ldr	r3, [r3, #20]
 80108f2:	4922      	ldr	r1, [pc, #136]	; (801097c <cliGpio+0x14c>)
 80108f4:	2000      	movs	r0, #0
 80108f6:	4798      	blx	r3
 80108f8:	4603      	mov	r3, r0
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d01e      	beq.n	801093c <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	689b      	ldr	r3, [r3, #8]
 8010902:	2001      	movs	r0, #1
 8010904:	4798      	blx	r3
 8010906:	4603      	mov	r3, r0
 8010908:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	689b      	ldr	r3, [r3, #8]
 801090e:	2002      	movs	r0, #2
 8010910:	4798      	blx	r3
 8010912:	4603      	mov	r3, r0
 8010914:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 8010916:	7b7b      	ldrb	r3, [r7, #13]
 8010918:	2b00      	cmp	r3, #0
 801091a:	bf14      	ite	ne
 801091c:	2301      	movne	r3, #1
 801091e:	2300      	moveq	r3, #0
 8010920:	b2da      	uxtb	r2, r3
 8010922:	7bbb      	ldrb	r3, [r7, #14]
 8010924:	4611      	mov	r1, r2
 8010926:	4618      	mov	r0, r3
 8010928:	f7ff fed4 	bl	80106d4 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\r\n", ch, data);
 801092c:	7bbb      	ldrb	r3, [r7, #14]
 801092e:	7b7a      	ldrb	r2, [r7, #13]
 8010930:	4619      	mov	r1, r3
 8010932:	4813      	ldr	r0, [pc, #76]	; (8010980 <cliGpio+0x150>)
 8010934:	f7fb fe08 	bl	800c548 <cliPrintf>
    ret = true;
 8010938:	2301      	movs	r3, #1
 801093a:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 801093c:	7dfb      	ldrb	r3, [r7, #23]
 801093e:	f083 0301 	eor.w	r3, r3, #1
 8010942:	b2db      	uxtb	r3, r3
 8010944:	2b00      	cmp	r3, #0
 8010946:	d00a      	beq.n	801095e <cliGpio+0x12e>
  {
    cliPrintf("gpio show\r\n");
 8010948:	480e      	ldr	r0, [pc, #56]	; (8010984 <cliGpio+0x154>)
 801094a:	f7fb fdfd 	bl	800c548 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\r\n", GPIO_MAX_CH-1);
 801094e:	2101      	movs	r1, #1
 8010950:	480d      	ldr	r0, [pc, #52]	; (8010988 <cliGpio+0x158>)
 8010952:	f7fb fdf9 	bl	800c548 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\r\n", GPIO_MAX_CH-1);
 8010956:	2101      	movs	r1, #1
 8010958:	480c      	ldr	r0, [pc, #48]	; (801098c <cliGpio+0x15c>)
 801095a:	f7fb fdf5 	bl	800c548 <cliPrintf>
  }
}
 801095e:	bf00      	nop
 8010960:	371c      	adds	r7, #28
 8010962:	46bd      	mov	sp, r7
 8010964:	bd90      	pop	{r4, r7, pc}
 8010966:	bf00      	nop
 8010968:	08015654 	.word	0x08015654
 801096c:	0801565c 	.word	0x0801565c
 8010970:	08015660 	.word	0x08015660
 8010974:	08015664 	.word	0x08015664
 8010978:	0801566c 	.word	0x0801566c
 801097c:	08015680 	.word	0x08015680
 8010980:	08015688 	.word	0x08015688
 8010984:	080156a0 	.word	0x080156a0
 8010988:	080156ac 	.word	0x080156ac
 801098c:	080156c4 	.word	0x080156c4

08010990 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static inline int constrain(int amt, int low, int high)
{
 8010990:	b480      	push	{r7}
 8010992:	b085      	sub	sp, #20
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
    if (amt < low)
 801099c:	68fa      	ldr	r2, [r7, #12]
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	429a      	cmp	r2, r3
 80109a2:	da01      	bge.n	80109a8 <constrain+0x18>
        return low;
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	e006      	b.n	80109b6 <constrain+0x26>
    else if (amt > high)
 80109a8:	68fa      	ldr	r2, [r7, #12]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	429a      	cmp	r2, r3
 80109ae:	dd01      	ble.n	80109b4 <constrain+0x24>
        return high;
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	e000      	b.n	80109b6 <constrain+0x26>
    else
        return amt;
 80109b4:	68fb      	ldr	r3, [r7, #12]
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3714      	adds	r7, #20
 80109ba:	46bd      	mov	sp, r7
 80109bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c0:	4770      	bx	lr
	...

080109c4 <i2cInit>:
static void delayUs(uint32_t us);



bool i2cInit(void)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
  uint32_t i;


  for (i=0; i<I2C_MAX_CH; i++)
 80109ca:	2300      	movs	r3, #0
 80109cc:	607b      	str	r3, [r7, #4]
 80109ce:	e00c      	b.n	80109ea <i2cInit+0x26>
  {
    i2c_errcount[i] = 0;
 80109d0:	4a0d      	ldr	r2, [pc, #52]	; (8010a08 <i2cInit+0x44>)
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2100      	movs	r1, #0
 80109d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    is_open[i] = false;
 80109da:	4a0c      	ldr	r2, [pc, #48]	; (8010a0c <i2cInit+0x48>)
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	4413      	add	r3, r2
 80109e0:	2200      	movs	r2, #0
 80109e2:	701a      	strb	r2, [r3, #0]
  for (i=0; i<I2C_MAX_CH; i++)
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	3301      	adds	r3, #1
 80109e8:	607b      	str	r3, [r7, #4]
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d0ef      	beq.n	80109d0 <i2cInit+0xc>
    mutex_lock[i] = osMutexCreate(&mutex_lock_def[i]);
#endif
  }

#ifdef _USE_HW_CLI
  cliAdd("i2c", cliI2C);
 80109f0:	4907      	ldr	r1, [pc, #28]	; (8010a10 <i2cInit+0x4c>)
 80109f2:	4808      	ldr	r0, [pc, #32]	; (8010a14 <i2cInit+0x50>)
 80109f4:	f7fb feb8 	bl	800c768 <cliAdd>
#endif

  is_init = true;
 80109f8:	4b07      	ldr	r3, [pc, #28]	; (8010a18 <i2cInit+0x54>)
 80109fa:	2201      	movs	r2, #1
 80109fc:	701a      	strb	r2, [r3, #0]
  return true;
 80109fe:	2301      	movs	r3, #1
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	3708      	adds	r7, #8
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}
 8010a08:	20003638 	.word	0x20003638
 8010a0c:	20003640 	.word	0x20003640
 8010a10:	08011115 	.word	0x08011115
 8010a14:	080156e0 	.word	0x080156e0
 8010a18:	2000363d 	.word	0x2000363d

08010a1c <i2cOpen>:
{
  return is_init;
}

bool i2cOpen(uint8_t ch, i2c_freq_t freq_khz)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	4603      	mov	r3, r0
 8010a24:	460a      	mov	r2, r1
 8010a26:	71fb      	strb	r3, [r7, #7]
 8010a28:	4613      	mov	r3, r2
 8010a2a:	71bb      	strb	r3, [r7, #6]
  bool ret = false;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	73fb      	strb	r3, [r7, #15]

  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8010a30:	79fa      	ldrb	r2, [r7, #7]
 8010a32:	492b      	ldr	r1, [pc, #172]	; (8010ae0 <i2cOpen+0xc4>)
 8010a34:	4613      	mov	r3, r2
 8010a36:	009b      	lsls	r3, r3, #2
 8010a38:	4413      	add	r3, r2
 8010a3a:	009b      	lsls	r3, r3, #2
 8010a3c:	440b      	add	r3, r1
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	60bb      	str	r3, [r7, #8]

  if (ch >= I2C_MAX_CH)
 8010a42:	79fb      	ldrb	r3, [r7, #7]
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d001      	beq.n	8010a4c <i2cOpen+0x30>
  {
    return false;
 8010a48:	2300      	movs	r3, #0
 8010a4a:	e045      	b.n	8010ad8 <i2cOpen+0xbc>
  }


  switch(ch)
 8010a4c:	79fb      	ldrb	r3, [r7, #7]
 8010a4e:	2b01      	cmp	r3, #1
 8010a50:	d141      	bne.n	8010ad6 <i2cOpen+0xba>
  {
    case _DEF_I2C2:
      i2c_freq[ch] = freq_khz;
 8010a52:	79fb      	ldrb	r3, [r7, #7]
 8010a54:	4923      	ldr	r1, [pc, #140]	; (8010ae4 <i2cOpen+0xc8>)
 8010a56:	79ba      	ldrb	r2, [r7, #6]
 8010a58:	54ca      	strb	r2, [r1, r3]
      is_open[ch] = false;
 8010a5a:	79fb      	ldrb	r3, [r7, #7]
 8010a5c:	4a22      	ldr	r2, [pc, #136]	; (8010ae8 <i2cOpen+0xcc>)
 8010a5e:	2100      	movs	r1, #0
 8010a60:	54d1      	strb	r1, [r2, r3]

      p_handle->Instance             = I2C2;
 8010a62:	68bb      	ldr	r3, [r7, #8]
 8010a64:	4a21      	ldr	r2, [pc, #132]	; (8010aec <i2cOpen+0xd0>)
 8010a66:	601a      	str	r2, [r3, #0]
      p_handle->Init.Timing          = i2c_freq_tbl[freq_khz];
 8010a68:	79bb      	ldrb	r3, [r7, #6]
 8010a6a:	4a21      	ldr	r2, [pc, #132]	; (8010af0 <i2cOpen+0xd4>)
 8010a6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8010a70:	68bb      	ldr	r3, [r7, #8]
 8010a72:	605a      	str	r2, [r3, #4]
      p_handle->Init.OwnAddress1     = 0x00;
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	2200      	movs	r2, #0
 8010a78:	609a      	str	r2, [r3, #8]
      p_handle->Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 8010a7a:	68bb      	ldr	r3, [r7, #8]
 8010a7c:	2201      	movs	r2, #1
 8010a7e:	60da      	str	r2, [r3, #12]
      p_handle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8010a80:	68bb      	ldr	r3, [r7, #8]
 8010a82:	2200      	movs	r2, #0
 8010a84:	611a      	str	r2, [r3, #16]
      p_handle->Init.OwnAddress2     = 0x00;
 8010a86:	68bb      	ldr	r3, [r7, #8]
 8010a88:	2200      	movs	r2, #0
 8010a8a:	615a      	str	r2, [r3, #20]
      p_handle->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8010a8c:	68bb      	ldr	r3, [r7, #8]
 8010a8e:	2200      	movs	r2, #0
 8010a90:	619a      	str	r2, [r3, #24]
      p_handle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	2200      	movs	r2, #0
 8010a96:	61da      	str	r2, [r3, #28]
      p_handle->Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8010a98:	68bb      	ldr	r3, [r7, #8]
 8010a9a:	2200      	movs	r2, #0
 8010a9c:	621a      	str	r2, [r3, #32]

      i2cReset(ch);
 8010a9e:	79fb      	ldrb	r3, [r7, #7]
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f000 f827 	bl	8010af4 <i2cReset>

      HAL_I2C_DeInit(p_handle);
 8010aa6:	68b8      	ldr	r0, [r7, #8]
 8010aa8:	f7f2 fb12 	bl	80030d0 <HAL_I2C_DeInit>
      if(HAL_I2C_Init(p_handle) == HAL_OK)
 8010aac:	68b8      	ldr	r0, [r7, #8]
 8010aae:	f7f2 fa74 	bl	8002f9a <HAL_I2C_Init>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d10d      	bne.n	8010ad4 <i2cOpen+0xb8>
      {
        /* Enable the Analog I2C Filter */
        HAL_I2CEx_ConfigAnalogFilter(p_handle,I2C_ANALOGFILTER_ENABLE);
 8010ab8:	2100      	movs	r1, #0
 8010aba:	68b8      	ldr	r0, [r7, #8]
 8010abc:	f7f3 ffe0 	bl	8004a80 <HAL_I2CEx_ConfigAnalogFilter>

        /* Configure Digital filter */
        HAL_I2CEx_ConfigDigitalFilter(p_handle, 0);
 8010ac0:	2100      	movs	r1, #0
 8010ac2:	68b8      	ldr	r0, [r7, #8]
 8010ac4:	f7f4 f827 	bl	8004b16 <HAL_I2CEx_ConfigDigitalFilter>

        ret = true;
 8010ac8:	2301      	movs	r3, #1
 8010aca:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 8010acc:	79fb      	ldrb	r3, [r7, #7]
 8010ace:	4a06      	ldr	r2, [pc, #24]	; (8010ae8 <i2cOpen+0xcc>)
 8010ad0:	2101      	movs	r1, #1
 8010ad2:	54d1      	strb	r1, [r2, r3]
      }
      break;
 8010ad4:	bf00      	nop
  }

  return ret;
 8010ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3710      	adds	r7, #16
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	200001a0 	.word	0x200001a0
 8010ae4:	2000363c 	.word	0x2000363c
 8010ae8:	20003640 	.word	0x20003640
 8010aec:	40005800 	.word	0x40005800
 8010af0:	08015ba4 	.word	0x08015ba4

08010af4 <i2cReset>:
{
  return is_open[ch];
}

void i2cReset(uint8_t ch)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b08a      	sub	sp, #40	; 0x28
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	4603      	mov	r3, r0
 8010afc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  i2c_tbl_t *p_pin = &i2c_tbl[ch];
 8010afe:	79fa      	ldrb	r2, [r7, #7]
 8010b00:	4613      	mov	r3, r2
 8010b02:	009b      	lsls	r3, r3, #2
 8010b04:	4413      	add	r3, r2
 8010b06:	009b      	lsls	r3, r3, #2
 8010b08:	4a44      	ldr	r2, [pc, #272]	; (8010c1c <i2cReset+0x128>)
 8010b0a:	4413      	add	r3, r2
 8010b0c:	623b      	str	r3, [r7, #32]


  GPIO_InitStruct.Pin       = p_pin->scl_pin;
 8010b0e:	6a3b      	ldr	r3, [r7, #32]
 8010b10:	689b      	ldr	r3, [r3, #8]
 8010b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 8010b14:	2311      	movs	r3, #17
 8010b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8010b18:	2300      	movs	r3, #0
 8010b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 8010b1c:	2303      	movs	r3, #3
 8010b1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(p_pin->scl_port, &GPIO_InitStruct);
 8010b20:	6a3b      	ldr	r3, [r7, #32]
 8010b22:	685b      	ldr	r3, [r3, #4]
 8010b24:	f107 020c 	add.w	r2, r7, #12
 8010b28:	4611      	mov	r1, r2
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7f1 ff64 	bl	80029f8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin       = p_pin->sda_pin;
 8010b30:	6a3b      	ldr	r3, [r7, #32]
 8010b32:	691b      	ldr	r3, [r3, #16]
 8010b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 8010b36:	2311      	movs	r3, #17
 8010b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(p_pin->sda_port, &GPIO_InitStruct);
 8010b3e:	6a3b      	ldr	r3, [r7, #32]
 8010b40:	68db      	ldr	r3, [r3, #12]
 8010b42:	f107 020c 	add.w	r2, r7, #12
 8010b46:	4611      	mov	r1, r2
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f7f1 ff55 	bl	80029f8 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8010b4e:	6a3b      	ldr	r3, [r7, #32]
 8010b50:	6858      	ldr	r0, [r3, #4]
 8010b52:	6a3b      	ldr	r3, [r7, #32]
 8010b54:	689b      	ldr	r3, [r3, #8]
 8010b56:	b29b      	uxth	r3, r3
 8010b58:	2201      	movs	r2, #1
 8010b5a:	4619      	mov	r1, r3
 8010b5c:	f7f2 f9c8 	bl	8002ef0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_SET);
 8010b60:	6a3b      	ldr	r3, [r7, #32]
 8010b62:	68d8      	ldr	r0, [r3, #12]
 8010b64:	6a3b      	ldr	r3, [r7, #32]
 8010b66:	691b      	ldr	r3, [r3, #16]
 8010b68:	b29b      	uxth	r3, r3
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	f7f2 f9bf 	bl	8002ef0 <HAL_GPIO_WritePin>
  delayUs(5);
 8010b72:	2005      	movs	r0, #5
 8010b74:	f000 fa0a 	bl	8010f8c <delayUs>

  for (int i = 0; i < 9; i++)
 8010b78:	2300      	movs	r3, #0
 8010b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8010b7c:	e01a      	b.n	8010bb4 <i2cReset+0xc0>
  {

    HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_RESET);
 8010b7e:	6a3b      	ldr	r3, [r7, #32]
 8010b80:	6858      	ldr	r0, [r3, #4]
 8010b82:	6a3b      	ldr	r3, [r7, #32]
 8010b84:	689b      	ldr	r3, [r3, #8]
 8010b86:	b29b      	uxth	r3, r3
 8010b88:	2200      	movs	r2, #0
 8010b8a:	4619      	mov	r1, r3
 8010b8c:	f7f2 f9b0 	bl	8002ef0 <HAL_GPIO_WritePin>
    delayUs(5);
 8010b90:	2005      	movs	r0, #5
 8010b92:	f000 f9fb 	bl	8010f8c <delayUs>
    HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8010b96:	6a3b      	ldr	r3, [r7, #32]
 8010b98:	6858      	ldr	r0, [r3, #4]
 8010b9a:	6a3b      	ldr	r3, [r7, #32]
 8010b9c:	689b      	ldr	r3, [r3, #8]
 8010b9e:	b29b      	uxth	r3, r3
 8010ba0:	2201      	movs	r2, #1
 8010ba2:	4619      	mov	r1, r3
 8010ba4:	f7f2 f9a4 	bl	8002ef0 <HAL_GPIO_WritePin>
    delayUs(5);
 8010ba8:	2005      	movs	r0, #5
 8010baa:	f000 f9ef 	bl	8010f8c <delayUs>
  for (int i = 0; i < 9; i++)
 8010bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb0:	3301      	adds	r3, #1
 8010bb2:	627b      	str	r3, [r7, #36]	; 0x24
 8010bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bb6:	2b08      	cmp	r3, #8
 8010bb8:	dde1      	ble.n	8010b7e <i2cReset+0x8a>
  }

  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_RESET);
 8010bba:	6a3b      	ldr	r3, [r7, #32]
 8010bbc:	6858      	ldr	r0, [r3, #4]
 8010bbe:	6a3b      	ldr	r3, [r7, #32]
 8010bc0:	689b      	ldr	r3, [r3, #8]
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	4619      	mov	r1, r3
 8010bc8:	f7f2 f992 	bl	8002ef0 <HAL_GPIO_WritePin>
  delayUs(5);
 8010bcc:	2005      	movs	r0, #5
 8010bce:	f000 f9dd 	bl	8010f8c <delayUs>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_RESET);
 8010bd2:	6a3b      	ldr	r3, [r7, #32]
 8010bd4:	68d8      	ldr	r0, [r3, #12]
 8010bd6:	6a3b      	ldr	r3, [r7, #32]
 8010bd8:	691b      	ldr	r3, [r3, #16]
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	2200      	movs	r2, #0
 8010bde:	4619      	mov	r1, r3
 8010be0:	f7f2 f986 	bl	8002ef0 <HAL_GPIO_WritePin>
  delayUs(5);
 8010be4:	2005      	movs	r0, #5
 8010be6:	f000 f9d1 	bl	8010f8c <delayUs>

  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 8010bea:	6a3b      	ldr	r3, [r7, #32]
 8010bec:	6858      	ldr	r0, [r3, #4]
 8010bee:	6a3b      	ldr	r3, [r7, #32]
 8010bf0:	689b      	ldr	r3, [r3, #8]
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	2201      	movs	r2, #1
 8010bf6:	4619      	mov	r1, r3
 8010bf8:	f7f2 f97a 	bl	8002ef0 <HAL_GPIO_WritePin>
  delayUs(5);
 8010bfc:	2005      	movs	r0, #5
 8010bfe:	f000 f9c5 	bl	8010f8c <delayUs>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_SET);
 8010c02:	6a3b      	ldr	r3, [r7, #32]
 8010c04:	68d8      	ldr	r0, [r3, #12]
 8010c06:	6a3b      	ldr	r3, [r7, #32]
 8010c08:	691b      	ldr	r3, [r3, #16]
 8010c0a:	b29b      	uxth	r3, r3
 8010c0c:	2201      	movs	r2, #1
 8010c0e:	4619      	mov	r1, r3
 8010c10:	f7f2 f96e 	bl	8002ef0 <HAL_GPIO_WritePin>
}
 8010c14:	bf00      	nop
 8010c16:	3728      	adds	r7, #40	; 0x28
 8010c18:	46bd      	mov	sp, r7
 8010c1a:	bd80      	pop	{r7, pc}
 8010c1c:	200001a0 	.word	0x200001a0

08010c20 <i2cIsDeviceReady>:

bool i2cIsDeviceReady(uint8_t ch, uint8_t dev_addr)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b084      	sub	sp, #16
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	4603      	mov	r3, r0
 8010c28:	460a      	mov	r2, r1
 8010c2a:	71fb      	strb	r3, [r7, #7]
 8010c2c:	4613      	mov	r3, r2
 8010c2e:	71bb      	strb	r3, [r7, #6]
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8010c30:	79fa      	ldrb	r2, [r7, #7]
 8010c32:	490d      	ldr	r1, [pc, #52]	; (8010c68 <i2cIsDeviceReady+0x48>)
 8010c34:	4613      	mov	r3, r2
 8010c36:	009b      	lsls	r3, r3, #2
 8010c38:	4413      	add	r3, r2
 8010c3a:	009b      	lsls	r3, r3, #2
 8010c3c:	440b      	add	r3, r1
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	60fb      	str	r3, [r7, #12]


  LOCK_BEGIN(ch);
  if (HAL_I2C_IsDeviceReady(p_handle, dev_addr << 1, 10, 10) == HAL_OK)
 8010c42:	79bb      	ldrb	r3, [r7, #6]
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	005b      	lsls	r3, r3, #1
 8010c48:	b299      	uxth	r1, r3
 8010c4a:	230a      	movs	r3, #10
 8010c4c:	220a      	movs	r2, #10
 8010c4e:	68f8      	ldr	r0, [r7, #12]
 8010c50:	f7f2 fdb4 	bl	80037bc <HAL_I2C_IsDeviceReady>
 8010c54:	4603      	mov	r3, r0
 8010c56:	2b00      	cmp	r3, #0
 8010c58:	d101      	bne.n	8010c5e <i2cIsDeviceReady+0x3e>
  {
    return true;
 8010c5a:	2301      	movs	r3, #1
 8010c5c:	e000      	b.n	8010c60 <i2cIsDeviceReady+0x40>
  }
  LOCK_END(ch);

  return false;
 8010c5e:	2300      	movs	r3, #0
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	3710      	adds	r7, #16
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd80      	pop	{r7, pc}
 8010c68:	200001a0 	.word	0x200001a0

08010c6c <i2cReadByte>:

  return ret;
}

bool i2cReadByte (uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t timeout)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b086      	sub	sp, #24
 8010c70:	af02      	add	r7, sp, #8
 8010c72:	607b      	str	r3, [r7, #4]
 8010c74:	4603      	mov	r3, r0
 8010c76:	73fb      	strb	r3, [r7, #15]
 8010c78:	460b      	mov	r3, r1
 8010c7a:	81bb      	strh	r3, [r7, #12]
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	817b      	strh	r3, [r7, #10]
  return i2cReadBytes(ch, dev_addr, reg_addr, p_data, 1, timeout);
 8010c80:	897a      	ldrh	r2, [r7, #10]
 8010c82:	89b9      	ldrh	r1, [r7, #12]
 8010c84:	7bf8      	ldrb	r0, [r7, #15]
 8010c86:	69bb      	ldr	r3, [r7, #24]
 8010c88:	9301      	str	r3, [sp, #4]
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	9300      	str	r3, [sp, #0]
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f000 f806 	bl	8010ca0 <i2cReadBytes>
 8010c94:	4603      	mov	r3, r0
}
 8010c96:	4618      	mov	r0, r3
 8010c98:	3710      	adds	r7, #16
 8010c9a:	46bd      	mov	sp, r7
 8010c9c:	bd80      	pop	{r7, pc}
	...

08010ca0 <i2cReadBytes>:

bool i2cReadBytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8010ca0:	b580      	push	{r7, lr}
 8010ca2:	b08c      	sub	sp, #48	; 0x30
 8010ca4:	af04      	add	r7, sp, #16
 8010ca6:	607b      	str	r3, [r7, #4]
 8010ca8:	4603      	mov	r3, r0
 8010caa:	73fb      	strb	r3, [r7, #15]
 8010cac:	460b      	mov	r3, r1
 8010cae:	81bb      	strh	r3, [r7, #12]
 8010cb0:	4613      	mov	r3, r2
 8010cb2:	817b      	strh	r3, [r7, #10]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8010cb4:	7bfa      	ldrb	r2, [r7, #15]
 8010cb6:	4916      	ldr	r1, [pc, #88]	; (8010d10 <i2cReadBytes+0x70>)
 8010cb8:	4613      	mov	r3, r2
 8010cba:	009b      	lsls	r3, r3, #2
 8010cbc:	4413      	add	r3, r2
 8010cbe:	009b      	lsls	r3, r3, #2
 8010cc0:	440b      	add	r3, r1
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 8010cc6:	7bfb      	ldrb	r3, [r7, #15]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d001      	beq.n	8010cd0 <i2cReadBytes+0x30>
  {
    return false;
 8010ccc:	2300      	movs	r3, #0
 8010cce:	e01a      	b.n	8010d06 <i2cReadBytes+0x66>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Mem_Read(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 8010cd0:	89bb      	ldrh	r3, [r7, #12]
 8010cd2:	005b      	lsls	r3, r3, #1
 8010cd4:	b299      	uxth	r1, r3
 8010cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cd8:	b29b      	uxth	r3, r3
 8010cda:	8978      	ldrh	r0, [r7, #10]
 8010cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010cde:	9202      	str	r2, [sp, #8]
 8010ce0:	9301      	str	r3, [sp, #4]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	9300      	str	r3, [sp, #0]
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	4602      	mov	r2, r0
 8010cea:	69b8      	ldr	r0, [r7, #24]
 8010cec:	f7f2 fc4c 	bl	8003588 <HAL_I2C_Mem_Read>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	75fb      	strb	r3, [r7, #23]

  if( i2c_ret == HAL_OK )
 8010cf4:	7dfb      	ldrb	r3, [r7, #23]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d102      	bne.n	8010d00 <i2cReadBytes+0x60>
  {
    ret = true;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	77fb      	strb	r3, [r7, #31]
 8010cfe:	e001      	b.n	8010d04 <i2cReadBytes+0x64>
  }
  else
  {
    ret = false;
 8010d00:	2300      	movs	r3, #0
 8010d02:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 8010d04:	7ffb      	ldrb	r3, [r7, #31]
}
 8010d06:	4618      	mov	r0, r3
 8010d08:	3720      	adds	r7, #32
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}
 8010d0e:	bf00      	nop
 8010d10:	200001a0 	.word	0x200001a0

08010d14 <i2cRead16Byte>:

bool i2cRead16Byte (uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t timeout)
{
 8010d14:	b580      	push	{r7, lr}
 8010d16:	b086      	sub	sp, #24
 8010d18:	af02      	add	r7, sp, #8
 8010d1a:	607b      	str	r3, [r7, #4]
 8010d1c:	4603      	mov	r3, r0
 8010d1e:	73fb      	strb	r3, [r7, #15]
 8010d20:	460b      	mov	r3, r1
 8010d22:	81bb      	strh	r3, [r7, #12]
 8010d24:	4613      	mov	r3, r2
 8010d26:	817b      	strh	r3, [r7, #10]
  return i2cRead16Bytes(ch, dev_addr, reg_addr, p_data, 1, timeout);
 8010d28:	897a      	ldrh	r2, [r7, #10]
 8010d2a:	89b9      	ldrh	r1, [r7, #12]
 8010d2c:	7bf8      	ldrb	r0, [r7, #15]
 8010d2e:	69bb      	ldr	r3, [r7, #24]
 8010d30:	9301      	str	r3, [sp, #4]
 8010d32:	2301      	movs	r3, #1
 8010d34:	9300      	str	r3, [sp, #0]
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	f000 f806 	bl	8010d48 <i2cRead16Bytes>
 8010d3c:	4603      	mov	r3, r0
}
 8010d3e:	4618      	mov	r0, r3
 8010d40:	3710      	adds	r7, #16
 8010d42:	46bd      	mov	sp, r7
 8010d44:	bd80      	pop	{r7, pc}
	...

08010d48 <i2cRead16Bytes>:

bool i2cRead16Bytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b08c      	sub	sp, #48	; 0x30
 8010d4c:	af04      	add	r7, sp, #16
 8010d4e:	607b      	str	r3, [r7, #4]
 8010d50:	4603      	mov	r3, r0
 8010d52:	73fb      	strb	r3, [r7, #15]
 8010d54:	460b      	mov	r3, r1
 8010d56:	81bb      	strh	r3, [r7, #12]
 8010d58:	4613      	mov	r3, r2
 8010d5a:	817b      	strh	r3, [r7, #10]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8010d5c:	7bfa      	ldrb	r2, [r7, #15]
 8010d5e:	4916      	ldr	r1, [pc, #88]	; (8010db8 <i2cRead16Bytes+0x70>)
 8010d60:	4613      	mov	r3, r2
 8010d62:	009b      	lsls	r3, r3, #2
 8010d64:	4413      	add	r3, r2
 8010d66:	009b      	lsls	r3, r3, #2
 8010d68:	440b      	add	r3, r1
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 8010d6e:	7bfb      	ldrb	r3, [r7, #15]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d001      	beq.n	8010d78 <i2cRead16Bytes+0x30>
  {
    return false;
 8010d74:	2300      	movs	r3, #0
 8010d76:	e01a      	b.n	8010dae <i2cRead16Bytes+0x66>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Mem_Read(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_16BIT, p_data, length, timeout);
 8010d78:	89bb      	ldrh	r3, [r7, #12]
 8010d7a:	005b      	lsls	r3, r3, #1
 8010d7c:	b299      	uxth	r1, r3
 8010d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d80:	b29b      	uxth	r3, r3
 8010d82:	8978      	ldrh	r0, [r7, #10]
 8010d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d86:	9202      	str	r2, [sp, #8]
 8010d88:	9301      	str	r3, [sp, #4]
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	9300      	str	r3, [sp, #0]
 8010d8e:	2302      	movs	r3, #2
 8010d90:	4602      	mov	r2, r0
 8010d92:	69b8      	ldr	r0, [r7, #24]
 8010d94:	f7f2 fbf8 	bl	8003588 <HAL_I2C_Mem_Read>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	75fb      	strb	r3, [r7, #23]

  if( i2c_ret == HAL_OK )
 8010d9c:	7dfb      	ldrb	r3, [r7, #23]
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d102      	bne.n	8010da8 <i2cRead16Bytes+0x60>
  {
    ret = true;
 8010da2:	2301      	movs	r3, #1
 8010da4:	77fb      	strb	r3, [r7, #31]
 8010da6:	e001      	b.n	8010dac <i2cRead16Bytes+0x64>
  }
  else
  {
    ret = false;
 8010da8:	2300      	movs	r3, #0
 8010daa:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 8010dac:	7ffb      	ldrb	r3, [r7, #31]
}
 8010dae:	4618      	mov	r0, r3
 8010db0:	3720      	adds	r7, #32
 8010db2:	46bd      	mov	sp, r7
 8010db4:	bd80      	pop	{r7, pc}
 8010db6:	bf00      	nop
 8010db8:	200001a0 	.word	0x200001a0

08010dbc <i2cWriteByte>:

  return ret;
}

bool i2cWriteByte (uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t data, uint32_t timeout)
{
 8010dbc:	b590      	push	{r4, r7, lr}
 8010dbe:	b085      	sub	sp, #20
 8010dc0:	af02      	add	r7, sp, #8
 8010dc2:	4604      	mov	r4, r0
 8010dc4:	4608      	mov	r0, r1
 8010dc6:	4611      	mov	r1, r2
 8010dc8:	461a      	mov	r2, r3
 8010dca:	4623      	mov	r3, r4
 8010dcc:	71fb      	strb	r3, [r7, #7]
 8010dce:	4603      	mov	r3, r0
 8010dd0:	80bb      	strh	r3, [r7, #4]
 8010dd2:	460b      	mov	r3, r1
 8010dd4:	807b      	strh	r3, [r7, #2]
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	71bb      	strb	r3, [r7, #6]
  return i2cWriteBytes(ch, dev_addr, reg_addr, &data, 1, timeout);
 8010dda:	1dbc      	adds	r4, r7, #6
 8010ddc:	887a      	ldrh	r2, [r7, #2]
 8010dde:	88b9      	ldrh	r1, [r7, #4]
 8010de0:	79f8      	ldrb	r0, [r7, #7]
 8010de2:	69bb      	ldr	r3, [r7, #24]
 8010de4:	9301      	str	r3, [sp, #4]
 8010de6:	2301      	movs	r3, #1
 8010de8:	9300      	str	r3, [sp, #0]
 8010dea:	4623      	mov	r3, r4
 8010dec:	f000 f806 	bl	8010dfc <i2cWriteBytes>
 8010df0:	4603      	mov	r3, r0
}
 8010df2:	4618      	mov	r0, r3
 8010df4:	370c      	adds	r7, #12
 8010df6:	46bd      	mov	sp, r7
 8010df8:	bd90      	pop	{r4, r7, pc}
	...

08010dfc <i2cWriteBytes>:

bool i2cWriteBytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b08c      	sub	sp, #48	; 0x30
 8010e00:	af04      	add	r7, sp, #16
 8010e02:	607b      	str	r3, [r7, #4]
 8010e04:	4603      	mov	r3, r0
 8010e06:	73fb      	strb	r3, [r7, #15]
 8010e08:	460b      	mov	r3, r1
 8010e0a:	81bb      	strh	r3, [r7, #12]
 8010e0c:	4613      	mov	r3, r2
 8010e0e:	817b      	strh	r3, [r7, #10]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8010e10:	7bfa      	ldrb	r2, [r7, #15]
 8010e12:	4916      	ldr	r1, [pc, #88]	; (8010e6c <i2cWriteBytes+0x70>)
 8010e14:	4613      	mov	r3, r2
 8010e16:	009b      	lsls	r3, r3, #2
 8010e18:	4413      	add	r3, r2
 8010e1a:	009b      	lsls	r3, r3, #2
 8010e1c:	440b      	add	r3, r1
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 8010e22:	7bfb      	ldrb	r3, [r7, #15]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d001      	beq.n	8010e2c <i2cWriteBytes+0x30>
  {
    return false;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	e01a      	b.n	8010e62 <i2cWriteBytes+0x66>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Mem_Write(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 8010e2c:	89bb      	ldrh	r3, [r7, #12]
 8010e2e:	005b      	lsls	r3, r3, #1
 8010e30:	b299      	uxth	r1, r3
 8010e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e34:	b29b      	uxth	r3, r3
 8010e36:	8978      	ldrh	r0, [r7, #10]
 8010e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010e3a:	9202      	str	r2, [sp, #8]
 8010e3c:	9301      	str	r3, [sp, #4]
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	9300      	str	r3, [sp, #0]
 8010e42:	2301      	movs	r3, #1
 8010e44:	4602      	mov	r2, r0
 8010e46:	69b8      	ldr	r0, [r7, #24]
 8010e48:	f7f2 fa8a 	bl	8003360 <HAL_I2C_Mem_Write>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	75fb      	strb	r3, [r7, #23]

  if(i2c_ret == HAL_OK)
 8010e50:	7dfb      	ldrb	r3, [r7, #23]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d102      	bne.n	8010e5c <i2cWriteBytes+0x60>
  {
    ret = true;
 8010e56:	2301      	movs	r3, #1
 8010e58:	77fb      	strb	r3, [r7, #31]
 8010e5a:	e001      	b.n	8010e60 <i2cWriteBytes+0x64>
  }
  else
  {
    ret = false;
 8010e5c:	2300      	movs	r3, #0
 8010e5e:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 8010e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3720      	adds	r7, #32
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	200001a0 	.word	0x200001a0

08010e70 <i2cWrite16Byte>:

bool i2cWrite16Byte (uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t data, uint32_t timeout)
{
 8010e70:	b590      	push	{r4, r7, lr}
 8010e72:	b085      	sub	sp, #20
 8010e74:	af02      	add	r7, sp, #8
 8010e76:	4604      	mov	r4, r0
 8010e78:	4608      	mov	r0, r1
 8010e7a:	4611      	mov	r1, r2
 8010e7c:	461a      	mov	r2, r3
 8010e7e:	4623      	mov	r3, r4
 8010e80:	71fb      	strb	r3, [r7, #7]
 8010e82:	4603      	mov	r3, r0
 8010e84:	80bb      	strh	r3, [r7, #4]
 8010e86:	460b      	mov	r3, r1
 8010e88:	807b      	strh	r3, [r7, #2]
 8010e8a:	4613      	mov	r3, r2
 8010e8c:	71bb      	strb	r3, [r7, #6]
  return i2cWrite16Bytes(ch, dev_addr, reg_addr, &data, 1, timeout);
 8010e8e:	1dbc      	adds	r4, r7, #6
 8010e90:	887a      	ldrh	r2, [r7, #2]
 8010e92:	88b9      	ldrh	r1, [r7, #4]
 8010e94:	79f8      	ldrb	r0, [r7, #7]
 8010e96:	69bb      	ldr	r3, [r7, #24]
 8010e98:	9301      	str	r3, [sp, #4]
 8010e9a:	2301      	movs	r3, #1
 8010e9c:	9300      	str	r3, [sp, #0]
 8010e9e:	4623      	mov	r3, r4
 8010ea0:	f000 f806 	bl	8010eb0 <i2cWrite16Bytes>
 8010ea4:	4603      	mov	r3, r0
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	370c      	adds	r7, #12
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	bd90      	pop	{r4, r7, pc}
	...

08010eb0 <i2cWrite16Bytes>:

bool i2cWrite16Bytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b08c      	sub	sp, #48	; 0x30
 8010eb4:	af04      	add	r7, sp, #16
 8010eb6:	607b      	str	r3, [r7, #4]
 8010eb8:	4603      	mov	r3, r0
 8010eba:	73fb      	strb	r3, [r7, #15]
 8010ebc:	460b      	mov	r3, r1
 8010ebe:	81bb      	strh	r3, [r7, #12]
 8010ec0:	4613      	mov	r3, r2
 8010ec2:	817b      	strh	r3, [r7, #10]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8010ec4:	7bfa      	ldrb	r2, [r7, #15]
 8010ec6:	4916      	ldr	r1, [pc, #88]	; (8010f20 <i2cWrite16Bytes+0x70>)
 8010ec8:	4613      	mov	r3, r2
 8010eca:	009b      	lsls	r3, r3, #2
 8010ecc:	4413      	add	r3, r2
 8010ece:	009b      	lsls	r3, r3, #2
 8010ed0:	440b      	add	r3, r1
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 8010ed6:	7bfb      	ldrb	r3, [r7, #15]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d001      	beq.n	8010ee0 <i2cWrite16Bytes+0x30>
  {
    return false;
 8010edc:	2300      	movs	r3, #0
 8010ede:	e01a      	b.n	8010f16 <i2cWrite16Bytes+0x66>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Mem_Write(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_16BIT, p_data, length, timeout);
 8010ee0:	89bb      	ldrh	r3, [r7, #12]
 8010ee2:	005b      	lsls	r3, r3, #1
 8010ee4:	b299      	uxth	r1, r3
 8010ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ee8:	b29b      	uxth	r3, r3
 8010eea:	8978      	ldrh	r0, [r7, #10]
 8010eec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010eee:	9202      	str	r2, [sp, #8]
 8010ef0:	9301      	str	r3, [sp, #4]
 8010ef2:	687b      	ldr	r3, [r7, #4]
 8010ef4:	9300      	str	r3, [sp, #0]
 8010ef6:	2302      	movs	r3, #2
 8010ef8:	4602      	mov	r2, r0
 8010efa:	69b8      	ldr	r0, [r7, #24]
 8010efc:	f7f2 fa30 	bl	8003360 <HAL_I2C_Mem_Write>
 8010f00:	4603      	mov	r3, r0
 8010f02:	75fb      	strb	r3, [r7, #23]

  if(i2c_ret == HAL_OK)
 8010f04:	7dfb      	ldrb	r3, [r7, #23]
 8010f06:	2b00      	cmp	r3, #0
 8010f08:	d102      	bne.n	8010f10 <i2cWrite16Bytes+0x60>
  {
    ret = true;
 8010f0a:	2301      	movs	r3, #1
 8010f0c:	77fb      	strb	r3, [r7, #31]
 8010f0e:	e001      	b.n	8010f14 <i2cWrite16Bytes+0x64>
  }
  else
  {
    ret = false;
 8010f10:	2300      	movs	r3, #0
 8010f12:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 8010f14:	7ffb      	ldrb	r3, [r7, #31]
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	3720      	adds	r7, #32
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	200001a0 	.word	0x200001a0

08010f24 <i2cWriteData>:

bool i2cWriteData(uint8_t ch, uint16_t dev_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	b08a      	sub	sp, #40	; 0x28
 8010f28:	af02      	add	r7, sp, #8
 8010f2a:	60ba      	str	r2, [r7, #8]
 8010f2c:	607b      	str	r3, [r7, #4]
 8010f2e:	4603      	mov	r3, r0
 8010f30:	73fb      	strb	r3, [r7, #15]
 8010f32:	460b      	mov	r3, r1
 8010f34:	81bb      	strh	r3, [r7, #12]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8010f36:	7bfa      	ldrb	r2, [r7, #15]
 8010f38:	4913      	ldr	r1, [pc, #76]	; (8010f88 <i2cWriteData+0x64>)
 8010f3a:	4613      	mov	r3, r2
 8010f3c:	009b      	lsls	r3, r3, #2
 8010f3e:	4413      	add	r3, r2
 8010f40:	009b      	lsls	r3, r3, #2
 8010f42:	440b      	add	r3, r1
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 8010f48:	7bfb      	ldrb	r3, [r7, #15]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d001      	beq.n	8010f52 <i2cWriteData+0x2e>
  {
    return false;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	e016      	b.n	8010f80 <i2cWriteData+0x5c>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Master_Transmit(p_handle, (uint16_t)(dev_addr << 1), p_data, length, timeout);
 8010f52:	89bb      	ldrh	r3, [r7, #12]
 8010f54:	005b      	lsls	r3, r3, #1
 8010f56:	b299      	uxth	r1, r3
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	b29a      	uxth	r2, r3
 8010f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f5e:	9300      	str	r3, [sp, #0]
 8010f60:	4613      	mov	r3, r2
 8010f62:	68ba      	ldr	r2, [r7, #8]
 8010f64:	69b8      	ldr	r0, [r7, #24]
 8010f66:	f7f2 f8e3 	bl	8003130 <HAL_I2C_Master_Transmit>
 8010f6a:	4603      	mov	r3, r0
 8010f6c:	75fb      	strb	r3, [r7, #23]

  if(i2c_ret == HAL_OK)
 8010f6e:	7dfb      	ldrb	r3, [r7, #23]
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d102      	bne.n	8010f7a <i2cWriteData+0x56>
  {
    ret = true;
 8010f74:	2301      	movs	r3, #1
 8010f76:	77fb      	strb	r3, [r7, #31]
 8010f78:	e001      	b.n	8010f7e <i2cWriteData+0x5a>
  }
  else
  {
    ret = false;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 8010f7e:	7ffb      	ldrb	r3, [r7, #31]
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	3720      	adds	r7, #32
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	200001a0 	.word	0x200001a0

08010f8c <delayUs>:
{
  return i2c_errcount[ch];
}

void delayUs(uint32_t us)
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b085      	sub	sp, #20
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for (i=0; i<us*1000; i++)
 8010f94:	2300      	movs	r3, #0
 8010f96:	60fb      	str	r3, [r7, #12]
 8010f98:	e002      	b.n	8010fa0 <delayUs+0x14>
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	3301      	adds	r3, #1
 8010f9e:	60fb      	str	r3, [r7, #12]
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010fa6:	fb03 f202 	mul.w	r2, r3, r2
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	429a      	cmp	r2, r3
 8010fae:	d8f4      	bhi.n	8010f9a <delayUs+0xe>
  {

  }
}
 8010fb0:	bf00      	nop
 8010fb2:	bf00      	nop
 8010fb4:	3714      	adds	r7, #20
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fbc:	4770      	bx	lr
	...

08010fc0 <HAL_I2C_ErrorCallback>:




void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8010fc0:	b480      	push	{r7}
 8010fc2:	b083      	sub	sp, #12
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  if (hi2c->Instance == i2c_tbl[_DEF_I2C1].p_hi2c->Instance)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	681a      	ldr	r2, [r3, #0]
 8010fcc:	4b09      	ldr	r3, [pc, #36]	; (8010ff4 <HAL_I2C_ErrorCallback+0x34>)
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	429a      	cmp	r2, r3
 8010fd4:	d108      	bne.n	8010fe8 <HAL_I2C_ErrorCallback+0x28>
  {
    if (hi2c->ErrorCode > 0)
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d004      	beq.n	8010fe8 <HAL_I2C_ErrorCallback+0x28>
    {
      i2c_errcount[_DEF_I2C1]++;
 8010fde:	4b06      	ldr	r3, [pc, #24]	; (8010ff8 <HAL_I2C_ErrorCallback+0x38>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	3301      	adds	r3, #1
 8010fe4:	4a04      	ldr	r2, [pc, #16]	; (8010ff8 <HAL_I2C_ErrorCallback+0x38>)
 8010fe6:	6013      	str	r3, [r2, #0]
    }
  }
}
 8010fe8:	bf00      	nop
 8010fea:	370c      	adds	r7, #12
 8010fec:	46bd      	mov	sp, r7
 8010fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff2:	4770      	bx	lr
 8010ff4:	200001a0 	.word	0x200001a0
 8010ff8:	20003638 	.word	0x20003638

08010ffc <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8011000:	4802      	ldr	r0, [pc, #8]	; (801100c <I2C1_ER_IRQHandler+0x10>)
 8011002:	f7f2 fcc7 	bl	8003994 <HAL_I2C_ER_IRQHandler>
}
 8011006:	bf00      	nop
 8011008:	bd80      	pop	{r7, pc}
 801100a:	bf00      	nop
 801100c:	20003644 	.word	0x20003644

08011010 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8011010:	b580      	push	{r7, lr}
 8011012:	b09e      	sub	sp, #120	; 0x78
 8011014:	af00      	add	r7, sp, #0
 8011016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011018:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801101c:	2200      	movs	r2, #0
 801101e:	601a      	str	r2, [r3, #0]
 8011020:	605a      	str	r2, [r3, #4]
 8011022:	609a      	str	r2, [r3, #8]
 8011024:	60da      	str	r2, [r3, #12]
 8011026:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011028:	f107 0310 	add.w	r3, r7, #16
 801102c:	2254      	movs	r2, #84	; 0x54
 801102e:	2100      	movs	r1, #0
 8011030:	4618      	mov	r0, r3
 8011032:	f002 f811 	bl	8013058 <memset>
  if(i2cHandle->Instance==I2C2)
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	4a21      	ldr	r2, [pc, #132]	; (80110c0 <HAL_I2C_MspInit+0xb0>)
 801103c:	4293      	cmp	r3, r2
 801103e:	d13a      	bne.n	80110b6 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8011040:	2380      	movs	r3, #128	; 0x80
 8011042:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8011044:	2300      	movs	r3, #0
 8011046:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8011048:	f107 0310 	add.w	r3, r7, #16
 801104c:	4618      	mov	r0, r3
 801104e:	f7f6 f8d5 	bl	80071fc <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011052:	4b1c      	ldr	r3, [pc, #112]	; (80110c4 <HAL_I2C_MspInit+0xb4>)
 8011054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011056:	4a1b      	ldr	r2, [pc, #108]	; (80110c4 <HAL_I2C_MspInit+0xb4>)
 8011058:	f043 0301 	orr.w	r3, r3, #1
 801105c:	64d3      	str	r3, [r2, #76]	; 0x4c
 801105e:	4b19      	ldr	r3, [pc, #100]	; (80110c4 <HAL_I2C_MspInit+0xb4>)
 8011060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011062:	f003 0301 	and.w	r3, r3, #1
 8011066:	60fb      	str	r3, [r7, #12]
 8011068:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 801106a:	f44f 7340 	mov.w	r3, #768	; 0x300
 801106e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011070:	2312      	movs	r3, #18
 8011072:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011074:	2300      	movs	r3, #0
 8011076:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011078:	2300      	movs	r3, #0
 801107a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 801107c:	2304      	movs	r3, #4
 801107e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011080:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011084:	4619      	mov	r1, r3
 8011086:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801108a:	f7f1 fcb5 	bl	80029f8 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 801108e:	4b0d      	ldr	r3, [pc, #52]	; (80110c4 <HAL_I2C_MspInit+0xb4>)
 8011090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011092:	4a0c      	ldr	r2, [pc, #48]	; (80110c4 <HAL_I2C_MspInit+0xb4>)
 8011094:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8011098:	6593      	str	r3, [r2, #88]	; 0x58
 801109a:	4b0a      	ldr	r3, [pc, #40]	; (80110c4 <HAL_I2C_MspInit+0xb4>)
 801109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801109e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80110a2:	60bb      	str	r3, [r7, #8]
 80110a4:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 80110a6:	2200      	movs	r2, #0
 80110a8:	2100      	movs	r1, #0
 80110aa:	2022      	movs	r0, #34	; 0x22
 80110ac:	f7f0 f941 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80110b0:	2022      	movs	r0, #34	; 0x22
 80110b2:	f7f0 f958 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80110b6:	bf00      	nop
 80110b8:	3778      	adds	r7, #120	; 0x78
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop
 80110c0:	40005800 	.word	0x40005800
 80110c4:	40021000 	.word	0x40021000

080110c8 <HAL_I2C_MspDeInit>:

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]

  if(i2cHandle->Instance==I2C2)
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	4a0d      	ldr	r2, [pc, #52]	; (801110c <HAL_I2C_MspDeInit+0x44>)
 80110d6:	4293      	cmp	r3, r2
 80110d8:	d114      	bne.n	8011104 <HAL_I2C_MspDeInit+0x3c>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80110da:	4b0d      	ldr	r3, [pc, #52]	; (8011110 <HAL_I2C_MspDeInit+0x48>)
 80110dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80110de:	4a0c      	ldr	r2, [pc, #48]	; (8011110 <HAL_I2C_MspDeInit+0x48>)
 80110e0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80110e4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 80110e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80110ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80110ee:	f7f1 fe05 	bl	8002cfc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9);
 80110f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80110f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80110fa:	f7f1 fdff 	bl	8002cfc <HAL_GPIO_DeInit>

    /* I2C2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(I2C2_ER_IRQn);
 80110fe:	2022      	movs	r0, #34	; 0x22
 8011100:	f7f0 f93f 	bl	8001382 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }
}
 8011104:	bf00      	nop
 8011106:	3708      	adds	r7, #8
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}
 801110c:	40005800 	.word	0x40005800
 8011110:	40021000 	.word	0x40021000

08011114 <cliI2C>:


#ifdef _USE_HW_CLI
void cliI2C(cli_args_t *args)
{
 8011114:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011116:	b0af      	sub	sp, #188	; 0xbc
 8011118:	af02      	add	r7, sp, #8
 801111a:	6078      	str	r0, [r7, #4]
  bool ret = true;
 801111c:	2301      	movs	r3, #1
 801111e:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
  uint32_t i;
  uint8_t i2c_data[128];
  uint32_t pre_time;


  if (args->argc == 2)
 8011122:	687b      	ldr	r3, [r7, #4]
 8011124:	881b      	ldrh	r3, [r3, #0]
 8011126:	2b02      	cmp	r3, #2
 8011128:	d166      	bne.n	80111f8 <cliI2C+0xe4>
  {
    print_ch = (uint16_t) args->getData(1);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	689b      	ldr	r3, [r3, #8]
 801112e:	2001      	movs	r0, #1
 8011130:	4798      	blx	r3
 8011132:	4603      	mov	r3, r0
 8011134:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 8011138:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801113c:	2201      	movs	r2, #1
 801113e:	2101      	movs	r1, #1
 8011140:	4618      	mov	r0, r3
 8011142:	f7ff fc25 	bl	8010990 <constrain>
 8011146:	4603      	mov	r3, r0
 8011148:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    print_ch -= 1;
 801114c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011150:	3b01      	subs	r3, #1
 8011152:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    if(args->isStr(0, "scan") == true)
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	695b      	ldr	r3, [r3, #20]
 801115a:	49bd      	ldr	r1, [pc, #756]	; (8011450 <cliI2C+0x33c>)
 801115c:	2000      	movs	r0, #0
 801115e:	4798      	blx	r3
 8011160:	4603      	mov	r3, r0
 8011162:	2b00      	cmp	r3, #0
 8011164:	d022      	beq.n	80111ac <cliI2C+0x98>
    {
      for (i=0x00; i<= 0x7F; i++)
 8011166:	2300      	movs	r3, #0
 8011168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801116c:	e019      	b.n	80111a2 <cliI2C+0x8e>
      {
        if (i2cIsDeviceReady(print_ch, i) == true)
 801116e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011172:	b2da      	uxtb	r2, r3
 8011174:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011178:	4611      	mov	r1, r2
 801117a:	4618      	mov	r0, r3
 801117c:	f7ff fd50 	bl	8010c20 <i2cIsDeviceReady>
 8011180:	4603      	mov	r3, r0
 8011182:	2b00      	cmp	r3, #0
 8011184:	d008      	beq.n	8011198 <cliI2C+0x84>
        {
          cliPrintf("I2C CH%d Addr 0x%X : OK\n", print_ch+1, i);
 8011186:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801118a:	3301      	adds	r3, #1
 801118c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011190:	4619      	mov	r1, r3
 8011192:	48b0      	ldr	r0, [pc, #704]	; (8011454 <cliI2C+0x340>)
 8011194:	f7fb f9d8 	bl	800c548 <cliPrintf>
      for (i=0x00; i<= 0x7F; i++)
 8011198:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801119c:	3301      	adds	r3, #1
 801119e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80111a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80111a6:	2b7f      	cmp	r3, #127	; 0x7f
 80111a8:	d9e1      	bls.n	801116e <cliI2C+0x5a>
 80111aa:	e1bf      	b.n	801152c <cliI2C+0x418>
        }
      }
    }
    else if(args->isStr(0, "open") == true)
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	695b      	ldr	r3, [r3, #20]
 80111b0:	49a9      	ldr	r1, [pc, #676]	; (8011458 <cliI2C+0x344>)
 80111b2:	2000      	movs	r0, #0
 80111b4:	4798      	blx	r3
 80111b6:	4603      	mov	r3, r0
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	f000 81b7 	beq.w	801152c <cliI2C+0x418>
    {
      i2c_ret = i2cOpen(print_ch, I2C_FREQ_400KHz);
 80111be:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80111c2:	2101      	movs	r1, #1
 80111c4:	4618      	mov	r0, r3
 80111c6:	f7ff fc29 	bl	8010a1c <i2cOpen>
 80111ca:	4603      	mov	r3, r0
 80111cc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      if (i2c_ret == true)
 80111d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d007      	beq.n	80111e8 <cliI2C+0xd4>
      {
        cliPrintf("I2C CH%d Open OK\n", print_ch + 1);
 80111d8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80111dc:	3301      	adds	r3, #1
 80111de:	4619      	mov	r1, r3
 80111e0:	489e      	ldr	r0, [pc, #632]	; (801145c <cliI2C+0x348>)
 80111e2:	f7fb f9b1 	bl	800c548 <cliPrintf>
 80111e6:	e1a1      	b.n	801152c <cliI2C+0x418>
      }
      else
      {
        cliPrintf("I2C CH%d Open Fail\n", print_ch + 1);
 80111e8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80111ec:	3301      	adds	r3, #1
 80111ee:	4619      	mov	r1, r3
 80111f0:	489b      	ldr	r0, [pc, #620]	; (8011460 <cliI2C+0x34c>)
 80111f2:	f7fb f9a9 	bl	800c548 <cliPrintf>
 80111f6:	e199      	b.n	801152c <cliI2C+0x418>
      }
    }
  }
  else if (args->argc == 5)
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	881b      	ldrh	r3, [r3, #0]
 80111fc:	2b05      	cmp	r3, #5
 80111fe:	f040 8192 	bne.w	8011526 <cliI2C+0x412>
  {
    print_ch = (uint16_t) args->getData(1);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	689b      	ldr	r3, [r3, #8]
 8011206:	2001      	movs	r0, #1
 8011208:	4798      	blx	r3
 801120a:	4603      	mov	r3, r0
 801120c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 8011210:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011214:	2201      	movs	r2, #1
 8011216:	2101      	movs	r1, #1
 8011218:	4618      	mov	r0, r3
 801121a:	f7ff fbb9 	bl	8010990 <constrain>
 801121e:	4603      	mov	r3, r0
 8011220:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    dev_addr = (uint16_t) args->getData(2);
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	689b      	ldr	r3, [r3, #8]
 8011228:	2002      	movs	r0, #2
 801122a:	4798      	blx	r3
 801122c:	4603      	mov	r3, r0
 801122e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
    reg_addr = (uint16_t) args->getData(3);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	689b      	ldr	r3, [r3, #8]
 8011236:	2003      	movs	r0, #3
 8011238:	4798      	blx	r3
 801123a:	4603      	mov	r3, r0
 801123c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    length   = (uint16_t) args->getData(4);
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	689b      	ldr	r3, [r3, #8]
 8011244:	2004      	movs	r0, #4
 8011246:	4798      	blx	r3
 8011248:	4603      	mov	r3, r0
 801124a:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    ch       = print_ch - 1;
 801124e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011252:	3b01      	subs	r3, #1
 8011254:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

    if(args->isStr(0, "read") == true)
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	695b      	ldr	r3, [r3, #20]
 801125c:	4981      	ldr	r1, [pc, #516]	; (8011464 <cliI2C+0x350>)
 801125e:	2000      	movs	r0, #0
 8011260:	4798      	blx	r3
 8011262:	4603      	mov	r3, r0
 8011264:	2b00      	cmp	r3, #0
 8011266:	d03a      	beq.n	80112de <cliI2C+0x1ca>
    {
      for (i=0; i<length; i++)
 8011268:	2300      	movs	r3, #0
 801126a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801126e:	e02f      	b.n	80112d0 <cliI2C+0x1bc>
      {
        i2c_ret = i2cReadByte(ch, dev_addr, reg_addr+i, i2c_data, 100);
 8011270:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011274:	b29a      	uxth	r2, r3
 8011276:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 801127a:	4413      	add	r3, r2
 801127c:	b29a      	uxth	r2, r3
 801127e:	f107 0314 	add.w	r3, r7, #20
 8011282:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8011286:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 801128a:	2464      	movs	r4, #100	; 0x64
 801128c:	9400      	str	r4, [sp, #0]
 801128e:	f7ff fced 	bl	8010c6c <i2cReadByte>
 8011292:	4603      	mov	r3, r0
 8011294:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

        if (i2c_ret == true)
 8011298:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801129c:	2b00      	cmp	r3, #0
 801129e:	d00b      	beq.n	80112b8 <cliI2C+0x1a4>
        {
          cliPrintf("%d I2C - 0x%02X : 0x%02X\n", print_ch, reg_addr+i, i2c_data[0]);
 80112a0:	f897 10a7 	ldrb.w	r1, [r7, #167]	; 0xa7
 80112a4:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 80112a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80112ac:	441a      	add	r2, r3
 80112ae:	7d3b      	ldrb	r3, [r7, #20]
 80112b0:	486d      	ldr	r0, [pc, #436]	; (8011468 <cliI2C+0x354>)
 80112b2:	f7fb f949 	bl	800c548 <cliPrintf>
 80112b6:	e006      	b.n	80112c6 <cliI2C+0x1b2>
        }
        else
        {
          cliPrintf("%d I2C - Fail \n", print_ch);
 80112b8:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80112bc:	4619      	mov	r1, r3
 80112be:	486b      	ldr	r0, [pc, #428]	; (801146c <cliI2C+0x358>)
 80112c0:	f7fb f942 	bl	800c548 <cliPrintf>
          break;
 80112c4:	e132      	b.n	801152c <cliI2C+0x418>
      for (i=0; i<length; i++)
 80112c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80112ca:	3301      	adds	r3, #1
 80112cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80112d0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80112d4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80112d8:	429a      	cmp	r2, r3
 80112da:	d3c9      	bcc.n	8011270 <cliI2C+0x15c>
 80112dc:	e126      	b.n	801152c <cliI2C+0x418>
        }
      }
    }
    else if(args->isStr(0, "write") == true)
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	695b      	ldr	r3, [r3, #20]
 80112e2:	4963      	ldr	r1, [pc, #396]	; (8011470 <cliI2C+0x35c>)
 80112e4:	2000      	movs	r0, #0
 80112e6:	4798      	blx	r3
 80112e8:	4603      	mov	r3, r0
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d032      	beq.n	8011354 <cliI2C+0x240>
    {
      pre_time = millis();
 80112ee:	f7fa fa36 	bl	800b75e <millis>
 80112f2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
      i2c_ret = i2cWriteByte(ch, dev_addr, reg_addr, (uint8_t)length, 100);
 80112f6:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80112fa:	b2db      	uxtb	r3, r3
 80112fc:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8011300:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8011304:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8011308:	2464      	movs	r4, #100	; 0x64
 801130a:	9400      	str	r4, [sp, #0]
 801130c:	f7ff fd56 	bl	8010dbc <i2cWriteByte>
 8011310:	4603      	mov	r3, r0
 8011312:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

      if (i2c_ret == true)
 8011316:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801131a:	2b00      	cmp	r3, #0
 801131c:	d013      	beq.n	8011346 <cliI2C+0x232>
      {
        cliPrintf("%d I2C - 0x%02X : 0x%02X, %d ms\n", print_ch, reg_addr, length, millis()-pre_time);
 801131e:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8011322:	f8b7 50a2 	ldrh.w	r5, [r7, #162]	; 0xa2
 8011326:	f8b7 60a0 	ldrh.w	r6, [r7, #160]	; 0xa0
 801132a:	f7fa fa18 	bl	800b75e <millis>
 801132e:	4602      	mov	r2, r0
 8011330:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011334:	1ad3      	subs	r3, r2, r3
 8011336:	9300      	str	r3, [sp, #0]
 8011338:	4633      	mov	r3, r6
 801133a:	462a      	mov	r2, r5
 801133c:	4621      	mov	r1, r4
 801133e:	484d      	ldr	r0, [pc, #308]	; (8011474 <cliI2C+0x360>)
 8011340:	f7fb f902 	bl	800c548 <cliPrintf>
 8011344:	e0f2      	b.n	801152c <cliI2C+0x418>
      }
      else
      {
        cliPrintf("%d I2C - Fail \n", print_ch);
 8011346:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801134a:	4619      	mov	r1, r3
 801134c:	4847      	ldr	r0, [pc, #284]	; (801146c <cliI2C+0x358>)
 801134e:	f7fb f8fb 	bl	800c548 <cliPrintf>
 8011352:	e0eb      	b.n	801152c <cliI2C+0x418>
      }
    }
    else if(args->isStr(0, "read16") == true)
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	695b      	ldr	r3, [r3, #20]
 8011358:	4947      	ldr	r1, [pc, #284]	; (8011478 <cliI2C+0x364>)
 801135a:	2000      	movs	r0, #0
 801135c:	4798      	blx	r3
 801135e:	4603      	mov	r3, r0
 8011360:	2b00      	cmp	r3, #0
 8011362:	d03a      	beq.n	80113da <cliI2C+0x2c6>
    {
      for (i=0; i<length; i++)
 8011364:	2300      	movs	r3, #0
 8011366:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801136a:	e02f      	b.n	80113cc <cliI2C+0x2b8>
      {
       i2c_ret = i2cRead16Byte(ch, dev_addr, reg_addr+i, i2c_data, 100);
 801136c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011370:	b29a      	uxth	r2, r3
 8011372:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8011376:	4413      	add	r3, r2
 8011378:	b29a      	uxth	r2, r3
 801137a:	f107 0314 	add.w	r3, r7, #20
 801137e:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8011382:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8011386:	2464      	movs	r4, #100	; 0x64
 8011388:	9400      	str	r4, [sp, #0]
 801138a:	f7ff fcc3 	bl	8010d14 <i2cRead16Byte>
 801138e:	4603      	mov	r3, r0
 8011390:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

       if (i2c_ret == true)
 8011394:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8011398:	2b00      	cmp	r3, #0
 801139a:	d00b      	beq.n	80113b4 <cliI2C+0x2a0>
       {
         cliPrintf("%d I2C - 0x%02X : 0x%02X\n", print_ch, reg_addr+i, i2c_data[0]);
 801139c:	f897 10a7 	ldrb.w	r1, [r7, #167]	; 0xa7
 80113a0:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 80113a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80113a8:	441a      	add	r2, r3
 80113aa:	7d3b      	ldrb	r3, [r7, #20]
 80113ac:	482e      	ldr	r0, [pc, #184]	; (8011468 <cliI2C+0x354>)
 80113ae:	f7fb f8cb 	bl	800c548 <cliPrintf>
 80113b2:	e006      	b.n	80113c2 <cliI2C+0x2ae>
       }
       else
       {
         cliPrintf("%d I2C - Fail \n", print_ch);
 80113b4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80113b8:	4619      	mov	r1, r3
 80113ba:	482c      	ldr	r0, [pc, #176]	; (801146c <cliI2C+0x358>)
 80113bc:	f7fb f8c4 	bl	800c548 <cliPrintf>
         break;
 80113c0:	e0b4      	b.n	801152c <cliI2C+0x418>
      for (i=0; i<length; i++)
 80113c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80113c6:	3301      	adds	r3, #1
 80113c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80113cc:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80113d0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80113d4:	429a      	cmp	r2, r3
 80113d6:	d3c9      	bcc.n	801136c <cliI2C+0x258>
 80113d8:	e0a8      	b.n	801152c <cliI2C+0x418>
       }
      }
    }
    else if(args->isStr(0, "write16") == true)
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	695b      	ldr	r3, [r3, #20]
 80113de:	4927      	ldr	r1, [pc, #156]	; (801147c <cliI2C+0x368>)
 80113e0:	2000      	movs	r0, #0
 80113e2:	4798      	blx	r3
 80113e4:	4603      	mov	r3, r0
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d04c      	beq.n	8011484 <cliI2C+0x370>
    {
      pre_time = millis();
 80113ea:	f7fa f9b8 	bl	800b75e <millis>
 80113ee:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
      i2c_ret = i2cWrite16Byte(ch, dev_addr, reg_addr, (uint8_t)length, 100);
 80113f2:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80113f6:	b2db      	uxtb	r3, r3
 80113f8:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 80113fc:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8011400:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8011404:	2464      	movs	r4, #100	; 0x64
 8011406:	9400      	str	r4, [sp, #0]
 8011408:	f7ff fd32 	bl	8010e70 <i2cWrite16Byte>
 801140c:	4603      	mov	r3, r0
 801140e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

      if (i2c_ret == true)
 8011412:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8011416:	2b00      	cmp	r3, #0
 8011418:	d013      	beq.n	8011442 <cliI2C+0x32e>
      {
        cliPrintf("%d I2C - 0x%02X : 0x%02X, %d us\n", print_ch, reg_addr, length, millis()-pre_time);
 801141a:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 801141e:	f8b7 50a2 	ldrh.w	r5, [r7, #162]	; 0xa2
 8011422:	f8b7 60a0 	ldrh.w	r6, [r7, #160]	; 0xa0
 8011426:	f7fa f99a 	bl	800b75e <millis>
 801142a:	4602      	mov	r2, r0
 801142c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011430:	1ad3      	subs	r3, r2, r3
 8011432:	9300      	str	r3, [sp, #0]
 8011434:	4633      	mov	r3, r6
 8011436:	462a      	mov	r2, r5
 8011438:	4621      	mov	r1, r4
 801143a:	4811      	ldr	r0, [pc, #68]	; (8011480 <cliI2C+0x36c>)
 801143c:	f7fb f884 	bl	800c548 <cliPrintf>
 8011440:	e074      	b.n	801152c <cliI2C+0x418>
      }
      else
      {
        cliPrintf("%d I2C - Fail \n", print_ch);
 8011442:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011446:	4619      	mov	r1, r3
 8011448:	4808      	ldr	r0, [pc, #32]	; (801146c <cliI2C+0x358>)
 801144a:	f7fb f87d 	bl	800c548 <cliPrintf>
 801144e:	e06d      	b.n	801152c <cliI2C+0x418>
 8011450:	080156e4 	.word	0x080156e4
 8011454:	080156ec 	.word	0x080156ec
 8011458:	08015708 	.word	0x08015708
 801145c:	08015710 	.word	0x08015710
 8011460:	08015724 	.word	0x08015724
 8011464:	08015738 	.word	0x08015738
 8011468:	08015740 	.word	0x08015740
 801146c:	0801575c 	.word	0x0801575c
 8011470:	0801576c 	.word	0x0801576c
 8011474:	08015774 	.word	0x08015774
 8011478:	08015798 	.word	0x08015798
 801147c:	080157a0 	.word	0x080157a0
 8011480:	080157a8 	.word	0x080157a8
      }
    }
    else if(args->isStr(0, "writeData") == true)
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	695b      	ldr	r3, [r3, #20]
 8011488:	4939      	ldr	r1, [pc, #228]	; (8011570 <cliI2C+0x45c>)
 801148a:	2000      	movs	r0, #0
 801148c:	4798      	blx	r3
 801148e:	4603      	mov	r3, r0
 8011490:	2b00      	cmp	r3, #0
 8011492:	d044      	beq.n	801151e <cliI2C+0x40a>
    {
      pre_time = millis();
 8011494:	f7fa f963 	bl	800b75e <millis>
 8011498:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
      uint8_t tx_buf[5];


      tx_buf[0] = reg_addr >> 8;
 801149c:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80114a0:	0a1b      	lsrs	r3, r3, #8
 80114a2:	b29b      	uxth	r3, r3
 80114a4:	b2db      	uxtb	r3, r3
 80114a6:	733b      	strb	r3, [r7, #12]
      tx_buf[1] = reg_addr >> 0;
 80114a8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80114ac:	b2db      	uxtb	r3, r3
 80114ae:	737b      	strb	r3, [r7, #13]
      tx_buf[2] = (uint8_t)length;
 80114b0:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80114b4:	b2db      	uxtb	r3, r3
 80114b6:	73bb      	strb	r3, [r7, #14]
      tx_buf[3] = 0 - ((uint8_t)length);
 80114b8:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80114bc:	b2db      	uxtb	r3, r3
 80114be:	425b      	negs	r3, r3
 80114c0:	b2db      	uxtb	r3, r3
 80114c2:	73fb      	strb	r3, [r7, #15]

      i2c_ret = i2cWriteData(ch, dev_addr, tx_buf, 3, 100);
 80114c4:	f107 020c 	add.w	r2, r7, #12
 80114c8:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 80114cc:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 80114d0:	2364      	movs	r3, #100	; 0x64
 80114d2:	9300      	str	r3, [sp, #0]
 80114d4:	2303      	movs	r3, #3
 80114d6:	f7ff fd25 	bl	8010f24 <i2cWriteData>
 80114da:	4603      	mov	r3, r0
 80114dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

      if (i2c_ret == true)
 80114e0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d013      	beq.n	8011510 <cliI2C+0x3fc>
      {
        cliPrintf("%d I2C - 0x%02X : 0x%02X, %d us\n", print_ch, reg_addr, length, millis()-pre_time);
 80114e8:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 80114ec:	f8b7 50a2 	ldrh.w	r5, [r7, #162]	; 0xa2
 80114f0:	f8b7 60a0 	ldrh.w	r6, [r7, #160]	; 0xa0
 80114f4:	f7fa f933 	bl	800b75e <millis>
 80114f8:	4602      	mov	r2, r0
 80114fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80114fe:	1ad3      	subs	r3, r2, r3
 8011500:	9300      	str	r3, [sp, #0]
 8011502:	4633      	mov	r3, r6
 8011504:	462a      	mov	r2, r5
 8011506:	4621      	mov	r1, r4
 8011508:	481a      	ldr	r0, [pc, #104]	; (8011574 <cliI2C+0x460>)
 801150a:	f7fb f81d 	bl	800c548 <cliPrintf>
 801150e:	e00d      	b.n	801152c <cliI2C+0x418>
      }
      else
      {
        cliPrintf("%d I2C - Fail \n", print_ch);
 8011510:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011514:	4619      	mov	r1, r3
 8011516:	4818      	ldr	r0, [pc, #96]	; (8011578 <cliI2C+0x464>)
 8011518:	f7fb f816 	bl	800c548 <cliPrintf>
 801151c:	e006      	b.n	801152c <cliI2C+0x418>
      }
    }
    else
    {
      ret = false;
 801151e:	2300      	movs	r3, #0
 8011520:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8011524:	e002      	b.n	801152c <cliI2C+0x418>
    }
  }
  else
  {
    ret = false;
 8011526:	2300      	movs	r3, #0
 8011528:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
  }

  if (ret == false)
 801152c:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8011530:	f083 0301 	eor.w	r3, r3, #1
 8011534:	b2db      	uxtb	r3, r3
 8011536:	2b00      	cmp	r3, #0
 8011538:	d016      	beq.n	8011568 <cliI2C+0x454>
  {
    cliPrintf( "i2c scan channel[1~%d]\n", I2C_MAX_CH);
 801153a:	2101      	movs	r1, #1
 801153c:	480f      	ldr	r0, [pc, #60]	; (801157c <cliI2C+0x468>)
 801153e:	f7fb f803 	bl	800c548 <cliPrintf>
    cliPrintf( "i2c open channel[1~%d]\n", I2C_MAX_CH);
 8011542:	2101      	movs	r1, #1
 8011544:	480e      	ldr	r0, [pc, #56]	; (8011580 <cliI2C+0x46c>)
 8011546:	f7fa ffff 	bl	800c548 <cliPrintf>
    cliPrintf( "i2c read channel dev_addr reg_addr length\n");
 801154a:	480e      	ldr	r0, [pc, #56]	; (8011584 <cliI2C+0x470>)
 801154c:	f7fa fffc 	bl	800c548 <cliPrintf>
    cliPrintf( "i2c write channel dev_addr reg_addr data\n");
 8011550:	480d      	ldr	r0, [pc, #52]	; (8011588 <cliI2C+0x474>)
 8011552:	f7fa fff9 	bl	800c548 <cliPrintf>
    cliPrintf( "i2c read16 channel dev_addr reg_addr length\n");
 8011556:	480d      	ldr	r0, [pc, #52]	; (801158c <cliI2C+0x478>)
 8011558:	f7fa fff6 	bl	800c548 <cliPrintf>
    cliPrintf( "i2c write16 channel dev_addr reg_addr data\n");
 801155c:	480c      	ldr	r0, [pc, #48]	; (8011590 <cliI2C+0x47c>)
 801155e:	f7fa fff3 	bl	800c548 <cliPrintf>
    cliPrintf( "i2c writeData channel dev_addr reg_addr data\n");
 8011562:	480c      	ldr	r0, [pc, #48]	; (8011594 <cliI2C+0x480>)
 8011564:	f7fa fff0 	bl	800c548 <cliPrintf>
  }
}
 8011568:	bf00      	nop
 801156a:	37b4      	adds	r7, #180	; 0xb4
 801156c:	46bd      	mov	sp, r7
 801156e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011570:	080157cc 	.word	0x080157cc
 8011574:	080157a8 	.word	0x080157a8
 8011578:	0801575c 	.word	0x0801575c
 801157c:	080157d8 	.word	0x080157d8
 8011580:	080157f0 	.word	0x080157f0
 8011584:	08015808 	.word	0x08015808
 8011588:	08015834 	.word	0x08015834
 801158c:	08015860 	.word	0x08015860
 8011590:	08015890 	.word	0x08015890
 8011594:	080158bc 	.word	0x080158bc

08011598 <uartInit>:


static uart_tbl_t uart_tbl[UART_MAX_CH];

bool uartInit(void)
{
 8011598:	b480      	push	{r7}
 801159a:	b083      	sub	sp, #12
 801159c:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 801159e:	2300      	movs	r3, #0
 80115a0:	607b      	str	r3, [r7, #4]
 80115a2:	e016      	b.n	80115d2 <uartInit+0x3a>
  {
    uart_tbl[i].is_open = false;
 80115a4:	4a10      	ldr	r2, [pc, #64]	; (80115e8 <uartInit+0x50>)
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80115ac:	fb01 f303 	mul.w	r3, r1, r3
 80115b0:	4413      	add	r3, r2
 80115b2:	2200      	movs	r2, #0
 80115b4:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].baud = 57600;
 80115b6:	4a0c      	ldr	r2, [pc, #48]	; (80115e8 <uartInit+0x50>)
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80115be:	fb01 f303 	mul.w	r3, r1, r3
 80115c2:	4413      	add	r3, r2
 80115c4:	3304      	adds	r3, #4
 80115c6:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 80115ca:	601a      	str	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	3301      	adds	r3, #1
 80115d0:	607b      	str	r3, [r7, #4]
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	2b01      	cmp	r3, #1
 80115d6:	dde5      	ble.n	80115a4 <uartInit+0xc>
  }

  return true;
 80115d8:	2301      	movs	r3, #1
}
 80115da:	4618      	mov	r0, r3
 80115dc:	370c      	adds	r7, #12
 80115de:	46bd      	mov	sp, r7
 80115e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115e4:	4770      	bx	lr
 80115e6:	bf00      	nop
 80115e8:	200038b4 	.word	0x200038b4

080115ec <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b086      	sub	sp, #24
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	4603      	mov	r3, r0
 80115f4:	6039      	str	r1, [r7, #0]
 80115f6:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 80115f8:	2300      	movs	r3, #0
 80115fa:	75fb      	strb	r3, [r7, #23]


  switch(ch)
 80115fc:	79fb      	ldrb	r3, [r7, #7]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d002      	beq.n	8011608 <uartOpen+0x1c>
 8011602:	2b02      	cmp	r3, #2
 8011604:	d020      	beq.n	8011648 <uartOpen+0x5c>
 8011606:	e12c      	b.n	8011862 <uartOpen+0x276>
  {
    case _DEF_USB:
      uart_tbl[ch].type    = UART_HW_TYPE_USB;
 8011608:	79fb      	ldrb	r3, [r7, #7]
 801160a:	4a9a      	ldr	r2, [pc, #616]	; (8011874 <uartOpen+0x288>)
 801160c:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8011610:	fb01 f303 	mul.w	r3, r1, r3
 8011614:	4413      	add	r3, r2
 8011616:	3308      	adds	r3, #8
 8011618:	2201      	movs	r2, #1
 801161a:	701a      	strb	r2, [r3, #0]
      uart_tbl[ch].baud    = baud;
 801161c:	79fb      	ldrb	r3, [r7, #7]
 801161e:	4a95      	ldr	r2, [pc, #596]	; (8011874 <uartOpen+0x288>)
 8011620:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8011624:	fb01 f303 	mul.w	r3, r1, r3
 8011628:	4413      	add	r3, r2
 801162a:	3304      	adds	r3, #4
 801162c:	683a      	ldr	r2, [r7, #0]
 801162e:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].is_open = true;
 8011630:	79fb      	ldrb	r3, [r7, #7]
 8011632:	4a90      	ldr	r2, [pc, #576]	; (8011874 <uartOpen+0x288>)
 8011634:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8011638:	fb01 f303 	mul.w	r3, r1, r3
 801163c:	4413      	add	r3, r2
 801163e:	2201      	movs	r2, #1
 8011640:	701a      	strb	r2, [r3, #0]

      ret = true;
 8011642:	2301      	movs	r3, #1
 8011644:	75fb      	strb	r3, [r7, #23]
      break;
 8011646:	e10f      	b.n	8011868 <uartOpen+0x27c>

    case _DEF_UART2:
    	uart_tbl[ch].p_huart = &huart2;
 8011648:	79fb      	ldrb	r3, [r7, #7]
 801164a:	4a8a      	ldr	r2, [pc, #552]	; (8011874 <uartOpen+0x288>)
 801164c:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8011650:	fb01 f303 	mul.w	r3, r1, r3
 8011654:	4413      	add	r3, r2
 8011656:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 801165a:	4a87      	ldr	r2, [pc, #540]	; (8011878 <uartOpen+0x28c>)
 801165c:	601a      	str	r2, [r3, #0]
    	uart_tbl[ch].p_huart->Instance = USART2;
 801165e:	79fb      	ldrb	r3, [r7, #7]
 8011660:	4a84      	ldr	r2, [pc, #528]	; (8011874 <uartOpen+0x288>)
 8011662:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8011666:	fb01 f303 	mul.w	r3, r1, r3
 801166a:	4413      	add	r3, r2
 801166c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	4a82      	ldr	r2, [pc, #520]	; (801187c <uartOpen+0x290>)
 8011674:	601a      	str	r2, [r3, #0]
    	uart_tbl[ch].p_huart->Init.BaudRate = baud;
 8011676:	79fb      	ldrb	r3, [r7, #7]
 8011678:	4a7e      	ldr	r2, [pc, #504]	; (8011874 <uartOpen+0x288>)
 801167a:	f44f 6185 	mov.w	r1, #1064	; 0x428
 801167e:	fb01 f303 	mul.w	r3, r1, r3
 8011682:	4413      	add	r3, r2
 8011684:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	683a      	ldr	r2, [r7, #0]
 801168c:	605a      	str	r2, [r3, #4]
    	uart_tbl[ch].p_huart->Init.WordLength = UART_WORDLENGTH_8B;
 801168e:	79fb      	ldrb	r3, [r7, #7]
 8011690:	4a78      	ldr	r2, [pc, #480]	; (8011874 <uartOpen+0x288>)
 8011692:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8011696:	fb01 f303 	mul.w	r3, r1, r3
 801169a:	4413      	add	r3, r2
 801169c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	2200      	movs	r2, #0
 80116a4:	609a      	str	r2, [r3, #8]
    	uart_tbl[ch].p_huart->Init.StopBits = UART_STOPBITS_1;
 80116a6:	79fb      	ldrb	r3, [r7, #7]
 80116a8:	4a72      	ldr	r2, [pc, #456]	; (8011874 <uartOpen+0x288>)
 80116aa:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80116ae:	fb01 f303 	mul.w	r3, r1, r3
 80116b2:	4413      	add	r3, r2
 80116b4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	2200      	movs	r2, #0
 80116bc:	60da      	str	r2, [r3, #12]
    	uart_tbl[ch].p_huart->Init.Parity = UART_PARITY_NONE;
 80116be:	79fb      	ldrb	r3, [r7, #7]
 80116c0:	4a6c      	ldr	r2, [pc, #432]	; (8011874 <uartOpen+0x288>)
 80116c2:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80116c6:	fb01 f303 	mul.w	r3, r1, r3
 80116ca:	4413      	add	r3, r2
 80116cc:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	2200      	movs	r2, #0
 80116d4:	611a      	str	r2, [r3, #16]
    	uart_tbl[ch].p_huart->Init.Mode = UART_MODE_TX_RX;
 80116d6:	79fb      	ldrb	r3, [r7, #7]
 80116d8:	4a66      	ldr	r2, [pc, #408]	; (8011874 <uartOpen+0x288>)
 80116da:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80116de:	fb01 f303 	mul.w	r3, r1, r3
 80116e2:	4413      	add	r3, r2
 80116e4:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	220c      	movs	r2, #12
 80116ec:	615a      	str	r2, [r3, #20]
    	uart_tbl[ch].p_huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80116ee:	79fb      	ldrb	r3, [r7, #7]
 80116f0:	4a60      	ldr	r2, [pc, #384]	; (8011874 <uartOpen+0x288>)
 80116f2:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80116f6:	fb01 f303 	mul.w	r3, r1, r3
 80116fa:	4413      	add	r3, r2
 80116fc:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	2200      	movs	r2, #0
 8011704:	619a      	str	r2, [r3, #24]
    	uart_tbl[ch].p_huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8011706:	79fb      	ldrb	r3, [r7, #7]
 8011708:	4a5a      	ldr	r2, [pc, #360]	; (8011874 <uartOpen+0x288>)
 801170a:	f44f 6185 	mov.w	r1, #1064	; 0x428
 801170e:	fb01 f303 	mul.w	r3, r1, r3
 8011712:	4413      	add	r3, r2
 8011714:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	2200      	movs	r2, #0
 801171c:	61da      	str	r2, [r3, #28]
    	uart_tbl[ch].p_huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801171e:	79fb      	ldrb	r3, [r7, #7]
 8011720:	4a54      	ldr	r2, [pc, #336]	; (8011874 <uartOpen+0x288>)
 8011722:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8011726:	fb01 f303 	mul.w	r3, r1, r3
 801172a:	4413      	add	r3, r2
 801172c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	2200      	movs	r2, #0
 8011734:	621a      	str	r2, [r3, #32]
    	uart_tbl[ch].p_huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8011736:	79fb      	ldrb	r3, [r7, #7]
 8011738:	4a4e      	ldr	r2, [pc, #312]	; (8011874 <uartOpen+0x288>)
 801173a:	f44f 6185 	mov.w	r1, #1064	; 0x428
 801173e:	fb01 f303 	mul.w	r3, r1, r3
 8011742:	4413      	add	r3, r2
 8011744:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	2200      	movs	r2, #0
 801174c:	625a      	str	r2, [r3, #36]	; 0x24
    	uart_tbl[ch].p_huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801174e:	79fb      	ldrb	r3, [r7, #7]
 8011750:	4a48      	ldr	r2, [pc, #288]	; (8011874 <uartOpen+0x288>)
 8011752:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8011756:	fb01 f303 	mul.w	r3, r1, r3
 801175a:	4413      	add	r3, r2
 801175c:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	2200      	movs	r2, #0
 8011764:	629a      	str	r2, [r3, #40]	; 0x28

      qbufferCreate(&qbuffer[ch], (uint8_t *)&rx_buf[0], 256);
 8011766:	79fa      	ldrb	r2, [r7, #7]
 8011768:	4613      	mov	r3, r2
 801176a:	009b      	lsls	r3, r3, #2
 801176c:	4413      	add	r3, r2
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	4a43      	ldr	r2, [pc, #268]	; (8011880 <uartOpen+0x294>)
 8011772:	4413      	add	r3, r2
 8011774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011778:	4942      	ldr	r1, [pc, #264]	; (8011884 <uartOpen+0x298>)
 801177a:	4618      	mov	r0, r3
 801177c:	f7fb fac0 	bl	800cd00 <qbufferCreate>

      __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8011780:	4b41      	ldr	r3, [pc, #260]	; (8011888 <uartOpen+0x29c>)
 8011782:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011784:	4a40      	ldr	r2, [pc, #256]	; (8011888 <uartOpen+0x29c>)
 8011786:	f043 0304 	orr.w	r3, r3, #4
 801178a:	6493      	str	r3, [r2, #72]	; 0x48
 801178c:	4b3e      	ldr	r3, [pc, #248]	; (8011888 <uartOpen+0x29c>)
 801178e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011790:	f003 0304 	and.w	r3, r3, #4
 8011794:	613b      	str	r3, [r7, #16]
 8011796:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_DMA1_CLK_ENABLE();
 8011798:	4b3b      	ldr	r3, [pc, #236]	; (8011888 <uartOpen+0x29c>)
 801179a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801179c:	4a3a      	ldr	r2, [pc, #232]	; (8011888 <uartOpen+0x29c>)
 801179e:	f043 0301 	orr.w	r3, r3, #1
 80117a2:	6493      	str	r3, [r2, #72]	; 0x48
 80117a4:	4b38      	ldr	r3, [pc, #224]	; (8011888 <uartOpen+0x29c>)
 80117a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80117a8:	f003 0301 	and.w	r3, r3, #1
 80117ac:	60fb      	str	r3, [r7, #12]
 80117ae:	68fb      	ldr	r3, [r7, #12]
      HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80117b0:	2200      	movs	r2, #0
 80117b2:	2100      	movs	r1, #0
 80117b4:	200b      	movs	r0, #11
 80117b6:	f7ef fdbc 	bl	8001332 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80117ba:	200b      	movs	r0, #11
 80117bc:	f7ef fdd3 	bl	8001366 <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart2) != HAL_OK)
 80117c0:	482d      	ldr	r0, [pc, #180]	; (8011878 <uartOpen+0x28c>)
 80117c2:	f7f5 ff69 	bl	8007698 <HAL_UART_Init>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d002      	beq.n	80117d2 <uartOpen+0x1e6>
      {
        ret = false;
 80117cc:	2300      	movs	r3, #0
 80117ce:	75fb      	strb	r3, [r7, #23]
 80117d0:	e03b      	b.n	801184a <uartOpen+0x25e>
      }else
      {
        ret = true;
 80117d2:	2301      	movs	r3, #1
 80117d4:	75fb      	strb	r3, [r7, #23]
        uart_tbl[ch].is_open = true;
 80117d6:	79fb      	ldrb	r3, [r7, #7]
 80117d8:	4a26      	ldr	r2, [pc, #152]	; (8011874 <uartOpen+0x288>)
 80117da:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80117de:	fb01 f303 	mul.w	r3, r1, r3
 80117e2:	4413      	add	r3, r2
 80117e4:	2201      	movs	r2, #1
 80117e6:	701a      	strb	r2, [r3, #0]

        if(HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 80117e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80117ec:	4925      	ldr	r1, [pc, #148]	; (8011884 <uartOpen+0x298>)
 80117ee:	4822      	ldr	r0, [pc, #136]	; (8011878 <uartOpen+0x28c>)
 80117f0:	f7f6 f830 	bl	8007854 <HAL_UART_Receive_DMA>
 80117f4:	4603      	mov	r3, r0
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d001      	beq.n	80117fe <uartOpen+0x212>
        {
          ret = false;
 80117fa:	2300      	movs	r3, #0
 80117fc:	75fb      	strb	r3, [r7, #23]
        }
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
 80117fe:	79fa      	ldrb	r2, [r7, #7]
 8011800:	491f      	ldr	r1, [pc, #124]	; (8011880 <uartOpen+0x294>)
 8011802:	4613      	mov	r3, r2
 8011804:	009b      	lsls	r3, r3, #2
 8011806:	4413      	add	r3, r2
 8011808:	009b      	lsls	r3, r3, #2
 801180a:	440b      	add	r3, r1
 801180c:	3308      	adds	r3, #8
 801180e:	6819      	ldr	r1, [r3, #0]
 8011810:	4b1e      	ldr	r3, [pc, #120]	; (801188c <uartOpen+0x2a0>)
 8011812:	681b      	ldr	r3, [r3, #0]
 8011814:	685b      	ldr	r3, [r3, #4]
 8011816:	79fa      	ldrb	r2, [r7, #7]
 8011818:	1ac9      	subs	r1, r1, r3
 801181a:	4819      	ldr	r0, [pc, #100]	; (8011880 <uartOpen+0x294>)
 801181c:	4613      	mov	r3, r2
 801181e:	009b      	lsls	r3, r3, #2
 8011820:	4413      	add	r3, r2
 8011822:	009b      	lsls	r3, r3, #2
 8011824:	4403      	add	r3, r0
 8011826:	6019      	str	r1, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8011828:	79f9      	ldrb	r1, [r7, #7]
 801182a:	79fa      	ldrb	r2, [r7, #7]
 801182c:	4814      	ldr	r0, [pc, #80]	; (8011880 <uartOpen+0x294>)
 801182e:	460b      	mov	r3, r1
 8011830:	009b      	lsls	r3, r3, #2
 8011832:	440b      	add	r3, r1
 8011834:	009b      	lsls	r3, r3, #2
 8011836:	4403      	add	r3, r0
 8011838:	6819      	ldr	r1, [r3, #0]
 801183a:	4811      	ldr	r0, [pc, #68]	; (8011880 <uartOpen+0x294>)
 801183c:	4613      	mov	r3, r2
 801183e:	009b      	lsls	r3, r3, #2
 8011840:	4413      	add	r3, r2
 8011842:	009b      	lsls	r3, r3, #2
 8011844:	4403      	add	r3, r0
 8011846:	3304      	adds	r3, #4
 8011848:	6019      	str	r1, [r3, #0]
      }
      HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8);
 801184a:	2100      	movs	r1, #0
 801184c:	480a      	ldr	r0, [pc, #40]	; (8011878 <uartOpen+0x28c>)
 801184e:	f7f7 fb21 	bl	8008e94 <HAL_UARTEx_SetTxFifoThreshold>
      HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8);
 8011852:	2100      	movs	r1, #0
 8011854:	4808      	ldr	r0, [pc, #32]	; (8011878 <uartOpen+0x28c>)
 8011856:	f7f7 fb5b 	bl	8008f10 <HAL_UARTEx_SetRxFifoThreshold>
      HAL_UARTEx_DisableFifoMode(&huart2);
 801185a:	4807      	ldr	r0, [pc, #28]	; (8011878 <uartOpen+0x28c>)
 801185c:	f7f7 fae1 	bl	8008e22 <HAL_UARTEx_DisableFifoMode>
      break;
 8011860:	e002      	b.n	8011868 <uartOpen+0x27c>

    default:
      ret = false;
 8011862:	2300      	movs	r3, #0
 8011864:	75fb      	strb	r3, [r7, #23]
      break;
 8011866:	bf00      	nop
  }

  return ret;
 8011868:	7dfb      	ldrb	r3, [r7, #23]
}
 801186a:	4618      	mov	r0, r3
 801186c:	3718      	adds	r7, #24
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}
 8011872:	bf00      	nop
 8011874:	200038b4 	.word	0x200038b4
 8011878:	20003698 	.word	0x20003698
 801187c:	40004400 	.word	0x40004400
 8011880:	2000378c 	.word	0x2000378c
 8011884:	200037b4 	.word	0x200037b4
 8011888:	40021000 	.word	0x40021000
 801188c:	2000372c 	.word	0x2000372c

08011890 <uartAvailable>:
{
  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	4603      	mov	r3, r0
 8011898:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 801189a:	2300      	movs	r3, #0
 801189c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 801189e:	79fb      	ldrb	r3, [r7, #7]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d002      	beq.n	80118aa <uartAvailable+0x1a>
 80118a4:	2b02      	cmp	r3, #2
 80118a6:	d004      	beq.n	80118b2 <uartAvailable+0x22>
 80118a8:	e024      	b.n	80118f4 <uartAvailable+0x64>
  {
    case _DEF_USB:
      ret = cdcAvailable();
 80118aa:	f7fe fdf6 	bl	801049a <cdcAvailable>
 80118ae:	60f8      	str	r0, [r7, #12]
      break;
 80118b0:	e020      	b.n	80118f4 <uartAvailable+0x64>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR);
 80118b2:	79fa      	ldrb	r2, [r7, #7]
 80118b4:	4912      	ldr	r1, [pc, #72]	; (8011900 <uartAvailable+0x70>)
 80118b6:	4613      	mov	r3, r2
 80118b8:	009b      	lsls	r3, r3, #2
 80118ba:	4413      	add	r3, r2
 80118bc:	009b      	lsls	r3, r3, #2
 80118be:	440b      	add	r3, r1
 80118c0:	3308      	adds	r3, #8
 80118c2:	6819      	ldr	r1, [r3, #0]
 80118c4:	4b0f      	ldr	r3, [pc, #60]	; (8011904 <uartAvailable+0x74>)
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	685b      	ldr	r3, [r3, #4]
 80118ca:	79fa      	ldrb	r2, [r7, #7]
 80118cc:	1ac9      	subs	r1, r1, r3
 80118ce:	480c      	ldr	r0, [pc, #48]	; (8011900 <uartAvailable+0x70>)
 80118d0:	4613      	mov	r3, r2
 80118d2:	009b      	lsls	r3, r3, #2
 80118d4:	4413      	add	r3, r2
 80118d6:	009b      	lsls	r3, r3, #2
 80118d8:	4403      	add	r3, r0
 80118da:	6019      	str	r1, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 80118dc:	79fa      	ldrb	r2, [r7, #7]
 80118de:	4613      	mov	r3, r2
 80118e0:	009b      	lsls	r3, r3, #2
 80118e2:	4413      	add	r3, r2
 80118e4:	009b      	lsls	r3, r3, #2
 80118e6:	4a06      	ldr	r2, [pc, #24]	; (8011900 <uartAvailable+0x70>)
 80118e8:	4413      	add	r3, r2
 80118ea:	4618      	mov	r0, r3
 80118ec:	f7fb fb0c 	bl	800cf08 <qbufferAvailable>
 80118f0:	60f8      	str	r0, [r7, #12]
      break;
 80118f2:	bf00      	nop
  }

  return ret;
 80118f4:	68fb      	ldr	r3, [r7, #12]
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3710      	adds	r7, #16
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	2000378c 	.word	0x2000378c
 8011904:	2000372c 	.word	0x2000372c

08011908 <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b084      	sub	sp, #16
 801190c:	af00      	add	r7, sp, #0
 801190e:	4603      	mov	r3, r0
 8011910:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8011912:	2300      	movs	r3, #0
 8011914:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8011916:	79fb      	ldrb	r3, [r7, #7]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d002      	beq.n	8011922 <uartRead+0x1a>
 801191c:	2b02      	cmp	r3, #2
 801191e:	d005      	beq.n	801192c <uartRead+0x24>
 8011920:	e00c      	b.n	801193c <uartRead+0x34>
  {
    case _DEF_USB:
      ret = cdcRead();
 8011922:	f7fe fdc1 	bl	80104a8 <cdcRead>
 8011926:	4603      	mov	r3, r0
 8011928:	73fb      	strb	r3, [r7, #15]
      break;
 801192a:	e007      	b.n	801193c <uartRead+0x34>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 801192c:	f107 030f 	add.w	r3, r7, #15
 8011930:	2201      	movs	r2, #1
 8011932:	4619      	mov	r1, r3
 8011934:	4804      	ldr	r0, [pc, #16]	; (8011948 <uartRead+0x40>)
 8011936:	f7fb fa7c 	bl	800ce32 <qbufferRead>
      break;
 801193a:	bf00      	nop
  }

  return ret;
 801193c:	7bfb      	ldrb	r3, [r7, #15]
}
 801193e:	4618      	mov	r0, r3
 8011940:	3710      	adds	r7, #16
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}
 8011946:	bf00      	nop
 8011948:	200037b4 	.word	0x200037b4

0801194c <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b086      	sub	sp, #24
 8011950:	af00      	add	r7, sp, #0
 8011952:	4603      	mov	r3, r0
 8011954:	60b9      	str	r1, [r7, #8]
 8011956:	607a      	str	r2, [r7, #4]
 8011958:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 801195a:	2300      	movs	r3, #0
 801195c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;


  switch(ch)
 801195e:	7bfb      	ldrb	r3, [r7, #15]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d002      	beq.n	801196a <uartWrite+0x1e>
 8011964:	2b02      	cmp	r3, #2
 8011966:	d006      	beq.n	8011976 <uartWrite+0x2a>
 8011968:	e014      	b.n	8011994 <uartWrite+0x48>
  {
    case _DEF_USB:
      ret = cdcWrite(p_data, length);
 801196a:	6879      	ldr	r1, [r7, #4]
 801196c:	68b8      	ldr	r0, [r7, #8]
 801196e:	f7fe fda2 	bl	80104b6 <cdcWrite>
 8011972:	6178      	str	r0, [r7, #20]
      break;
 8011974:	e00e      	b.n	8011994 <uartWrite+0x48>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart2, p_data, length, 100);
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	b29a      	uxth	r2, r3
 801197a:	2364      	movs	r3, #100	; 0x64
 801197c:	68b9      	ldr	r1, [r7, #8]
 801197e:	4808      	ldr	r0, [pc, #32]	; (80119a0 <uartWrite+0x54>)
 8011980:	f7f5 feda 	bl	8007738 <HAL_UART_Transmit>
 8011984:	4603      	mov	r3, r0
 8011986:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8011988:	7cfb      	ldrb	r3, [r7, #19]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d101      	bne.n	8011992 <uartWrite+0x46>
      {
        ret = length;
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	617b      	str	r3, [r7, #20]
      }
      break;
 8011992:	bf00      	nop
  }

  return ret;
 8011994:	697b      	ldr	r3, [r7, #20]
}
 8011996:	4618      	mov	r0, r3
 8011998:	3718      	adds	r7, #24
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}
 801199e:	bf00      	nop
 80119a0:	20003698 	.word	0x20003698

080119a4 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80119a4:	b40e      	push	{r1, r2, r3}
 80119a6:	b580      	push	{r7, lr}
 80119a8:	b0c7      	sub	sp, #284	; 0x11c
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	4602      	mov	r2, r0
 80119ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80119b2:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80119b6:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 80119b8:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80119bc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80119c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80119c4:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 80119c6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80119ca:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80119ce:	f107 0010 	add.w	r0, r7, #16
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80119d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80119dc:	f001 fb2e 	bl	801303c <vsniprintf>
 80119e0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 80119e4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80119e8:	f107 0110 	add.w	r1, r7, #16
 80119ec:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80119f0:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80119f4:	781b      	ldrb	r3, [r3, #0]
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7ff ffa8 	bl	801194c <uartWrite>
 80119fc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8011a00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8011a04:	4618      	mov	r0, r3
 8011a06:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011a10:	b003      	add	sp, #12
 8011a12:	4770      	bx	lr

08011a14 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011a14:	b480      	push	{r7}
 8011a16:	b083      	sub	sp, #12
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
  {
  }
}
 8011a1c:	bf00      	nop
 8011a1e:	370c      	adds	r7, #12
 8011a20:	46bd      	mov	sp, r7
 8011a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a26:	4770      	bx	lr

08011a28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8011a28:	b480      	push	{r7}
 8011a2a:	b083      	sub	sp, #12
 8011a2c:	af00      	add	r7, sp, #0
 8011a2e:	6078      	str	r0, [r7, #4]
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_buf, 1);

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_buf, 1);
  }
#endif
}
 8011a30:	bf00      	nop
 8011a32:	370c      	adds	r7, #12
 8011a34:	46bd      	mov	sp, r7
 8011a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3a:	4770      	bx	lr

08011a3c <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b09e      	sub	sp, #120	; 0x78
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011a44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011a48:	2200      	movs	r2, #0
 8011a4a:	601a      	str	r2, [r3, #0]
 8011a4c:	605a      	str	r2, [r3, #4]
 8011a4e:	609a      	str	r2, [r3, #8]
 8011a50:	60da      	str	r2, [r3, #12]
 8011a52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011a54:	f107 0310 	add.w	r3, r7, #16
 8011a58:	2254      	movs	r2, #84	; 0x54
 8011a5a:	2100      	movs	r1, #0
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	f001 fafb 	bl	8013058 <memset>
  if(uartHandle->Instance==USART2)
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	4a33      	ldr	r2, [pc, #204]	; (8011b34 <HAL_UART_MspInit+0xf8>)
 8011a68:	4293      	cmp	r3, r2
 8011a6a:	d15e      	bne.n	8011b2a <HAL_UART_MspInit+0xee>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8011a6c:	2302      	movs	r3, #2
 8011a6e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8011a70:	2300      	movs	r3, #0
 8011a72:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 8011a74:	f107 0310 	add.w	r3, r7, #16
 8011a78:	4618      	mov	r0, r3
 8011a7a:	f7f5 fbbf 	bl	80071fc <HAL_RCCEx_PeriphCLKConfig>

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8011a7e:	4b2e      	ldr	r3, [pc, #184]	; (8011b38 <HAL_UART_MspInit+0xfc>)
 8011a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a82:	4a2d      	ldr	r2, [pc, #180]	; (8011b38 <HAL_UART_MspInit+0xfc>)
 8011a84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a88:	6593      	str	r3, [r2, #88]	; 0x58
 8011a8a:	4b2b      	ldr	r3, [pc, #172]	; (8011b38 <HAL_UART_MspInit+0xfc>)
 8011a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a92:	60fb      	str	r3, [r7, #12]
 8011a94:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011a96:	4b28      	ldr	r3, [pc, #160]	; (8011b38 <HAL_UART_MspInit+0xfc>)
 8011a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a9a:	4a27      	ldr	r2, [pc, #156]	; (8011b38 <HAL_UART_MspInit+0xfc>)
 8011a9c:	f043 0301 	orr.w	r3, r3, #1
 8011aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011aa2:	4b25      	ldr	r3, [pc, #148]	; (8011b38 <HAL_UART_MspInit+0xfc>)
 8011aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011aa6:	f003 0301 	and.w	r3, r3, #1
 8011aaa:	60bb      	str	r3, [r7, #8]
 8011aac:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8011aae:	230c      	movs	r3, #12
 8011ab0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011ab2:	2302      	movs	r3, #2
 8011ab4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011aba:	2300      	movs	r3, #0
 8011abc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8011abe:	2307      	movs	r3, #7
 8011ac0:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ac2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011ac6:	4619      	mov	r1, r3
 8011ac8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8011acc:	f7f0 ff94 	bl	80029f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8011ad0:	4b1a      	ldr	r3, [pc, #104]	; (8011b3c <HAL_UART_MspInit+0x100>)
 8011ad2:	4a1b      	ldr	r2, [pc, #108]	; (8011b40 <HAL_UART_MspInit+0x104>)
 8011ad4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8011ad6:	4b19      	ldr	r3, [pc, #100]	; (8011b3c <HAL_UART_MspInit+0x100>)
 8011ad8:	221a      	movs	r2, #26
 8011ada:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011adc:	4b17      	ldr	r3, [pc, #92]	; (8011b3c <HAL_UART_MspInit+0x100>)
 8011ade:	2200      	movs	r2, #0
 8011ae0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8011ae2:	4b16      	ldr	r3, [pc, #88]	; (8011b3c <HAL_UART_MspInit+0x100>)
 8011ae4:	2200      	movs	r2, #0
 8011ae6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8011ae8:	4b14      	ldr	r3, [pc, #80]	; (8011b3c <HAL_UART_MspInit+0x100>)
 8011aea:	2280      	movs	r2, #128	; 0x80
 8011aec:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8011aee:	4b13      	ldr	r3, [pc, #76]	; (8011b3c <HAL_UART_MspInit+0x100>)
 8011af0:	2200      	movs	r2, #0
 8011af2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8011af4:	4b11      	ldr	r3, [pc, #68]	; (8011b3c <HAL_UART_MspInit+0x100>)
 8011af6:	2200      	movs	r2, #0
 8011af8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8011afa:	4b10      	ldr	r3, [pc, #64]	; (8011b3c <HAL_UART_MspInit+0x100>)
 8011afc:	2220      	movs	r2, #32
 8011afe:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8011b00:	4b0e      	ldr	r3, [pc, #56]	; (8011b3c <HAL_UART_MspInit+0x100>)
 8011b02:	2200      	movs	r2, #0
 8011b04:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 8011b06:	480d      	ldr	r0, [pc, #52]	; (8011b3c <HAL_UART_MspInit+0x100>)
 8011b08:	f7ef fc5c 	bl	80013c4 <HAL_DMA_Init>

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	4a0b      	ldr	r2, [pc, #44]	; (8011b3c <HAL_UART_MspInit+0x100>)
 8011b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8011b14:	4a09      	ldr	r2, [pc, #36]	; (8011b3c <HAL_UART_MspInit+0x100>)
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	2100      	movs	r1, #0
 8011b1e:	2026      	movs	r0, #38	; 0x26
 8011b20:	f7ef fc07 	bl	8001332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8011b24:	2026      	movs	r0, #38	; 0x26
 8011b26:	f7ef fc1e 	bl	8001366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8011b2a:	bf00      	nop
 8011b2c:	3778      	adds	r7, #120	; 0x78
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	bf00      	nop
 8011b34:	40004400 	.word	0x40004400
 8011b38:	40021000 	.word	0x40021000
 8011b3c:	2000372c 	.word	0x2000372c
 8011b40:	40020008 	.word	0x40020008

08011b44 <usbInit>:
#endif



bool usbInit(void)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
  bool ret = true;
 8011b4a:	2301      	movs	r3, #1
 8011b4c:	71fb      	strb	r3, [r7, #7]


#ifdef _USE_HW_CLI
  cliAdd("usb", cliCmd);
 8011b4e:	4904      	ldr	r1, [pc, #16]	; (8011b60 <usbInit+0x1c>)
 8011b50:	4804      	ldr	r0, [pc, #16]	; (8011b64 <usbInit+0x20>)
 8011b52:	f7fa fe09 	bl	800c768 <cliAdd>
#endif
  return ret;
 8011b56:	79fb      	ldrb	r3, [r7, #7]
}
 8011b58:	4618      	mov	r0, r3
 8011b5a:	3708      	adds	r7, #8
 8011b5c:	46bd      	mov	sp, r7
 8011b5e:	bd80      	pop	{r7, pc}
 8011b60:	08011c51 	.word	0x08011c51
 8011b64:	080158ec 	.word	0x080158ec

08011b68 <usbIsOpen>:
    USBD_DeInit(&hUsbDeviceFS);
  }
}

bool usbIsOpen(void)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	af00      	add	r7, sp, #0
  return cdcIsConnect();
 8011b6c:	f7fe fc8e 	bl	801048c <cdcIsConnect>
 8011b70:	4603      	mov	r3, r0
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	bd80      	pop	{r7, pc}
	...

08011b78 <usbIsConnect>:

bool usbIsConnect(void)
{
 8011b78:	b480      	push	{r7}
 8011b7a:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData == NULL)
 8011b7c:	4b0c      	ldr	r3, [pc, #48]	; (8011bb0 <usbIsConnect+0x38>)
 8011b7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d101      	bne.n	8011b8a <usbIsConnect+0x12>
  {
    return false;
 8011b86:	2300      	movs	r3, #0
 8011b88:	e00d      	b.n	8011ba6 <usbIsConnect+0x2e>
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8011b8a:	4b09      	ldr	r3, [pc, #36]	; (8011bb0 <usbIsConnect+0x38>)
 8011b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011b90:	2b03      	cmp	r3, #3
 8011b92:	d001      	beq.n	8011b98 <usbIsConnect+0x20>
  {
    return false;
 8011b94:	2300      	movs	r3, #0
 8011b96:	e006      	b.n	8011ba6 <usbIsConnect+0x2e>
  }
  if (hUsbDeviceFS.dev_config == 0)
 8011b98:	4b05      	ldr	r3, [pc, #20]	; (8011bb0 <usbIsConnect+0x38>)
 8011b9a:	685b      	ldr	r3, [r3, #4]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d101      	bne.n	8011ba4 <usbIsConnect+0x2c>
  {
    return false;
 8011ba0:	2300      	movs	r3, #0
 8011ba2:	e000      	b.n	8011ba6 <usbIsConnect+0x2e>
  }

  return true;
 8011ba4:	2301      	movs	r3, #1
}
 8011ba6:	4618      	mov	r0, r3
 8011ba8:	46bd      	mov	sp, r7
 8011baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bae:	4770      	bx	lr
 8011bb0:	20004108 	.word	0x20004108

08011bb4 <usbBegin>:
{
  return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	b084      	sub	sp, #16
 8011bb8:	af00      	add	r7, sp, #0
 8011bba:	4603      	mov	r3, r0
 8011bbc:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	73fb      	strb	r3, [r7, #15]


#if HW_USE_CDC == 1

  if (usb_mode == USB_CDC_MODE)
 8011bc2:	79fb      	ldrb	r3, [r7, #7]
 8011bc4:	2b01      	cmp	r3, #1
 8011bc6:	d12d      	bne.n	8011c24 <usbBegin+0x70>
  {
    if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 8011bc8:	2200      	movs	r2, #0
 8011bca:	491a      	ldr	r1, [pc, #104]	; (8011c34 <usbBegin+0x80>)
 8011bcc:	481a      	ldr	r0, [pc, #104]	; (8011c38 <usbBegin+0x84>)
 8011bce:	f7fb f9b6 	bl	800cf3e <USBD_Init>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d001      	beq.n	8011bdc <usbBegin+0x28>
    {
      return false;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	e027      	b.n	8011c2c <usbBegin+0x78>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011bdc:	4917      	ldr	r1, [pc, #92]	; (8011c3c <usbBegin+0x88>)
 8011bde:	4816      	ldr	r0, [pc, #88]	; (8011c38 <usbBegin+0x84>)
 8011be0:	f7fb f9dd 	bl	800cf9e <USBD_RegisterClass>
 8011be4:	4603      	mov	r3, r0
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d001      	beq.n	8011bee <usbBegin+0x3a>
    {
      return false;
 8011bea:	2300      	movs	r3, #0
 8011bec:	e01e      	b.n	8011c2c <usbBegin+0x78>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011bee:	4914      	ldr	r1, [pc, #80]	; (8011c40 <usbBegin+0x8c>)
 8011bf0:	4811      	ldr	r0, [pc, #68]	; (8011c38 <usbBegin+0x84>)
 8011bf2:	f7fc fd11 	bl	800e618 <USBD_CDC_RegisterInterface>
 8011bf6:	4603      	mov	r3, r0
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d001      	beq.n	8011c00 <usbBegin+0x4c>
    {
      return false;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	e015      	b.n	8011c2c <usbBegin+0x78>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011c00:	480d      	ldr	r0, [pc, #52]	; (8011c38 <usbBegin+0x84>)
 8011c02:	f7fb f9f3 	bl	800cfec <USBD_Start>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d001      	beq.n	8011c10 <usbBegin+0x5c>
    {
      return false;
 8011c0c:	2300      	movs	r3, #0
 8011c0e:	e00d      	b.n	8011c2c <usbBegin+0x78>
    }


    cdcInit();
 8011c10:	f7fe fc28 	bl	8010464 <cdcInit>

    logPrintf("usbBegin     \t\t: CDC_MODE\r\n");
 8011c14:	480b      	ldr	r0, [pc, #44]	; (8011c44 <usbBegin+0x90>)
 8011c16:	f7fa ff65 	bl	800cae4 <logPrintf>

    is_usb_mode = USB_CDC_MODE;
 8011c1a:	4b0b      	ldr	r3, [pc, #44]	; (8011c48 <usbBegin+0x94>)
 8011c1c:	2201      	movs	r2, #1
 8011c1e:	701a      	strb	r2, [r3, #0]
    ret = true;
 8011c20:	2301      	movs	r3, #1
 8011c22:	73fb      	strb	r3, [r7, #15]
    ret = true;
  }
#endif


  is_init = ret;
 8011c24:	4a09      	ldr	r2, [pc, #36]	; (8011c4c <usbBegin+0x98>)
 8011c26:	7bfb      	ldrb	r3, [r7, #15]
 8011c28:	7013      	strb	r3, [r2, #0]

  return ret;
 8011c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	3710      	adds	r7, #16
 8011c30:	46bd      	mov	sp, r7
 8011c32:	bd80      	pop	{r7, pc}
 8011c34:	20000144 	.word	0x20000144
 8011c38:	20004108 	.word	0x20004108
 8011c3c:	20000024 	.word	0x20000024
 8011c40:	20000128 	.word	0x20000128
 8011c44:	080158f0 	.word	0x080158f0
 8011c48:	20004105 	.word	0x20004105
 8011c4c:	20004104 	.word	0x20004104

08011c50 <cliCmd>:

#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 8011c50:	b580      	push	{r7, lr}
 8011c52:	b08a      	sub	sp, #40	; 0x28
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (args->argc == 1 && args->isStr(0, "info") == true)
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	881b      	ldrh	r3, [r3, #0]
 8011c62:	2b01      	cmp	r3, #1
 8011c64:	d129      	bne.n	8011cba <cliCmd+0x6a>
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	695b      	ldr	r3, [r3, #20]
 8011c6a:	4959      	ldr	r1, [pc, #356]	; (8011dd0 <cliCmd+0x180>)
 8011c6c:	2000      	movs	r0, #0
 8011c6e:	4798      	blx	r3
 8011c70:	4603      	mov	r3, r0
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d021      	beq.n	8011cba <cliCmd+0x6a>
  {
    while(cliKeepLoop())
 8011c76:	e014      	b.n	8011ca2 <cliCmd+0x52>
    {
      cliPrintf("USB Connect : %d\n", usbIsConnect());
 8011c78:	f7ff ff7e 	bl	8011b78 <usbIsConnect>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	4619      	mov	r1, r3
 8011c80:	4854      	ldr	r0, [pc, #336]	; (8011dd4 <cliCmd+0x184>)
 8011c82:	f7fa fc61 	bl	800c548 <cliPrintf>
      cliPrintf("USB Open    : %d\n", usbIsOpen());
 8011c86:	f7ff ff6f 	bl	8011b68 <usbIsOpen>
 8011c8a:	4603      	mov	r3, r0
 8011c8c:	4619      	mov	r1, r3
 8011c8e:	4852      	ldr	r0, [pc, #328]	; (8011dd8 <cliCmd+0x188>)
 8011c90:	f7fa fc5a 	bl	800c548 <cliPrintf>
      cliPrintf("\x1B[%dA", 2);
 8011c94:	2102      	movs	r1, #2
 8011c96:	4851      	ldr	r0, [pc, #324]	; (8011ddc <cliCmd+0x18c>)
 8011c98:	f7fa fc56 	bl	800c548 <cliPrintf>
      delay(100);
 8011c9c:	2064      	movs	r0, #100	; 0x64
 8011c9e:	f7f9 fd4b 	bl	800b738 <delay>
    while(cliKeepLoop())
 8011ca2:	f7fa fd4b 	bl	800c73c <cliKeepLoop>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d1e5      	bne.n	8011c78 <cliCmd+0x28>
    }
    cliPrintf("\x1B[%dB", 2);
 8011cac:	2102      	movs	r1, #2
 8011cae:	484c      	ldr	r0, [pc, #304]	; (8011de0 <cliCmd+0x190>)
 8011cb0:	f7fa fc4a 	bl	800c548 <cliPrintf>

    ret = true;
 8011cb4:	2301      	movs	r3, #1
 8011cb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (args->argc == 1 && args->isStr(0, "tx") == true)
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	881b      	ldrh	r3, [r3, #0]
 8011cbe:	2b01      	cmp	r3, #1
 8011cc0:	d130      	bne.n	8011d24 <cliCmd+0xd4>
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	695b      	ldr	r3, [r3, #20]
 8011cc6:	4947      	ldr	r1, [pc, #284]	; (8011de4 <cliCmd+0x194>)
 8011cc8:	2000      	movs	r0, #0
 8011cca:	4798      	blx	r3
 8011ccc:	4603      	mov	r3, r0
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d028      	beq.n	8011d24 <cliCmd+0xd4>
  {
    uint32_t pre_time;
    uint32_t tx_cnt = 0;
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	61fb      	str	r3, [r7, #28]

    while(cliKeepLoop())
 8011cd6:	e019      	b.n	8011d0c <cliCmd+0xbc>
    {
      if (millis()-pre_time >= 1000)
 8011cd8:	f7f9 fd41 	bl	800b75e <millis>
 8011cdc:	4602      	mov	r2, r0
 8011cde:	6a3b      	ldr	r3, [r7, #32]
 8011ce0:	1ad3      	subs	r3, r2, r3
 8011ce2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011ce6:	d30a      	bcc.n	8011cfe <cliCmd+0xae>
      {
        pre_time = millis();
 8011ce8:	f7f9 fd39 	bl	800b75e <millis>
 8011cec:	6238      	str	r0, [r7, #32]
        logPrintf("tx : %d KB/s\n", tx_cnt/1024);
 8011cee:	69fb      	ldr	r3, [r7, #28]
 8011cf0:	0a9b      	lsrs	r3, r3, #10
 8011cf2:	4619      	mov	r1, r3
 8011cf4:	483c      	ldr	r0, [pc, #240]	; (8011de8 <cliCmd+0x198>)
 8011cf6:	f7fa fef5 	bl	800cae4 <logPrintf>
        tx_cnt = 0;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	61fb      	str	r3, [r7, #28]
      }
      cdcWrite((uint8_t *)"123456789012345678901234567890\n", 31);
 8011cfe:	211f      	movs	r1, #31
 8011d00:	483a      	ldr	r0, [pc, #232]	; (8011dec <cliCmd+0x19c>)
 8011d02:	f7fe fbd8 	bl	80104b6 <cdcWrite>
      tx_cnt += 31;
 8011d06:	69fb      	ldr	r3, [r7, #28]
 8011d08:	331f      	adds	r3, #31
 8011d0a:	61fb      	str	r3, [r7, #28]
    while(cliKeepLoop())
 8011d0c:	f7fa fd16 	bl	800c73c <cliKeepLoop>
 8011d10:	4603      	mov	r3, r0
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d1e0      	bne.n	8011cd8 <cliCmd+0x88>
    }
    cliPrintf("\x1B[%dB", 2);
 8011d16:	2102      	movs	r1, #2
 8011d18:	4831      	ldr	r0, [pc, #196]	; (8011de0 <cliCmd+0x190>)
 8011d1a:	f7fa fc15 	bl	800c548 <cliPrintf>

    ret = true;
 8011d1e:	2301      	movs	r3, #1
 8011d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (args->argc == 1 && args->isStr(0, "rx") == true)
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	881b      	ldrh	r3, [r3, #0]
 8011d28:	2b01      	cmp	r3, #1
 8011d2a:	d13c      	bne.n	8011da6 <cliCmd+0x156>
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	695b      	ldr	r3, [r3, #20]
 8011d30:	492f      	ldr	r1, [pc, #188]	; (8011df0 <cliCmd+0x1a0>)
 8011d32:	2000      	movs	r0, #0
 8011d34:	4798      	blx	r3
 8011d36:	4603      	mov	r3, r0
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d034      	beq.n	8011da6 <cliCmd+0x156>
  {
    uint32_t pre_time;
    uint32_t rx_cnt = 0;
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	617b      	str	r3, [r7, #20]
    uint32_t rx_len;

    while(cliKeepLoop())
 8011d40:	e025      	b.n	8011d8e <cliCmd+0x13e>
    {
      if (millis()-pre_time >= 1000)
 8011d42:	f7f9 fd0c 	bl	800b75e <millis>
 8011d46:	4602      	mov	r2, r0
 8011d48:	69bb      	ldr	r3, [r7, #24]
 8011d4a:	1ad3      	subs	r3, r2, r3
 8011d4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011d50:	d30a      	bcc.n	8011d68 <cliCmd+0x118>
      {
        pre_time = millis();
 8011d52:	f7f9 fd04 	bl	800b75e <millis>
 8011d56:	61b8      	str	r0, [r7, #24]
        logPrintf("rx : %d KB/s\n", rx_cnt/1024);
 8011d58:	697b      	ldr	r3, [r7, #20]
 8011d5a:	0a9b      	lsrs	r3, r3, #10
 8011d5c:	4619      	mov	r1, r3
 8011d5e:	4825      	ldr	r0, [pc, #148]	; (8011df4 <cliCmd+0x1a4>)
 8011d60:	f7fa fec0 	bl	800cae4 <logPrintf>
        rx_cnt = 0;
 8011d64:	2300      	movs	r3, #0
 8011d66:	617b      	str	r3, [r7, #20]
      }

      rx_len = cdcAvailable();
 8011d68:	f7fe fb97 	bl	801049a <cdcAvailable>
 8011d6c:	60f8      	str	r0, [r7, #12]

      for (int i=0; i<rx_len; i++)
 8011d6e:	2300      	movs	r3, #0
 8011d70:	613b      	str	r3, [r7, #16]
 8011d72:	e004      	b.n	8011d7e <cliCmd+0x12e>
      {
        cdcRead();
 8011d74:	f7fe fb98 	bl	80104a8 <cdcRead>
      for (int i=0; i<rx_len; i++)
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	613b      	str	r3, [r7, #16]
 8011d7e:	693b      	ldr	r3, [r7, #16]
 8011d80:	68fa      	ldr	r2, [r7, #12]
 8011d82:	429a      	cmp	r2, r3
 8011d84:	d8f6      	bhi.n	8011d74 <cliCmd+0x124>
      }

      rx_cnt += rx_len;
 8011d86:	697a      	ldr	r2, [r7, #20]
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	4413      	add	r3, r2
 8011d8c:	617b      	str	r3, [r7, #20]
    while(cliKeepLoop())
 8011d8e:	f7fa fcd5 	bl	800c73c <cliKeepLoop>
 8011d92:	4603      	mov	r3, r0
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d1d4      	bne.n	8011d42 <cliCmd+0xf2>
    }
    cliPrintf("\x1B[%dB", 2);
 8011d98:	2102      	movs	r1, #2
 8011d9a:	4811      	ldr	r0, [pc, #68]	; (8011de0 <cliCmd+0x190>)
 8011d9c:	f7fa fbd4 	bl	800c548 <cliPrintf>

    ret = true;
 8011da0:	2301      	movs	r3, #1
 8011da2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (ret == false)
 8011da6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011daa:	f083 0301 	eor.w	r3, r3, #1
 8011dae:	b2db      	uxtb	r3, r3
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d008      	beq.n	8011dc6 <cliCmd+0x176>
  {
    cliPrintf("usb info\n");
 8011db4:	4810      	ldr	r0, [pc, #64]	; (8011df8 <cliCmd+0x1a8>)
 8011db6:	f7fa fbc7 	bl	800c548 <cliPrintf>
    cliPrintf("usb tx\n");
 8011dba:	4810      	ldr	r0, [pc, #64]	; (8011dfc <cliCmd+0x1ac>)
 8011dbc:	f7fa fbc4 	bl	800c548 <cliPrintf>
    cliPrintf("usb rx\n");
 8011dc0:	480f      	ldr	r0, [pc, #60]	; (8011e00 <cliCmd+0x1b0>)
 8011dc2:	f7fa fbc1 	bl	800c548 <cliPrintf>
  }
}
 8011dc6:	bf00      	nop
 8011dc8:	3728      	adds	r7, #40	; 0x28
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	bd80      	pop	{r7, pc}
 8011dce:	bf00      	nop
 8011dd0:	0801590c 	.word	0x0801590c
 8011dd4:	08015914 	.word	0x08015914
 8011dd8:	08015928 	.word	0x08015928
 8011ddc:	0801593c 	.word	0x0801593c
 8011de0:	08015944 	.word	0x08015944
 8011de4:	0801594c 	.word	0x0801594c
 8011de8:	08015950 	.word	0x08015950
 8011dec:	08015960 	.word	0x08015960
 8011df0:	08015980 	.word	0x08015980
 8011df4:	08015984 	.word	0x08015984
 8011df8:	08015994 	.word	0x08015994
 8011dfc:	080159a0 	.word	0x080159a0
 8011e00:	080159a8 	.word	0x080159a8

08011e04 <main>:
void SystemClock_Config(void);

uint32_t pre_time = 0;

int main(void)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	af00      	add	r7, sp, #0
  HAL_Init();
 8011e08:	f7ef f923 	bl	8001052 <HAL_Init>

  SystemClock_Config();
 8011e0c:	f000 f862 	bl	8011ed4 <SystemClock_Config>

  hwInit();
 8011e10:	f000 f81e 	bl	8011e50 <hwInit>

  pre_time = micros();
 8011e14:	f7f9 fcaa 	bl	800b76c <micros>
 8011e18:	4603      	mov	r3, r0
 8011e1a:	4a0b      	ldr	r2, [pc, #44]	; (8011e48 <main+0x44>)
 8011e1c:	6013      	str	r3, [r2, #0]

  while (1)
  {
	  if(micros()-pre_time >= 500000)
 8011e1e:	f7f9 fca5 	bl	800b76c <micros>
 8011e22:	4602      	mov	r2, r0
 8011e24:	4b08      	ldr	r3, [pc, #32]	; (8011e48 <main+0x44>)
 8011e26:	681b      	ldr	r3, [r3, #0]
 8011e28:	1ad3      	subs	r3, r2, r3
 8011e2a:	4a08      	ldr	r2, [pc, #32]	; (8011e4c <main+0x48>)
 8011e2c:	4293      	cmp	r3, r2
 8011e2e:	d907      	bls.n	8011e40 <main+0x3c>
	  {
	    pre_time = micros();
 8011e30:	f7f9 fc9c 	bl	800b76c <micros>
 8011e34:	4603      	mov	r3, r0
 8011e36:	4a04      	ldr	r2, [pc, #16]	; (8011e48 <main+0x44>)
 8011e38:	6013      	str	r3, [r2, #0]
		  gpioPinToggle(LED);
 8011e3a:	2001      	movs	r0, #1
 8011e3c:	f7fe fcd4 	bl	80107e8 <gpioPinToggle>
	  }
    cliMain();
 8011e40:	f7f9 ff38 	bl	800bcb4 <cliMain>
	  if(micros()-pre_time >= 500000)
 8011e44:	e7eb      	b.n	8011e1e <main+0x1a>
 8011e46:	bf00      	nop
 8011e48:	200043d8 	.word	0x200043d8
 8011e4c:	0007a11f 	.word	0x0007a11f

08011e50 <hwInit>:
  }

}

void hwInit(void)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b082      	sub	sp, #8
 8011e54:	af02      	add	r7, sp, #8
  #endif
#ifdef _USE_HW_RESET
    resetInit();
#endif

  cliInit();
 8011e56:	f7f9 fe29 	bl	800baac <cliInit>

  logInit();
 8011e5a:	f7fa fda9 	bl	800c9b0 <logInit>
  gpioInit();
 8011e5e:	f7fe fb39 	bl	80104d4 <gpioInit>

  logPrintf("\r\n[ Firmware Begin... ]\r\n");
 8011e62:	4817      	ldr	r0, [pc, #92]	; (8011ec0 <hwInit+0x70>)
 8011e64:	f7fa fe3e 	bl	800cae4 <logPrintf>
  logPrintf("Booting..Name \t\t: %s\r\n", _DEF_BOARD_NAME);
 8011e68:	4916      	ldr	r1, [pc, #88]	; (8011ec4 <hwInit+0x74>)
 8011e6a:	4817      	ldr	r0, [pc, #92]	; (8011ec8 <hwInit+0x78>)
 8011e6c:	f7fa fe3a 	bl	800cae4 <logPrintf>
  logPrintf("Booting..Ver  \t\t: %s\r\n", _DEF_FIRMWATRE_VERSION);
 8011e70:	4916      	ldr	r1, [pc, #88]	; (8011ecc <hwInit+0x7c>)
 8011e72:	4817      	ldr	r0, [pc, #92]	; (8011ed0 <hwInit+0x80>)
 8011e74:	f7fa fe36 	bl	800cae4 <logPrintf>

  usbInit();
 8011e78:	f7ff fe64 	bl	8011b44 <usbInit>
  usbBegin(USB_CDC_MODE);
 8011e7c:	2001      	movs	r0, #1
 8011e7e:	f7ff fe99 	bl	8011bb4 <usbBegin>
  uartInit();
 8011e82:	f7ff fb89 	bl	8011598 <uartInit>
  uartOpen(_DEF_UART2, 57600);
 8011e86:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8011e8a:	2002      	movs	r0, #2
 8011e8c:	f7ff fbae 	bl	80115ec <uartOpen>
  canInit();
 8011e90:	f7fd fa9e 	bl	800f3d0 <canInit>
  i2cInit();
 8011e94:	f7fe fd96 	bl	80109c4 <i2cInit>
  //  tim_Init();
  //  tim_Begin(_DEF_TIM3);

  cliOpen(_DEF_USB, 57600);
 8011e98:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8011e9c:	2000      	movs	r0, #0
 8011e9e:	f7f9 fe51 	bl	800bb44 <cliOpen>
  canOpen(_DEF_CAN2, CAN_LOOPBACK, CAN_CLASSIC, CAN_500K, CAN_500K);
 8011ea2:	2303      	movs	r3, #3
 8011ea4:	9300      	str	r3, [sp, #0]
 8011ea6:	2303      	movs	r3, #3
 8011ea8:	2200      	movs	r2, #0
 8011eaa:	2102      	movs	r1, #2
 8011eac:	2001      	movs	r0, #1
 8011eae:	f7fd fb1b 	bl	800f4e8 <canOpen>
  //canOpen(_DEF_CAN2, CAN_NORMAL, CAN_CLASSIC, CAN_1M, CAN_2M);
  i2cOpen(_DEF_I2C2, I2C_FREQ_400KHz);
 8011eb2:	2101      	movs	r1, #1
 8011eb4:	2001      	movs	r0, #1
 8011eb6:	f7fe fdb1 	bl	8010a1c <i2cOpen>
}
 8011eba:	bf00      	nop
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}
 8011ec0:	080159b0 	.word	0x080159b0
 8011ec4:	080159cc 	.word	0x080159cc
 8011ec8:	080159d8 	.word	0x080159d8
 8011ecc:	080159f0 	.word	0x080159f0
 8011ed0:	080159fc 	.word	0x080159fc

08011ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b094      	sub	sp, #80	; 0x50
 8011ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011eda:	f107 0318 	add.w	r3, r7, #24
 8011ede:	2238      	movs	r2, #56	; 0x38
 8011ee0:	2100      	movs	r1, #0
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f001 f8b8 	bl	8013058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011ee8:	1d3b      	adds	r3, r7, #4
 8011eea:	2200      	movs	r2, #0
 8011eec:	601a      	str	r2, [r3, #0]
 8011eee:	605a      	str	r2, [r3, #4]
 8011ef0:	609a      	str	r2, [r3, #8]
 8011ef2:	60da      	str	r2, [r3, #12]
 8011ef4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011ef6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8011efa:	f7f4 fb9d 	bl	8006638 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8011efe:	f7f4 fb8b 	bl	8006618 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8011f02:	4b20      	ldr	r3, [pc, #128]	; (8011f84 <SystemClock_Config+0xb0>)
 8011f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f08:	4a1e      	ldr	r2, [pc, #120]	; (8011f84 <SystemClock_Config+0xb0>)
 8011f0a:	f023 0318 	bic.w	r3, r3, #24
 8011f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8011f12:	2325      	movs	r3, #37	; 0x25
 8011f14:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8011f16:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8011f1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8011f1c:	2301      	movs	r3, #1
 8011f1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8011f20:	2301      	movs	r3, #1
 8011f22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011f24:	2302      	movs	r3, #2
 8011f26:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011f28:	2303      	movs	r3, #3
 8011f2a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8011f2c:	2302      	movs	r3, #2
 8011f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8011f30:	234b      	movs	r3, #75	; 0x4b
 8011f32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8011f34:	2302      	movs	r3, #2
 8011f36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8011f38:	2302      	movs	r3, #2
 8011f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8011f3c:	2302      	movs	r3, #2
 8011f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011f40:	f107 0318 	add.w	r3, r7, #24
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7f4 fc2b 	bl	80067a0 <HAL_RCC_OscConfig>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d001      	beq.n	8011f54 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8011f50:	f000 f81a 	bl	8011f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011f54:	230f      	movs	r3, #15
 8011f56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011f58:	2303      	movs	r3, #3
 8011f5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011f5c:	2300      	movs	r3, #0
 8011f5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8011f60:	2300      	movs	r3, #0
 8011f62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8011f64:	2300      	movs	r3, #0
 8011f66:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8011f68:	1d3b      	adds	r3, r7, #4
 8011f6a:	2104      	movs	r1, #4
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	f7f4 ff29 	bl	8006dc4 <HAL_RCC_ClockConfig>
 8011f72:	4603      	mov	r3, r0
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d001      	beq.n	8011f7c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8011f78:	f000 f806 	bl	8011f88 <Error_Handler>
  }
}
 8011f7c:	bf00      	nop
 8011f7e:	3750      	adds	r7, #80	; 0x50
 8011f80:	46bd      	mov	sp, r7
 8011f82:	bd80      	pop	{r7, pc}
 8011f84:	40021000 	.word	0x40021000

08011f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8011f88:	b480      	push	{r7}
 8011f8a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8011f8c:	b672      	cpsid	i
}
 8011f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8011f90:	e7fe      	b.n	8011f90 <Error_Handler+0x8>

08011f92 <sulp>:
 8011f92:	b570      	push	{r4, r5, r6, lr}
 8011f94:	4604      	mov	r4, r0
 8011f96:	460d      	mov	r5, r1
 8011f98:	ec45 4b10 	vmov	d0, r4, r5
 8011f9c:	4616      	mov	r6, r2
 8011f9e:	f002 f907 	bl	80141b0 <__ulp>
 8011fa2:	ec51 0b10 	vmov	r0, r1, d0
 8011fa6:	b17e      	cbz	r6, 8011fc8 <sulp+0x36>
 8011fa8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8011fac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8011fb0:	2b00      	cmp	r3, #0
 8011fb2:	dd09      	ble.n	8011fc8 <sulp+0x36>
 8011fb4:	051b      	lsls	r3, r3, #20
 8011fb6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8011fba:	2400      	movs	r4, #0
 8011fbc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8011fc0:	4622      	mov	r2, r4
 8011fc2:	462b      	mov	r3, r5
 8011fc4:	f7ee fb48 	bl	8000658 <__aeabi_dmul>
 8011fc8:	bd70      	pop	{r4, r5, r6, pc}
 8011fca:	0000      	movs	r0, r0
 8011fcc:	0000      	movs	r0, r0
	...

08011fd0 <_strtod_l>:
 8011fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fd4:	ed2d 8b02 	vpush	{d8}
 8011fd8:	b09b      	sub	sp, #108	; 0x6c
 8011fda:	4604      	mov	r4, r0
 8011fdc:	9213      	str	r2, [sp, #76]	; 0x4c
 8011fde:	2200      	movs	r2, #0
 8011fe0:	9216      	str	r2, [sp, #88]	; 0x58
 8011fe2:	460d      	mov	r5, r1
 8011fe4:	f04f 0800 	mov.w	r8, #0
 8011fe8:	f04f 0900 	mov.w	r9, #0
 8011fec:	460a      	mov	r2, r1
 8011fee:	9215      	str	r2, [sp, #84]	; 0x54
 8011ff0:	7811      	ldrb	r1, [r2, #0]
 8011ff2:	292b      	cmp	r1, #43	; 0x2b
 8011ff4:	d04c      	beq.n	8012090 <_strtod_l+0xc0>
 8011ff6:	d83a      	bhi.n	801206e <_strtod_l+0x9e>
 8011ff8:	290d      	cmp	r1, #13
 8011ffa:	d834      	bhi.n	8012066 <_strtod_l+0x96>
 8011ffc:	2908      	cmp	r1, #8
 8011ffe:	d834      	bhi.n	801206a <_strtod_l+0x9a>
 8012000:	2900      	cmp	r1, #0
 8012002:	d03d      	beq.n	8012080 <_strtod_l+0xb0>
 8012004:	2200      	movs	r2, #0
 8012006:	920a      	str	r2, [sp, #40]	; 0x28
 8012008:	9e15      	ldr	r6, [sp, #84]	; 0x54
 801200a:	7832      	ldrb	r2, [r6, #0]
 801200c:	2a30      	cmp	r2, #48	; 0x30
 801200e:	f040 80b4 	bne.w	801217a <_strtod_l+0x1aa>
 8012012:	7872      	ldrb	r2, [r6, #1]
 8012014:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8012018:	2a58      	cmp	r2, #88	; 0x58
 801201a:	d170      	bne.n	80120fe <_strtod_l+0x12e>
 801201c:	9302      	str	r3, [sp, #8]
 801201e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012020:	9301      	str	r3, [sp, #4]
 8012022:	ab16      	add	r3, sp, #88	; 0x58
 8012024:	9300      	str	r3, [sp, #0]
 8012026:	4a8e      	ldr	r2, [pc, #568]	; (8012260 <_strtod_l+0x290>)
 8012028:	ab17      	add	r3, sp, #92	; 0x5c
 801202a:	a915      	add	r1, sp, #84	; 0x54
 801202c:	4620      	mov	r0, r4
 801202e:	f001 f9a5 	bl	801337c <__gethex>
 8012032:	f010 070f 	ands.w	r7, r0, #15
 8012036:	4605      	mov	r5, r0
 8012038:	d005      	beq.n	8012046 <_strtod_l+0x76>
 801203a:	2f06      	cmp	r7, #6
 801203c:	d12a      	bne.n	8012094 <_strtod_l+0xc4>
 801203e:	3601      	adds	r6, #1
 8012040:	2300      	movs	r3, #0
 8012042:	9615      	str	r6, [sp, #84]	; 0x54
 8012044:	930a      	str	r3, [sp, #40]	; 0x28
 8012046:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012048:	2b00      	cmp	r3, #0
 801204a:	f040 857f 	bne.w	8012b4c <_strtod_l+0xb7c>
 801204e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012050:	b1db      	cbz	r3, 801208a <_strtod_l+0xba>
 8012052:	4642      	mov	r2, r8
 8012054:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8012058:	ec43 2b10 	vmov	d0, r2, r3
 801205c:	b01b      	add	sp, #108	; 0x6c
 801205e:	ecbd 8b02 	vpop	{d8}
 8012062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012066:	2920      	cmp	r1, #32
 8012068:	d1cc      	bne.n	8012004 <_strtod_l+0x34>
 801206a:	3201      	adds	r2, #1
 801206c:	e7bf      	b.n	8011fee <_strtod_l+0x1e>
 801206e:	292d      	cmp	r1, #45	; 0x2d
 8012070:	d1c8      	bne.n	8012004 <_strtod_l+0x34>
 8012072:	2101      	movs	r1, #1
 8012074:	910a      	str	r1, [sp, #40]	; 0x28
 8012076:	1c51      	adds	r1, r2, #1
 8012078:	9115      	str	r1, [sp, #84]	; 0x54
 801207a:	7852      	ldrb	r2, [r2, #1]
 801207c:	2a00      	cmp	r2, #0
 801207e:	d1c3      	bne.n	8012008 <_strtod_l+0x38>
 8012080:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8012082:	9515      	str	r5, [sp, #84]	; 0x54
 8012084:	2b00      	cmp	r3, #0
 8012086:	f040 855f 	bne.w	8012b48 <_strtod_l+0xb78>
 801208a:	4642      	mov	r2, r8
 801208c:	464b      	mov	r3, r9
 801208e:	e7e3      	b.n	8012058 <_strtod_l+0x88>
 8012090:	2100      	movs	r1, #0
 8012092:	e7ef      	b.n	8012074 <_strtod_l+0xa4>
 8012094:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8012096:	b13a      	cbz	r2, 80120a8 <_strtod_l+0xd8>
 8012098:	2135      	movs	r1, #53	; 0x35
 801209a:	a818      	add	r0, sp, #96	; 0x60
 801209c:	f002 f985 	bl	80143aa <__copybits>
 80120a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80120a2:	4620      	mov	r0, r4
 80120a4:	f001 fd58 	bl	8013b58 <_Bfree>
 80120a8:	3f01      	subs	r7, #1
 80120aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80120ac:	2f04      	cmp	r7, #4
 80120ae:	d806      	bhi.n	80120be <_strtod_l+0xee>
 80120b0:	e8df f007 	tbb	[pc, r7]
 80120b4:	201d0314 	.word	0x201d0314
 80120b8:	14          	.byte	0x14
 80120b9:	00          	.byte	0x00
 80120ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80120be:	05e9      	lsls	r1, r5, #23
 80120c0:	bf48      	it	mi
 80120c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80120c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80120ca:	0d1b      	lsrs	r3, r3, #20
 80120cc:	051b      	lsls	r3, r3, #20
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d1b9      	bne.n	8012046 <_strtod_l+0x76>
 80120d2:	f001 f84d 	bl	8013170 <__errno>
 80120d6:	2322      	movs	r3, #34	; 0x22
 80120d8:	6003      	str	r3, [r0, #0]
 80120da:	e7b4      	b.n	8012046 <_strtod_l+0x76>
 80120dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80120e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80120e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80120e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80120ec:	e7e7      	b.n	80120be <_strtod_l+0xee>
 80120ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8012268 <_strtod_l+0x298>
 80120f2:	e7e4      	b.n	80120be <_strtod_l+0xee>
 80120f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80120f8:	f04f 38ff 	mov.w	r8, #4294967295
 80120fc:	e7df      	b.n	80120be <_strtod_l+0xee>
 80120fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012100:	1c5a      	adds	r2, r3, #1
 8012102:	9215      	str	r2, [sp, #84]	; 0x54
 8012104:	785b      	ldrb	r3, [r3, #1]
 8012106:	2b30      	cmp	r3, #48	; 0x30
 8012108:	d0f9      	beq.n	80120fe <_strtod_l+0x12e>
 801210a:	2b00      	cmp	r3, #0
 801210c:	d09b      	beq.n	8012046 <_strtod_l+0x76>
 801210e:	2301      	movs	r3, #1
 8012110:	f04f 0a00 	mov.w	sl, #0
 8012114:	9304      	str	r3, [sp, #16]
 8012116:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012118:	930b      	str	r3, [sp, #44]	; 0x2c
 801211a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 801211e:	46d3      	mov	fp, sl
 8012120:	220a      	movs	r2, #10
 8012122:	9815      	ldr	r0, [sp, #84]	; 0x54
 8012124:	7806      	ldrb	r6, [r0, #0]
 8012126:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801212a:	b2d9      	uxtb	r1, r3
 801212c:	2909      	cmp	r1, #9
 801212e:	d926      	bls.n	801217e <_strtod_l+0x1ae>
 8012130:	494c      	ldr	r1, [pc, #304]	; (8012264 <_strtod_l+0x294>)
 8012132:	2201      	movs	r2, #1
 8012134:	f000 ff98 	bl	8013068 <strncmp>
 8012138:	2800      	cmp	r0, #0
 801213a:	d030      	beq.n	801219e <_strtod_l+0x1ce>
 801213c:	2000      	movs	r0, #0
 801213e:	4632      	mov	r2, r6
 8012140:	9005      	str	r0, [sp, #20]
 8012142:	465e      	mov	r6, fp
 8012144:	4603      	mov	r3, r0
 8012146:	2a65      	cmp	r2, #101	; 0x65
 8012148:	d001      	beq.n	801214e <_strtod_l+0x17e>
 801214a:	2a45      	cmp	r2, #69	; 0x45
 801214c:	d113      	bne.n	8012176 <_strtod_l+0x1a6>
 801214e:	b91e      	cbnz	r6, 8012158 <_strtod_l+0x188>
 8012150:	9a04      	ldr	r2, [sp, #16]
 8012152:	4302      	orrs	r2, r0
 8012154:	d094      	beq.n	8012080 <_strtod_l+0xb0>
 8012156:	2600      	movs	r6, #0
 8012158:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801215a:	1c6a      	adds	r2, r5, #1
 801215c:	9215      	str	r2, [sp, #84]	; 0x54
 801215e:	786a      	ldrb	r2, [r5, #1]
 8012160:	2a2b      	cmp	r2, #43	; 0x2b
 8012162:	d074      	beq.n	801224e <_strtod_l+0x27e>
 8012164:	2a2d      	cmp	r2, #45	; 0x2d
 8012166:	d078      	beq.n	801225a <_strtod_l+0x28a>
 8012168:	f04f 0c00 	mov.w	ip, #0
 801216c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8012170:	2909      	cmp	r1, #9
 8012172:	d97f      	bls.n	8012274 <_strtod_l+0x2a4>
 8012174:	9515      	str	r5, [sp, #84]	; 0x54
 8012176:	2700      	movs	r7, #0
 8012178:	e09e      	b.n	80122b8 <_strtod_l+0x2e8>
 801217a:	2300      	movs	r3, #0
 801217c:	e7c8      	b.n	8012110 <_strtod_l+0x140>
 801217e:	f1bb 0f08 	cmp.w	fp, #8
 8012182:	bfd8      	it	le
 8012184:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8012186:	f100 0001 	add.w	r0, r0, #1
 801218a:	bfda      	itte	le
 801218c:	fb02 3301 	mlale	r3, r2, r1, r3
 8012190:	9309      	strle	r3, [sp, #36]	; 0x24
 8012192:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8012196:	f10b 0b01 	add.w	fp, fp, #1
 801219a:	9015      	str	r0, [sp, #84]	; 0x54
 801219c:	e7c1      	b.n	8012122 <_strtod_l+0x152>
 801219e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121a0:	1c5a      	adds	r2, r3, #1
 80121a2:	9215      	str	r2, [sp, #84]	; 0x54
 80121a4:	785a      	ldrb	r2, [r3, #1]
 80121a6:	f1bb 0f00 	cmp.w	fp, #0
 80121aa:	d037      	beq.n	801221c <_strtod_l+0x24c>
 80121ac:	9005      	str	r0, [sp, #20]
 80121ae:	465e      	mov	r6, fp
 80121b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80121b4:	2b09      	cmp	r3, #9
 80121b6:	d912      	bls.n	80121de <_strtod_l+0x20e>
 80121b8:	2301      	movs	r3, #1
 80121ba:	e7c4      	b.n	8012146 <_strtod_l+0x176>
 80121bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121be:	1c5a      	adds	r2, r3, #1
 80121c0:	9215      	str	r2, [sp, #84]	; 0x54
 80121c2:	785a      	ldrb	r2, [r3, #1]
 80121c4:	3001      	adds	r0, #1
 80121c6:	2a30      	cmp	r2, #48	; 0x30
 80121c8:	d0f8      	beq.n	80121bc <_strtod_l+0x1ec>
 80121ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80121ce:	2b08      	cmp	r3, #8
 80121d0:	f200 84c1 	bhi.w	8012b56 <_strtod_l+0xb86>
 80121d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80121d6:	9005      	str	r0, [sp, #20]
 80121d8:	2000      	movs	r0, #0
 80121da:	930b      	str	r3, [sp, #44]	; 0x2c
 80121dc:	4606      	mov	r6, r0
 80121de:	3a30      	subs	r2, #48	; 0x30
 80121e0:	f100 0301 	add.w	r3, r0, #1
 80121e4:	d014      	beq.n	8012210 <_strtod_l+0x240>
 80121e6:	9905      	ldr	r1, [sp, #20]
 80121e8:	4419      	add	r1, r3
 80121ea:	9105      	str	r1, [sp, #20]
 80121ec:	4633      	mov	r3, r6
 80121ee:	eb00 0c06 	add.w	ip, r0, r6
 80121f2:	210a      	movs	r1, #10
 80121f4:	4563      	cmp	r3, ip
 80121f6:	d113      	bne.n	8012220 <_strtod_l+0x250>
 80121f8:	1833      	adds	r3, r6, r0
 80121fa:	2b08      	cmp	r3, #8
 80121fc:	f106 0601 	add.w	r6, r6, #1
 8012200:	4406      	add	r6, r0
 8012202:	dc1a      	bgt.n	801223a <_strtod_l+0x26a>
 8012204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012206:	230a      	movs	r3, #10
 8012208:	fb03 2301 	mla	r3, r3, r1, r2
 801220c:	9309      	str	r3, [sp, #36]	; 0x24
 801220e:	2300      	movs	r3, #0
 8012210:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012212:	1c51      	adds	r1, r2, #1
 8012214:	9115      	str	r1, [sp, #84]	; 0x54
 8012216:	7852      	ldrb	r2, [r2, #1]
 8012218:	4618      	mov	r0, r3
 801221a:	e7c9      	b.n	80121b0 <_strtod_l+0x1e0>
 801221c:	4658      	mov	r0, fp
 801221e:	e7d2      	b.n	80121c6 <_strtod_l+0x1f6>
 8012220:	2b08      	cmp	r3, #8
 8012222:	f103 0301 	add.w	r3, r3, #1
 8012226:	dc03      	bgt.n	8012230 <_strtod_l+0x260>
 8012228:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801222a:	434f      	muls	r7, r1
 801222c:	9709      	str	r7, [sp, #36]	; 0x24
 801222e:	e7e1      	b.n	80121f4 <_strtod_l+0x224>
 8012230:	2b10      	cmp	r3, #16
 8012232:	bfd8      	it	le
 8012234:	fb01 fa0a 	mulle.w	sl, r1, sl
 8012238:	e7dc      	b.n	80121f4 <_strtod_l+0x224>
 801223a:	2e10      	cmp	r6, #16
 801223c:	bfdc      	itt	le
 801223e:	230a      	movle	r3, #10
 8012240:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8012244:	e7e3      	b.n	801220e <_strtod_l+0x23e>
 8012246:	2300      	movs	r3, #0
 8012248:	9305      	str	r3, [sp, #20]
 801224a:	2301      	movs	r3, #1
 801224c:	e780      	b.n	8012150 <_strtod_l+0x180>
 801224e:	f04f 0c00 	mov.w	ip, #0
 8012252:	1caa      	adds	r2, r5, #2
 8012254:	9215      	str	r2, [sp, #84]	; 0x54
 8012256:	78aa      	ldrb	r2, [r5, #2]
 8012258:	e788      	b.n	801216c <_strtod_l+0x19c>
 801225a:	f04f 0c01 	mov.w	ip, #1
 801225e:	e7f8      	b.n	8012252 <_strtod_l+0x282>
 8012260:	08015bbc 	.word	0x08015bbc
 8012264:	08015bac 	.word	0x08015bac
 8012268:	7ff00000 	.word	0x7ff00000
 801226c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801226e:	1c51      	adds	r1, r2, #1
 8012270:	9115      	str	r1, [sp, #84]	; 0x54
 8012272:	7852      	ldrb	r2, [r2, #1]
 8012274:	2a30      	cmp	r2, #48	; 0x30
 8012276:	d0f9      	beq.n	801226c <_strtod_l+0x29c>
 8012278:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 801227c:	2908      	cmp	r1, #8
 801227e:	f63f af7a 	bhi.w	8012176 <_strtod_l+0x1a6>
 8012282:	3a30      	subs	r2, #48	; 0x30
 8012284:	9208      	str	r2, [sp, #32]
 8012286:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8012288:	920c      	str	r2, [sp, #48]	; 0x30
 801228a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801228c:	1c57      	adds	r7, r2, #1
 801228e:	9715      	str	r7, [sp, #84]	; 0x54
 8012290:	7852      	ldrb	r2, [r2, #1]
 8012292:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8012296:	f1be 0f09 	cmp.w	lr, #9
 801229a:	d938      	bls.n	801230e <_strtod_l+0x33e>
 801229c:	990c      	ldr	r1, [sp, #48]	; 0x30
 801229e:	1a7f      	subs	r7, r7, r1
 80122a0:	2f08      	cmp	r7, #8
 80122a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80122a6:	dc03      	bgt.n	80122b0 <_strtod_l+0x2e0>
 80122a8:	9908      	ldr	r1, [sp, #32]
 80122aa:	428f      	cmp	r7, r1
 80122ac:	bfa8      	it	ge
 80122ae:	460f      	movge	r7, r1
 80122b0:	f1bc 0f00 	cmp.w	ip, #0
 80122b4:	d000      	beq.n	80122b8 <_strtod_l+0x2e8>
 80122b6:	427f      	negs	r7, r7
 80122b8:	2e00      	cmp	r6, #0
 80122ba:	d14f      	bne.n	801235c <_strtod_l+0x38c>
 80122bc:	9904      	ldr	r1, [sp, #16]
 80122be:	4301      	orrs	r1, r0
 80122c0:	f47f aec1 	bne.w	8012046 <_strtod_l+0x76>
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	f47f aedb 	bne.w	8012080 <_strtod_l+0xb0>
 80122ca:	2a69      	cmp	r2, #105	; 0x69
 80122cc:	d029      	beq.n	8012322 <_strtod_l+0x352>
 80122ce:	dc26      	bgt.n	801231e <_strtod_l+0x34e>
 80122d0:	2a49      	cmp	r2, #73	; 0x49
 80122d2:	d026      	beq.n	8012322 <_strtod_l+0x352>
 80122d4:	2a4e      	cmp	r2, #78	; 0x4e
 80122d6:	f47f aed3 	bne.w	8012080 <_strtod_l+0xb0>
 80122da:	499b      	ldr	r1, [pc, #620]	; (8012548 <_strtod_l+0x578>)
 80122dc:	a815      	add	r0, sp, #84	; 0x54
 80122de:	f001 fa8d 	bl	80137fc <__match>
 80122e2:	2800      	cmp	r0, #0
 80122e4:	f43f aecc 	beq.w	8012080 <_strtod_l+0xb0>
 80122e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80122ea:	781b      	ldrb	r3, [r3, #0]
 80122ec:	2b28      	cmp	r3, #40	; 0x28
 80122ee:	d12f      	bne.n	8012350 <_strtod_l+0x380>
 80122f0:	4996      	ldr	r1, [pc, #600]	; (801254c <_strtod_l+0x57c>)
 80122f2:	aa18      	add	r2, sp, #96	; 0x60
 80122f4:	a815      	add	r0, sp, #84	; 0x54
 80122f6:	f001 fa95 	bl	8013824 <__hexnan>
 80122fa:	2805      	cmp	r0, #5
 80122fc:	d128      	bne.n	8012350 <_strtod_l+0x380>
 80122fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012300:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012304:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8012308:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 801230c:	e69b      	b.n	8012046 <_strtod_l+0x76>
 801230e:	9f08      	ldr	r7, [sp, #32]
 8012310:	210a      	movs	r1, #10
 8012312:	fb01 2107 	mla	r1, r1, r7, r2
 8012316:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 801231a:	9208      	str	r2, [sp, #32]
 801231c:	e7b5      	b.n	801228a <_strtod_l+0x2ba>
 801231e:	2a6e      	cmp	r2, #110	; 0x6e
 8012320:	e7d9      	b.n	80122d6 <_strtod_l+0x306>
 8012322:	498b      	ldr	r1, [pc, #556]	; (8012550 <_strtod_l+0x580>)
 8012324:	a815      	add	r0, sp, #84	; 0x54
 8012326:	f001 fa69 	bl	80137fc <__match>
 801232a:	2800      	cmp	r0, #0
 801232c:	f43f aea8 	beq.w	8012080 <_strtod_l+0xb0>
 8012330:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012332:	4988      	ldr	r1, [pc, #544]	; (8012554 <_strtod_l+0x584>)
 8012334:	3b01      	subs	r3, #1
 8012336:	a815      	add	r0, sp, #84	; 0x54
 8012338:	9315      	str	r3, [sp, #84]	; 0x54
 801233a:	f001 fa5f 	bl	80137fc <__match>
 801233e:	b910      	cbnz	r0, 8012346 <_strtod_l+0x376>
 8012340:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012342:	3301      	adds	r3, #1
 8012344:	9315      	str	r3, [sp, #84]	; 0x54
 8012346:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8012564 <_strtod_l+0x594>
 801234a:	f04f 0800 	mov.w	r8, #0
 801234e:	e67a      	b.n	8012046 <_strtod_l+0x76>
 8012350:	4881      	ldr	r0, [pc, #516]	; (8012558 <_strtod_l+0x588>)
 8012352:	f000 ff51 	bl	80131f8 <nan>
 8012356:	ec59 8b10 	vmov	r8, r9, d0
 801235a:	e674      	b.n	8012046 <_strtod_l+0x76>
 801235c:	9b05      	ldr	r3, [sp, #20]
 801235e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012360:	1afb      	subs	r3, r7, r3
 8012362:	f1bb 0f00 	cmp.w	fp, #0
 8012366:	bf08      	it	eq
 8012368:	46b3      	moveq	fp, r6
 801236a:	2e10      	cmp	r6, #16
 801236c:	9308      	str	r3, [sp, #32]
 801236e:	4635      	mov	r5, r6
 8012370:	bfa8      	it	ge
 8012372:	2510      	movge	r5, #16
 8012374:	f7ee f8f6 	bl	8000564 <__aeabi_ui2d>
 8012378:	2e09      	cmp	r6, #9
 801237a:	4680      	mov	r8, r0
 801237c:	4689      	mov	r9, r1
 801237e:	dd13      	ble.n	80123a8 <_strtod_l+0x3d8>
 8012380:	4b76      	ldr	r3, [pc, #472]	; (801255c <_strtod_l+0x58c>)
 8012382:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012386:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801238a:	f7ee f965 	bl	8000658 <__aeabi_dmul>
 801238e:	4680      	mov	r8, r0
 8012390:	4650      	mov	r0, sl
 8012392:	4689      	mov	r9, r1
 8012394:	f7ee f8e6 	bl	8000564 <__aeabi_ui2d>
 8012398:	4602      	mov	r2, r0
 801239a:	460b      	mov	r3, r1
 801239c:	4640      	mov	r0, r8
 801239e:	4649      	mov	r1, r9
 80123a0:	f7ed ffa4 	bl	80002ec <__adddf3>
 80123a4:	4680      	mov	r8, r0
 80123a6:	4689      	mov	r9, r1
 80123a8:	2e0f      	cmp	r6, #15
 80123aa:	dc38      	bgt.n	801241e <_strtod_l+0x44e>
 80123ac:	9b08      	ldr	r3, [sp, #32]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	f43f ae49 	beq.w	8012046 <_strtod_l+0x76>
 80123b4:	dd24      	ble.n	8012400 <_strtod_l+0x430>
 80123b6:	2b16      	cmp	r3, #22
 80123b8:	dc0b      	bgt.n	80123d2 <_strtod_l+0x402>
 80123ba:	4968      	ldr	r1, [pc, #416]	; (801255c <_strtod_l+0x58c>)
 80123bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80123c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123c4:	4642      	mov	r2, r8
 80123c6:	464b      	mov	r3, r9
 80123c8:	f7ee f946 	bl	8000658 <__aeabi_dmul>
 80123cc:	4680      	mov	r8, r0
 80123ce:	4689      	mov	r9, r1
 80123d0:	e639      	b.n	8012046 <_strtod_l+0x76>
 80123d2:	9a08      	ldr	r2, [sp, #32]
 80123d4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80123d8:	4293      	cmp	r3, r2
 80123da:	db20      	blt.n	801241e <_strtod_l+0x44e>
 80123dc:	4c5f      	ldr	r4, [pc, #380]	; (801255c <_strtod_l+0x58c>)
 80123de:	f1c6 060f 	rsb	r6, r6, #15
 80123e2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80123e6:	4642      	mov	r2, r8
 80123e8:	464b      	mov	r3, r9
 80123ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123ee:	f7ee f933 	bl	8000658 <__aeabi_dmul>
 80123f2:	9b08      	ldr	r3, [sp, #32]
 80123f4:	1b9e      	subs	r6, r3, r6
 80123f6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80123fa:	e9d4 2300 	ldrd	r2, r3, [r4]
 80123fe:	e7e3      	b.n	80123c8 <_strtod_l+0x3f8>
 8012400:	9b08      	ldr	r3, [sp, #32]
 8012402:	3316      	adds	r3, #22
 8012404:	db0b      	blt.n	801241e <_strtod_l+0x44e>
 8012406:	9b05      	ldr	r3, [sp, #20]
 8012408:	1bdf      	subs	r7, r3, r7
 801240a:	4b54      	ldr	r3, [pc, #336]	; (801255c <_strtod_l+0x58c>)
 801240c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8012410:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012414:	4640      	mov	r0, r8
 8012416:	4649      	mov	r1, r9
 8012418:	f7ee fa48 	bl	80008ac <__aeabi_ddiv>
 801241c:	e7d6      	b.n	80123cc <_strtod_l+0x3fc>
 801241e:	9b08      	ldr	r3, [sp, #32]
 8012420:	1b75      	subs	r5, r6, r5
 8012422:	441d      	add	r5, r3
 8012424:	2d00      	cmp	r5, #0
 8012426:	dd70      	ble.n	801250a <_strtod_l+0x53a>
 8012428:	f015 030f 	ands.w	r3, r5, #15
 801242c:	d00a      	beq.n	8012444 <_strtod_l+0x474>
 801242e:	494b      	ldr	r1, [pc, #300]	; (801255c <_strtod_l+0x58c>)
 8012430:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8012434:	4642      	mov	r2, r8
 8012436:	464b      	mov	r3, r9
 8012438:	e9d1 0100 	ldrd	r0, r1, [r1]
 801243c:	f7ee f90c 	bl	8000658 <__aeabi_dmul>
 8012440:	4680      	mov	r8, r0
 8012442:	4689      	mov	r9, r1
 8012444:	f035 050f 	bics.w	r5, r5, #15
 8012448:	d04d      	beq.n	80124e6 <_strtod_l+0x516>
 801244a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 801244e:	dd22      	ble.n	8012496 <_strtod_l+0x4c6>
 8012450:	2500      	movs	r5, #0
 8012452:	46ab      	mov	fp, r5
 8012454:	9509      	str	r5, [sp, #36]	; 0x24
 8012456:	9505      	str	r5, [sp, #20]
 8012458:	2322      	movs	r3, #34	; 0x22
 801245a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8012564 <_strtod_l+0x594>
 801245e:	6023      	str	r3, [r4, #0]
 8012460:	f04f 0800 	mov.w	r8, #0
 8012464:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012466:	2b00      	cmp	r3, #0
 8012468:	f43f aded 	beq.w	8012046 <_strtod_l+0x76>
 801246c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801246e:	4620      	mov	r0, r4
 8012470:	f001 fb72 	bl	8013b58 <_Bfree>
 8012474:	9905      	ldr	r1, [sp, #20]
 8012476:	4620      	mov	r0, r4
 8012478:	f001 fb6e 	bl	8013b58 <_Bfree>
 801247c:	4659      	mov	r1, fp
 801247e:	4620      	mov	r0, r4
 8012480:	f001 fb6a 	bl	8013b58 <_Bfree>
 8012484:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012486:	4620      	mov	r0, r4
 8012488:	f001 fb66 	bl	8013b58 <_Bfree>
 801248c:	4629      	mov	r1, r5
 801248e:	4620      	mov	r0, r4
 8012490:	f001 fb62 	bl	8013b58 <_Bfree>
 8012494:	e5d7      	b.n	8012046 <_strtod_l+0x76>
 8012496:	4b32      	ldr	r3, [pc, #200]	; (8012560 <_strtod_l+0x590>)
 8012498:	9304      	str	r3, [sp, #16]
 801249a:	2300      	movs	r3, #0
 801249c:	112d      	asrs	r5, r5, #4
 801249e:	4640      	mov	r0, r8
 80124a0:	4649      	mov	r1, r9
 80124a2:	469a      	mov	sl, r3
 80124a4:	2d01      	cmp	r5, #1
 80124a6:	dc21      	bgt.n	80124ec <_strtod_l+0x51c>
 80124a8:	b10b      	cbz	r3, 80124ae <_strtod_l+0x4de>
 80124aa:	4680      	mov	r8, r0
 80124ac:	4689      	mov	r9, r1
 80124ae:	492c      	ldr	r1, [pc, #176]	; (8012560 <_strtod_l+0x590>)
 80124b0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80124b4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80124b8:	4642      	mov	r2, r8
 80124ba:	464b      	mov	r3, r9
 80124bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124c0:	f7ee f8ca 	bl	8000658 <__aeabi_dmul>
 80124c4:	4b27      	ldr	r3, [pc, #156]	; (8012564 <_strtod_l+0x594>)
 80124c6:	460a      	mov	r2, r1
 80124c8:	400b      	ands	r3, r1
 80124ca:	4927      	ldr	r1, [pc, #156]	; (8012568 <_strtod_l+0x598>)
 80124cc:	428b      	cmp	r3, r1
 80124ce:	4680      	mov	r8, r0
 80124d0:	d8be      	bhi.n	8012450 <_strtod_l+0x480>
 80124d2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80124d6:	428b      	cmp	r3, r1
 80124d8:	bf86      	itte	hi
 80124da:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 801256c <_strtod_l+0x59c>
 80124de:	f04f 38ff 	movhi.w	r8, #4294967295
 80124e2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80124e6:	2300      	movs	r3, #0
 80124e8:	9304      	str	r3, [sp, #16]
 80124ea:	e07b      	b.n	80125e4 <_strtod_l+0x614>
 80124ec:	07ea      	lsls	r2, r5, #31
 80124ee:	d505      	bpl.n	80124fc <_strtod_l+0x52c>
 80124f0:	9b04      	ldr	r3, [sp, #16]
 80124f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f6:	f7ee f8af 	bl	8000658 <__aeabi_dmul>
 80124fa:	2301      	movs	r3, #1
 80124fc:	9a04      	ldr	r2, [sp, #16]
 80124fe:	3208      	adds	r2, #8
 8012500:	f10a 0a01 	add.w	sl, sl, #1
 8012504:	106d      	asrs	r5, r5, #1
 8012506:	9204      	str	r2, [sp, #16]
 8012508:	e7cc      	b.n	80124a4 <_strtod_l+0x4d4>
 801250a:	d0ec      	beq.n	80124e6 <_strtod_l+0x516>
 801250c:	426d      	negs	r5, r5
 801250e:	f015 020f 	ands.w	r2, r5, #15
 8012512:	d00a      	beq.n	801252a <_strtod_l+0x55a>
 8012514:	4b11      	ldr	r3, [pc, #68]	; (801255c <_strtod_l+0x58c>)
 8012516:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801251a:	4640      	mov	r0, r8
 801251c:	4649      	mov	r1, r9
 801251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012522:	f7ee f9c3 	bl	80008ac <__aeabi_ddiv>
 8012526:	4680      	mov	r8, r0
 8012528:	4689      	mov	r9, r1
 801252a:	112d      	asrs	r5, r5, #4
 801252c:	d0db      	beq.n	80124e6 <_strtod_l+0x516>
 801252e:	2d1f      	cmp	r5, #31
 8012530:	dd1e      	ble.n	8012570 <_strtod_l+0x5a0>
 8012532:	2500      	movs	r5, #0
 8012534:	46ab      	mov	fp, r5
 8012536:	9509      	str	r5, [sp, #36]	; 0x24
 8012538:	9505      	str	r5, [sp, #20]
 801253a:	2322      	movs	r3, #34	; 0x22
 801253c:	f04f 0800 	mov.w	r8, #0
 8012540:	f04f 0900 	mov.w	r9, #0
 8012544:	6023      	str	r3, [r4, #0]
 8012546:	e78d      	b.n	8012464 <_strtod_l+0x494>
 8012548:	08015bb7 	.word	0x08015bb7
 801254c:	08015bd0 	.word	0x08015bd0
 8012550:	08015bae 	.word	0x08015bae
 8012554:	08015bb1 	.word	0x08015bb1
 8012558:	08015f6a 	.word	0x08015f6a
 801255c:	08015e28 	.word	0x08015e28
 8012560:	08015e00 	.word	0x08015e00
 8012564:	7ff00000 	.word	0x7ff00000
 8012568:	7ca00000 	.word	0x7ca00000
 801256c:	7fefffff 	.word	0x7fefffff
 8012570:	f015 0310 	ands.w	r3, r5, #16
 8012574:	bf18      	it	ne
 8012576:	236a      	movne	r3, #106	; 0x6a
 8012578:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 801291c <_strtod_l+0x94c>
 801257c:	9304      	str	r3, [sp, #16]
 801257e:	4640      	mov	r0, r8
 8012580:	4649      	mov	r1, r9
 8012582:	2300      	movs	r3, #0
 8012584:	07ea      	lsls	r2, r5, #31
 8012586:	d504      	bpl.n	8012592 <_strtod_l+0x5c2>
 8012588:	e9da 2300 	ldrd	r2, r3, [sl]
 801258c:	f7ee f864 	bl	8000658 <__aeabi_dmul>
 8012590:	2301      	movs	r3, #1
 8012592:	106d      	asrs	r5, r5, #1
 8012594:	f10a 0a08 	add.w	sl, sl, #8
 8012598:	d1f4      	bne.n	8012584 <_strtod_l+0x5b4>
 801259a:	b10b      	cbz	r3, 80125a0 <_strtod_l+0x5d0>
 801259c:	4680      	mov	r8, r0
 801259e:	4689      	mov	r9, r1
 80125a0:	9b04      	ldr	r3, [sp, #16]
 80125a2:	b1bb      	cbz	r3, 80125d4 <_strtod_l+0x604>
 80125a4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80125a8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	4649      	mov	r1, r9
 80125b0:	dd10      	ble.n	80125d4 <_strtod_l+0x604>
 80125b2:	2b1f      	cmp	r3, #31
 80125b4:	f340 811e 	ble.w	80127f4 <_strtod_l+0x824>
 80125b8:	2b34      	cmp	r3, #52	; 0x34
 80125ba:	bfde      	ittt	le
 80125bc:	f04f 33ff 	movle.w	r3, #4294967295
 80125c0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80125c4:	4093      	lslle	r3, r2
 80125c6:	f04f 0800 	mov.w	r8, #0
 80125ca:	bfcc      	ite	gt
 80125cc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80125d0:	ea03 0901 	andle.w	r9, r3, r1
 80125d4:	2200      	movs	r2, #0
 80125d6:	2300      	movs	r3, #0
 80125d8:	4640      	mov	r0, r8
 80125da:	4649      	mov	r1, r9
 80125dc:	f7ee faa4 	bl	8000b28 <__aeabi_dcmpeq>
 80125e0:	2800      	cmp	r0, #0
 80125e2:	d1a6      	bne.n	8012532 <_strtod_l+0x562>
 80125e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80125e6:	9300      	str	r3, [sp, #0]
 80125e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80125ea:	4633      	mov	r3, r6
 80125ec:	465a      	mov	r2, fp
 80125ee:	4620      	mov	r0, r4
 80125f0:	f001 fb1a 	bl	8013c28 <__s2b>
 80125f4:	9009      	str	r0, [sp, #36]	; 0x24
 80125f6:	2800      	cmp	r0, #0
 80125f8:	f43f af2a 	beq.w	8012450 <_strtod_l+0x480>
 80125fc:	9a08      	ldr	r2, [sp, #32]
 80125fe:	9b05      	ldr	r3, [sp, #20]
 8012600:	2a00      	cmp	r2, #0
 8012602:	eba3 0307 	sub.w	r3, r3, r7
 8012606:	bfa8      	it	ge
 8012608:	2300      	movge	r3, #0
 801260a:	930c      	str	r3, [sp, #48]	; 0x30
 801260c:	2500      	movs	r5, #0
 801260e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8012612:	9312      	str	r3, [sp, #72]	; 0x48
 8012614:	46ab      	mov	fp, r5
 8012616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012618:	4620      	mov	r0, r4
 801261a:	6859      	ldr	r1, [r3, #4]
 801261c:	f001 fa5c 	bl	8013ad8 <_Balloc>
 8012620:	9005      	str	r0, [sp, #20]
 8012622:	2800      	cmp	r0, #0
 8012624:	f43f af18 	beq.w	8012458 <_strtod_l+0x488>
 8012628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801262a:	691a      	ldr	r2, [r3, #16]
 801262c:	3202      	adds	r2, #2
 801262e:	f103 010c 	add.w	r1, r3, #12
 8012632:	0092      	lsls	r2, r2, #2
 8012634:	300c      	adds	r0, #12
 8012636:	f000 fdd0 	bl	80131da <memcpy>
 801263a:	ec49 8b10 	vmov	d0, r8, r9
 801263e:	aa18      	add	r2, sp, #96	; 0x60
 8012640:	a917      	add	r1, sp, #92	; 0x5c
 8012642:	4620      	mov	r0, r4
 8012644:	f001 fe24 	bl	8014290 <__d2b>
 8012648:	ec49 8b18 	vmov	d8, r8, r9
 801264c:	9016      	str	r0, [sp, #88]	; 0x58
 801264e:	2800      	cmp	r0, #0
 8012650:	f43f af02 	beq.w	8012458 <_strtod_l+0x488>
 8012654:	2101      	movs	r1, #1
 8012656:	4620      	mov	r0, r4
 8012658:	f001 fb7e 	bl	8013d58 <__i2b>
 801265c:	4683      	mov	fp, r0
 801265e:	2800      	cmp	r0, #0
 8012660:	f43f aefa 	beq.w	8012458 <_strtod_l+0x488>
 8012664:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8012666:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8012668:	2e00      	cmp	r6, #0
 801266a:	bfab      	itete	ge
 801266c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 801266e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8012670:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8012672:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8012676:	bfac      	ite	ge
 8012678:	eb06 0a03 	addge.w	sl, r6, r3
 801267c:	1b9f      	sublt	r7, r3, r6
 801267e:	9b04      	ldr	r3, [sp, #16]
 8012680:	1af6      	subs	r6, r6, r3
 8012682:	4416      	add	r6, r2
 8012684:	4ba0      	ldr	r3, [pc, #640]	; (8012908 <_strtod_l+0x938>)
 8012686:	3e01      	subs	r6, #1
 8012688:	429e      	cmp	r6, r3
 801268a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801268e:	f280 80c4 	bge.w	801281a <_strtod_l+0x84a>
 8012692:	1b9b      	subs	r3, r3, r6
 8012694:	2b1f      	cmp	r3, #31
 8012696:	eba2 0203 	sub.w	r2, r2, r3
 801269a:	f04f 0101 	mov.w	r1, #1
 801269e:	f300 80b0 	bgt.w	8012802 <_strtod_l+0x832>
 80126a2:	fa01 f303 	lsl.w	r3, r1, r3
 80126a6:	930e      	str	r3, [sp, #56]	; 0x38
 80126a8:	2300      	movs	r3, #0
 80126aa:	930d      	str	r3, [sp, #52]	; 0x34
 80126ac:	eb0a 0602 	add.w	r6, sl, r2
 80126b0:	9b04      	ldr	r3, [sp, #16]
 80126b2:	45b2      	cmp	sl, r6
 80126b4:	4417      	add	r7, r2
 80126b6:	441f      	add	r7, r3
 80126b8:	4653      	mov	r3, sl
 80126ba:	bfa8      	it	ge
 80126bc:	4633      	movge	r3, r6
 80126be:	42bb      	cmp	r3, r7
 80126c0:	bfa8      	it	ge
 80126c2:	463b      	movge	r3, r7
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	bfc2      	ittt	gt
 80126c8:	1af6      	subgt	r6, r6, r3
 80126ca:	1aff      	subgt	r7, r7, r3
 80126cc:	ebaa 0a03 	subgt.w	sl, sl, r3
 80126d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80126d2:	2b00      	cmp	r3, #0
 80126d4:	dd17      	ble.n	8012706 <_strtod_l+0x736>
 80126d6:	4659      	mov	r1, fp
 80126d8:	461a      	mov	r2, r3
 80126da:	4620      	mov	r0, r4
 80126dc:	f001 fbfc 	bl	8013ed8 <__pow5mult>
 80126e0:	4683      	mov	fp, r0
 80126e2:	2800      	cmp	r0, #0
 80126e4:	f43f aeb8 	beq.w	8012458 <_strtod_l+0x488>
 80126e8:	4601      	mov	r1, r0
 80126ea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80126ec:	4620      	mov	r0, r4
 80126ee:	f001 fb49 	bl	8013d84 <__multiply>
 80126f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80126f4:	2800      	cmp	r0, #0
 80126f6:	f43f aeaf 	beq.w	8012458 <_strtod_l+0x488>
 80126fa:	9916      	ldr	r1, [sp, #88]	; 0x58
 80126fc:	4620      	mov	r0, r4
 80126fe:	f001 fa2b 	bl	8013b58 <_Bfree>
 8012702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012704:	9316      	str	r3, [sp, #88]	; 0x58
 8012706:	2e00      	cmp	r6, #0
 8012708:	f300 808c 	bgt.w	8012824 <_strtod_l+0x854>
 801270c:	9b08      	ldr	r3, [sp, #32]
 801270e:	2b00      	cmp	r3, #0
 8012710:	dd08      	ble.n	8012724 <_strtod_l+0x754>
 8012712:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012714:	9905      	ldr	r1, [sp, #20]
 8012716:	4620      	mov	r0, r4
 8012718:	f001 fbde 	bl	8013ed8 <__pow5mult>
 801271c:	9005      	str	r0, [sp, #20]
 801271e:	2800      	cmp	r0, #0
 8012720:	f43f ae9a 	beq.w	8012458 <_strtod_l+0x488>
 8012724:	2f00      	cmp	r7, #0
 8012726:	dd08      	ble.n	801273a <_strtod_l+0x76a>
 8012728:	9905      	ldr	r1, [sp, #20]
 801272a:	463a      	mov	r2, r7
 801272c:	4620      	mov	r0, r4
 801272e:	f001 fc2d 	bl	8013f8c <__lshift>
 8012732:	9005      	str	r0, [sp, #20]
 8012734:	2800      	cmp	r0, #0
 8012736:	f43f ae8f 	beq.w	8012458 <_strtod_l+0x488>
 801273a:	f1ba 0f00 	cmp.w	sl, #0
 801273e:	dd08      	ble.n	8012752 <_strtod_l+0x782>
 8012740:	4659      	mov	r1, fp
 8012742:	4652      	mov	r2, sl
 8012744:	4620      	mov	r0, r4
 8012746:	f001 fc21 	bl	8013f8c <__lshift>
 801274a:	4683      	mov	fp, r0
 801274c:	2800      	cmp	r0, #0
 801274e:	f43f ae83 	beq.w	8012458 <_strtod_l+0x488>
 8012752:	9a05      	ldr	r2, [sp, #20]
 8012754:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012756:	4620      	mov	r0, r4
 8012758:	f001 fca0 	bl	801409c <__mdiff>
 801275c:	4605      	mov	r5, r0
 801275e:	2800      	cmp	r0, #0
 8012760:	f43f ae7a 	beq.w	8012458 <_strtod_l+0x488>
 8012764:	68c3      	ldr	r3, [r0, #12]
 8012766:	930b      	str	r3, [sp, #44]	; 0x2c
 8012768:	2300      	movs	r3, #0
 801276a:	60c3      	str	r3, [r0, #12]
 801276c:	4659      	mov	r1, fp
 801276e:	f001 fc79 	bl	8014064 <__mcmp>
 8012772:	2800      	cmp	r0, #0
 8012774:	da60      	bge.n	8012838 <_strtod_l+0x868>
 8012776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012778:	ea53 0308 	orrs.w	r3, r3, r8
 801277c:	f040 8084 	bne.w	8012888 <_strtod_l+0x8b8>
 8012780:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012784:	2b00      	cmp	r3, #0
 8012786:	d17f      	bne.n	8012888 <_strtod_l+0x8b8>
 8012788:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801278c:	0d1b      	lsrs	r3, r3, #20
 801278e:	051b      	lsls	r3, r3, #20
 8012790:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8012794:	d978      	bls.n	8012888 <_strtod_l+0x8b8>
 8012796:	696b      	ldr	r3, [r5, #20]
 8012798:	b913      	cbnz	r3, 80127a0 <_strtod_l+0x7d0>
 801279a:	692b      	ldr	r3, [r5, #16]
 801279c:	2b01      	cmp	r3, #1
 801279e:	dd73      	ble.n	8012888 <_strtod_l+0x8b8>
 80127a0:	4629      	mov	r1, r5
 80127a2:	2201      	movs	r2, #1
 80127a4:	4620      	mov	r0, r4
 80127a6:	f001 fbf1 	bl	8013f8c <__lshift>
 80127aa:	4659      	mov	r1, fp
 80127ac:	4605      	mov	r5, r0
 80127ae:	f001 fc59 	bl	8014064 <__mcmp>
 80127b2:	2800      	cmp	r0, #0
 80127b4:	dd68      	ble.n	8012888 <_strtod_l+0x8b8>
 80127b6:	9904      	ldr	r1, [sp, #16]
 80127b8:	4a54      	ldr	r2, [pc, #336]	; (801290c <_strtod_l+0x93c>)
 80127ba:	464b      	mov	r3, r9
 80127bc:	2900      	cmp	r1, #0
 80127be:	f000 8084 	beq.w	80128ca <_strtod_l+0x8fa>
 80127c2:	ea02 0109 	and.w	r1, r2, r9
 80127c6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80127ca:	dc7e      	bgt.n	80128ca <_strtod_l+0x8fa>
 80127cc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80127d0:	f77f aeb3 	ble.w	801253a <_strtod_l+0x56a>
 80127d4:	4b4e      	ldr	r3, [pc, #312]	; (8012910 <_strtod_l+0x940>)
 80127d6:	4640      	mov	r0, r8
 80127d8:	4649      	mov	r1, r9
 80127da:	2200      	movs	r2, #0
 80127dc:	f7ed ff3c 	bl	8000658 <__aeabi_dmul>
 80127e0:	4b4a      	ldr	r3, [pc, #296]	; (801290c <_strtod_l+0x93c>)
 80127e2:	400b      	ands	r3, r1
 80127e4:	4680      	mov	r8, r0
 80127e6:	4689      	mov	r9, r1
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	f47f ae3f 	bne.w	801246c <_strtod_l+0x49c>
 80127ee:	2322      	movs	r3, #34	; 0x22
 80127f0:	6023      	str	r3, [r4, #0]
 80127f2:	e63b      	b.n	801246c <_strtod_l+0x49c>
 80127f4:	f04f 32ff 	mov.w	r2, #4294967295
 80127f8:	fa02 f303 	lsl.w	r3, r2, r3
 80127fc:	ea03 0808 	and.w	r8, r3, r8
 8012800:	e6e8      	b.n	80125d4 <_strtod_l+0x604>
 8012802:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8012806:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801280a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 801280e:	36e2      	adds	r6, #226	; 0xe2
 8012810:	fa01 f306 	lsl.w	r3, r1, r6
 8012814:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8012818:	e748      	b.n	80126ac <_strtod_l+0x6dc>
 801281a:	2100      	movs	r1, #0
 801281c:	2301      	movs	r3, #1
 801281e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8012822:	e743      	b.n	80126ac <_strtod_l+0x6dc>
 8012824:	9916      	ldr	r1, [sp, #88]	; 0x58
 8012826:	4632      	mov	r2, r6
 8012828:	4620      	mov	r0, r4
 801282a:	f001 fbaf 	bl	8013f8c <__lshift>
 801282e:	9016      	str	r0, [sp, #88]	; 0x58
 8012830:	2800      	cmp	r0, #0
 8012832:	f47f af6b 	bne.w	801270c <_strtod_l+0x73c>
 8012836:	e60f      	b.n	8012458 <_strtod_l+0x488>
 8012838:	46ca      	mov	sl, r9
 801283a:	d171      	bne.n	8012920 <_strtod_l+0x950>
 801283c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801283e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012842:	b352      	cbz	r2, 801289a <_strtod_l+0x8ca>
 8012844:	4a33      	ldr	r2, [pc, #204]	; (8012914 <_strtod_l+0x944>)
 8012846:	4293      	cmp	r3, r2
 8012848:	d12a      	bne.n	80128a0 <_strtod_l+0x8d0>
 801284a:	9b04      	ldr	r3, [sp, #16]
 801284c:	4641      	mov	r1, r8
 801284e:	b1fb      	cbz	r3, 8012890 <_strtod_l+0x8c0>
 8012850:	4b2e      	ldr	r3, [pc, #184]	; (801290c <_strtod_l+0x93c>)
 8012852:	ea09 0303 	and.w	r3, r9, r3
 8012856:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801285a:	f04f 32ff 	mov.w	r2, #4294967295
 801285e:	d81a      	bhi.n	8012896 <_strtod_l+0x8c6>
 8012860:	0d1b      	lsrs	r3, r3, #20
 8012862:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012866:	fa02 f303 	lsl.w	r3, r2, r3
 801286a:	4299      	cmp	r1, r3
 801286c:	d118      	bne.n	80128a0 <_strtod_l+0x8d0>
 801286e:	4b2a      	ldr	r3, [pc, #168]	; (8012918 <_strtod_l+0x948>)
 8012870:	459a      	cmp	sl, r3
 8012872:	d102      	bne.n	801287a <_strtod_l+0x8aa>
 8012874:	3101      	adds	r1, #1
 8012876:	f43f adef 	beq.w	8012458 <_strtod_l+0x488>
 801287a:	4b24      	ldr	r3, [pc, #144]	; (801290c <_strtod_l+0x93c>)
 801287c:	ea0a 0303 	and.w	r3, sl, r3
 8012880:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8012884:	f04f 0800 	mov.w	r8, #0
 8012888:	9b04      	ldr	r3, [sp, #16]
 801288a:	2b00      	cmp	r3, #0
 801288c:	d1a2      	bne.n	80127d4 <_strtod_l+0x804>
 801288e:	e5ed      	b.n	801246c <_strtod_l+0x49c>
 8012890:	f04f 33ff 	mov.w	r3, #4294967295
 8012894:	e7e9      	b.n	801286a <_strtod_l+0x89a>
 8012896:	4613      	mov	r3, r2
 8012898:	e7e7      	b.n	801286a <_strtod_l+0x89a>
 801289a:	ea53 0308 	orrs.w	r3, r3, r8
 801289e:	d08a      	beq.n	80127b6 <_strtod_l+0x7e6>
 80128a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80128a2:	b1e3      	cbz	r3, 80128de <_strtod_l+0x90e>
 80128a4:	ea13 0f0a 	tst.w	r3, sl
 80128a8:	d0ee      	beq.n	8012888 <_strtod_l+0x8b8>
 80128aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128ac:	9a04      	ldr	r2, [sp, #16]
 80128ae:	4640      	mov	r0, r8
 80128b0:	4649      	mov	r1, r9
 80128b2:	b1c3      	cbz	r3, 80128e6 <_strtod_l+0x916>
 80128b4:	f7ff fb6d 	bl	8011f92 <sulp>
 80128b8:	4602      	mov	r2, r0
 80128ba:	460b      	mov	r3, r1
 80128bc:	ec51 0b18 	vmov	r0, r1, d8
 80128c0:	f7ed fd14 	bl	80002ec <__adddf3>
 80128c4:	4680      	mov	r8, r0
 80128c6:	4689      	mov	r9, r1
 80128c8:	e7de      	b.n	8012888 <_strtod_l+0x8b8>
 80128ca:	4013      	ands	r3, r2
 80128cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80128d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80128d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80128d8:	f04f 38ff 	mov.w	r8, #4294967295
 80128dc:	e7d4      	b.n	8012888 <_strtod_l+0x8b8>
 80128de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80128e0:	ea13 0f08 	tst.w	r3, r8
 80128e4:	e7e0      	b.n	80128a8 <_strtod_l+0x8d8>
 80128e6:	f7ff fb54 	bl	8011f92 <sulp>
 80128ea:	4602      	mov	r2, r0
 80128ec:	460b      	mov	r3, r1
 80128ee:	ec51 0b18 	vmov	r0, r1, d8
 80128f2:	f7ed fcf9 	bl	80002e8 <__aeabi_dsub>
 80128f6:	2200      	movs	r2, #0
 80128f8:	2300      	movs	r3, #0
 80128fa:	4680      	mov	r8, r0
 80128fc:	4689      	mov	r9, r1
 80128fe:	f7ee f913 	bl	8000b28 <__aeabi_dcmpeq>
 8012902:	2800      	cmp	r0, #0
 8012904:	d0c0      	beq.n	8012888 <_strtod_l+0x8b8>
 8012906:	e618      	b.n	801253a <_strtod_l+0x56a>
 8012908:	fffffc02 	.word	0xfffffc02
 801290c:	7ff00000 	.word	0x7ff00000
 8012910:	39500000 	.word	0x39500000
 8012914:	000fffff 	.word	0x000fffff
 8012918:	7fefffff 	.word	0x7fefffff
 801291c:	08015be8 	.word	0x08015be8
 8012920:	4659      	mov	r1, fp
 8012922:	4628      	mov	r0, r5
 8012924:	f001 fd0e 	bl	8014344 <__ratio>
 8012928:	ec57 6b10 	vmov	r6, r7, d0
 801292c:	ee10 0a10 	vmov	r0, s0
 8012930:	2200      	movs	r2, #0
 8012932:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012936:	4639      	mov	r1, r7
 8012938:	f7ee f90a 	bl	8000b50 <__aeabi_dcmple>
 801293c:	2800      	cmp	r0, #0
 801293e:	d071      	beq.n	8012a24 <_strtod_l+0xa54>
 8012940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012942:	2b00      	cmp	r3, #0
 8012944:	d17c      	bne.n	8012a40 <_strtod_l+0xa70>
 8012946:	f1b8 0f00 	cmp.w	r8, #0
 801294a:	d15a      	bne.n	8012a02 <_strtod_l+0xa32>
 801294c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012950:	2b00      	cmp	r3, #0
 8012952:	d15d      	bne.n	8012a10 <_strtod_l+0xa40>
 8012954:	4b90      	ldr	r3, [pc, #576]	; (8012b98 <_strtod_l+0xbc8>)
 8012956:	2200      	movs	r2, #0
 8012958:	4630      	mov	r0, r6
 801295a:	4639      	mov	r1, r7
 801295c:	f7ee f8ee 	bl	8000b3c <__aeabi_dcmplt>
 8012960:	2800      	cmp	r0, #0
 8012962:	d15c      	bne.n	8012a1e <_strtod_l+0xa4e>
 8012964:	4630      	mov	r0, r6
 8012966:	4639      	mov	r1, r7
 8012968:	4b8c      	ldr	r3, [pc, #560]	; (8012b9c <_strtod_l+0xbcc>)
 801296a:	2200      	movs	r2, #0
 801296c:	f7ed fe74 	bl	8000658 <__aeabi_dmul>
 8012970:	4606      	mov	r6, r0
 8012972:	460f      	mov	r7, r1
 8012974:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8012978:	9606      	str	r6, [sp, #24]
 801297a:	9307      	str	r3, [sp, #28]
 801297c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8012980:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012984:	4b86      	ldr	r3, [pc, #536]	; (8012ba0 <_strtod_l+0xbd0>)
 8012986:	ea0a 0303 	and.w	r3, sl, r3
 801298a:	930d      	str	r3, [sp, #52]	; 0x34
 801298c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801298e:	4b85      	ldr	r3, [pc, #532]	; (8012ba4 <_strtod_l+0xbd4>)
 8012990:	429a      	cmp	r2, r3
 8012992:	f040 8090 	bne.w	8012ab6 <_strtod_l+0xae6>
 8012996:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 801299a:	ec49 8b10 	vmov	d0, r8, r9
 801299e:	f001 fc07 	bl	80141b0 <__ulp>
 80129a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80129a6:	ec51 0b10 	vmov	r0, r1, d0
 80129aa:	f7ed fe55 	bl	8000658 <__aeabi_dmul>
 80129ae:	4642      	mov	r2, r8
 80129b0:	464b      	mov	r3, r9
 80129b2:	f7ed fc9b 	bl	80002ec <__adddf3>
 80129b6:	460b      	mov	r3, r1
 80129b8:	4979      	ldr	r1, [pc, #484]	; (8012ba0 <_strtod_l+0xbd0>)
 80129ba:	4a7b      	ldr	r2, [pc, #492]	; (8012ba8 <_strtod_l+0xbd8>)
 80129bc:	4019      	ands	r1, r3
 80129be:	4291      	cmp	r1, r2
 80129c0:	4680      	mov	r8, r0
 80129c2:	d944      	bls.n	8012a4e <_strtod_l+0xa7e>
 80129c4:	ee18 2a90 	vmov	r2, s17
 80129c8:	4b78      	ldr	r3, [pc, #480]	; (8012bac <_strtod_l+0xbdc>)
 80129ca:	429a      	cmp	r2, r3
 80129cc:	d104      	bne.n	80129d8 <_strtod_l+0xa08>
 80129ce:	ee18 3a10 	vmov	r3, s16
 80129d2:	3301      	adds	r3, #1
 80129d4:	f43f ad40 	beq.w	8012458 <_strtod_l+0x488>
 80129d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8012bac <_strtod_l+0xbdc>
 80129dc:	f04f 38ff 	mov.w	r8, #4294967295
 80129e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80129e2:	4620      	mov	r0, r4
 80129e4:	f001 f8b8 	bl	8013b58 <_Bfree>
 80129e8:	9905      	ldr	r1, [sp, #20]
 80129ea:	4620      	mov	r0, r4
 80129ec:	f001 f8b4 	bl	8013b58 <_Bfree>
 80129f0:	4659      	mov	r1, fp
 80129f2:	4620      	mov	r0, r4
 80129f4:	f001 f8b0 	bl	8013b58 <_Bfree>
 80129f8:	4629      	mov	r1, r5
 80129fa:	4620      	mov	r0, r4
 80129fc:	f001 f8ac 	bl	8013b58 <_Bfree>
 8012a00:	e609      	b.n	8012616 <_strtod_l+0x646>
 8012a02:	f1b8 0f01 	cmp.w	r8, #1
 8012a06:	d103      	bne.n	8012a10 <_strtod_l+0xa40>
 8012a08:	f1b9 0f00 	cmp.w	r9, #0
 8012a0c:	f43f ad95 	beq.w	801253a <_strtod_l+0x56a>
 8012a10:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8012b68 <_strtod_l+0xb98>
 8012a14:	4f60      	ldr	r7, [pc, #384]	; (8012b98 <_strtod_l+0xbc8>)
 8012a16:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012a1a:	2600      	movs	r6, #0
 8012a1c:	e7ae      	b.n	801297c <_strtod_l+0x9ac>
 8012a1e:	4f5f      	ldr	r7, [pc, #380]	; (8012b9c <_strtod_l+0xbcc>)
 8012a20:	2600      	movs	r6, #0
 8012a22:	e7a7      	b.n	8012974 <_strtod_l+0x9a4>
 8012a24:	4b5d      	ldr	r3, [pc, #372]	; (8012b9c <_strtod_l+0xbcc>)
 8012a26:	4630      	mov	r0, r6
 8012a28:	4639      	mov	r1, r7
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	f7ed fe14 	bl	8000658 <__aeabi_dmul>
 8012a30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012a32:	4606      	mov	r6, r0
 8012a34:	460f      	mov	r7, r1
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d09c      	beq.n	8012974 <_strtod_l+0x9a4>
 8012a3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8012a3e:	e79d      	b.n	801297c <_strtod_l+0x9ac>
 8012a40:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8012b70 <_strtod_l+0xba0>
 8012a44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8012a48:	ec57 6b17 	vmov	r6, r7, d7
 8012a4c:	e796      	b.n	801297c <_strtod_l+0x9ac>
 8012a4e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8012a52:	9b04      	ldr	r3, [sp, #16]
 8012a54:	46ca      	mov	sl, r9
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d1c2      	bne.n	80129e0 <_strtod_l+0xa10>
 8012a5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012a5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012a60:	0d1b      	lsrs	r3, r3, #20
 8012a62:	051b      	lsls	r3, r3, #20
 8012a64:	429a      	cmp	r2, r3
 8012a66:	d1bb      	bne.n	80129e0 <_strtod_l+0xa10>
 8012a68:	4630      	mov	r0, r6
 8012a6a:	4639      	mov	r1, r7
 8012a6c:	f7ee f92c 	bl	8000cc8 <__aeabi_d2lz>
 8012a70:	f7ed fdc4 	bl	80005fc <__aeabi_l2d>
 8012a74:	4602      	mov	r2, r0
 8012a76:	460b      	mov	r3, r1
 8012a78:	4630      	mov	r0, r6
 8012a7a:	4639      	mov	r1, r7
 8012a7c:	f7ed fc34 	bl	80002e8 <__aeabi_dsub>
 8012a80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012a82:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8012a86:	ea43 0308 	orr.w	r3, r3, r8
 8012a8a:	4313      	orrs	r3, r2
 8012a8c:	4606      	mov	r6, r0
 8012a8e:	460f      	mov	r7, r1
 8012a90:	d054      	beq.n	8012b3c <_strtod_l+0xb6c>
 8012a92:	a339      	add	r3, pc, #228	; (adr r3, 8012b78 <_strtod_l+0xba8>)
 8012a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a98:	f7ee f850 	bl	8000b3c <__aeabi_dcmplt>
 8012a9c:	2800      	cmp	r0, #0
 8012a9e:	f47f ace5 	bne.w	801246c <_strtod_l+0x49c>
 8012aa2:	a337      	add	r3, pc, #220	; (adr r3, 8012b80 <_strtod_l+0xbb0>)
 8012aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa8:	4630      	mov	r0, r6
 8012aaa:	4639      	mov	r1, r7
 8012aac:	f7ee f864 	bl	8000b78 <__aeabi_dcmpgt>
 8012ab0:	2800      	cmp	r0, #0
 8012ab2:	d095      	beq.n	80129e0 <_strtod_l+0xa10>
 8012ab4:	e4da      	b.n	801246c <_strtod_l+0x49c>
 8012ab6:	9b04      	ldr	r3, [sp, #16]
 8012ab8:	b333      	cbz	r3, 8012b08 <_strtod_l+0xb38>
 8012aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012abc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8012ac0:	d822      	bhi.n	8012b08 <_strtod_l+0xb38>
 8012ac2:	a331      	add	r3, pc, #196	; (adr r3, 8012b88 <_strtod_l+0xbb8>)
 8012ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ac8:	4630      	mov	r0, r6
 8012aca:	4639      	mov	r1, r7
 8012acc:	f7ee f840 	bl	8000b50 <__aeabi_dcmple>
 8012ad0:	b1a0      	cbz	r0, 8012afc <_strtod_l+0xb2c>
 8012ad2:	4639      	mov	r1, r7
 8012ad4:	4630      	mov	r0, r6
 8012ad6:	f7ee f86f 	bl	8000bb8 <__aeabi_d2uiz>
 8012ada:	2801      	cmp	r0, #1
 8012adc:	bf38      	it	cc
 8012ade:	2001      	movcc	r0, #1
 8012ae0:	f7ed fd40 	bl	8000564 <__aeabi_ui2d>
 8012ae4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ae6:	4606      	mov	r6, r0
 8012ae8:	460f      	mov	r7, r1
 8012aea:	bb23      	cbnz	r3, 8012b36 <_strtod_l+0xb66>
 8012aec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012af0:	9010      	str	r0, [sp, #64]	; 0x40
 8012af2:	9311      	str	r3, [sp, #68]	; 0x44
 8012af4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012af8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8012afc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012afe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012b00:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8012b04:	1a9b      	subs	r3, r3, r2
 8012b06:	930f      	str	r3, [sp, #60]	; 0x3c
 8012b08:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012b0c:	eeb0 0a48 	vmov.f32	s0, s16
 8012b10:	eef0 0a68 	vmov.f32	s1, s17
 8012b14:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8012b18:	f001 fb4a 	bl	80141b0 <__ulp>
 8012b1c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8012b20:	ec53 2b10 	vmov	r2, r3, d0
 8012b24:	f7ed fd98 	bl	8000658 <__aeabi_dmul>
 8012b28:	ec53 2b18 	vmov	r2, r3, d8
 8012b2c:	f7ed fbde 	bl	80002ec <__adddf3>
 8012b30:	4680      	mov	r8, r0
 8012b32:	4689      	mov	r9, r1
 8012b34:	e78d      	b.n	8012a52 <_strtod_l+0xa82>
 8012b36:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8012b3a:	e7db      	b.n	8012af4 <_strtod_l+0xb24>
 8012b3c:	a314      	add	r3, pc, #80	; (adr r3, 8012b90 <_strtod_l+0xbc0>)
 8012b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b42:	f7ed fffb 	bl	8000b3c <__aeabi_dcmplt>
 8012b46:	e7b3      	b.n	8012ab0 <_strtod_l+0xae0>
 8012b48:	2300      	movs	r3, #0
 8012b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8012b4c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012b4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012b50:	6013      	str	r3, [r2, #0]
 8012b52:	f7ff ba7c 	b.w	801204e <_strtod_l+0x7e>
 8012b56:	2a65      	cmp	r2, #101	; 0x65
 8012b58:	f43f ab75 	beq.w	8012246 <_strtod_l+0x276>
 8012b5c:	2a45      	cmp	r2, #69	; 0x45
 8012b5e:	f43f ab72 	beq.w	8012246 <_strtod_l+0x276>
 8012b62:	2301      	movs	r3, #1
 8012b64:	f7ff bbaa 	b.w	80122bc <_strtod_l+0x2ec>
 8012b68:	00000000 	.word	0x00000000
 8012b6c:	bff00000 	.word	0xbff00000
 8012b70:	00000000 	.word	0x00000000
 8012b74:	3ff00000 	.word	0x3ff00000
 8012b78:	94a03595 	.word	0x94a03595
 8012b7c:	3fdfffff 	.word	0x3fdfffff
 8012b80:	35afe535 	.word	0x35afe535
 8012b84:	3fe00000 	.word	0x3fe00000
 8012b88:	ffc00000 	.word	0xffc00000
 8012b8c:	41dfffff 	.word	0x41dfffff
 8012b90:	94a03595 	.word	0x94a03595
 8012b94:	3fcfffff 	.word	0x3fcfffff
 8012b98:	3ff00000 	.word	0x3ff00000
 8012b9c:	3fe00000 	.word	0x3fe00000
 8012ba0:	7ff00000 	.word	0x7ff00000
 8012ba4:	7fe00000 	.word	0x7fe00000
 8012ba8:	7c9fffff 	.word	0x7c9fffff
 8012bac:	7fefffff 	.word	0x7fefffff

08012bb0 <strtof>:
 8012bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bb4:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8012c78 <strtof+0xc8>
 8012bb8:	4b2a      	ldr	r3, [pc, #168]	; (8012c64 <strtof+0xb4>)
 8012bba:	460a      	mov	r2, r1
 8012bbc:	ed2d 8b02 	vpush	{d8}
 8012bc0:	4601      	mov	r1, r0
 8012bc2:	f8d8 0000 	ldr.w	r0, [r8]
 8012bc6:	f7ff fa03 	bl	8011fd0 <_strtod_l>
 8012bca:	ec55 4b10 	vmov	r4, r5, d0
 8012bce:	ee10 2a10 	vmov	r2, s0
 8012bd2:	ee10 0a10 	vmov	r0, s0
 8012bd6:	462b      	mov	r3, r5
 8012bd8:	4629      	mov	r1, r5
 8012bda:	f7ed ffd7 	bl	8000b8c <__aeabi_dcmpun>
 8012bde:	b190      	cbz	r0, 8012c06 <strtof+0x56>
 8012be0:	2d00      	cmp	r5, #0
 8012be2:	4821      	ldr	r0, [pc, #132]	; (8012c68 <strtof+0xb8>)
 8012be4:	da09      	bge.n	8012bfa <strtof+0x4a>
 8012be6:	f000 fb0f 	bl	8013208 <nanf>
 8012bea:	eeb1 8a40 	vneg.f32	s16, s0
 8012bee:	eeb0 0a48 	vmov.f32	s0, s16
 8012bf2:	ecbd 8b02 	vpop	{d8}
 8012bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bfa:	ecbd 8b02 	vpop	{d8}
 8012bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c02:	f000 bb01 	b.w	8013208 <nanf>
 8012c06:	4620      	mov	r0, r4
 8012c08:	4629      	mov	r1, r5
 8012c0a:	f7ed fff5 	bl	8000bf8 <__aeabi_d2f>
 8012c0e:	ee08 0a10 	vmov	s16, r0
 8012c12:	eddf 7a16 	vldr	s15, [pc, #88]	; 8012c6c <strtof+0xbc>
 8012c16:	eeb0 7ac8 	vabs.f32	s14, s16
 8012c1a:	eeb4 7a67 	vcmp.f32	s14, s15
 8012c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c22:	dd11      	ble.n	8012c48 <strtof+0x98>
 8012c24:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8012c28:	4b11      	ldr	r3, [pc, #68]	; (8012c70 <strtof+0xc0>)
 8012c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8012c2e:	4620      	mov	r0, r4
 8012c30:	4639      	mov	r1, r7
 8012c32:	f7ed ffab 	bl	8000b8c <__aeabi_dcmpun>
 8012c36:	b980      	cbnz	r0, 8012c5a <strtof+0xaa>
 8012c38:	4b0d      	ldr	r3, [pc, #52]	; (8012c70 <strtof+0xc0>)
 8012c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8012c3e:	4620      	mov	r0, r4
 8012c40:	4639      	mov	r1, r7
 8012c42:	f7ed ff85 	bl	8000b50 <__aeabi_dcmple>
 8012c46:	b940      	cbnz	r0, 8012c5a <strtof+0xaa>
 8012c48:	ee18 3a10 	vmov	r3, s16
 8012c4c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8012c50:	d1cd      	bne.n	8012bee <strtof+0x3e>
 8012c52:	4b08      	ldr	r3, [pc, #32]	; (8012c74 <strtof+0xc4>)
 8012c54:	402b      	ands	r3, r5
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d0c9      	beq.n	8012bee <strtof+0x3e>
 8012c5a:	f8d8 3000 	ldr.w	r3, [r8]
 8012c5e:	2222      	movs	r2, #34	; 0x22
 8012c60:	601a      	str	r2, [r3, #0]
 8012c62:	e7c4      	b.n	8012bee <strtof+0x3e>
 8012c64:	200001c0 	.word	0x200001c0
 8012c68:	08015f6a 	.word	0x08015f6a
 8012c6c:	7f7fffff 	.word	0x7f7fffff
 8012c70:	7fefffff 	.word	0x7fefffff
 8012c74:	7ff00000 	.word	0x7ff00000
 8012c78:	20000378 	.word	0x20000378

08012c7c <_strtoul_l.constprop.0>:
 8012c7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012c80:	4f36      	ldr	r7, [pc, #216]	; (8012d5c <_strtoul_l.constprop.0+0xe0>)
 8012c82:	4686      	mov	lr, r0
 8012c84:	460d      	mov	r5, r1
 8012c86:	4628      	mov	r0, r5
 8012c88:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012c8c:	5d3e      	ldrb	r6, [r7, r4]
 8012c8e:	f016 0608 	ands.w	r6, r6, #8
 8012c92:	d1f8      	bne.n	8012c86 <_strtoul_l.constprop.0+0xa>
 8012c94:	2c2d      	cmp	r4, #45	; 0x2d
 8012c96:	d130      	bne.n	8012cfa <_strtoul_l.constprop.0+0x7e>
 8012c98:	782c      	ldrb	r4, [r5, #0]
 8012c9a:	2601      	movs	r6, #1
 8012c9c:	1c85      	adds	r5, r0, #2
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d057      	beq.n	8012d52 <_strtoul_l.constprop.0+0xd6>
 8012ca2:	2b10      	cmp	r3, #16
 8012ca4:	d109      	bne.n	8012cba <_strtoul_l.constprop.0+0x3e>
 8012ca6:	2c30      	cmp	r4, #48	; 0x30
 8012ca8:	d107      	bne.n	8012cba <_strtoul_l.constprop.0+0x3e>
 8012caa:	7828      	ldrb	r0, [r5, #0]
 8012cac:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8012cb0:	2858      	cmp	r0, #88	; 0x58
 8012cb2:	d149      	bne.n	8012d48 <_strtoul_l.constprop.0+0xcc>
 8012cb4:	786c      	ldrb	r4, [r5, #1]
 8012cb6:	2310      	movs	r3, #16
 8012cb8:	3502      	adds	r5, #2
 8012cba:	f04f 38ff 	mov.w	r8, #4294967295
 8012cbe:	2700      	movs	r7, #0
 8012cc0:	fbb8 f8f3 	udiv	r8, r8, r3
 8012cc4:	fb03 f908 	mul.w	r9, r3, r8
 8012cc8:	ea6f 0909 	mvn.w	r9, r9
 8012ccc:	4638      	mov	r0, r7
 8012cce:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8012cd2:	f1bc 0f09 	cmp.w	ip, #9
 8012cd6:	d815      	bhi.n	8012d04 <_strtoul_l.constprop.0+0x88>
 8012cd8:	4664      	mov	r4, ip
 8012cda:	42a3      	cmp	r3, r4
 8012cdc:	dd23      	ble.n	8012d26 <_strtoul_l.constprop.0+0xaa>
 8012cde:	f1b7 3fff 	cmp.w	r7, #4294967295
 8012ce2:	d007      	beq.n	8012cf4 <_strtoul_l.constprop.0+0x78>
 8012ce4:	4580      	cmp	r8, r0
 8012ce6:	d31b      	bcc.n	8012d20 <_strtoul_l.constprop.0+0xa4>
 8012ce8:	d101      	bne.n	8012cee <_strtoul_l.constprop.0+0x72>
 8012cea:	45a1      	cmp	r9, r4
 8012cec:	db18      	blt.n	8012d20 <_strtoul_l.constprop.0+0xa4>
 8012cee:	fb00 4003 	mla	r0, r0, r3, r4
 8012cf2:	2701      	movs	r7, #1
 8012cf4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8012cf8:	e7e9      	b.n	8012cce <_strtoul_l.constprop.0+0x52>
 8012cfa:	2c2b      	cmp	r4, #43	; 0x2b
 8012cfc:	bf04      	itt	eq
 8012cfe:	782c      	ldrbeq	r4, [r5, #0]
 8012d00:	1c85      	addeq	r5, r0, #2
 8012d02:	e7cc      	b.n	8012c9e <_strtoul_l.constprop.0+0x22>
 8012d04:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8012d08:	f1bc 0f19 	cmp.w	ip, #25
 8012d0c:	d801      	bhi.n	8012d12 <_strtoul_l.constprop.0+0x96>
 8012d0e:	3c37      	subs	r4, #55	; 0x37
 8012d10:	e7e3      	b.n	8012cda <_strtoul_l.constprop.0+0x5e>
 8012d12:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8012d16:	f1bc 0f19 	cmp.w	ip, #25
 8012d1a:	d804      	bhi.n	8012d26 <_strtoul_l.constprop.0+0xaa>
 8012d1c:	3c57      	subs	r4, #87	; 0x57
 8012d1e:	e7dc      	b.n	8012cda <_strtoul_l.constprop.0+0x5e>
 8012d20:	f04f 37ff 	mov.w	r7, #4294967295
 8012d24:	e7e6      	b.n	8012cf4 <_strtoul_l.constprop.0+0x78>
 8012d26:	1c7b      	adds	r3, r7, #1
 8012d28:	d106      	bne.n	8012d38 <_strtoul_l.constprop.0+0xbc>
 8012d2a:	2322      	movs	r3, #34	; 0x22
 8012d2c:	f8ce 3000 	str.w	r3, [lr]
 8012d30:	4638      	mov	r0, r7
 8012d32:	b932      	cbnz	r2, 8012d42 <_strtoul_l.constprop.0+0xc6>
 8012d34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012d38:	b106      	cbz	r6, 8012d3c <_strtoul_l.constprop.0+0xc0>
 8012d3a:	4240      	negs	r0, r0
 8012d3c:	2a00      	cmp	r2, #0
 8012d3e:	d0f9      	beq.n	8012d34 <_strtoul_l.constprop.0+0xb8>
 8012d40:	b107      	cbz	r7, 8012d44 <_strtoul_l.constprop.0+0xc8>
 8012d42:	1e69      	subs	r1, r5, #1
 8012d44:	6011      	str	r1, [r2, #0]
 8012d46:	e7f5      	b.n	8012d34 <_strtoul_l.constprop.0+0xb8>
 8012d48:	2430      	movs	r4, #48	; 0x30
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d1b5      	bne.n	8012cba <_strtoul_l.constprop.0+0x3e>
 8012d4e:	2308      	movs	r3, #8
 8012d50:	e7b3      	b.n	8012cba <_strtoul_l.constprop.0+0x3e>
 8012d52:	2c30      	cmp	r4, #48	; 0x30
 8012d54:	d0a9      	beq.n	8012caa <_strtoul_l.constprop.0+0x2e>
 8012d56:	230a      	movs	r3, #10
 8012d58:	e7af      	b.n	8012cba <_strtoul_l.constprop.0+0x3e>
 8012d5a:	bf00      	nop
 8012d5c:	08015c11 	.word	0x08015c11

08012d60 <strtoul>:
 8012d60:	4613      	mov	r3, r2
 8012d62:	460a      	mov	r2, r1
 8012d64:	4601      	mov	r1, r0
 8012d66:	4802      	ldr	r0, [pc, #8]	; (8012d70 <strtoul+0x10>)
 8012d68:	6800      	ldr	r0, [r0, #0]
 8012d6a:	f7ff bf87 	b.w	8012c7c <_strtoul_l.constprop.0>
 8012d6e:	bf00      	nop
 8012d70:	20000378 	.word	0x20000378

08012d74 <std>:
 8012d74:	2300      	movs	r3, #0
 8012d76:	b510      	push	{r4, lr}
 8012d78:	4604      	mov	r4, r0
 8012d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8012d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012d82:	6083      	str	r3, [r0, #8]
 8012d84:	8181      	strh	r1, [r0, #12]
 8012d86:	6643      	str	r3, [r0, #100]	; 0x64
 8012d88:	81c2      	strh	r2, [r0, #14]
 8012d8a:	6183      	str	r3, [r0, #24]
 8012d8c:	4619      	mov	r1, r3
 8012d8e:	2208      	movs	r2, #8
 8012d90:	305c      	adds	r0, #92	; 0x5c
 8012d92:	f000 f961 	bl	8013058 <memset>
 8012d96:	4b0d      	ldr	r3, [pc, #52]	; (8012dcc <std+0x58>)
 8012d98:	6263      	str	r3, [r4, #36]	; 0x24
 8012d9a:	4b0d      	ldr	r3, [pc, #52]	; (8012dd0 <std+0x5c>)
 8012d9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8012d9e:	4b0d      	ldr	r3, [pc, #52]	; (8012dd4 <std+0x60>)
 8012da0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012da2:	4b0d      	ldr	r3, [pc, #52]	; (8012dd8 <std+0x64>)
 8012da4:	6323      	str	r3, [r4, #48]	; 0x30
 8012da6:	4b0d      	ldr	r3, [pc, #52]	; (8012ddc <std+0x68>)
 8012da8:	6224      	str	r4, [r4, #32]
 8012daa:	429c      	cmp	r4, r3
 8012dac:	d006      	beq.n	8012dbc <std+0x48>
 8012dae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8012db2:	4294      	cmp	r4, r2
 8012db4:	d002      	beq.n	8012dbc <std+0x48>
 8012db6:	33d0      	adds	r3, #208	; 0xd0
 8012db8:	429c      	cmp	r4, r3
 8012dba:	d105      	bne.n	8012dc8 <std+0x54>
 8012dbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8012dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012dc4:	f000 b9fe 	b.w	80131c4 <__retarget_lock_init_recursive>
 8012dc8:	bd10      	pop	{r4, pc}
 8012dca:	bf00      	nop
 8012dcc:	08012f61 	.word	0x08012f61
 8012dd0:	08012f83 	.word	0x08012f83
 8012dd4:	08012fbb 	.word	0x08012fbb
 8012dd8:	08012fdf 	.word	0x08012fdf
 8012ddc:	200043dc 	.word	0x200043dc

08012de0 <stdio_exit_handler>:
 8012de0:	4a02      	ldr	r2, [pc, #8]	; (8012dec <stdio_exit_handler+0xc>)
 8012de2:	4903      	ldr	r1, [pc, #12]	; (8012df0 <stdio_exit_handler+0x10>)
 8012de4:	4803      	ldr	r0, [pc, #12]	; (8012df4 <stdio_exit_handler+0x14>)
 8012de6:	f000 b869 	b.w	8012ebc <_fwalk_sglue>
 8012dea:	bf00      	nop
 8012dec:	200001b4 	.word	0x200001b4
 8012df0:	08014b29 	.word	0x08014b29
 8012df4:	2000032c 	.word	0x2000032c

08012df8 <cleanup_stdio>:
 8012df8:	6841      	ldr	r1, [r0, #4]
 8012dfa:	4b0c      	ldr	r3, [pc, #48]	; (8012e2c <cleanup_stdio+0x34>)
 8012dfc:	4299      	cmp	r1, r3
 8012dfe:	b510      	push	{r4, lr}
 8012e00:	4604      	mov	r4, r0
 8012e02:	d001      	beq.n	8012e08 <cleanup_stdio+0x10>
 8012e04:	f001 fe90 	bl	8014b28 <_fflush_r>
 8012e08:	68a1      	ldr	r1, [r4, #8]
 8012e0a:	4b09      	ldr	r3, [pc, #36]	; (8012e30 <cleanup_stdio+0x38>)
 8012e0c:	4299      	cmp	r1, r3
 8012e0e:	d002      	beq.n	8012e16 <cleanup_stdio+0x1e>
 8012e10:	4620      	mov	r0, r4
 8012e12:	f001 fe89 	bl	8014b28 <_fflush_r>
 8012e16:	68e1      	ldr	r1, [r4, #12]
 8012e18:	4b06      	ldr	r3, [pc, #24]	; (8012e34 <cleanup_stdio+0x3c>)
 8012e1a:	4299      	cmp	r1, r3
 8012e1c:	d004      	beq.n	8012e28 <cleanup_stdio+0x30>
 8012e1e:	4620      	mov	r0, r4
 8012e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e24:	f001 be80 	b.w	8014b28 <_fflush_r>
 8012e28:	bd10      	pop	{r4, pc}
 8012e2a:	bf00      	nop
 8012e2c:	200043dc 	.word	0x200043dc
 8012e30:	20004444 	.word	0x20004444
 8012e34:	200044ac 	.word	0x200044ac

08012e38 <global_stdio_init.part.0>:
 8012e38:	b510      	push	{r4, lr}
 8012e3a:	4b0b      	ldr	r3, [pc, #44]	; (8012e68 <global_stdio_init.part.0+0x30>)
 8012e3c:	4c0b      	ldr	r4, [pc, #44]	; (8012e6c <global_stdio_init.part.0+0x34>)
 8012e3e:	4a0c      	ldr	r2, [pc, #48]	; (8012e70 <global_stdio_init.part.0+0x38>)
 8012e40:	601a      	str	r2, [r3, #0]
 8012e42:	4620      	mov	r0, r4
 8012e44:	2200      	movs	r2, #0
 8012e46:	2104      	movs	r1, #4
 8012e48:	f7ff ff94 	bl	8012d74 <std>
 8012e4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8012e50:	2201      	movs	r2, #1
 8012e52:	2109      	movs	r1, #9
 8012e54:	f7ff ff8e 	bl	8012d74 <std>
 8012e58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8012e5c:	2202      	movs	r2, #2
 8012e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e62:	2112      	movs	r1, #18
 8012e64:	f7ff bf86 	b.w	8012d74 <std>
 8012e68:	20004514 	.word	0x20004514
 8012e6c:	200043dc 	.word	0x200043dc
 8012e70:	08012de1 	.word	0x08012de1

08012e74 <__sfp_lock_acquire>:
 8012e74:	4801      	ldr	r0, [pc, #4]	; (8012e7c <__sfp_lock_acquire+0x8>)
 8012e76:	f000 b9a6 	b.w	80131c6 <__retarget_lock_acquire_recursive>
 8012e7a:	bf00      	nop
 8012e7c:	2000451d 	.word	0x2000451d

08012e80 <__sfp_lock_release>:
 8012e80:	4801      	ldr	r0, [pc, #4]	; (8012e88 <__sfp_lock_release+0x8>)
 8012e82:	f000 b9a1 	b.w	80131c8 <__retarget_lock_release_recursive>
 8012e86:	bf00      	nop
 8012e88:	2000451d 	.word	0x2000451d

08012e8c <__sinit>:
 8012e8c:	b510      	push	{r4, lr}
 8012e8e:	4604      	mov	r4, r0
 8012e90:	f7ff fff0 	bl	8012e74 <__sfp_lock_acquire>
 8012e94:	6a23      	ldr	r3, [r4, #32]
 8012e96:	b11b      	cbz	r3, 8012ea0 <__sinit+0x14>
 8012e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012e9c:	f7ff bff0 	b.w	8012e80 <__sfp_lock_release>
 8012ea0:	4b04      	ldr	r3, [pc, #16]	; (8012eb4 <__sinit+0x28>)
 8012ea2:	6223      	str	r3, [r4, #32]
 8012ea4:	4b04      	ldr	r3, [pc, #16]	; (8012eb8 <__sinit+0x2c>)
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d1f5      	bne.n	8012e98 <__sinit+0xc>
 8012eac:	f7ff ffc4 	bl	8012e38 <global_stdio_init.part.0>
 8012eb0:	e7f2      	b.n	8012e98 <__sinit+0xc>
 8012eb2:	bf00      	nop
 8012eb4:	08012df9 	.word	0x08012df9
 8012eb8:	20004514 	.word	0x20004514

08012ebc <_fwalk_sglue>:
 8012ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012ec0:	4607      	mov	r7, r0
 8012ec2:	4688      	mov	r8, r1
 8012ec4:	4614      	mov	r4, r2
 8012ec6:	2600      	movs	r6, #0
 8012ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8012ed0:	d505      	bpl.n	8012ede <_fwalk_sglue+0x22>
 8012ed2:	6824      	ldr	r4, [r4, #0]
 8012ed4:	2c00      	cmp	r4, #0
 8012ed6:	d1f7      	bne.n	8012ec8 <_fwalk_sglue+0xc>
 8012ed8:	4630      	mov	r0, r6
 8012eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012ede:	89ab      	ldrh	r3, [r5, #12]
 8012ee0:	2b01      	cmp	r3, #1
 8012ee2:	d907      	bls.n	8012ef4 <_fwalk_sglue+0x38>
 8012ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012ee8:	3301      	adds	r3, #1
 8012eea:	d003      	beq.n	8012ef4 <_fwalk_sglue+0x38>
 8012eec:	4629      	mov	r1, r5
 8012eee:	4638      	mov	r0, r7
 8012ef0:	47c0      	blx	r8
 8012ef2:	4306      	orrs	r6, r0
 8012ef4:	3568      	adds	r5, #104	; 0x68
 8012ef6:	e7e9      	b.n	8012ecc <_fwalk_sglue+0x10>

08012ef8 <sniprintf>:
 8012ef8:	b40c      	push	{r2, r3}
 8012efa:	b530      	push	{r4, r5, lr}
 8012efc:	4b17      	ldr	r3, [pc, #92]	; (8012f5c <sniprintf+0x64>)
 8012efe:	1e0c      	subs	r4, r1, #0
 8012f00:	681d      	ldr	r5, [r3, #0]
 8012f02:	b09d      	sub	sp, #116	; 0x74
 8012f04:	da08      	bge.n	8012f18 <sniprintf+0x20>
 8012f06:	238b      	movs	r3, #139	; 0x8b
 8012f08:	602b      	str	r3, [r5, #0]
 8012f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8012f0e:	b01d      	add	sp, #116	; 0x74
 8012f10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012f14:	b002      	add	sp, #8
 8012f16:	4770      	bx	lr
 8012f18:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012f1c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012f20:	bf14      	ite	ne
 8012f22:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012f26:	4623      	moveq	r3, r4
 8012f28:	9304      	str	r3, [sp, #16]
 8012f2a:	9307      	str	r3, [sp, #28]
 8012f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012f30:	9002      	str	r0, [sp, #8]
 8012f32:	9006      	str	r0, [sp, #24]
 8012f34:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012f38:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012f3a:	ab21      	add	r3, sp, #132	; 0x84
 8012f3c:	a902      	add	r1, sp, #8
 8012f3e:	4628      	mov	r0, r5
 8012f40:	9301      	str	r3, [sp, #4]
 8012f42:	f001 fadd 	bl	8014500 <_svfiprintf_r>
 8012f46:	1c43      	adds	r3, r0, #1
 8012f48:	bfbc      	itt	lt
 8012f4a:	238b      	movlt	r3, #139	; 0x8b
 8012f4c:	602b      	strlt	r3, [r5, #0]
 8012f4e:	2c00      	cmp	r4, #0
 8012f50:	d0dd      	beq.n	8012f0e <sniprintf+0x16>
 8012f52:	9b02      	ldr	r3, [sp, #8]
 8012f54:	2200      	movs	r2, #0
 8012f56:	701a      	strb	r2, [r3, #0]
 8012f58:	e7d9      	b.n	8012f0e <sniprintf+0x16>
 8012f5a:	bf00      	nop
 8012f5c:	20000378 	.word	0x20000378

08012f60 <__sread>:
 8012f60:	b510      	push	{r4, lr}
 8012f62:	460c      	mov	r4, r1
 8012f64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f68:	f000 f8de 	bl	8013128 <_read_r>
 8012f6c:	2800      	cmp	r0, #0
 8012f6e:	bfab      	itete	ge
 8012f70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012f72:	89a3      	ldrhlt	r3, [r4, #12]
 8012f74:	181b      	addge	r3, r3, r0
 8012f76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012f7a:	bfac      	ite	ge
 8012f7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8012f7e:	81a3      	strhlt	r3, [r4, #12]
 8012f80:	bd10      	pop	{r4, pc}

08012f82 <__swrite>:
 8012f82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012f86:	461f      	mov	r7, r3
 8012f88:	898b      	ldrh	r3, [r1, #12]
 8012f8a:	05db      	lsls	r3, r3, #23
 8012f8c:	4605      	mov	r5, r0
 8012f8e:	460c      	mov	r4, r1
 8012f90:	4616      	mov	r6, r2
 8012f92:	d505      	bpl.n	8012fa0 <__swrite+0x1e>
 8012f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012f98:	2302      	movs	r3, #2
 8012f9a:	2200      	movs	r2, #0
 8012f9c:	f000 f8b2 	bl	8013104 <_lseek_r>
 8012fa0:	89a3      	ldrh	r3, [r4, #12]
 8012fa2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012fa6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012faa:	81a3      	strh	r3, [r4, #12]
 8012fac:	4632      	mov	r2, r6
 8012fae:	463b      	mov	r3, r7
 8012fb0:	4628      	mov	r0, r5
 8012fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012fb6:	f000 b8c9 	b.w	801314c <_write_r>

08012fba <__sseek>:
 8012fba:	b510      	push	{r4, lr}
 8012fbc:	460c      	mov	r4, r1
 8012fbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fc2:	f000 f89f 	bl	8013104 <_lseek_r>
 8012fc6:	1c43      	adds	r3, r0, #1
 8012fc8:	89a3      	ldrh	r3, [r4, #12]
 8012fca:	bf15      	itete	ne
 8012fcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8012fce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012fd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012fd6:	81a3      	strheq	r3, [r4, #12]
 8012fd8:	bf18      	it	ne
 8012fda:	81a3      	strhne	r3, [r4, #12]
 8012fdc:	bd10      	pop	{r4, pc}

08012fde <__sclose>:
 8012fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012fe2:	f000 b87f 	b.w	80130e4 <_close_r>

08012fe6 <_vsniprintf_r>:
 8012fe6:	b530      	push	{r4, r5, lr}
 8012fe8:	4614      	mov	r4, r2
 8012fea:	2c00      	cmp	r4, #0
 8012fec:	b09b      	sub	sp, #108	; 0x6c
 8012fee:	4605      	mov	r5, r0
 8012ff0:	461a      	mov	r2, r3
 8012ff2:	da05      	bge.n	8013000 <_vsniprintf_r+0x1a>
 8012ff4:	238b      	movs	r3, #139	; 0x8b
 8012ff6:	6003      	str	r3, [r0, #0]
 8012ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8012ffc:	b01b      	add	sp, #108	; 0x6c
 8012ffe:	bd30      	pop	{r4, r5, pc}
 8013000:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013004:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013008:	bf14      	ite	ne
 801300a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801300e:	4623      	moveq	r3, r4
 8013010:	9302      	str	r3, [sp, #8]
 8013012:	9305      	str	r3, [sp, #20]
 8013014:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013018:	9100      	str	r1, [sp, #0]
 801301a:	9104      	str	r1, [sp, #16]
 801301c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013020:	4669      	mov	r1, sp
 8013022:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013024:	f001 fa6c 	bl	8014500 <_svfiprintf_r>
 8013028:	1c43      	adds	r3, r0, #1
 801302a:	bfbc      	itt	lt
 801302c:	238b      	movlt	r3, #139	; 0x8b
 801302e:	602b      	strlt	r3, [r5, #0]
 8013030:	2c00      	cmp	r4, #0
 8013032:	d0e3      	beq.n	8012ffc <_vsniprintf_r+0x16>
 8013034:	9b00      	ldr	r3, [sp, #0]
 8013036:	2200      	movs	r2, #0
 8013038:	701a      	strb	r2, [r3, #0]
 801303a:	e7df      	b.n	8012ffc <_vsniprintf_r+0x16>

0801303c <vsniprintf>:
 801303c:	b507      	push	{r0, r1, r2, lr}
 801303e:	9300      	str	r3, [sp, #0]
 8013040:	4613      	mov	r3, r2
 8013042:	460a      	mov	r2, r1
 8013044:	4601      	mov	r1, r0
 8013046:	4803      	ldr	r0, [pc, #12]	; (8013054 <vsniprintf+0x18>)
 8013048:	6800      	ldr	r0, [r0, #0]
 801304a:	f7ff ffcc 	bl	8012fe6 <_vsniprintf_r>
 801304e:	b003      	add	sp, #12
 8013050:	f85d fb04 	ldr.w	pc, [sp], #4
 8013054:	20000378 	.word	0x20000378

08013058 <memset>:
 8013058:	4402      	add	r2, r0
 801305a:	4603      	mov	r3, r0
 801305c:	4293      	cmp	r3, r2
 801305e:	d100      	bne.n	8013062 <memset+0xa>
 8013060:	4770      	bx	lr
 8013062:	f803 1b01 	strb.w	r1, [r3], #1
 8013066:	e7f9      	b.n	801305c <memset+0x4>

08013068 <strncmp>:
 8013068:	b510      	push	{r4, lr}
 801306a:	b16a      	cbz	r2, 8013088 <strncmp+0x20>
 801306c:	3901      	subs	r1, #1
 801306e:	1884      	adds	r4, r0, r2
 8013070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013074:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013078:	429a      	cmp	r2, r3
 801307a:	d103      	bne.n	8013084 <strncmp+0x1c>
 801307c:	42a0      	cmp	r0, r4
 801307e:	d001      	beq.n	8013084 <strncmp+0x1c>
 8013080:	2a00      	cmp	r2, #0
 8013082:	d1f5      	bne.n	8013070 <strncmp+0x8>
 8013084:	1ad0      	subs	r0, r2, r3
 8013086:	bd10      	pop	{r4, pc}
 8013088:	4610      	mov	r0, r2
 801308a:	e7fc      	b.n	8013086 <strncmp+0x1e>

0801308c <__strtok_r>:
 801308c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801308e:	b908      	cbnz	r0, 8013094 <__strtok_r+0x8>
 8013090:	6810      	ldr	r0, [r2, #0]
 8013092:	b188      	cbz	r0, 80130b8 <__strtok_r+0x2c>
 8013094:	4604      	mov	r4, r0
 8013096:	4620      	mov	r0, r4
 8013098:	f814 5b01 	ldrb.w	r5, [r4], #1
 801309c:	460f      	mov	r7, r1
 801309e:	f817 6b01 	ldrb.w	r6, [r7], #1
 80130a2:	b91e      	cbnz	r6, 80130ac <__strtok_r+0x20>
 80130a4:	b965      	cbnz	r5, 80130c0 <__strtok_r+0x34>
 80130a6:	6015      	str	r5, [r2, #0]
 80130a8:	4628      	mov	r0, r5
 80130aa:	e005      	b.n	80130b8 <__strtok_r+0x2c>
 80130ac:	42b5      	cmp	r5, r6
 80130ae:	d1f6      	bne.n	801309e <__strtok_r+0x12>
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d1f0      	bne.n	8013096 <__strtok_r+0xa>
 80130b4:	6014      	str	r4, [r2, #0]
 80130b6:	7003      	strb	r3, [r0, #0]
 80130b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130ba:	461c      	mov	r4, r3
 80130bc:	e00c      	b.n	80130d8 <__strtok_r+0x4c>
 80130be:	b915      	cbnz	r5, 80130c6 <__strtok_r+0x3a>
 80130c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80130c4:	460e      	mov	r6, r1
 80130c6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80130ca:	42ab      	cmp	r3, r5
 80130cc:	d1f7      	bne.n	80130be <__strtok_r+0x32>
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d0f3      	beq.n	80130ba <__strtok_r+0x2e>
 80130d2:	2300      	movs	r3, #0
 80130d4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80130d8:	6014      	str	r4, [r2, #0]
 80130da:	e7ed      	b.n	80130b8 <__strtok_r+0x2c>

080130dc <strtok_r>:
 80130dc:	2301      	movs	r3, #1
 80130de:	f7ff bfd5 	b.w	801308c <__strtok_r>
	...

080130e4 <_close_r>:
 80130e4:	b538      	push	{r3, r4, r5, lr}
 80130e6:	4d06      	ldr	r5, [pc, #24]	; (8013100 <_close_r+0x1c>)
 80130e8:	2300      	movs	r3, #0
 80130ea:	4604      	mov	r4, r0
 80130ec:	4608      	mov	r0, r1
 80130ee:	602b      	str	r3, [r5, #0]
 80130f0:	f7f8 fc60 	bl	800b9b4 <_close>
 80130f4:	1c43      	adds	r3, r0, #1
 80130f6:	d102      	bne.n	80130fe <_close_r+0x1a>
 80130f8:	682b      	ldr	r3, [r5, #0]
 80130fa:	b103      	cbz	r3, 80130fe <_close_r+0x1a>
 80130fc:	6023      	str	r3, [r4, #0]
 80130fe:	bd38      	pop	{r3, r4, r5, pc}
 8013100:	20004518 	.word	0x20004518

08013104 <_lseek_r>:
 8013104:	b538      	push	{r3, r4, r5, lr}
 8013106:	4d07      	ldr	r5, [pc, #28]	; (8013124 <_lseek_r+0x20>)
 8013108:	4604      	mov	r4, r0
 801310a:	4608      	mov	r0, r1
 801310c:	4611      	mov	r1, r2
 801310e:	2200      	movs	r2, #0
 8013110:	602a      	str	r2, [r5, #0]
 8013112:	461a      	mov	r2, r3
 8013114:	f7f8 fc75 	bl	800ba02 <_lseek>
 8013118:	1c43      	adds	r3, r0, #1
 801311a:	d102      	bne.n	8013122 <_lseek_r+0x1e>
 801311c:	682b      	ldr	r3, [r5, #0]
 801311e:	b103      	cbz	r3, 8013122 <_lseek_r+0x1e>
 8013120:	6023      	str	r3, [r4, #0]
 8013122:	bd38      	pop	{r3, r4, r5, pc}
 8013124:	20004518 	.word	0x20004518

08013128 <_read_r>:
 8013128:	b538      	push	{r3, r4, r5, lr}
 801312a:	4d07      	ldr	r5, [pc, #28]	; (8013148 <_read_r+0x20>)
 801312c:	4604      	mov	r4, r0
 801312e:	4608      	mov	r0, r1
 8013130:	4611      	mov	r1, r2
 8013132:	2200      	movs	r2, #0
 8013134:	602a      	str	r2, [r5, #0]
 8013136:	461a      	mov	r2, r3
 8013138:	f7f8 fc03 	bl	800b942 <_read>
 801313c:	1c43      	adds	r3, r0, #1
 801313e:	d102      	bne.n	8013146 <_read_r+0x1e>
 8013140:	682b      	ldr	r3, [r5, #0]
 8013142:	b103      	cbz	r3, 8013146 <_read_r+0x1e>
 8013144:	6023      	str	r3, [r4, #0]
 8013146:	bd38      	pop	{r3, r4, r5, pc}
 8013148:	20004518 	.word	0x20004518

0801314c <_write_r>:
 801314c:	b538      	push	{r3, r4, r5, lr}
 801314e:	4d07      	ldr	r5, [pc, #28]	; (801316c <_write_r+0x20>)
 8013150:	4604      	mov	r4, r0
 8013152:	4608      	mov	r0, r1
 8013154:	4611      	mov	r1, r2
 8013156:	2200      	movs	r2, #0
 8013158:	602a      	str	r2, [r5, #0]
 801315a:	461a      	mov	r2, r3
 801315c:	f7f8 fc0e 	bl	800b97c <_write>
 8013160:	1c43      	adds	r3, r0, #1
 8013162:	d102      	bne.n	801316a <_write_r+0x1e>
 8013164:	682b      	ldr	r3, [r5, #0]
 8013166:	b103      	cbz	r3, 801316a <_write_r+0x1e>
 8013168:	6023      	str	r3, [r4, #0]
 801316a:	bd38      	pop	{r3, r4, r5, pc}
 801316c:	20004518 	.word	0x20004518

08013170 <__errno>:
 8013170:	4b01      	ldr	r3, [pc, #4]	; (8013178 <__errno+0x8>)
 8013172:	6818      	ldr	r0, [r3, #0]
 8013174:	4770      	bx	lr
 8013176:	bf00      	nop
 8013178:	20000378 	.word	0x20000378

0801317c <__libc_init_array>:
 801317c:	b570      	push	{r4, r5, r6, lr}
 801317e:	4d0d      	ldr	r5, [pc, #52]	; (80131b4 <__libc_init_array+0x38>)
 8013180:	4c0d      	ldr	r4, [pc, #52]	; (80131b8 <__libc_init_array+0x3c>)
 8013182:	1b64      	subs	r4, r4, r5
 8013184:	10a4      	asrs	r4, r4, #2
 8013186:	2600      	movs	r6, #0
 8013188:	42a6      	cmp	r6, r4
 801318a:	d109      	bne.n	80131a0 <__libc_init_array+0x24>
 801318c:	4d0b      	ldr	r5, [pc, #44]	; (80131bc <__libc_init_array+0x40>)
 801318e:	4c0c      	ldr	r4, [pc, #48]	; (80131c0 <__libc_init_array+0x44>)
 8013190:	f002 f84a 	bl	8015228 <_init>
 8013194:	1b64      	subs	r4, r4, r5
 8013196:	10a4      	asrs	r4, r4, #2
 8013198:	2600      	movs	r6, #0
 801319a:	42a6      	cmp	r6, r4
 801319c:	d105      	bne.n	80131aa <__libc_init_array+0x2e>
 801319e:	bd70      	pop	{r4, r5, r6, pc}
 80131a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80131a4:	4798      	blx	r3
 80131a6:	3601      	adds	r6, #1
 80131a8:	e7ee      	b.n	8013188 <__libc_init_array+0xc>
 80131aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80131ae:	4798      	blx	r3
 80131b0:	3601      	adds	r6, #1
 80131b2:	e7f2      	b.n	801319a <__libc_init_array+0x1e>
 80131b4:	08015f74 	.word	0x08015f74
 80131b8:	08015f74 	.word	0x08015f74
 80131bc:	08015f74 	.word	0x08015f74
 80131c0:	08015f78 	.word	0x08015f78

080131c4 <__retarget_lock_init_recursive>:
 80131c4:	4770      	bx	lr

080131c6 <__retarget_lock_acquire_recursive>:
 80131c6:	4770      	bx	lr

080131c8 <__retarget_lock_release_recursive>:
 80131c8:	4770      	bx	lr

080131ca <strcpy>:
 80131ca:	4603      	mov	r3, r0
 80131cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80131d0:	f803 2b01 	strb.w	r2, [r3], #1
 80131d4:	2a00      	cmp	r2, #0
 80131d6:	d1f9      	bne.n	80131cc <strcpy+0x2>
 80131d8:	4770      	bx	lr

080131da <memcpy>:
 80131da:	440a      	add	r2, r1
 80131dc:	4291      	cmp	r1, r2
 80131de:	f100 33ff 	add.w	r3, r0, #4294967295
 80131e2:	d100      	bne.n	80131e6 <memcpy+0xc>
 80131e4:	4770      	bx	lr
 80131e6:	b510      	push	{r4, lr}
 80131e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80131ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80131f0:	4291      	cmp	r1, r2
 80131f2:	d1f9      	bne.n	80131e8 <memcpy+0xe>
 80131f4:	bd10      	pop	{r4, pc}
	...

080131f8 <nan>:
 80131f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8013200 <nan+0x8>
 80131fc:	4770      	bx	lr
 80131fe:	bf00      	nop
 8013200:	00000000 	.word	0x00000000
 8013204:	7ff80000 	.word	0x7ff80000

08013208 <nanf>:
 8013208:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8013210 <nanf+0x8>
 801320c:	4770      	bx	lr
 801320e:	bf00      	nop
 8013210:	7fc00000 	.word	0x7fc00000

08013214 <_free_r>:
 8013214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013216:	2900      	cmp	r1, #0
 8013218:	d044      	beq.n	80132a4 <_free_r+0x90>
 801321a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801321e:	9001      	str	r0, [sp, #4]
 8013220:	2b00      	cmp	r3, #0
 8013222:	f1a1 0404 	sub.w	r4, r1, #4
 8013226:	bfb8      	it	lt
 8013228:	18e4      	addlt	r4, r4, r3
 801322a:	f000 fc49 	bl	8013ac0 <__malloc_lock>
 801322e:	4a1e      	ldr	r2, [pc, #120]	; (80132a8 <_free_r+0x94>)
 8013230:	9801      	ldr	r0, [sp, #4]
 8013232:	6813      	ldr	r3, [r2, #0]
 8013234:	b933      	cbnz	r3, 8013244 <_free_r+0x30>
 8013236:	6063      	str	r3, [r4, #4]
 8013238:	6014      	str	r4, [r2, #0]
 801323a:	b003      	add	sp, #12
 801323c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013240:	f000 bc44 	b.w	8013acc <__malloc_unlock>
 8013244:	42a3      	cmp	r3, r4
 8013246:	d908      	bls.n	801325a <_free_r+0x46>
 8013248:	6825      	ldr	r5, [r4, #0]
 801324a:	1961      	adds	r1, r4, r5
 801324c:	428b      	cmp	r3, r1
 801324e:	bf01      	itttt	eq
 8013250:	6819      	ldreq	r1, [r3, #0]
 8013252:	685b      	ldreq	r3, [r3, #4]
 8013254:	1949      	addeq	r1, r1, r5
 8013256:	6021      	streq	r1, [r4, #0]
 8013258:	e7ed      	b.n	8013236 <_free_r+0x22>
 801325a:	461a      	mov	r2, r3
 801325c:	685b      	ldr	r3, [r3, #4]
 801325e:	b10b      	cbz	r3, 8013264 <_free_r+0x50>
 8013260:	42a3      	cmp	r3, r4
 8013262:	d9fa      	bls.n	801325a <_free_r+0x46>
 8013264:	6811      	ldr	r1, [r2, #0]
 8013266:	1855      	adds	r5, r2, r1
 8013268:	42a5      	cmp	r5, r4
 801326a:	d10b      	bne.n	8013284 <_free_r+0x70>
 801326c:	6824      	ldr	r4, [r4, #0]
 801326e:	4421      	add	r1, r4
 8013270:	1854      	adds	r4, r2, r1
 8013272:	42a3      	cmp	r3, r4
 8013274:	6011      	str	r1, [r2, #0]
 8013276:	d1e0      	bne.n	801323a <_free_r+0x26>
 8013278:	681c      	ldr	r4, [r3, #0]
 801327a:	685b      	ldr	r3, [r3, #4]
 801327c:	6053      	str	r3, [r2, #4]
 801327e:	440c      	add	r4, r1
 8013280:	6014      	str	r4, [r2, #0]
 8013282:	e7da      	b.n	801323a <_free_r+0x26>
 8013284:	d902      	bls.n	801328c <_free_r+0x78>
 8013286:	230c      	movs	r3, #12
 8013288:	6003      	str	r3, [r0, #0]
 801328a:	e7d6      	b.n	801323a <_free_r+0x26>
 801328c:	6825      	ldr	r5, [r4, #0]
 801328e:	1961      	adds	r1, r4, r5
 8013290:	428b      	cmp	r3, r1
 8013292:	bf04      	itt	eq
 8013294:	6819      	ldreq	r1, [r3, #0]
 8013296:	685b      	ldreq	r3, [r3, #4]
 8013298:	6063      	str	r3, [r4, #4]
 801329a:	bf04      	itt	eq
 801329c:	1949      	addeq	r1, r1, r5
 801329e:	6021      	streq	r1, [r4, #0]
 80132a0:	6054      	str	r4, [r2, #4]
 80132a2:	e7ca      	b.n	801323a <_free_r+0x26>
 80132a4:	b003      	add	sp, #12
 80132a6:	bd30      	pop	{r4, r5, pc}
 80132a8:	20004520 	.word	0x20004520

080132ac <rshift>:
 80132ac:	6903      	ldr	r3, [r0, #16]
 80132ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80132b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80132b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80132ba:	f100 0414 	add.w	r4, r0, #20
 80132be:	dd45      	ble.n	801334c <rshift+0xa0>
 80132c0:	f011 011f 	ands.w	r1, r1, #31
 80132c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80132c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80132cc:	d10c      	bne.n	80132e8 <rshift+0x3c>
 80132ce:	f100 0710 	add.w	r7, r0, #16
 80132d2:	4629      	mov	r1, r5
 80132d4:	42b1      	cmp	r1, r6
 80132d6:	d334      	bcc.n	8013342 <rshift+0x96>
 80132d8:	1a9b      	subs	r3, r3, r2
 80132da:	009b      	lsls	r3, r3, #2
 80132dc:	1eea      	subs	r2, r5, #3
 80132de:	4296      	cmp	r6, r2
 80132e0:	bf38      	it	cc
 80132e2:	2300      	movcc	r3, #0
 80132e4:	4423      	add	r3, r4
 80132e6:	e015      	b.n	8013314 <rshift+0x68>
 80132e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80132ec:	f1c1 0820 	rsb	r8, r1, #32
 80132f0:	40cf      	lsrs	r7, r1
 80132f2:	f105 0e04 	add.w	lr, r5, #4
 80132f6:	46a1      	mov	r9, r4
 80132f8:	4576      	cmp	r6, lr
 80132fa:	46f4      	mov	ip, lr
 80132fc:	d815      	bhi.n	801332a <rshift+0x7e>
 80132fe:	1a9a      	subs	r2, r3, r2
 8013300:	0092      	lsls	r2, r2, #2
 8013302:	3a04      	subs	r2, #4
 8013304:	3501      	adds	r5, #1
 8013306:	42ae      	cmp	r6, r5
 8013308:	bf38      	it	cc
 801330a:	2200      	movcc	r2, #0
 801330c:	18a3      	adds	r3, r4, r2
 801330e:	50a7      	str	r7, [r4, r2]
 8013310:	b107      	cbz	r7, 8013314 <rshift+0x68>
 8013312:	3304      	adds	r3, #4
 8013314:	1b1a      	subs	r2, r3, r4
 8013316:	42a3      	cmp	r3, r4
 8013318:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801331c:	bf08      	it	eq
 801331e:	2300      	moveq	r3, #0
 8013320:	6102      	str	r2, [r0, #16]
 8013322:	bf08      	it	eq
 8013324:	6143      	streq	r3, [r0, #20]
 8013326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801332a:	f8dc c000 	ldr.w	ip, [ip]
 801332e:	fa0c fc08 	lsl.w	ip, ip, r8
 8013332:	ea4c 0707 	orr.w	r7, ip, r7
 8013336:	f849 7b04 	str.w	r7, [r9], #4
 801333a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801333e:	40cf      	lsrs	r7, r1
 8013340:	e7da      	b.n	80132f8 <rshift+0x4c>
 8013342:	f851 cb04 	ldr.w	ip, [r1], #4
 8013346:	f847 cf04 	str.w	ip, [r7, #4]!
 801334a:	e7c3      	b.n	80132d4 <rshift+0x28>
 801334c:	4623      	mov	r3, r4
 801334e:	e7e1      	b.n	8013314 <rshift+0x68>

08013350 <__hexdig_fun>:
 8013350:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8013354:	2b09      	cmp	r3, #9
 8013356:	d802      	bhi.n	801335e <__hexdig_fun+0xe>
 8013358:	3820      	subs	r0, #32
 801335a:	b2c0      	uxtb	r0, r0
 801335c:	4770      	bx	lr
 801335e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8013362:	2b05      	cmp	r3, #5
 8013364:	d801      	bhi.n	801336a <__hexdig_fun+0x1a>
 8013366:	3847      	subs	r0, #71	; 0x47
 8013368:	e7f7      	b.n	801335a <__hexdig_fun+0xa>
 801336a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 801336e:	2b05      	cmp	r3, #5
 8013370:	d801      	bhi.n	8013376 <__hexdig_fun+0x26>
 8013372:	3827      	subs	r0, #39	; 0x27
 8013374:	e7f1      	b.n	801335a <__hexdig_fun+0xa>
 8013376:	2000      	movs	r0, #0
 8013378:	4770      	bx	lr
	...

0801337c <__gethex>:
 801337c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013380:	4617      	mov	r7, r2
 8013382:	680a      	ldr	r2, [r1, #0]
 8013384:	b085      	sub	sp, #20
 8013386:	f102 0b02 	add.w	fp, r2, #2
 801338a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 801338e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8013392:	4681      	mov	r9, r0
 8013394:	468a      	mov	sl, r1
 8013396:	9302      	str	r3, [sp, #8]
 8013398:	32fe      	adds	r2, #254	; 0xfe
 801339a:	eb02 030b 	add.w	r3, r2, fp
 801339e:	46d8      	mov	r8, fp
 80133a0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 80133a4:	9301      	str	r3, [sp, #4]
 80133a6:	2830      	cmp	r0, #48	; 0x30
 80133a8:	d0f7      	beq.n	801339a <__gethex+0x1e>
 80133aa:	f7ff ffd1 	bl	8013350 <__hexdig_fun>
 80133ae:	4604      	mov	r4, r0
 80133b0:	2800      	cmp	r0, #0
 80133b2:	d138      	bne.n	8013426 <__gethex+0xaa>
 80133b4:	49a7      	ldr	r1, [pc, #668]	; (8013654 <__gethex+0x2d8>)
 80133b6:	2201      	movs	r2, #1
 80133b8:	4640      	mov	r0, r8
 80133ba:	f7ff fe55 	bl	8013068 <strncmp>
 80133be:	4606      	mov	r6, r0
 80133c0:	2800      	cmp	r0, #0
 80133c2:	d169      	bne.n	8013498 <__gethex+0x11c>
 80133c4:	f898 0001 	ldrb.w	r0, [r8, #1]
 80133c8:	465d      	mov	r5, fp
 80133ca:	f7ff ffc1 	bl	8013350 <__hexdig_fun>
 80133ce:	2800      	cmp	r0, #0
 80133d0:	d064      	beq.n	801349c <__gethex+0x120>
 80133d2:	465a      	mov	r2, fp
 80133d4:	7810      	ldrb	r0, [r2, #0]
 80133d6:	2830      	cmp	r0, #48	; 0x30
 80133d8:	4690      	mov	r8, r2
 80133da:	f102 0201 	add.w	r2, r2, #1
 80133de:	d0f9      	beq.n	80133d4 <__gethex+0x58>
 80133e0:	f7ff ffb6 	bl	8013350 <__hexdig_fun>
 80133e4:	2301      	movs	r3, #1
 80133e6:	fab0 f480 	clz	r4, r0
 80133ea:	0964      	lsrs	r4, r4, #5
 80133ec:	465e      	mov	r6, fp
 80133ee:	9301      	str	r3, [sp, #4]
 80133f0:	4642      	mov	r2, r8
 80133f2:	4615      	mov	r5, r2
 80133f4:	3201      	adds	r2, #1
 80133f6:	7828      	ldrb	r0, [r5, #0]
 80133f8:	f7ff ffaa 	bl	8013350 <__hexdig_fun>
 80133fc:	2800      	cmp	r0, #0
 80133fe:	d1f8      	bne.n	80133f2 <__gethex+0x76>
 8013400:	4994      	ldr	r1, [pc, #592]	; (8013654 <__gethex+0x2d8>)
 8013402:	2201      	movs	r2, #1
 8013404:	4628      	mov	r0, r5
 8013406:	f7ff fe2f 	bl	8013068 <strncmp>
 801340a:	b978      	cbnz	r0, 801342c <__gethex+0xb0>
 801340c:	b946      	cbnz	r6, 8013420 <__gethex+0xa4>
 801340e:	1c6e      	adds	r6, r5, #1
 8013410:	4632      	mov	r2, r6
 8013412:	4615      	mov	r5, r2
 8013414:	3201      	adds	r2, #1
 8013416:	7828      	ldrb	r0, [r5, #0]
 8013418:	f7ff ff9a 	bl	8013350 <__hexdig_fun>
 801341c:	2800      	cmp	r0, #0
 801341e:	d1f8      	bne.n	8013412 <__gethex+0x96>
 8013420:	1b73      	subs	r3, r6, r5
 8013422:	009e      	lsls	r6, r3, #2
 8013424:	e004      	b.n	8013430 <__gethex+0xb4>
 8013426:	2400      	movs	r4, #0
 8013428:	4626      	mov	r6, r4
 801342a:	e7e1      	b.n	80133f0 <__gethex+0x74>
 801342c:	2e00      	cmp	r6, #0
 801342e:	d1f7      	bne.n	8013420 <__gethex+0xa4>
 8013430:	782b      	ldrb	r3, [r5, #0]
 8013432:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013436:	2b50      	cmp	r3, #80	; 0x50
 8013438:	d13d      	bne.n	80134b6 <__gethex+0x13a>
 801343a:	786b      	ldrb	r3, [r5, #1]
 801343c:	2b2b      	cmp	r3, #43	; 0x2b
 801343e:	d02f      	beq.n	80134a0 <__gethex+0x124>
 8013440:	2b2d      	cmp	r3, #45	; 0x2d
 8013442:	d031      	beq.n	80134a8 <__gethex+0x12c>
 8013444:	1c69      	adds	r1, r5, #1
 8013446:	f04f 0b00 	mov.w	fp, #0
 801344a:	7808      	ldrb	r0, [r1, #0]
 801344c:	f7ff ff80 	bl	8013350 <__hexdig_fun>
 8013450:	1e42      	subs	r2, r0, #1
 8013452:	b2d2      	uxtb	r2, r2
 8013454:	2a18      	cmp	r2, #24
 8013456:	d82e      	bhi.n	80134b6 <__gethex+0x13a>
 8013458:	f1a0 0210 	sub.w	r2, r0, #16
 801345c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8013460:	f7ff ff76 	bl	8013350 <__hexdig_fun>
 8013464:	f100 3cff 	add.w	ip, r0, #4294967295
 8013468:	fa5f fc8c 	uxtb.w	ip, ip
 801346c:	f1bc 0f18 	cmp.w	ip, #24
 8013470:	d91d      	bls.n	80134ae <__gethex+0x132>
 8013472:	f1bb 0f00 	cmp.w	fp, #0
 8013476:	d000      	beq.n	801347a <__gethex+0xfe>
 8013478:	4252      	negs	r2, r2
 801347a:	4416      	add	r6, r2
 801347c:	f8ca 1000 	str.w	r1, [sl]
 8013480:	b1dc      	cbz	r4, 80134ba <__gethex+0x13e>
 8013482:	9b01      	ldr	r3, [sp, #4]
 8013484:	2b00      	cmp	r3, #0
 8013486:	bf14      	ite	ne
 8013488:	f04f 0800 	movne.w	r8, #0
 801348c:	f04f 0806 	moveq.w	r8, #6
 8013490:	4640      	mov	r0, r8
 8013492:	b005      	add	sp, #20
 8013494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013498:	4645      	mov	r5, r8
 801349a:	4626      	mov	r6, r4
 801349c:	2401      	movs	r4, #1
 801349e:	e7c7      	b.n	8013430 <__gethex+0xb4>
 80134a0:	f04f 0b00 	mov.w	fp, #0
 80134a4:	1ca9      	adds	r1, r5, #2
 80134a6:	e7d0      	b.n	801344a <__gethex+0xce>
 80134a8:	f04f 0b01 	mov.w	fp, #1
 80134ac:	e7fa      	b.n	80134a4 <__gethex+0x128>
 80134ae:	230a      	movs	r3, #10
 80134b0:	fb03 0002 	mla	r0, r3, r2, r0
 80134b4:	e7d0      	b.n	8013458 <__gethex+0xdc>
 80134b6:	4629      	mov	r1, r5
 80134b8:	e7e0      	b.n	801347c <__gethex+0x100>
 80134ba:	eba5 0308 	sub.w	r3, r5, r8
 80134be:	3b01      	subs	r3, #1
 80134c0:	4621      	mov	r1, r4
 80134c2:	2b07      	cmp	r3, #7
 80134c4:	dc0a      	bgt.n	80134dc <__gethex+0x160>
 80134c6:	4648      	mov	r0, r9
 80134c8:	f000 fb06 	bl	8013ad8 <_Balloc>
 80134cc:	4604      	mov	r4, r0
 80134ce:	b940      	cbnz	r0, 80134e2 <__gethex+0x166>
 80134d0:	4b61      	ldr	r3, [pc, #388]	; (8013658 <__gethex+0x2dc>)
 80134d2:	4602      	mov	r2, r0
 80134d4:	21e4      	movs	r1, #228	; 0xe4
 80134d6:	4861      	ldr	r0, [pc, #388]	; (801365c <__gethex+0x2e0>)
 80134d8:	f001 fb78 	bl	8014bcc <__assert_func>
 80134dc:	3101      	adds	r1, #1
 80134de:	105b      	asrs	r3, r3, #1
 80134e0:	e7ef      	b.n	80134c2 <__gethex+0x146>
 80134e2:	f100 0a14 	add.w	sl, r0, #20
 80134e6:	2300      	movs	r3, #0
 80134e8:	495a      	ldr	r1, [pc, #360]	; (8013654 <__gethex+0x2d8>)
 80134ea:	f8cd a004 	str.w	sl, [sp, #4]
 80134ee:	469b      	mov	fp, r3
 80134f0:	45a8      	cmp	r8, r5
 80134f2:	d342      	bcc.n	801357a <__gethex+0x1fe>
 80134f4:	9801      	ldr	r0, [sp, #4]
 80134f6:	f840 bb04 	str.w	fp, [r0], #4
 80134fa:	eba0 000a 	sub.w	r0, r0, sl
 80134fe:	1080      	asrs	r0, r0, #2
 8013500:	6120      	str	r0, [r4, #16]
 8013502:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8013506:	4658      	mov	r0, fp
 8013508:	f000 fbd8 	bl	8013cbc <__hi0bits>
 801350c:	683d      	ldr	r5, [r7, #0]
 801350e:	eba8 0000 	sub.w	r0, r8, r0
 8013512:	42a8      	cmp	r0, r5
 8013514:	dd59      	ble.n	80135ca <__gethex+0x24e>
 8013516:	eba0 0805 	sub.w	r8, r0, r5
 801351a:	4641      	mov	r1, r8
 801351c:	4620      	mov	r0, r4
 801351e:	f000 ff67 	bl	80143f0 <__any_on>
 8013522:	4683      	mov	fp, r0
 8013524:	b1b8      	cbz	r0, 8013556 <__gethex+0x1da>
 8013526:	f108 33ff 	add.w	r3, r8, #4294967295
 801352a:	1159      	asrs	r1, r3, #5
 801352c:	f003 021f 	and.w	r2, r3, #31
 8013530:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8013534:	f04f 0b01 	mov.w	fp, #1
 8013538:	fa0b f202 	lsl.w	r2, fp, r2
 801353c:	420a      	tst	r2, r1
 801353e:	d00a      	beq.n	8013556 <__gethex+0x1da>
 8013540:	455b      	cmp	r3, fp
 8013542:	dd06      	ble.n	8013552 <__gethex+0x1d6>
 8013544:	f1a8 0102 	sub.w	r1, r8, #2
 8013548:	4620      	mov	r0, r4
 801354a:	f000 ff51 	bl	80143f0 <__any_on>
 801354e:	2800      	cmp	r0, #0
 8013550:	d138      	bne.n	80135c4 <__gethex+0x248>
 8013552:	f04f 0b02 	mov.w	fp, #2
 8013556:	4641      	mov	r1, r8
 8013558:	4620      	mov	r0, r4
 801355a:	f7ff fea7 	bl	80132ac <rshift>
 801355e:	4446      	add	r6, r8
 8013560:	68bb      	ldr	r3, [r7, #8]
 8013562:	42b3      	cmp	r3, r6
 8013564:	da41      	bge.n	80135ea <__gethex+0x26e>
 8013566:	4621      	mov	r1, r4
 8013568:	4648      	mov	r0, r9
 801356a:	f000 faf5 	bl	8013b58 <_Bfree>
 801356e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013570:	2300      	movs	r3, #0
 8013572:	6013      	str	r3, [r2, #0]
 8013574:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8013578:	e78a      	b.n	8013490 <__gethex+0x114>
 801357a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 801357e:	2a2e      	cmp	r2, #46	; 0x2e
 8013580:	d014      	beq.n	80135ac <__gethex+0x230>
 8013582:	2b20      	cmp	r3, #32
 8013584:	d106      	bne.n	8013594 <__gethex+0x218>
 8013586:	9b01      	ldr	r3, [sp, #4]
 8013588:	f843 bb04 	str.w	fp, [r3], #4
 801358c:	f04f 0b00 	mov.w	fp, #0
 8013590:	9301      	str	r3, [sp, #4]
 8013592:	465b      	mov	r3, fp
 8013594:	7828      	ldrb	r0, [r5, #0]
 8013596:	9303      	str	r3, [sp, #12]
 8013598:	f7ff feda 	bl	8013350 <__hexdig_fun>
 801359c:	9b03      	ldr	r3, [sp, #12]
 801359e:	f000 000f 	and.w	r0, r0, #15
 80135a2:	4098      	lsls	r0, r3
 80135a4:	ea4b 0b00 	orr.w	fp, fp, r0
 80135a8:	3304      	adds	r3, #4
 80135aa:	e7a1      	b.n	80134f0 <__gethex+0x174>
 80135ac:	45a8      	cmp	r8, r5
 80135ae:	d8e8      	bhi.n	8013582 <__gethex+0x206>
 80135b0:	2201      	movs	r2, #1
 80135b2:	4628      	mov	r0, r5
 80135b4:	9303      	str	r3, [sp, #12]
 80135b6:	f7ff fd57 	bl	8013068 <strncmp>
 80135ba:	4926      	ldr	r1, [pc, #152]	; (8013654 <__gethex+0x2d8>)
 80135bc:	9b03      	ldr	r3, [sp, #12]
 80135be:	2800      	cmp	r0, #0
 80135c0:	d1df      	bne.n	8013582 <__gethex+0x206>
 80135c2:	e795      	b.n	80134f0 <__gethex+0x174>
 80135c4:	f04f 0b03 	mov.w	fp, #3
 80135c8:	e7c5      	b.n	8013556 <__gethex+0x1da>
 80135ca:	da0b      	bge.n	80135e4 <__gethex+0x268>
 80135cc:	eba5 0800 	sub.w	r8, r5, r0
 80135d0:	4621      	mov	r1, r4
 80135d2:	4642      	mov	r2, r8
 80135d4:	4648      	mov	r0, r9
 80135d6:	f000 fcd9 	bl	8013f8c <__lshift>
 80135da:	eba6 0608 	sub.w	r6, r6, r8
 80135de:	4604      	mov	r4, r0
 80135e0:	f100 0a14 	add.w	sl, r0, #20
 80135e4:	f04f 0b00 	mov.w	fp, #0
 80135e8:	e7ba      	b.n	8013560 <__gethex+0x1e4>
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	42b3      	cmp	r3, r6
 80135ee:	dd73      	ble.n	80136d8 <__gethex+0x35c>
 80135f0:	1b9e      	subs	r6, r3, r6
 80135f2:	42b5      	cmp	r5, r6
 80135f4:	dc34      	bgt.n	8013660 <__gethex+0x2e4>
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	2b02      	cmp	r3, #2
 80135fa:	d023      	beq.n	8013644 <__gethex+0x2c8>
 80135fc:	2b03      	cmp	r3, #3
 80135fe:	d025      	beq.n	801364c <__gethex+0x2d0>
 8013600:	2b01      	cmp	r3, #1
 8013602:	d115      	bne.n	8013630 <__gethex+0x2b4>
 8013604:	42b5      	cmp	r5, r6
 8013606:	d113      	bne.n	8013630 <__gethex+0x2b4>
 8013608:	2d01      	cmp	r5, #1
 801360a:	d10b      	bne.n	8013624 <__gethex+0x2a8>
 801360c:	9a02      	ldr	r2, [sp, #8]
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	6013      	str	r3, [r2, #0]
 8013612:	2301      	movs	r3, #1
 8013614:	6123      	str	r3, [r4, #16]
 8013616:	f8ca 3000 	str.w	r3, [sl]
 801361a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801361c:	f04f 0862 	mov.w	r8, #98	; 0x62
 8013620:	601c      	str	r4, [r3, #0]
 8013622:	e735      	b.n	8013490 <__gethex+0x114>
 8013624:	1e69      	subs	r1, r5, #1
 8013626:	4620      	mov	r0, r4
 8013628:	f000 fee2 	bl	80143f0 <__any_on>
 801362c:	2800      	cmp	r0, #0
 801362e:	d1ed      	bne.n	801360c <__gethex+0x290>
 8013630:	4621      	mov	r1, r4
 8013632:	4648      	mov	r0, r9
 8013634:	f000 fa90 	bl	8013b58 <_Bfree>
 8013638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801363a:	2300      	movs	r3, #0
 801363c:	6013      	str	r3, [r2, #0]
 801363e:	f04f 0850 	mov.w	r8, #80	; 0x50
 8013642:	e725      	b.n	8013490 <__gethex+0x114>
 8013644:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013646:	2b00      	cmp	r3, #0
 8013648:	d1f2      	bne.n	8013630 <__gethex+0x2b4>
 801364a:	e7df      	b.n	801360c <__gethex+0x290>
 801364c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801364e:	2b00      	cmp	r3, #0
 8013650:	d1dc      	bne.n	801360c <__gethex+0x290>
 8013652:	e7ed      	b.n	8013630 <__gethex+0x2b4>
 8013654:	08015bac 	.word	0x08015bac
 8013658:	08015d19 	.word	0x08015d19
 801365c:	08015d2a 	.word	0x08015d2a
 8013660:	f106 38ff 	add.w	r8, r6, #4294967295
 8013664:	f1bb 0f00 	cmp.w	fp, #0
 8013668:	d133      	bne.n	80136d2 <__gethex+0x356>
 801366a:	f1b8 0f00 	cmp.w	r8, #0
 801366e:	d004      	beq.n	801367a <__gethex+0x2fe>
 8013670:	4641      	mov	r1, r8
 8013672:	4620      	mov	r0, r4
 8013674:	f000 febc 	bl	80143f0 <__any_on>
 8013678:	4683      	mov	fp, r0
 801367a:	ea4f 1268 	mov.w	r2, r8, asr #5
 801367e:	2301      	movs	r3, #1
 8013680:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8013684:	f008 081f 	and.w	r8, r8, #31
 8013688:	fa03 f308 	lsl.w	r3, r3, r8
 801368c:	4213      	tst	r3, r2
 801368e:	4631      	mov	r1, r6
 8013690:	4620      	mov	r0, r4
 8013692:	bf18      	it	ne
 8013694:	f04b 0b02 	orrne.w	fp, fp, #2
 8013698:	1bad      	subs	r5, r5, r6
 801369a:	f7ff fe07 	bl	80132ac <rshift>
 801369e:	687e      	ldr	r6, [r7, #4]
 80136a0:	f04f 0802 	mov.w	r8, #2
 80136a4:	f1bb 0f00 	cmp.w	fp, #0
 80136a8:	d04a      	beq.n	8013740 <__gethex+0x3c4>
 80136aa:	68fb      	ldr	r3, [r7, #12]
 80136ac:	2b02      	cmp	r3, #2
 80136ae:	d016      	beq.n	80136de <__gethex+0x362>
 80136b0:	2b03      	cmp	r3, #3
 80136b2:	d018      	beq.n	80136e6 <__gethex+0x36a>
 80136b4:	2b01      	cmp	r3, #1
 80136b6:	d109      	bne.n	80136cc <__gethex+0x350>
 80136b8:	f01b 0f02 	tst.w	fp, #2
 80136bc:	d006      	beq.n	80136cc <__gethex+0x350>
 80136be:	f8da 3000 	ldr.w	r3, [sl]
 80136c2:	ea4b 0b03 	orr.w	fp, fp, r3
 80136c6:	f01b 0f01 	tst.w	fp, #1
 80136ca:	d10f      	bne.n	80136ec <__gethex+0x370>
 80136cc:	f048 0810 	orr.w	r8, r8, #16
 80136d0:	e036      	b.n	8013740 <__gethex+0x3c4>
 80136d2:	f04f 0b01 	mov.w	fp, #1
 80136d6:	e7d0      	b.n	801367a <__gethex+0x2fe>
 80136d8:	f04f 0801 	mov.w	r8, #1
 80136dc:	e7e2      	b.n	80136a4 <__gethex+0x328>
 80136de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136e0:	f1c3 0301 	rsb	r3, r3, #1
 80136e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80136e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d0ef      	beq.n	80136cc <__gethex+0x350>
 80136ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80136f0:	f104 0214 	add.w	r2, r4, #20
 80136f4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80136f8:	9301      	str	r3, [sp, #4]
 80136fa:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80136fe:	2300      	movs	r3, #0
 8013700:	4694      	mov	ip, r2
 8013702:	f852 1b04 	ldr.w	r1, [r2], #4
 8013706:	f1b1 3fff 	cmp.w	r1, #4294967295
 801370a:	d01e      	beq.n	801374a <__gethex+0x3ce>
 801370c:	3101      	adds	r1, #1
 801370e:	f8cc 1000 	str.w	r1, [ip]
 8013712:	f1b8 0f02 	cmp.w	r8, #2
 8013716:	f104 0214 	add.w	r2, r4, #20
 801371a:	d13d      	bne.n	8013798 <__gethex+0x41c>
 801371c:	683b      	ldr	r3, [r7, #0]
 801371e:	3b01      	subs	r3, #1
 8013720:	42ab      	cmp	r3, r5
 8013722:	d10b      	bne.n	801373c <__gethex+0x3c0>
 8013724:	1169      	asrs	r1, r5, #5
 8013726:	2301      	movs	r3, #1
 8013728:	f005 051f 	and.w	r5, r5, #31
 801372c:	fa03 f505 	lsl.w	r5, r3, r5
 8013730:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8013734:	421d      	tst	r5, r3
 8013736:	bf18      	it	ne
 8013738:	f04f 0801 	movne.w	r8, #1
 801373c:	f048 0820 	orr.w	r8, r8, #32
 8013740:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013742:	601c      	str	r4, [r3, #0]
 8013744:	9b02      	ldr	r3, [sp, #8]
 8013746:	601e      	str	r6, [r3, #0]
 8013748:	e6a2      	b.n	8013490 <__gethex+0x114>
 801374a:	4290      	cmp	r0, r2
 801374c:	f842 3c04 	str.w	r3, [r2, #-4]
 8013750:	d8d6      	bhi.n	8013700 <__gethex+0x384>
 8013752:	68a2      	ldr	r2, [r4, #8]
 8013754:	4593      	cmp	fp, r2
 8013756:	db17      	blt.n	8013788 <__gethex+0x40c>
 8013758:	6861      	ldr	r1, [r4, #4]
 801375a:	4648      	mov	r0, r9
 801375c:	3101      	adds	r1, #1
 801375e:	f000 f9bb 	bl	8013ad8 <_Balloc>
 8013762:	4682      	mov	sl, r0
 8013764:	b918      	cbnz	r0, 801376e <__gethex+0x3f2>
 8013766:	4b1b      	ldr	r3, [pc, #108]	; (80137d4 <__gethex+0x458>)
 8013768:	4602      	mov	r2, r0
 801376a:	2184      	movs	r1, #132	; 0x84
 801376c:	e6b3      	b.n	80134d6 <__gethex+0x15a>
 801376e:	6922      	ldr	r2, [r4, #16]
 8013770:	3202      	adds	r2, #2
 8013772:	f104 010c 	add.w	r1, r4, #12
 8013776:	0092      	lsls	r2, r2, #2
 8013778:	300c      	adds	r0, #12
 801377a:	f7ff fd2e 	bl	80131da <memcpy>
 801377e:	4621      	mov	r1, r4
 8013780:	4648      	mov	r0, r9
 8013782:	f000 f9e9 	bl	8013b58 <_Bfree>
 8013786:	4654      	mov	r4, sl
 8013788:	6922      	ldr	r2, [r4, #16]
 801378a:	1c51      	adds	r1, r2, #1
 801378c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013790:	6121      	str	r1, [r4, #16]
 8013792:	2101      	movs	r1, #1
 8013794:	6151      	str	r1, [r2, #20]
 8013796:	e7bc      	b.n	8013712 <__gethex+0x396>
 8013798:	6921      	ldr	r1, [r4, #16]
 801379a:	4559      	cmp	r1, fp
 801379c:	dd0b      	ble.n	80137b6 <__gethex+0x43a>
 801379e:	2101      	movs	r1, #1
 80137a0:	4620      	mov	r0, r4
 80137a2:	f7ff fd83 	bl	80132ac <rshift>
 80137a6:	68bb      	ldr	r3, [r7, #8]
 80137a8:	3601      	adds	r6, #1
 80137aa:	42b3      	cmp	r3, r6
 80137ac:	f6ff aedb 	blt.w	8013566 <__gethex+0x1ea>
 80137b0:	f04f 0801 	mov.w	r8, #1
 80137b4:	e7c2      	b.n	801373c <__gethex+0x3c0>
 80137b6:	f015 051f 	ands.w	r5, r5, #31
 80137ba:	d0f9      	beq.n	80137b0 <__gethex+0x434>
 80137bc:	9b01      	ldr	r3, [sp, #4]
 80137be:	441a      	add	r2, r3
 80137c0:	f1c5 0520 	rsb	r5, r5, #32
 80137c4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80137c8:	f000 fa78 	bl	8013cbc <__hi0bits>
 80137cc:	42a8      	cmp	r0, r5
 80137ce:	dbe6      	blt.n	801379e <__gethex+0x422>
 80137d0:	e7ee      	b.n	80137b0 <__gethex+0x434>
 80137d2:	bf00      	nop
 80137d4:	08015d19 	.word	0x08015d19

080137d8 <L_shift>:
 80137d8:	f1c2 0208 	rsb	r2, r2, #8
 80137dc:	0092      	lsls	r2, r2, #2
 80137de:	b570      	push	{r4, r5, r6, lr}
 80137e0:	f1c2 0620 	rsb	r6, r2, #32
 80137e4:	6843      	ldr	r3, [r0, #4]
 80137e6:	6804      	ldr	r4, [r0, #0]
 80137e8:	fa03 f506 	lsl.w	r5, r3, r6
 80137ec:	432c      	orrs	r4, r5
 80137ee:	40d3      	lsrs	r3, r2
 80137f0:	6004      	str	r4, [r0, #0]
 80137f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80137f6:	4288      	cmp	r0, r1
 80137f8:	d3f4      	bcc.n	80137e4 <L_shift+0xc>
 80137fa:	bd70      	pop	{r4, r5, r6, pc}

080137fc <__match>:
 80137fc:	b530      	push	{r4, r5, lr}
 80137fe:	6803      	ldr	r3, [r0, #0]
 8013800:	3301      	adds	r3, #1
 8013802:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013806:	b914      	cbnz	r4, 801380e <__match+0x12>
 8013808:	6003      	str	r3, [r0, #0]
 801380a:	2001      	movs	r0, #1
 801380c:	bd30      	pop	{r4, r5, pc}
 801380e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013812:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8013816:	2d19      	cmp	r5, #25
 8013818:	bf98      	it	ls
 801381a:	3220      	addls	r2, #32
 801381c:	42a2      	cmp	r2, r4
 801381e:	d0f0      	beq.n	8013802 <__match+0x6>
 8013820:	2000      	movs	r0, #0
 8013822:	e7f3      	b.n	801380c <__match+0x10>

08013824 <__hexnan>:
 8013824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013828:	680b      	ldr	r3, [r1, #0]
 801382a:	6801      	ldr	r1, [r0, #0]
 801382c:	115e      	asrs	r6, r3, #5
 801382e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8013832:	f013 031f 	ands.w	r3, r3, #31
 8013836:	b087      	sub	sp, #28
 8013838:	bf18      	it	ne
 801383a:	3604      	addne	r6, #4
 801383c:	2500      	movs	r5, #0
 801383e:	1f37      	subs	r7, r6, #4
 8013840:	4682      	mov	sl, r0
 8013842:	4690      	mov	r8, r2
 8013844:	9301      	str	r3, [sp, #4]
 8013846:	f846 5c04 	str.w	r5, [r6, #-4]
 801384a:	46b9      	mov	r9, r7
 801384c:	463c      	mov	r4, r7
 801384e:	9502      	str	r5, [sp, #8]
 8013850:	46ab      	mov	fp, r5
 8013852:	784a      	ldrb	r2, [r1, #1]
 8013854:	1c4b      	adds	r3, r1, #1
 8013856:	9303      	str	r3, [sp, #12]
 8013858:	b342      	cbz	r2, 80138ac <__hexnan+0x88>
 801385a:	4610      	mov	r0, r2
 801385c:	9105      	str	r1, [sp, #20]
 801385e:	9204      	str	r2, [sp, #16]
 8013860:	f7ff fd76 	bl	8013350 <__hexdig_fun>
 8013864:	2800      	cmp	r0, #0
 8013866:	d14f      	bne.n	8013908 <__hexnan+0xe4>
 8013868:	9a04      	ldr	r2, [sp, #16]
 801386a:	9905      	ldr	r1, [sp, #20]
 801386c:	2a20      	cmp	r2, #32
 801386e:	d818      	bhi.n	80138a2 <__hexnan+0x7e>
 8013870:	9b02      	ldr	r3, [sp, #8]
 8013872:	459b      	cmp	fp, r3
 8013874:	dd13      	ble.n	801389e <__hexnan+0x7a>
 8013876:	454c      	cmp	r4, r9
 8013878:	d206      	bcs.n	8013888 <__hexnan+0x64>
 801387a:	2d07      	cmp	r5, #7
 801387c:	dc04      	bgt.n	8013888 <__hexnan+0x64>
 801387e:	462a      	mov	r2, r5
 8013880:	4649      	mov	r1, r9
 8013882:	4620      	mov	r0, r4
 8013884:	f7ff ffa8 	bl	80137d8 <L_shift>
 8013888:	4544      	cmp	r4, r8
 801388a:	d950      	bls.n	801392e <__hexnan+0x10a>
 801388c:	2300      	movs	r3, #0
 801388e:	f1a4 0904 	sub.w	r9, r4, #4
 8013892:	f844 3c04 	str.w	r3, [r4, #-4]
 8013896:	f8cd b008 	str.w	fp, [sp, #8]
 801389a:	464c      	mov	r4, r9
 801389c:	461d      	mov	r5, r3
 801389e:	9903      	ldr	r1, [sp, #12]
 80138a0:	e7d7      	b.n	8013852 <__hexnan+0x2e>
 80138a2:	2a29      	cmp	r2, #41	; 0x29
 80138a4:	d155      	bne.n	8013952 <__hexnan+0x12e>
 80138a6:	3102      	adds	r1, #2
 80138a8:	f8ca 1000 	str.w	r1, [sl]
 80138ac:	f1bb 0f00 	cmp.w	fp, #0
 80138b0:	d04f      	beq.n	8013952 <__hexnan+0x12e>
 80138b2:	454c      	cmp	r4, r9
 80138b4:	d206      	bcs.n	80138c4 <__hexnan+0xa0>
 80138b6:	2d07      	cmp	r5, #7
 80138b8:	dc04      	bgt.n	80138c4 <__hexnan+0xa0>
 80138ba:	462a      	mov	r2, r5
 80138bc:	4649      	mov	r1, r9
 80138be:	4620      	mov	r0, r4
 80138c0:	f7ff ff8a 	bl	80137d8 <L_shift>
 80138c4:	4544      	cmp	r4, r8
 80138c6:	d934      	bls.n	8013932 <__hexnan+0x10e>
 80138c8:	f1a8 0204 	sub.w	r2, r8, #4
 80138cc:	4623      	mov	r3, r4
 80138ce:	f853 1b04 	ldr.w	r1, [r3], #4
 80138d2:	f842 1f04 	str.w	r1, [r2, #4]!
 80138d6:	429f      	cmp	r7, r3
 80138d8:	d2f9      	bcs.n	80138ce <__hexnan+0xaa>
 80138da:	1b3b      	subs	r3, r7, r4
 80138dc:	f023 0303 	bic.w	r3, r3, #3
 80138e0:	3304      	adds	r3, #4
 80138e2:	3e03      	subs	r6, #3
 80138e4:	3401      	adds	r4, #1
 80138e6:	42a6      	cmp	r6, r4
 80138e8:	bf38      	it	cc
 80138ea:	2304      	movcc	r3, #4
 80138ec:	4443      	add	r3, r8
 80138ee:	2200      	movs	r2, #0
 80138f0:	f843 2b04 	str.w	r2, [r3], #4
 80138f4:	429f      	cmp	r7, r3
 80138f6:	d2fb      	bcs.n	80138f0 <__hexnan+0xcc>
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	b91b      	cbnz	r3, 8013904 <__hexnan+0xe0>
 80138fc:	4547      	cmp	r7, r8
 80138fe:	d126      	bne.n	801394e <__hexnan+0x12a>
 8013900:	2301      	movs	r3, #1
 8013902:	603b      	str	r3, [r7, #0]
 8013904:	2005      	movs	r0, #5
 8013906:	e025      	b.n	8013954 <__hexnan+0x130>
 8013908:	3501      	adds	r5, #1
 801390a:	2d08      	cmp	r5, #8
 801390c:	f10b 0b01 	add.w	fp, fp, #1
 8013910:	dd06      	ble.n	8013920 <__hexnan+0xfc>
 8013912:	4544      	cmp	r4, r8
 8013914:	d9c3      	bls.n	801389e <__hexnan+0x7a>
 8013916:	2300      	movs	r3, #0
 8013918:	f844 3c04 	str.w	r3, [r4, #-4]
 801391c:	2501      	movs	r5, #1
 801391e:	3c04      	subs	r4, #4
 8013920:	6822      	ldr	r2, [r4, #0]
 8013922:	f000 000f 	and.w	r0, r0, #15
 8013926:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801392a:	6020      	str	r0, [r4, #0]
 801392c:	e7b7      	b.n	801389e <__hexnan+0x7a>
 801392e:	2508      	movs	r5, #8
 8013930:	e7b5      	b.n	801389e <__hexnan+0x7a>
 8013932:	9b01      	ldr	r3, [sp, #4]
 8013934:	2b00      	cmp	r3, #0
 8013936:	d0df      	beq.n	80138f8 <__hexnan+0xd4>
 8013938:	f1c3 0320 	rsb	r3, r3, #32
 801393c:	f04f 32ff 	mov.w	r2, #4294967295
 8013940:	40da      	lsrs	r2, r3
 8013942:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8013946:	4013      	ands	r3, r2
 8013948:	f846 3c04 	str.w	r3, [r6, #-4]
 801394c:	e7d4      	b.n	80138f8 <__hexnan+0xd4>
 801394e:	3f04      	subs	r7, #4
 8013950:	e7d2      	b.n	80138f8 <__hexnan+0xd4>
 8013952:	2004      	movs	r0, #4
 8013954:	b007      	add	sp, #28
 8013956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801395c <sbrk_aligned>:
 801395c:	b570      	push	{r4, r5, r6, lr}
 801395e:	4e0e      	ldr	r6, [pc, #56]	; (8013998 <sbrk_aligned+0x3c>)
 8013960:	460c      	mov	r4, r1
 8013962:	6831      	ldr	r1, [r6, #0]
 8013964:	4605      	mov	r5, r0
 8013966:	b911      	cbnz	r1, 801396e <sbrk_aligned+0x12>
 8013968:	f001 f920 	bl	8014bac <_sbrk_r>
 801396c:	6030      	str	r0, [r6, #0]
 801396e:	4621      	mov	r1, r4
 8013970:	4628      	mov	r0, r5
 8013972:	f001 f91b 	bl	8014bac <_sbrk_r>
 8013976:	1c43      	adds	r3, r0, #1
 8013978:	d00a      	beq.n	8013990 <sbrk_aligned+0x34>
 801397a:	1cc4      	adds	r4, r0, #3
 801397c:	f024 0403 	bic.w	r4, r4, #3
 8013980:	42a0      	cmp	r0, r4
 8013982:	d007      	beq.n	8013994 <sbrk_aligned+0x38>
 8013984:	1a21      	subs	r1, r4, r0
 8013986:	4628      	mov	r0, r5
 8013988:	f001 f910 	bl	8014bac <_sbrk_r>
 801398c:	3001      	adds	r0, #1
 801398e:	d101      	bne.n	8013994 <sbrk_aligned+0x38>
 8013990:	f04f 34ff 	mov.w	r4, #4294967295
 8013994:	4620      	mov	r0, r4
 8013996:	bd70      	pop	{r4, r5, r6, pc}
 8013998:	20004524 	.word	0x20004524

0801399c <_malloc_r>:
 801399c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139a0:	1ccd      	adds	r5, r1, #3
 80139a2:	f025 0503 	bic.w	r5, r5, #3
 80139a6:	3508      	adds	r5, #8
 80139a8:	2d0c      	cmp	r5, #12
 80139aa:	bf38      	it	cc
 80139ac:	250c      	movcc	r5, #12
 80139ae:	2d00      	cmp	r5, #0
 80139b0:	4607      	mov	r7, r0
 80139b2:	db01      	blt.n	80139b8 <_malloc_r+0x1c>
 80139b4:	42a9      	cmp	r1, r5
 80139b6:	d905      	bls.n	80139c4 <_malloc_r+0x28>
 80139b8:	230c      	movs	r3, #12
 80139ba:	603b      	str	r3, [r7, #0]
 80139bc:	2600      	movs	r6, #0
 80139be:	4630      	mov	r0, r6
 80139c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013a98 <_malloc_r+0xfc>
 80139c8:	f000 f87a 	bl	8013ac0 <__malloc_lock>
 80139cc:	f8d8 3000 	ldr.w	r3, [r8]
 80139d0:	461c      	mov	r4, r3
 80139d2:	bb5c      	cbnz	r4, 8013a2c <_malloc_r+0x90>
 80139d4:	4629      	mov	r1, r5
 80139d6:	4638      	mov	r0, r7
 80139d8:	f7ff ffc0 	bl	801395c <sbrk_aligned>
 80139dc:	1c43      	adds	r3, r0, #1
 80139de:	4604      	mov	r4, r0
 80139e0:	d155      	bne.n	8013a8e <_malloc_r+0xf2>
 80139e2:	f8d8 4000 	ldr.w	r4, [r8]
 80139e6:	4626      	mov	r6, r4
 80139e8:	2e00      	cmp	r6, #0
 80139ea:	d145      	bne.n	8013a78 <_malloc_r+0xdc>
 80139ec:	2c00      	cmp	r4, #0
 80139ee:	d048      	beq.n	8013a82 <_malloc_r+0xe6>
 80139f0:	6823      	ldr	r3, [r4, #0]
 80139f2:	4631      	mov	r1, r6
 80139f4:	4638      	mov	r0, r7
 80139f6:	eb04 0903 	add.w	r9, r4, r3
 80139fa:	f001 f8d7 	bl	8014bac <_sbrk_r>
 80139fe:	4581      	cmp	r9, r0
 8013a00:	d13f      	bne.n	8013a82 <_malloc_r+0xe6>
 8013a02:	6821      	ldr	r1, [r4, #0]
 8013a04:	1a6d      	subs	r5, r5, r1
 8013a06:	4629      	mov	r1, r5
 8013a08:	4638      	mov	r0, r7
 8013a0a:	f7ff ffa7 	bl	801395c <sbrk_aligned>
 8013a0e:	3001      	adds	r0, #1
 8013a10:	d037      	beq.n	8013a82 <_malloc_r+0xe6>
 8013a12:	6823      	ldr	r3, [r4, #0]
 8013a14:	442b      	add	r3, r5
 8013a16:	6023      	str	r3, [r4, #0]
 8013a18:	f8d8 3000 	ldr.w	r3, [r8]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d038      	beq.n	8013a92 <_malloc_r+0xf6>
 8013a20:	685a      	ldr	r2, [r3, #4]
 8013a22:	42a2      	cmp	r2, r4
 8013a24:	d12b      	bne.n	8013a7e <_malloc_r+0xe2>
 8013a26:	2200      	movs	r2, #0
 8013a28:	605a      	str	r2, [r3, #4]
 8013a2a:	e00f      	b.n	8013a4c <_malloc_r+0xb0>
 8013a2c:	6822      	ldr	r2, [r4, #0]
 8013a2e:	1b52      	subs	r2, r2, r5
 8013a30:	d41f      	bmi.n	8013a72 <_malloc_r+0xd6>
 8013a32:	2a0b      	cmp	r2, #11
 8013a34:	d917      	bls.n	8013a66 <_malloc_r+0xca>
 8013a36:	1961      	adds	r1, r4, r5
 8013a38:	42a3      	cmp	r3, r4
 8013a3a:	6025      	str	r5, [r4, #0]
 8013a3c:	bf18      	it	ne
 8013a3e:	6059      	strne	r1, [r3, #4]
 8013a40:	6863      	ldr	r3, [r4, #4]
 8013a42:	bf08      	it	eq
 8013a44:	f8c8 1000 	streq.w	r1, [r8]
 8013a48:	5162      	str	r2, [r4, r5]
 8013a4a:	604b      	str	r3, [r1, #4]
 8013a4c:	4638      	mov	r0, r7
 8013a4e:	f104 060b 	add.w	r6, r4, #11
 8013a52:	f000 f83b 	bl	8013acc <__malloc_unlock>
 8013a56:	f026 0607 	bic.w	r6, r6, #7
 8013a5a:	1d23      	adds	r3, r4, #4
 8013a5c:	1af2      	subs	r2, r6, r3
 8013a5e:	d0ae      	beq.n	80139be <_malloc_r+0x22>
 8013a60:	1b9b      	subs	r3, r3, r6
 8013a62:	50a3      	str	r3, [r4, r2]
 8013a64:	e7ab      	b.n	80139be <_malloc_r+0x22>
 8013a66:	42a3      	cmp	r3, r4
 8013a68:	6862      	ldr	r2, [r4, #4]
 8013a6a:	d1dd      	bne.n	8013a28 <_malloc_r+0x8c>
 8013a6c:	f8c8 2000 	str.w	r2, [r8]
 8013a70:	e7ec      	b.n	8013a4c <_malloc_r+0xb0>
 8013a72:	4623      	mov	r3, r4
 8013a74:	6864      	ldr	r4, [r4, #4]
 8013a76:	e7ac      	b.n	80139d2 <_malloc_r+0x36>
 8013a78:	4634      	mov	r4, r6
 8013a7a:	6876      	ldr	r6, [r6, #4]
 8013a7c:	e7b4      	b.n	80139e8 <_malloc_r+0x4c>
 8013a7e:	4613      	mov	r3, r2
 8013a80:	e7cc      	b.n	8013a1c <_malloc_r+0x80>
 8013a82:	230c      	movs	r3, #12
 8013a84:	603b      	str	r3, [r7, #0]
 8013a86:	4638      	mov	r0, r7
 8013a88:	f000 f820 	bl	8013acc <__malloc_unlock>
 8013a8c:	e797      	b.n	80139be <_malloc_r+0x22>
 8013a8e:	6025      	str	r5, [r4, #0]
 8013a90:	e7dc      	b.n	8013a4c <_malloc_r+0xb0>
 8013a92:	605b      	str	r3, [r3, #4]
 8013a94:	deff      	udf	#255	; 0xff
 8013a96:	bf00      	nop
 8013a98:	20004520 	.word	0x20004520

08013a9c <__ascii_mbtowc>:
 8013a9c:	b082      	sub	sp, #8
 8013a9e:	b901      	cbnz	r1, 8013aa2 <__ascii_mbtowc+0x6>
 8013aa0:	a901      	add	r1, sp, #4
 8013aa2:	b142      	cbz	r2, 8013ab6 <__ascii_mbtowc+0x1a>
 8013aa4:	b14b      	cbz	r3, 8013aba <__ascii_mbtowc+0x1e>
 8013aa6:	7813      	ldrb	r3, [r2, #0]
 8013aa8:	600b      	str	r3, [r1, #0]
 8013aaa:	7812      	ldrb	r2, [r2, #0]
 8013aac:	1e10      	subs	r0, r2, #0
 8013aae:	bf18      	it	ne
 8013ab0:	2001      	movne	r0, #1
 8013ab2:	b002      	add	sp, #8
 8013ab4:	4770      	bx	lr
 8013ab6:	4610      	mov	r0, r2
 8013ab8:	e7fb      	b.n	8013ab2 <__ascii_mbtowc+0x16>
 8013aba:	f06f 0001 	mvn.w	r0, #1
 8013abe:	e7f8      	b.n	8013ab2 <__ascii_mbtowc+0x16>

08013ac0 <__malloc_lock>:
 8013ac0:	4801      	ldr	r0, [pc, #4]	; (8013ac8 <__malloc_lock+0x8>)
 8013ac2:	f7ff bb80 	b.w	80131c6 <__retarget_lock_acquire_recursive>
 8013ac6:	bf00      	nop
 8013ac8:	2000451c 	.word	0x2000451c

08013acc <__malloc_unlock>:
 8013acc:	4801      	ldr	r0, [pc, #4]	; (8013ad4 <__malloc_unlock+0x8>)
 8013ace:	f7ff bb7b 	b.w	80131c8 <__retarget_lock_release_recursive>
 8013ad2:	bf00      	nop
 8013ad4:	2000451c 	.word	0x2000451c

08013ad8 <_Balloc>:
 8013ad8:	b570      	push	{r4, r5, r6, lr}
 8013ada:	69c6      	ldr	r6, [r0, #28]
 8013adc:	4604      	mov	r4, r0
 8013ade:	460d      	mov	r5, r1
 8013ae0:	b976      	cbnz	r6, 8013b00 <_Balloc+0x28>
 8013ae2:	2010      	movs	r0, #16
 8013ae4:	f001 f8a6 	bl	8014c34 <malloc>
 8013ae8:	4602      	mov	r2, r0
 8013aea:	61e0      	str	r0, [r4, #28]
 8013aec:	b920      	cbnz	r0, 8013af8 <_Balloc+0x20>
 8013aee:	4b18      	ldr	r3, [pc, #96]	; (8013b50 <_Balloc+0x78>)
 8013af0:	4818      	ldr	r0, [pc, #96]	; (8013b54 <_Balloc+0x7c>)
 8013af2:	216b      	movs	r1, #107	; 0x6b
 8013af4:	f001 f86a 	bl	8014bcc <__assert_func>
 8013af8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013afc:	6006      	str	r6, [r0, #0]
 8013afe:	60c6      	str	r6, [r0, #12]
 8013b00:	69e6      	ldr	r6, [r4, #28]
 8013b02:	68f3      	ldr	r3, [r6, #12]
 8013b04:	b183      	cbz	r3, 8013b28 <_Balloc+0x50>
 8013b06:	69e3      	ldr	r3, [r4, #28]
 8013b08:	68db      	ldr	r3, [r3, #12]
 8013b0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013b0e:	b9b8      	cbnz	r0, 8013b40 <_Balloc+0x68>
 8013b10:	2101      	movs	r1, #1
 8013b12:	fa01 f605 	lsl.w	r6, r1, r5
 8013b16:	1d72      	adds	r2, r6, #5
 8013b18:	0092      	lsls	r2, r2, #2
 8013b1a:	4620      	mov	r0, r4
 8013b1c:	f001 f874 	bl	8014c08 <_calloc_r>
 8013b20:	b160      	cbz	r0, 8013b3c <_Balloc+0x64>
 8013b22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013b26:	e00e      	b.n	8013b46 <_Balloc+0x6e>
 8013b28:	2221      	movs	r2, #33	; 0x21
 8013b2a:	2104      	movs	r1, #4
 8013b2c:	4620      	mov	r0, r4
 8013b2e:	f001 f86b 	bl	8014c08 <_calloc_r>
 8013b32:	69e3      	ldr	r3, [r4, #28]
 8013b34:	60f0      	str	r0, [r6, #12]
 8013b36:	68db      	ldr	r3, [r3, #12]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	d1e4      	bne.n	8013b06 <_Balloc+0x2e>
 8013b3c:	2000      	movs	r0, #0
 8013b3e:	bd70      	pop	{r4, r5, r6, pc}
 8013b40:	6802      	ldr	r2, [r0, #0]
 8013b42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b46:	2300      	movs	r3, #0
 8013b48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013b4c:	e7f7      	b.n	8013b3e <_Balloc+0x66>
 8013b4e:	bf00      	nop
 8013b50:	08015d8a 	.word	0x08015d8a
 8013b54:	08015da1 	.word	0x08015da1

08013b58 <_Bfree>:
 8013b58:	b570      	push	{r4, r5, r6, lr}
 8013b5a:	69c6      	ldr	r6, [r0, #28]
 8013b5c:	4605      	mov	r5, r0
 8013b5e:	460c      	mov	r4, r1
 8013b60:	b976      	cbnz	r6, 8013b80 <_Bfree+0x28>
 8013b62:	2010      	movs	r0, #16
 8013b64:	f001 f866 	bl	8014c34 <malloc>
 8013b68:	4602      	mov	r2, r0
 8013b6a:	61e8      	str	r0, [r5, #28]
 8013b6c:	b920      	cbnz	r0, 8013b78 <_Bfree+0x20>
 8013b6e:	4b09      	ldr	r3, [pc, #36]	; (8013b94 <_Bfree+0x3c>)
 8013b70:	4809      	ldr	r0, [pc, #36]	; (8013b98 <_Bfree+0x40>)
 8013b72:	218f      	movs	r1, #143	; 0x8f
 8013b74:	f001 f82a 	bl	8014bcc <__assert_func>
 8013b78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b7c:	6006      	str	r6, [r0, #0]
 8013b7e:	60c6      	str	r6, [r0, #12]
 8013b80:	b13c      	cbz	r4, 8013b92 <_Bfree+0x3a>
 8013b82:	69eb      	ldr	r3, [r5, #28]
 8013b84:	6862      	ldr	r2, [r4, #4]
 8013b86:	68db      	ldr	r3, [r3, #12]
 8013b88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013b8c:	6021      	str	r1, [r4, #0]
 8013b8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013b92:	bd70      	pop	{r4, r5, r6, pc}
 8013b94:	08015d8a 	.word	0x08015d8a
 8013b98:	08015da1 	.word	0x08015da1

08013b9c <__multadd>:
 8013b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ba0:	690d      	ldr	r5, [r1, #16]
 8013ba2:	4607      	mov	r7, r0
 8013ba4:	460c      	mov	r4, r1
 8013ba6:	461e      	mov	r6, r3
 8013ba8:	f101 0c14 	add.w	ip, r1, #20
 8013bac:	2000      	movs	r0, #0
 8013bae:	f8dc 3000 	ldr.w	r3, [ip]
 8013bb2:	b299      	uxth	r1, r3
 8013bb4:	fb02 6101 	mla	r1, r2, r1, r6
 8013bb8:	0c1e      	lsrs	r6, r3, #16
 8013bba:	0c0b      	lsrs	r3, r1, #16
 8013bbc:	fb02 3306 	mla	r3, r2, r6, r3
 8013bc0:	b289      	uxth	r1, r1
 8013bc2:	3001      	adds	r0, #1
 8013bc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013bc8:	4285      	cmp	r5, r0
 8013bca:	f84c 1b04 	str.w	r1, [ip], #4
 8013bce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013bd2:	dcec      	bgt.n	8013bae <__multadd+0x12>
 8013bd4:	b30e      	cbz	r6, 8013c1a <__multadd+0x7e>
 8013bd6:	68a3      	ldr	r3, [r4, #8]
 8013bd8:	42ab      	cmp	r3, r5
 8013bda:	dc19      	bgt.n	8013c10 <__multadd+0x74>
 8013bdc:	6861      	ldr	r1, [r4, #4]
 8013bde:	4638      	mov	r0, r7
 8013be0:	3101      	adds	r1, #1
 8013be2:	f7ff ff79 	bl	8013ad8 <_Balloc>
 8013be6:	4680      	mov	r8, r0
 8013be8:	b928      	cbnz	r0, 8013bf6 <__multadd+0x5a>
 8013bea:	4602      	mov	r2, r0
 8013bec:	4b0c      	ldr	r3, [pc, #48]	; (8013c20 <__multadd+0x84>)
 8013bee:	480d      	ldr	r0, [pc, #52]	; (8013c24 <__multadd+0x88>)
 8013bf0:	21ba      	movs	r1, #186	; 0xba
 8013bf2:	f000 ffeb 	bl	8014bcc <__assert_func>
 8013bf6:	6922      	ldr	r2, [r4, #16]
 8013bf8:	3202      	adds	r2, #2
 8013bfa:	f104 010c 	add.w	r1, r4, #12
 8013bfe:	0092      	lsls	r2, r2, #2
 8013c00:	300c      	adds	r0, #12
 8013c02:	f7ff faea 	bl	80131da <memcpy>
 8013c06:	4621      	mov	r1, r4
 8013c08:	4638      	mov	r0, r7
 8013c0a:	f7ff ffa5 	bl	8013b58 <_Bfree>
 8013c0e:	4644      	mov	r4, r8
 8013c10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013c14:	3501      	adds	r5, #1
 8013c16:	615e      	str	r6, [r3, #20]
 8013c18:	6125      	str	r5, [r4, #16]
 8013c1a:	4620      	mov	r0, r4
 8013c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c20:	08015d19 	.word	0x08015d19
 8013c24:	08015da1 	.word	0x08015da1

08013c28 <__s2b>:
 8013c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c2c:	460c      	mov	r4, r1
 8013c2e:	4615      	mov	r5, r2
 8013c30:	461f      	mov	r7, r3
 8013c32:	2209      	movs	r2, #9
 8013c34:	3308      	adds	r3, #8
 8013c36:	4606      	mov	r6, r0
 8013c38:	fb93 f3f2 	sdiv	r3, r3, r2
 8013c3c:	2100      	movs	r1, #0
 8013c3e:	2201      	movs	r2, #1
 8013c40:	429a      	cmp	r2, r3
 8013c42:	db09      	blt.n	8013c58 <__s2b+0x30>
 8013c44:	4630      	mov	r0, r6
 8013c46:	f7ff ff47 	bl	8013ad8 <_Balloc>
 8013c4a:	b940      	cbnz	r0, 8013c5e <__s2b+0x36>
 8013c4c:	4602      	mov	r2, r0
 8013c4e:	4b19      	ldr	r3, [pc, #100]	; (8013cb4 <__s2b+0x8c>)
 8013c50:	4819      	ldr	r0, [pc, #100]	; (8013cb8 <__s2b+0x90>)
 8013c52:	21d3      	movs	r1, #211	; 0xd3
 8013c54:	f000 ffba 	bl	8014bcc <__assert_func>
 8013c58:	0052      	lsls	r2, r2, #1
 8013c5a:	3101      	adds	r1, #1
 8013c5c:	e7f0      	b.n	8013c40 <__s2b+0x18>
 8013c5e:	9b08      	ldr	r3, [sp, #32]
 8013c60:	6143      	str	r3, [r0, #20]
 8013c62:	2d09      	cmp	r5, #9
 8013c64:	f04f 0301 	mov.w	r3, #1
 8013c68:	6103      	str	r3, [r0, #16]
 8013c6a:	dd16      	ble.n	8013c9a <__s2b+0x72>
 8013c6c:	f104 0909 	add.w	r9, r4, #9
 8013c70:	46c8      	mov	r8, r9
 8013c72:	442c      	add	r4, r5
 8013c74:	f818 3b01 	ldrb.w	r3, [r8], #1
 8013c78:	4601      	mov	r1, r0
 8013c7a:	3b30      	subs	r3, #48	; 0x30
 8013c7c:	220a      	movs	r2, #10
 8013c7e:	4630      	mov	r0, r6
 8013c80:	f7ff ff8c 	bl	8013b9c <__multadd>
 8013c84:	45a0      	cmp	r8, r4
 8013c86:	d1f5      	bne.n	8013c74 <__s2b+0x4c>
 8013c88:	f1a5 0408 	sub.w	r4, r5, #8
 8013c8c:	444c      	add	r4, r9
 8013c8e:	1b2d      	subs	r5, r5, r4
 8013c90:	1963      	adds	r3, r4, r5
 8013c92:	42bb      	cmp	r3, r7
 8013c94:	db04      	blt.n	8013ca0 <__s2b+0x78>
 8013c96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013c9a:	340a      	adds	r4, #10
 8013c9c:	2509      	movs	r5, #9
 8013c9e:	e7f6      	b.n	8013c8e <__s2b+0x66>
 8013ca0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8013ca4:	4601      	mov	r1, r0
 8013ca6:	3b30      	subs	r3, #48	; 0x30
 8013ca8:	220a      	movs	r2, #10
 8013caa:	4630      	mov	r0, r6
 8013cac:	f7ff ff76 	bl	8013b9c <__multadd>
 8013cb0:	e7ee      	b.n	8013c90 <__s2b+0x68>
 8013cb2:	bf00      	nop
 8013cb4:	08015d19 	.word	0x08015d19
 8013cb8:	08015da1 	.word	0x08015da1

08013cbc <__hi0bits>:
 8013cbc:	0c03      	lsrs	r3, r0, #16
 8013cbe:	041b      	lsls	r3, r3, #16
 8013cc0:	b9d3      	cbnz	r3, 8013cf8 <__hi0bits+0x3c>
 8013cc2:	0400      	lsls	r0, r0, #16
 8013cc4:	2310      	movs	r3, #16
 8013cc6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013cca:	bf04      	itt	eq
 8013ccc:	0200      	lsleq	r0, r0, #8
 8013cce:	3308      	addeq	r3, #8
 8013cd0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013cd4:	bf04      	itt	eq
 8013cd6:	0100      	lsleq	r0, r0, #4
 8013cd8:	3304      	addeq	r3, #4
 8013cda:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013cde:	bf04      	itt	eq
 8013ce0:	0080      	lsleq	r0, r0, #2
 8013ce2:	3302      	addeq	r3, #2
 8013ce4:	2800      	cmp	r0, #0
 8013ce6:	db05      	blt.n	8013cf4 <__hi0bits+0x38>
 8013ce8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013cec:	f103 0301 	add.w	r3, r3, #1
 8013cf0:	bf08      	it	eq
 8013cf2:	2320      	moveq	r3, #32
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	4770      	bx	lr
 8013cf8:	2300      	movs	r3, #0
 8013cfa:	e7e4      	b.n	8013cc6 <__hi0bits+0xa>

08013cfc <__lo0bits>:
 8013cfc:	6803      	ldr	r3, [r0, #0]
 8013cfe:	f013 0207 	ands.w	r2, r3, #7
 8013d02:	d00c      	beq.n	8013d1e <__lo0bits+0x22>
 8013d04:	07d9      	lsls	r1, r3, #31
 8013d06:	d422      	bmi.n	8013d4e <__lo0bits+0x52>
 8013d08:	079a      	lsls	r2, r3, #30
 8013d0a:	bf49      	itett	mi
 8013d0c:	085b      	lsrmi	r3, r3, #1
 8013d0e:	089b      	lsrpl	r3, r3, #2
 8013d10:	6003      	strmi	r3, [r0, #0]
 8013d12:	2201      	movmi	r2, #1
 8013d14:	bf5c      	itt	pl
 8013d16:	6003      	strpl	r3, [r0, #0]
 8013d18:	2202      	movpl	r2, #2
 8013d1a:	4610      	mov	r0, r2
 8013d1c:	4770      	bx	lr
 8013d1e:	b299      	uxth	r1, r3
 8013d20:	b909      	cbnz	r1, 8013d26 <__lo0bits+0x2a>
 8013d22:	0c1b      	lsrs	r3, r3, #16
 8013d24:	2210      	movs	r2, #16
 8013d26:	b2d9      	uxtb	r1, r3
 8013d28:	b909      	cbnz	r1, 8013d2e <__lo0bits+0x32>
 8013d2a:	3208      	adds	r2, #8
 8013d2c:	0a1b      	lsrs	r3, r3, #8
 8013d2e:	0719      	lsls	r1, r3, #28
 8013d30:	bf04      	itt	eq
 8013d32:	091b      	lsreq	r3, r3, #4
 8013d34:	3204      	addeq	r2, #4
 8013d36:	0799      	lsls	r1, r3, #30
 8013d38:	bf04      	itt	eq
 8013d3a:	089b      	lsreq	r3, r3, #2
 8013d3c:	3202      	addeq	r2, #2
 8013d3e:	07d9      	lsls	r1, r3, #31
 8013d40:	d403      	bmi.n	8013d4a <__lo0bits+0x4e>
 8013d42:	085b      	lsrs	r3, r3, #1
 8013d44:	f102 0201 	add.w	r2, r2, #1
 8013d48:	d003      	beq.n	8013d52 <__lo0bits+0x56>
 8013d4a:	6003      	str	r3, [r0, #0]
 8013d4c:	e7e5      	b.n	8013d1a <__lo0bits+0x1e>
 8013d4e:	2200      	movs	r2, #0
 8013d50:	e7e3      	b.n	8013d1a <__lo0bits+0x1e>
 8013d52:	2220      	movs	r2, #32
 8013d54:	e7e1      	b.n	8013d1a <__lo0bits+0x1e>
	...

08013d58 <__i2b>:
 8013d58:	b510      	push	{r4, lr}
 8013d5a:	460c      	mov	r4, r1
 8013d5c:	2101      	movs	r1, #1
 8013d5e:	f7ff febb 	bl	8013ad8 <_Balloc>
 8013d62:	4602      	mov	r2, r0
 8013d64:	b928      	cbnz	r0, 8013d72 <__i2b+0x1a>
 8013d66:	4b05      	ldr	r3, [pc, #20]	; (8013d7c <__i2b+0x24>)
 8013d68:	4805      	ldr	r0, [pc, #20]	; (8013d80 <__i2b+0x28>)
 8013d6a:	f240 1145 	movw	r1, #325	; 0x145
 8013d6e:	f000 ff2d 	bl	8014bcc <__assert_func>
 8013d72:	2301      	movs	r3, #1
 8013d74:	6144      	str	r4, [r0, #20]
 8013d76:	6103      	str	r3, [r0, #16]
 8013d78:	bd10      	pop	{r4, pc}
 8013d7a:	bf00      	nop
 8013d7c:	08015d19 	.word	0x08015d19
 8013d80:	08015da1 	.word	0x08015da1

08013d84 <__multiply>:
 8013d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d88:	4691      	mov	r9, r2
 8013d8a:	690a      	ldr	r2, [r1, #16]
 8013d8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013d90:	429a      	cmp	r2, r3
 8013d92:	bfb8      	it	lt
 8013d94:	460b      	movlt	r3, r1
 8013d96:	460c      	mov	r4, r1
 8013d98:	bfbc      	itt	lt
 8013d9a:	464c      	movlt	r4, r9
 8013d9c:	4699      	movlt	r9, r3
 8013d9e:	6927      	ldr	r7, [r4, #16]
 8013da0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013da4:	68a3      	ldr	r3, [r4, #8]
 8013da6:	6861      	ldr	r1, [r4, #4]
 8013da8:	eb07 060a 	add.w	r6, r7, sl
 8013dac:	42b3      	cmp	r3, r6
 8013dae:	b085      	sub	sp, #20
 8013db0:	bfb8      	it	lt
 8013db2:	3101      	addlt	r1, #1
 8013db4:	f7ff fe90 	bl	8013ad8 <_Balloc>
 8013db8:	b930      	cbnz	r0, 8013dc8 <__multiply+0x44>
 8013dba:	4602      	mov	r2, r0
 8013dbc:	4b44      	ldr	r3, [pc, #272]	; (8013ed0 <__multiply+0x14c>)
 8013dbe:	4845      	ldr	r0, [pc, #276]	; (8013ed4 <__multiply+0x150>)
 8013dc0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013dc4:	f000 ff02 	bl	8014bcc <__assert_func>
 8013dc8:	f100 0514 	add.w	r5, r0, #20
 8013dcc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013dd0:	462b      	mov	r3, r5
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	4543      	cmp	r3, r8
 8013dd6:	d321      	bcc.n	8013e1c <__multiply+0x98>
 8013dd8:	f104 0314 	add.w	r3, r4, #20
 8013ddc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013de0:	f109 0314 	add.w	r3, r9, #20
 8013de4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013de8:	9202      	str	r2, [sp, #8]
 8013dea:	1b3a      	subs	r2, r7, r4
 8013dec:	3a15      	subs	r2, #21
 8013dee:	f022 0203 	bic.w	r2, r2, #3
 8013df2:	3204      	adds	r2, #4
 8013df4:	f104 0115 	add.w	r1, r4, #21
 8013df8:	428f      	cmp	r7, r1
 8013dfa:	bf38      	it	cc
 8013dfc:	2204      	movcc	r2, #4
 8013dfe:	9201      	str	r2, [sp, #4]
 8013e00:	9a02      	ldr	r2, [sp, #8]
 8013e02:	9303      	str	r3, [sp, #12]
 8013e04:	429a      	cmp	r2, r3
 8013e06:	d80c      	bhi.n	8013e22 <__multiply+0x9e>
 8013e08:	2e00      	cmp	r6, #0
 8013e0a:	dd03      	ble.n	8013e14 <__multiply+0x90>
 8013e0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d05b      	beq.n	8013ecc <__multiply+0x148>
 8013e14:	6106      	str	r6, [r0, #16]
 8013e16:	b005      	add	sp, #20
 8013e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e1c:	f843 2b04 	str.w	r2, [r3], #4
 8013e20:	e7d8      	b.n	8013dd4 <__multiply+0x50>
 8013e22:	f8b3 a000 	ldrh.w	sl, [r3]
 8013e26:	f1ba 0f00 	cmp.w	sl, #0
 8013e2a:	d024      	beq.n	8013e76 <__multiply+0xf2>
 8013e2c:	f104 0e14 	add.w	lr, r4, #20
 8013e30:	46a9      	mov	r9, r5
 8013e32:	f04f 0c00 	mov.w	ip, #0
 8013e36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013e3a:	f8d9 1000 	ldr.w	r1, [r9]
 8013e3e:	fa1f fb82 	uxth.w	fp, r2
 8013e42:	b289      	uxth	r1, r1
 8013e44:	fb0a 110b 	mla	r1, sl, fp, r1
 8013e48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013e4c:	f8d9 2000 	ldr.w	r2, [r9]
 8013e50:	4461      	add	r1, ip
 8013e52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013e56:	fb0a c20b 	mla	r2, sl, fp, ip
 8013e5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013e5e:	b289      	uxth	r1, r1
 8013e60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013e64:	4577      	cmp	r7, lr
 8013e66:	f849 1b04 	str.w	r1, [r9], #4
 8013e6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013e6e:	d8e2      	bhi.n	8013e36 <__multiply+0xb2>
 8013e70:	9a01      	ldr	r2, [sp, #4]
 8013e72:	f845 c002 	str.w	ip, [r5, r2]
 8013e76:	9a03      	ldr	r2, [sp, #12]
 8013e78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013e7c:	3304      	adds	r3, #4
 8013e7e:	f1b9 0f00 	cmp.w	r9, #0
 8013e82:	d021      	beq.n	8013ec8 <__multiply+0x144>
 8013e84:	6829      	ldr	r1, [r5, #0]
 8013e86:	f104 0c14 	add.w	ip, r4, #20
 8013e8a:	46ae      	mov	lr, r5
 8013e8c:	f04f 0a00 	mov.w	sl, #0
 8013e90:	f8bc b000 	ldrh.w	fp, [ip]
 8013e94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013e98:	fb09 220b 	mla	r2, r9, fp, r2
 8013e9c:	4452      	add	r2, sl
 8013e9e:	b289      	uxth	r1, r1
 8013ea0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013ea4:	f84e 1b04 	str.w	r1, [lr], #4
 8013ea8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013eac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013eb0:	f8be 1000 	ldrh.w	r1, [lr]
 8013eb4:	fb09 110a 	mla	r1, r9, sl, r1
 8013eb8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013ebc:	4567      	cmp	r7, ip
 8013ebe:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013ec2:	d8e5      	bhi.n	8013e90 <__multiply+0x10c>
 8013ec4:	9a01      	ldr	r2, [sp, #4]
 8013ec6:	50a9      	str	r1, [r5, r2]
 8013ec8:	3504      	adds	r5, #4
 8013eca:	e799      	b.n	8013e00 <__multiply+0x7c>
 8013ecc:	3e01      	subs	r6, #1
 8013ece:	e79b      	b.n	8013e08 <__multiply+0x84>
 8013ed0:	08015d19 	.word	0x08015d19
 8013ed4:	08015da1 	.word	0x08015da1

08013ed8 <__pow5mult>:
 8013ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013edc:	4615      	mov	r5, r2
 8013ede:	f012 0203 	ands.w	r2, r2, #3
 8013ee2:	4606      	mov	r6, r0
 8013ee4:	460f      	mov	r7, r1
 8013ee6:	d007      	beq.n	8013ef8 <__pow5mult+0x20>
 8013ee8:	4c25      	ldr	r4, [pc, #148]	; (8013f80 <__pow5mult+0xa8>)
 8013eea:	3a01      	subs	r2, #1
 8013eec:	2300      	movs	r3, #0
 8013eee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013ef2:	f7ff fe53 	bl	8013b9c <__multadd>
 8013ef6:	4607      	mov	r7, r0
 8013ef8:	10ad      	asrs	r5, r5, #2
 8013efa:	d03d      	beq.n	8013f78 <__pow5mult+0xa0>
 8013efc:	69f4      	ldr	r4, [r6, #28]
 8013efe:	b97c      	cbnz	r4, 8013f20 <__pow5mult+0x48>
 8013f00:	2010      	movs	r0, #16
 8013f02:	f000 fe97 	bl	8014c34 <malloc>
 8013f06:	4602      	mov	r2, r0
 8013f08:	61f0      	str	r0, [r6, #28]
 8013f0a:	b928      	cbnz	r0, 8013f18 <__pow5mult+0x40>
 8013f0c:	4b1d      	ldr	r3, [pc, #116]	; (8013f84 <__pow5mult+0xac>)
 8013f0e:	481e      	ldr	r0, [pc, #120]	; (8013f88 <__pow5mult+0xb0>)
 8013f10:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013f14:	f000 fe5a 	bl	8014bcc <__assert_func>
 8013f18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013f1c:	6004      	str	r4, [r0, #0]
 8013f1e:	60c4      	str	r4, [r0, #12]
 8013f20:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013f24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013f28:	b94c      	cbnz	r4, 8013f3e <__pow5mult+0x66>
 8013f2a:	f240 2171 	movw	r1, #625	; 0x271
 8013f2e:	4630      	mov	r0, r6
 8013f30:	f7ff ff12 	bl	8013d58 <__i2b>
 8013f34:	2300      	movs	r3, #0
 8013f36:	f8c8 0008 	str.w	r0, [r8, #8]
 8013f3a:	4604      	mov	r4, r0
 8013f3c:	6003      	str	r3, [r0, #0]
 8013f3e:	f04f 0900 	mov.w	r9, #0
 8013f42:	07eb      	lsls	r3, r5, #31
 8013f44:	d50a      	bpl.n	8013f5c <__pow5mult+0x84>
 8013f46:	4639      	mov	r1, r7
 8013f48:	4622      	mov	r2, r4
 8013f4a:	4630      	mov	r0, r6
 8013f4c:	f7ff ff1a 	bl	8013d84 <__multiply>
 8013f50:	4639      	mov	r1, r7
 8013f52:	4680      	mov	r8, r0
 8013f54:	4630      	mov	r0, r6
 8013f56:	f7ff fdff 	bl	8013b58 <_Bfree>
 8013f5a:	4647      	mov	r7, r8
 8013f5c:	106d      	asrs	r5, r5, #1
 8013f5e:	d00b      	beq.n	8013f78 <__pow5mult+0xa0>
 8013f60:	6820      	ldr	r0, [r4, #0]
 8013f62:	b938      	cbnz	r0, 8013f74 <__pow5mult+0x9c>
 8013f64:	4622      	mov	r2, r4
 8013f66:	4621      	mov	r1, r4
 8013f68:	4630      	mov	r0, r6
 8013f6a:	f7ff ff0b 	bl	8013d84 <__multiply>
 8013f6e:	6020      	str	r0, [r4, #0]
 8013f70:	f8c0 9000 	str.w	r9, [r0]
 8013f74:	4604      	mov	r4, r0
 8013f76:	e7e4      	b.n	8013f42 <__pow5mult+0x6a>
 8013f78:	4638      	mov	r0, r7
 8013f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f7e:	bf00      	nop
 8013f80:	08015ef0 	.word	0x08015ef0
 8013f84:	08015d8a 	.word	0x08015d8a
 8013f88:	08015da1 	.word	0x08015da1

08013f8c <__lshift>:
 8013f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f90:	460c      	mov	r4, r1
 8013f92:	6849      	ldr	r1, [r1, #4]
 8013f94:	6923      	ldr	r3, [r4, #16]
 8013f96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013f9a:	68a3      	ldr	r3, [r4, #8]
 8013f9c:	4607      	mov	r7, r0
 8013f9e:	4691      	mov	r9, r2
 8013fa0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013fa4:	f108 0601 	add.w	r6, r8, #1
 8013fa8:	42b3      	cmp	r3, r6
 8013faa:	db0b      	blt.n	8013fc4 <__lshift+0x38>
 8013fac:	4638      	mov	r0, r7
 8013fae:	f7ff fd93 	bl	8013ad8 <_Balloc>
 8013fb2:	4605      	mov	r5, r0
 8013fb4:	b948      	cbnz	r0, 8013fca <__lshift+0x3e>
 8013fb6:	4602      	mov	r2, r0
 8013fb8:	4b28      	ldr	r3, [pc, #160]	; (801405c <__lshift+0xd0>)
 8013fba:	4829      	ldr	r0, [pc, #164]	; (8014060 <__lshift+0xd4>)
 8013fbc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013fc0:	f000 fe04 	bl	8014bcc <__assert_func>
 8013fc4:	3101      	adds	r1, #1
 8013fc6:	005b      	lsls	r3, r3, #1
 8013fc8:	e7ee      	b.n	8013fa8 <__lshift+0x1c>
 8013fca:	2300      	movs	r3, #0
 8013fcc:	f100 0114 	add.w	r1, r0, #20
 8013fd0:	f100 0210 	add.w	r2, r0, #16
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	4553      	cmp	r3, sl
 8013fd8:	db33      	blt.n	8014042 <__lshift+0xb6>
 8013fda:	6920      	ldr	r0, [r4, #16]
 8013fdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013fe0:	f104 0314 	add.w	r3, r4, #20
 8013fe4:	f019 091f 	ands.w	r9, r9, #31
 8013fe8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013fec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013ff0:	d02b      	beq.n	801404a <__lshift+0xbe>
 8013ff2:	f1c9 0e20 	rsb	lr, r9, #32
 8013ff6:	468a      	mov	sl, r1
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	6818      	ldr	r0, [r3, #0]
 8013ffc:	fa00 f009 	lsl.w	r0, r0, r9
 8014000:	4310      	orrs	r0, r2
 8014002:	f84a 0b04 	str.w	r0, [sl], #4
 8014006:	f853 2b04 	ldr.w	r2, [r3], #4
 801400a:	459c      	cmp	ip, r3
 801400c:	fa22 f20e 	lsr.w	r2, r2, lr
 8014010:	d8f3      	bhi.n	8013ffa <__lshift+0x6e>
 8014012:	ebac 0304 	sub.w	r3, ip, r4
 8014016:	3b15      	subs	r3, #21
 8014018:	f023 0303 	bic.w	r3, r3, #3
 801401c:	3304      	adds	r3, #4
 801401e:	f104 0015 	add.w	r0, r4, #21
 8014022:	4584      	cmp	ip, r0
 8014024:	bf38      	it	cc
 8014026:	2304      	movcc	r3, #4
 8014028:	50ca      	str	r2, [r1, r3]
 801402a:	b10a      	cbz	r2, 8014030 <__lshift+0xa4>
 801402c:	f108 0602 	add.w	r6, r8, #2
 8014030:	3e01      	subs	r6, #1
 8014032:	4638      	mov	r0, r7
 8014034:	612e      	str	r6, [r5, #16]
 8014036:	4621      	mov	r1, r4
 8014038:	f7ff fd8e 	bl	8013b58 <_Bfree>
 801403c:	4628      	mov	r0, r5
 801403e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014042:	f842 0f04 	str.w	r0, [r2, #4]!
 8014046:	3301      	adds	r3, #1
 8014048:	e7c5      	b.n	8013fd6 <__lshift+0x4a>
 801404a:	3904      	subs	r1, #4
 801404c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014050:	f841 2f04 	str.w	r2, [r1, #4]!
 8014054:	459c      	cmp	ip, r3
 8014056:	d8f9      	bhi.n	801404c <__lshift+0xc0>
 8014058:	e7ea      	b.n	8014030 <__lshift+0xa4>
 801405a:	bf00      	nop
 801405c:	08015d19 	.word	0x08015d19
 8014060:	08015da1 	.word	0x08015da1

08014064 <__mcmp>:
 8014064:	b530      	push	{r4, r5, lr}
 8014066:	6902      	ldr	r2, [r0, #16]
 8014068:	690c      	ldr	r4, [r1, #16]
 801406a:	1b12      	subs	r2, r2, r4
 801406c:	d10e      	bne.n	801408c <__mcmp+0x28>
 801406e:	f100 0314 	add.w	r3, r0, #20
 8014072:	3114      	adds	r1, #20
 8014074:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014078:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801407c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014080:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014084:	42a5      	cmp	r5, r4
 8014086:	d003      	beq.n	8014090 <__mcmp+0x2c>
 8014088:	d305      	bcc.n	8014096 <__mcmp+0x32>
 801408a:	2201      	movs	r2, #1
 801408c:	4610      	mov	r0, r2
 801408e:	bd30      	pop	{r4, r5, pc}
 8014090:	4283      	cmp	r3, r0
 8014092:	d3f3      	bcc.n	801407c <__mcmp+0x18>
 8014094:	e7fa      	b.n	801408c <__mcmp+0x28>
 8014096:	f04f 32ff 	mov.w	r2, #4294967295
 801409a:	e7f7      	b.n	801408c <__mcmp+0x28>

0801409c <__mdiff>:
 801409c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80140a0:	460c      	mov	r4, r1
 80140a2:	4606      	mov	r6, r0
 80140a4:	4611      	mov	r1, r2
 80140a6:	4620      	mov	r0, r4
 80140a8:	4690      	mov	r8, r2
 80140aa:	f7ff ffdb 	bl	8014064 <__mcmp>
 80140ae:	1e05      	subs	r5, r0, #0
 80140b0:	d110      	bne.n	80140d4 <__mdiff+0x38>
 80140b2:	4629      	mov	r1, r5
 80140b4:	4630      	mov	r0, r6
 80140b6:	f7ff fd0f 	bl	8013ad8 <_Balloc>
 80140ba:	b930      	cbnz	r0, 80140ca <__mdiff+0x2e>
 80140bc:	4b3a      	ldr	r3, [pc, #232]	; (80141a8 <__mdiff+0x10c>)
 80140be:	4602      	mov	r2, r0
 80140c0:	f240 2137 	movw	r1, #567	; 0x237
 80140c4:	4839      	ldr	r0, [pc, #228]	; (80141ac <__mdiff+0x110>)
 80140c6:	f000 fd81 	bl	8014bcc <__assert_func>
 80140ca:	2301      	movs	r3, #1
 80140cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80140d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140d4:	bfa4      	itt	ge
 80140d6:	4643      	movge	r3, r8
 80140d8:	46a0      	movge	r8, r4
 80140da:	4630      	mov	r0, r6
 80140dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80140e0:	bfa6      	itte	ge
 80140e2:	461c      	movge	r4, r3
 80140e4:	2500      	movge	r5, #0
 80140e6:	2501      	movlt	r5, #1
 80140e8:	f7ff fcf6 	bl	8013ad8 <_Balloc>
 80140ec:	b920      	cbnz	r0, 80140f8 <__mdiff+0x5c>
 80140ee:	4b2e      	ldr	r3, [pc, #184]	; (80141a8 <__mdiff+0x10c>)
 80140f0:	4602      	mov	r2, r0
 80140f2:	f240 2145 	movw	r1, #581	; 0x245
 80140f6:	e7e5      	b.n	80140c4 <__mdiff+0x28>
 80140f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80140fc:	6926      	ldr	r6, [r4, #16]
 80140fe:	60c5      	str	r5, [r0, #12]
 8014100:	f104 0914 	add.w	r9, r4, #20
 8014104:	f108 0514 	add.w	r5, r8, #20
 8014108:	f100 0e14 	add.w	lr, r0, #20
 801410c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014110:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8014114:	f108 0210 	add.w	r2, r8, #16
 8014118:	46f2      	mov	sl, lr
 801411a:	2100      	movs	r1, #0
 801411c:	f859 3b04 	ldr.w	r3, [r9], #4
 8014120:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014124:	fa11 f88b 	uxtah	r8, r1, fp
 8014128:	b299      	uxth	r1, r3
 801412a:	0c1b      	lsrs	r3, r3, #16
 801412c:	eba8 0801 	sub.w	r8, r8, r1
 8014130:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014134:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014138:	fa1f f888 	uxth.w	r8, r8
 801413c:	1419      	asrs	r1, r3, #16
 801413e:	454e      	cmp	r6, r9
 8014140:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014144:	f84a 3b04 	str.w	r3, [sl], #4
 8014148:	d8e8      	bhi.n	801411c <__mdiff+0x80>
 801414a:	1b33      	subs	r3, r6, r4
 801414c:	3b15      	subs	r3, #21
 801414e:	f023 0303 	bic.w	r3, r3, #3
 8014152:	3304      	adds	r3, #4
 8014154:	3415      	adds	r4, #21
 8014156:	42a6      	cmp	r6, r4
 8014158:	bf38      	it	cc
 801415a:	2304      	movcc	r3, #4
 801415c:	441d      	add	r5, r3
 801415e:	4473      	add	r3, lr
 8014160:	469e      	mov	lr, r3
 8014162:	462e      	mov	r6, r5
 8014164:	4566      	cmp	r6, ip
 8014166:	d30e      	bcc.n	8014186 <__mdiff+0xea>
 8014168:	f10c 0203 	add.w	r2, ip, #3
 801416c:	1b52      	subs	r2, r2, r5
 801416e:	f022 0203 	bic.w	r2, r2, #3
 8014172:	3d03      	subs	r5, #3
 8014174:	45ac      	cmp	ip, r5
 8014176:	bf38      	it	cc
 8014178:	2200      	movcc	r2, #0
 801417a:	4413      	add	r3, r2
 801417c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8014180:	b17a      	cbz	r2, 80141a2 <__mdiff+0x106>
 8014182:	6107      	str	r7, [r0, #16]
 8014184:	e7a4      	b.n	80140d0 <__mdiff+0x34>
 8014186:	f856 8b04 	ldr.w	r8, [r6], #4
 801418a:	fa11 f288 	uxtah	r2, r1, r8
 801418e:	1414      	asrs	r4, r2, #16
 8014190:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014194:	b292      	uxth	r2, r2
 8014196:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801419a:	f84e 2b04 	str.w	r2, [lr], #4
 801419e:	1421      	asrs	r1, r4, #16
 80141a0:	e7e0      	b.n	8014164 <__mdiff+0xc8>
 80141a2:	3f01      	subs	r7, #1
 80141a4:	e7ea      	b.n	801417c <__mdiff+0xe0>
 80141a6:	bf00      	nop
 80141a8:	08015d19 	.word	0x08015d19
 80141ac:	08015da1 	.word	0x08015da1

080141b0 <__ulp>:
 80141b0:	b082      	sub	sp, #8
 80141b2:	ed8d 0b00 	vstr	d0, [sp]
 80141b6:	9a01      	ldr	r2, [sp, #4]
 80141b8:	4b0f      	ldr	r3, [pc, #60]	; (80141f8 <__ulp+0x48>)
 80141ba:	4013      	ands	r3, r2
 80141bc:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	dc08      	bgt.n	80141d6 <__ulp+0x26>
 80141c4:	425b      	negs	r3, r3
 80141c6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80141ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80141ce:	da04      	bge.n	80141da <__ulp+0x2a>
 80141d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80141d4:	4113      	asrs	r3, r2
 80141d6:	2200      	movs	r2, #0
 80141d8:	e008      	b.n	80141ec <__ulp+0x3c>
 80141da:	f1a2 0314 	sub.w	r3, r2, #20
 80141de:	2b1e      	cmp	r3, #30
 80141e0:	bfda      	itte	le
 80141e2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80141e6:	40da      	lsrle	r2, r3
 80141e8:	2201      	movgt	r2, #1
 80141ea:	2300      	movs	r3, #0
 80141ec:	4619      	mov	r1, r3
 80141ee:	4610      	mov	r0, r2
 80141f0:	ec41 0b10 	vmov	d0, r0, r1
 80141f4:	b002      	add	sp, #8
 80141f6:	4770      	bx	lr
 80141f8:	7ff00000 	.word	0x7ff00000

080141fc <__b2d>:
 80141fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014200:	6906      	ldr	r6, [r0, #16]
 8014202:	f100 0814 	add.w	r8, r0, #20
 8014206:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801420a:	1f37      	subs	r7, r6, #4
 801420c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8014210:	4610      	mov	r0, r2
 8014212:	f7ff fd53 	bl	8013cbc <__hi0bits>
 8014216:	f1c0 0320 	rsb	r3, r0, #32
 801421a:	280a      	cmp	r0, #10
 801421c:	600b      	str	r3, [r1, #0]
 801421e:	491b      	ldr	r1, [pc, #108]	; (801428c <__b2d+0x90>)
 8014220:	dc15      	bgt.n	801424e <__b2d+0x52>
 8014222:	f1c0 0c0b 	rsb	ip, r0, #11
 8014226:	fa22 f30c 	lsr.w	r3, r2, ip
 801422a:	45b8      	cmp	r8, r7
 801422c:	ea43 0501 	orr.w	r5, r3, r1
 8014230:	bf34      	ite	cc
 8014232:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014236:	2300      	movcs	r3, #0
 8014238:	3015      	adds	r0, #21
 801423a:	fa02 f000 	lsl.w	r0, r2, r0
 801423e:	fa23 f30c 	lsr.w	r3, r3, ip
 8014242:	4303      	orrs	r3, r0
 8014244:	461c      	mov	r4, r3
 8014246:	ec45 4b10 	vmov	d0, r4, r5
 801424a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801424e:	45b8      	cmp	r8, r7
 8014250:	bf3a      	itte	cc
 8014252:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8014256:	f1a6 0708 	subcc.w	r7, r6, #8
 801425a:	2300      	movcs	r3, #0
 801425c:	380b      	subs	r0, #11
 801425e:	d012      	beq.n	8014286 <__b2d+0x8a>
 8014260:	f1c0 0120 	rsb	r1, r0, #32
 8014264:	fa23 f401 	lsr.w	r4, r3, r1
 8014268:	4082      	lsls	r2, r0
 801426a:	4322      	orrs	r2, r4
 801426c:	4547      	cmp	r7, r8
 801426e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8014272:	bf8c      	ite	hi
 8014274:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8014278:	2200      	movls	r2, #0
 801427a:	4083      	lsls	r3, r0
 801427c:	40ca      	lsrs	r2, r1
 801427e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014282:	4313      	orrs	r3, r2
 8014284:	e7de      	b.n	8014244 <__b2d+0x48>
 8014286:	ea42 0501 	orr.w	r5, r2, r1
 801428a:	e7db      	b.n	8014244 <__b2d+0x48>
 801428c:	3ff00000 	.word	0x3ff00000

08014290 <__d2b>:
 8014290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014294:	460f      	mov	r7, r1
 8014296:	2101      	movs	r1, #1
 8014298:	ec59 8b10 	vmov	r8, r9, d0
 801429c:	4616      	mov	r6, r2
 801429e:	f7ff fc1b 	bl	8013ad8 <_Balloc>
 80142a2:	4604      	mov	r4, r0
 80142a4:	b930      	cbnz	r0, 80142b4 <__d2b+0x24>
 80142a6:	4602      	mov	r2, r0
 80142a8:	4b24      	ldr	r3, [pc, #144]	; (801433c <__d2b+0xac>)
 80142aa:	4825      	ldr	r0, [pc, #148]	; (8014340 <__d2b+0xb0>)
 80142ac:	f240 310f 	movw	r1, #783	; 0x30f
 80142b0:	f000 fc8c 	bl	8014bcc <__assert_func>
 80142b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80142b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80142bc:	bb2d      	cbnz	r5, 801430a <__d2b+0x7a>
 80142be:	9301      	str	r3, [sp, #4]
 80142c0:	f1b8 0300 	subs.w	r3, r8, #0
 80142c4:	d026      	beq.n	8014314 <__d2b+0x84>
 80142c6:	4668      	mov	r0, sp
 80142c8:	9300      	str	r3, [sp, #0]
 80142ca:	f7ff fd17 	bl	8013cfc <__lo0bits>
 80142ce:	e9dd 1200 	ldrd	r1, r2, [sp]
 80142d2:	b1e8      	cbz	r0, 8014310 <__d2b+0x80>
 80142d4:	f1c0 0320 	rsb	r3, r0, #32
 80142d8:	fa02 f303 	lsl.w	r3, r2, r3
 80142dc:	430b      	orrs	r3, r1
 80142de:	40c2      	lsrs	r2, r0
 80142e0:	6163      	str	r3, [r4, #20]
 80142e2:	9201      	str	r2, [sp, #4]
 80142e4:	9b01      	ldr	r3, [sp, #4]
 80142e6:	61a3      	str	r3, [r4, #24]
 80142e8:	2b00      	cmp	r3, #0
 80142ea:	bf14      	ite	ne
 80142ec:	2202      	movne	r2, #2
 80142ee:	2201      	moveq	r2, #1
 80142f0:	6122      	str	r2, [r4, #16]
 80142f2:	b1bd      	cbz	r5, 8014324 <__d2b+0x94>
 80142f4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80142f8:	4405      	add	r5, r0
 80142fa:	603d      	str	r5, [r7, #0]
 80142fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014300:	6030      	str	r0, [r6, #0]
 8014302:	4620      	mov	r0, r4
 8014304:	b003      	add	sp, #12
 8014306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801430a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801430e:	e7d6      	b.n	80142be <__d2b+0x2e>
 8014310:	6161      	str	r1, [r4, #20]
 8014312:	e7e7      	b.n	80142e4 <__d2b+0x54>
 8014314:	a801      	add	r0, sp, #4
 8014316:	f7ff fcf1 	bl	8013cfc <__lo0bits>
 801431a:	9b01      	ldr	r3, [sp, #4]
 801431c:	6163      	str	r3, [r4, #20]
 801431e:	3020      	adds	r0, #32
 8014320:	2201      	movs	r2, #1
 8014322:	e7e5      	b.n	80142f0 <__d2b+0x60>
 8014324:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014328:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801432c:	6038      	str	r0, [r7, #0]
 801432e:	6918      	ldr	r0, [r3, #16]
 8014330:	f7ff fcc4 	bl	8013cbc <__hi0bits>
 8014334:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014338:	e7e2      	b.n	8014300 <__d2b+0x70>
 801433a:	bf00      	nop
 801433c:	08015d19 	.word	0x08015d19
 8014340:	08015da1 	.word	0x08015da1

08014344 <__ratio>:
 8014344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014348:	4688      	mov	r8, r1
 801434a:	4669      	mov	r1, sp
 801434c:	4681      	mov	r9, r0
 801434e:	f7ff ff55 	bl	80141fc <__b2d>
 8014352:	a901      	add	r1, sp, #4
 8014354:	4640      	mov	r0, r8
 8014356:	ec55 4b10 	vmov	r4, r5, d0
 801435a:	f7ff ff4f 	bl	80141fc <__b2d>
 801435e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014362:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8014366:	eba3 0c02 	sub.w	ip, r3, r2
 801436a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801436e:	1a9b      	subs	r3, r3, r2
 8014370:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8014374:	ec51 0b10 	vmov	r0, r1, d0
 8014378:	2b00      	cmp	r3, #0
 801437a:	bfd6      	itet	le
 801437c:	460a      	movle	r2, r1
 801437e:	462a      	movgt	r2, r5
 8014380:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8014384:	468b      	mov	fp, r1
 8014386:	462f      	mov	r7, r5
 8014388:	bfd4      	ite	le
 801438a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801438e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8014392:	4620      	mov	r0, r4
 8014394:	ee10 2a10 	vmov	r2, s0
 8014398:	465b      	mov	r3, fp
 801439a:	4639      	mov	r1, r7
 801439c:	f7ec fa86 	bl	80008ac <__aeabi_ddiv>
 80143a0:	ec41 0b10 	vmov	d0, r0, r1
 80143a4:	b003      	add	sp, #12
 80143a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080143aa <__copybits>:
 80143aa:	3901      	subs	r1, #1
 80143ac:	b570      	push	{r4, r5, r6, lr}
 80143ae:	1149      	asrs	r1, r1, #5
 80143b0:	6914      	ldr	r4, [r2, #16]
 80143b2:	3101      	adds	r1, #1
 80143b4:	f102 0314 	add.w	r3, r2, #20
 80143b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80143bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80143c0:	1f05      	subs	r5, r0, #4
 80143c2:	42a3      	cmp	r3, r4
 80143c4:	d30c      	bcc.n	80143e0 <__copybits+0x36>
 80143c6:	1aa3      	subs	r3, r4, r2
 80143c8:	3b11      	subs	r3, #17
 80143ca:	f023 0303 	bic.w	r3, r3, #3
 80143ce:	3211      	adds	r2, #17
 80143d0:	42a2      	cmp	r2, r4
 80143d2:	bf88      	it	hi
 80143d4:	2300      	movhi	r3, #0
 80143d6:	4418      	add	r0, r3
 80143d8:	2300      	movs	r3, #0
 80143da:	4288      	cmp	r0, r1
 80143dc:	d305      	bcc.n	80143ea <__copybits+0x40>
 80143de:	bd70      	pop	{r4, r5, r6, pc}
 80143e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80143e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80143e8:	e7eb      	b.n	80143c2 <__copybits+0x18>
 80143ea:	f840 3b04 	str.w	r3, [r0], #4
 80143ee:	e7f4      	b.n	80143da <__copybits+0x30>

080143f0 <__any_on>:
 80143f0:	f100 0214 	add.w	r2, r0, #20
 80143f4:	6900      	ldr	r0, [r0, #16]
 80143f6:	114b      	asrs	r3, r1, #5
 80143f8:	4298      	cmp	r0, r3
 80143fa:	b510      	push	{r4, lr}
 80143fc:	db11      	blt.n	8014422 <__any_on+0x32>
 80143fe:	dd0a      	ble.n	8014416 <__any_on+0x26>
 8014400:	f011 011f 	ands.w	r1, r1, #31
 8014404:	d007      	beq.n	8014416 <__any_on+0x26>
 8014406:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801440a:	fa24 f001 	lsr.w	r0, r4, r1
 801440e:	fa00 f101 	lsl.w	r1, r0, r1
 8014412:	428c      	cmp	r4, r1
 8014414:	d10b      	bne.n	801442e <__any_on+0x3e>
 8014416:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801441a:	4293      	cmp	r3, r2
 801441c:	d803      	bhi.n	8014426 <__any_on+0x36>
 801441e:	2000      	movs	r0, #0
 8014420:	bd10      	pop	{r4, pc}
 8014422:	4603      	mov	r3, r0
 8014424:	e7f7      	b.n	8014416 <__any_on+0x26>
 8014426:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801442a:	2900      	cmp	r1, #0
 801442c:	d0f5      	beq.n	801441a <__any_on+0x2a>
 801442e:	2001      	movs	r0, #1
 8014430:	e7f6      	b.n	8014420 <__any_on+0x30>

08014432 <__ascii_wctomb>:
 8014432:	b149      	cbz	r1, 8014448 <__ascii_wctomb+0x16>
 8014434:	2aff      	cmp	r2, #255	; 0xff
 8014436:	bf85      	ittet	hi
 8014438:	238a      	movhi	r3, #138	; 0x8a
 801443a:	6003      	strhi	r3, [r0, #0]
 801443c:	700a      	strbls	r2, [r1, #0]
 801443e:	f04f 30ff 	movhi.w	r0, #4294967295
 8014442:	bf98      	it	ls
 8014444:	2001      	movls	r0, #1
 8014446:	4770      	bx	lr
 8014448:	4608      	mov	r0, r1
 801444a:	4770      	bx	lr

0801444c <__ssputs_r>:
 801444c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014450:	688e      	ldr	r6, [r1, #8]
 8014452:	461f      	mov	r7, r3
 8014454:	42be      	cmp	r6, r7
 8014456:	680b      	ldr	r3, [r1, #0]
 8014458:	4682      	mov	sl, r0
 801445a:	460c      	mov	r4, r1
 801445c:	4690      	mov	r8, r2
 801445e:	d82c      	bhi.n	80144ba <__ssputs_r+0x6e>
 8014460:	898a      	ldrh	r2, [r1, #12]
 8014462:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8014466:	d026      	beq.n	80144b6 <__ssputs_r+0x6a>
 8014468:	6965      	ldr	r5, [r4, #20]
 801446a:	6909      	ldr	r1, [r1, #16]
 801446c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014470:	eba3 0901 	sub.w	r9, r3, r1
 8014474:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014478:	1c7b      	adds	r3, r7, #1
 801447a:	444b      	add	r3, r9
 801447c:	106d      	asrs	r5, r5, #1
 801447e:	429d      	cmp	r5, r3
 8014480:	bf38      	it	cc
 8014482:	461d      	movcc	r5, r3
 8014484:	0553      	lsls	r3, r2, #21
 8014486:	d527      	bpl.n	80144d8 <__ssputs_r+0x8c>
 8014488:	4629      	mov	r1, r5
 801448a:	f7ff fa87 	bl	801399c <_malloc_r>
 801448e:	4606      	mov	r6, r0
 8014490:	b360      	cbz	r0, 80144ec <__ssputs_r+0xa0>
 8014492:	6921      	ldr	r1, [r4, #16]
 8014494:	464a      	mov	r2, r9
 8014496:	f7fe fea0 	bl	80131da <memcpy>
 801449a:	89a3      	ldrh	r3, [r4, #12]
 801449c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80144a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80144a4:	81a3      	strh	r3, [r4, #12]
 80144a6:	6126      	str	r6, [r4, #16]
 80144a8:	6165      	str	r5, [r4, #20]
 80144aa:	444e      	add	r6, r9
 80144ac:	eba5 0509 	sub.w	r5, r5, r9
 80144b0:	6026      	str	r6, [r4, #0]
 80144b2:	60a5      	str	r5, [r4, #8]
 80144b4:	463e      	mov	r6, r7
 80144b6:	42be      	cmp	r6, r7
 80144b8:	d900      	bls.n	80144bc <__ssputs_r+0x70>
 80144ba:	463e      	mov	r6, r7
 80144bc:	6820      	ldr	r0, [r4, #0]
 80144be:	4632      	mov	r2, r6
 80144c0:	4641      	mov	r1, r8
 80144c2:	f000 fb59 	bl	8014b78 <memmove>
 80144c6:	68a3      	ldr	r3, [r4, #8]
 80144c8:	1b9b      	subs	r3, r3, r6
 80144ca:	60a3      	str	r3, [r4, #8]
 80144cc:	6823      	ldr	r3, [r4, #0]
 80144ce:	4433      	add	r3, r6
 80144d0:	6023      	str	r3, [r4, #0]
 80144d2:	2000      	movs	r0, #0
 80144d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80144d8:	462a      	mov	r2, r5
 80144da:	f000 fbb3 	bl	8014c44 <_realloc_r>
 80144de:	4606      	mov	r6, r0
 80144e0:	2800      	cmp	r0, #0
 80144e2:	d1e0      	bne.n	80144a6 <__ssputs_r+0x5a>
 80144e4:	6921      	ldr	r1, [r4, #16]
 80144e6:	4650      	mov	r0, sl
 80144e8:	f7fe fe94 	bl	8013214 <_free_r>
 80144ec:	230c      	movs	r3, #12
 80144ee:	f8ca 3000 	str.w	r3, [sl]
 80144f2:	89a3      	ldrh	r3, [r4, #12]
 80144f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80144f8:	81a3      	strh	r3, [r4, #12]
 80144fa:	f04f 30ff 	mov.w	r0, #4294967295
 80144fe:	e7e9      	b.n	80144d4 <__ssputs_r+0x88>

08014500 <_svfiprintf_r>:
 8014500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014504:	4698      	mov	r8, r3
 8014506:	898b      	ldrh	r3, [r1, #12]
 8014508:	061b      	lsls	r3, r3, #24
 801450a:	b09d      	sub	sp, #116	; 0x74
 801450c:	4607      	mov	r7, r0
 801450e:	460d      	mov	r5, r1
 8014510:	4614      	mov	r4, r2
 8014512:	d50e      	bpl.n	8014532 <_svfiprintf_r+0x32>
 8014514:	690b      	ldr	r3, [r1, #16]
 8014516:	b963      	cbnz	r3, 8014532 <_svfiprintf_r+0x32>
 8014518:	2140      	movs	r1, #64	; 0x40
 801451a:	f7ff fa3f 	bl	801399c <_malloc_r>
 801451e:	6028      	str	r0, [r5, #0]
 8014520:	6128      	str	r0, [r5, #16]
 8014522:	b920      	cbnz	r0, 801452e <_svfiprintf_r+0x2e>
 8014524:	230c      	movs	r3, #12
 8014526:	603b      	str	r3, [r7, #0]
 8014528:	f04f 30ff 	mov.w	r0, #4294967295
 801452c:	e0d0      	b.n	80146d0 <_svfiprintf_r+0x1d0>
 801452e:	2340      	movs	r3, #64	; 0x40
 8014530:	616b      	str	r3, [r5, #20]
 8014532:	2300      	movs	r3, #0
 8014534:	9309      	str	r3, [sp, #36]	; 0x24
 8014536:	2320      	movs	r3, #32
 8014538:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801453c:	f8cd 800c 	str.w	r8, [sp, #12]
 8014540:	2330      	movs	r3, #48	; 0x30
 8014542:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80146e8 <_svfiprintf_r+0x1e8>
 8014546:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801454a:	f04f 0901 	mov.w	r9, #1
 801454e:	4623      	mov	r3, r4
 8014550:	469a      	mov	sl, r3
 8014552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014556:	b10a      	cbz	r2, 801455c <_svfiprintf_r+0x5c>
 8014558:	2a25      	cmp	r2, #37	; 0x25
 801455a:	d1f9      	bne.n	8014550 <_svfiprintf_r+0x50>
 801455c:	ebba 0b04 	subs.w	fp, sl, r4
 8014560:	d00b      	beq.n	801457a <_svfiprintf_r+0x7a>
 8014562:	465b      	mov	r3, fp
 8014564:	4622      	mov	r2, r4
 8014566:	4629      	mov	r1, r5
 8014568:	4638      	mov	r0, r7
 801456a:	f7ff ff6f 	bl	801444c <__ssputs_r>
 801456e:	3001      	adds	r0, #1
 8014570:	f000 80a9 	beq.w	80146c6 <_svfiprintf_r+0x1c6>
 8014574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014576:	445a      	add	r2, fp
 8014578:	9209      	str	r2, [sp, #36]	; 0x24
 801457a:	f89a 3000 	ldrb.w	r3, [sl]
 801457e:	2b00      	cmp	r3, #0
 8014580:	f000 80a1 	beq.w	80146c6 <_svfiprintf_r+0x1c6>
 8014584:	2300      	movs	r3, #0
 8014586:	f04f 32ff 	mov.w	r2, #4294967295
 801458a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801458e:	f10a 0a01 	add.w	sl, sl, #1
 8014592:	9304      	str	r3, [sp, #16]
 8014594:	9307      	str	r3, [sp, #28]
 8014596:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801459a:	931a      	str	r3, [sp, #104]	; 0x68
 801459c:	4654      	mov	r4, sl
 801459e:	2205      	movs	r2, #5
 80145a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145a4:	4850      	ldr	r0, [pc, #320]	; (80146e8 <_svfiprintf_r+0x1e8>)
 80145a6:	f7eb fe4b 	bl	8000240 <memchr>
 80145aa:	9a04      	ldr	r2, [sp, #16]
 80145ac:	b9d8      	cbnz	r0, 80145e6 <_svfiprintf_r+0xe6>
 80145ae:	06d0      	lsls	r0, r2, #27
 80145b0:	bf44      	itt	mi
 80145b2:	2320      	movmi	r3, #32
 80145b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145b8:	0711      	lsls	r1, r2, #28
 80145ba:	bf44      	itt	mi
 80145bc:	232b      	movmi	r3, #43	; 0x2b
 80145be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145c2:	f89a 3000 	ldrb.w	r3, [sl]
 80145c6:	2b2a      	cmp	r3, #42	; 0x2a
 80145c8:	d015      	beq.n	80145f6 <_svfiprintf_r+0xf6>
 80145ca:	9a07      	ldr	r2, [sp, #28]
 80145cc:	4654      	mov	r4, sl
 80145ce:	2000      	movs	r0, #0
 80145d0:	f04f 0c0a 	mov.w	ip, #10
 80145d4:	4621      	mov	r1, r4
 80145d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145da:	3b30      	subs	r3, #48	; 0x30
 80145dc:	2b09      	cmp	r3, #9
 80145de:	d94d      	bls.n	801467c <_svfiprintf_r+0x17c>
 80145e0:	b1b0      	cbz	r0, 8014610 <_svfiprintf_r+0x110>
 80145e2:	9207      	str	r2, [sp, #28]
 80145e4:	e014      	b.n	8014610 <_svfiprintf_r+0x110>
 80145e6:	eba0 0308 	sub.w	r3, r0, r8
 80145ea:	fa09 f303 	lsl.w	r3, r9, r3
 80145ee:	4313      	orrs	r3, r2
 80145f0:	9304      	str	r3, [sp, #16]
 80145f2:	46a2      	mov	sl, r4
 80145f4:	e7d2      	b.n	801459c <_svfiprintf_r+0x9c>
 80145f6:	9b03      	ldr	r3, [sp, #12]
 80145f8:	1d19      	adds	r1, r3, #4
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	9103      	str	r1, [sp, #12]
 80145fe:	2b00      	cmp	r3, #0
 8014600:	bfbb      	ittet	lt
 8014602:	425b      	neglt	r3, r3
 8014604:	f042 0202 	orrlt.w	r2, r2, #2
 8014608:	9307      	strge	r3, [sp, #28]
 801460a:	9307      	strlt	r3, [sp, #28]
 801460c:	bfb8      	it	lt
 801460e:	9204      	strlt	r2, [sp, #16]
 8014610:	7823      	ldrb	r3, [r4, #0]
 8014612:	2b2e      	cmp	r3, #46	; 0x2e
 8014614:	d10c      	bne.n	8014630 <_svfiprintf_r+0x130>
 8014616:	7863      	ldrb	r3, [r4, #1]
 8014618:	2b2a      	cmp	r3, #42	; 0x2a
 801461a:	d134      	bne.n	8014686 <_svfiprintf_r+0x186>
 801461c:	9b03      	ldr	r3, [sp, #12]
 801461e:	1d1a      	adds	r2, r3, #4
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	9203      	str	r2, [sp, #12]
 8014624:	2b00      	cmp	r3, #0
 8014626:	bfb8      	it	lt
 8014628:	f04f 33ff 	movlt.w	r3, #4294967295
 801462c:	3402      	adds	r4, #2
 801462e:	9305      	str	r3, [sp, #20]
 8014630:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80146f8 <_svfiprintf_r+0x1f8>
 8014634:	7821      	ldrb	r1, [r4, #0]
 8014636:	2203      	movs	r2, #3
 8014638:	4650      	mov	r0, sl
 801463a:	f7eb fe01 	bl	8000240 <memchr>
 801463e:	b138      	cbz	r0, 8014650 <_svfiprintf_r+0x150>
 8014640:	9b04      	ldr	r3, [sp, #16]
 8014642:	eba0 000a 	sub.w	r0, r0, sl
 8014646:	2240      	movs	r2, #64	; 0x40
 8014648:	4082      	lsls	r2, r0
 801464a:	4313      	orrs	r3, r2
 801464c:	3401      	adds	r4, #1
 801464e:	9304      	str	r3, [sp, #16]
 8014650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014654:	4825      	ldr	r0, [pc, #148]	; (80146ec <_svfiprintf_r+0x1ec>)
 8014656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801465a:	2206      	movs	r2, #6
 801465c:	f7eb fdf0 	bl	8000240 <memchr>
 8014660:	2800      	cmp	r0, #0
 8014662:	d038      	beq.n	80146d6 <_svfiprintf_r+0x1d6>
 8014664:	4b22      	ldr	r3, [pc, #136]	; (80146f0 <_svfiprintf_r+0x1f0>)
 8014666:	bb1b      	cbnz	r3, 80146b0 <_svfiprintf_r+0x1b0>
 8014668:	9b03      	ldr	r3, [sp, #12]
 801466a:	3307      	adds	r3, #7
 801466c:	f023 0307 	bic.w	r3, r3, #7
 8014670:	3308      	adds	r3, #8
 8014672:	9303      	str	r3, [sp, #12]
 8014674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014676:	4433      	add	r3, r6
 8014678:	9309      	str	r3, [sp, #36]	; 0x24
 801467a:	e768      	b.n	801454e <_svfiprintf_r+0x4e>
 801467c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014680:	460c      	mov	r4, r1
 8014682:	2001      	movs	r0, #1
 8014684:	e7a6      	b.n	80145d4 <_svfiprintf_r+0xd4>
 8014686:	2300      	movs	r3, #0
 8014688:	3401      	adds	r4, #1
 801468a:	9305      	str	r3, [sp, #20]
 801468c:	4619      	mov	r1, r3
 801468e:	f04f 0c0a 	mov.w	ip, #10
 8014692:	4620      	mov	r0, r4
 8014694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014698:	3a30      	subs	r2, #48	; 0x30
 801469a:	2a09      	cmp	r2, #9
 801469c:	d903      	bls.n	80146a6 <_svfiprintf_r+0x1a6>
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d0c6      	beq.n	8014630 <_svfiprintf_r+0x130>
 80146a2:	9105      	str	r1, [sp, #20]
 80146a4:	e7c4      	b.n	8014630 <_svfiprintf_r+0x130>
 80146a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80146aa:	4604      	mov	r4, r0
 80146ac:	2301      	movs	r3, #1
 80146ae:	e7f0      	b.n	8014692 <_svfiprintf_r+0x192>
 80146b0:	ab03      	add	r3, sp, #12
 80146b2:	9300      	str	r3, [sp, #0]
 80146b4:	462a      	mov	r2, r5
 80146b6:	4b0f      	ldr	r3, [pc, #60]	; (80146f4 <_svfiprintf_r+0x1f4>)
 80146b8:	a904      	add	r1, sp, #16
 80146ba:	4638      	mov	r0, r7
 80146bc:	f3af 8000 	nop.w
 80146c0:	1c42      	adds	r2, r0, #1
 80146c2:	4606      	mov	r6, r0
 80146c4:	d1d6      	bne.n	8014674 <_svfiprintf_r+0x174>
 80146c6:	89ab      	ldrh	r3, [r5, #12]
 80146c8:	065b      	lsls	r3, r3, #25
 80146ca:	f53f af2d 	bmi.w	8014528 <_svfiprintf_r+0x28>
 80146ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80146d0:	b01d      	add	sp, #116	; 0x74
 80146d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146d6:	ab03      	add	r3, sp, #12
 80146d8:	9300      	str	r3, [sp, #0]
 80146da:	462a      	mov	r2, r5
 80146dc:	4b05      	ldr	r3, [pc, #20]	; (80146f4 <_svfiprintf_r+0x1f4>)
 80146de:	a904      	add	r1, sp, #16
 80146e0:	4638      	mov	r0, r7
 80146e2:	f000 f879 	bl	80147d8 <_printf_i>
 80146e6:	e7eb      	b.n	80146c0 <_svfiprintf_r+0x1c0>
 80146e8:	08015efc 	.word	0x08015efc
 80146ec:	08015f06 	.word	0x08015f06
 80146f0:	00000000 	.word	0x00000000
 80146f4:	0801444d 	.word	0x0801444d
 80146f8:	08015f02 	.word	0x08015f02

080146fc <_printf_common>:
 80146fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014700:	4616      	mov	r6, r2
 8014702:	4699      	mov	r9, r3
 8014704:	688a      	ldr	r2, [r1, #8]
 8014706:	690b      	ldr	r3, [r1, #16]
 8014708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801470c:	4293      	cmp	r3, r2
 801470e:	bfb8      	it	lt
 8014710:	4613      	movlt	r3, r2
 8014712:	6033      	str	r3, [r6, #0]
 8014714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014718:	4607      	mov	r7, r0
 801471a:	460c      	mov	r4, r1
 801471c:	b10a      	cbz	r2, 8014722 <_printf_common+0x26>
 801471e:	3301      	adds	r3, #1
 8014720:	6033      	str	r3, [r6, #0]
 8014722:	6823      	ldr	r3, [r4, #0]
 8014724:	0699      	lsls	r1, r3, #26
 8014726:	bf42      	ittt	mi
 8014728:	6833      	ldrmi	r3, [r6, #0]
 801472a:	3302      	addmi	r3, #2
 801472c:	6033      	strmi	r3, [r6, #0]
 801472e:	6825      	ldr	r5, [r4, #0]
 8014730:	f015 0506 	ands.w	r5, r5, #6
 8014734:	d106      	bne.n	8014744 <_printf_common+0x48>
 8014736:	f104 0a19 	add.w	sl, r4, #25
 801473a:	68e3      	ldr	r3, [r4, #12]
 801473c:	6832      	ldr	r2, [r6, #0]
 801473e:	1a9b      	subs	r3, r3, r2
 8014740:	42ab      	cmp	r3, r5
 8014742:	dc26      	bgt.n	8014792 <_printf_common+0x96>
 8014744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014748:	1e13      	subs	r3, r2, #0
 801474a:	6822      	ldr	r2, [r4, #0]
 801474c:	bf18      	it	ne
 801474e:	2301      	movne	r3, #1
 8014750:	0692      	lsls	r2, r2, #26
 8014752:	d42b      	bmi.n	80147ac <_printf_common+0xb0>
 8014754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014758:	4649      	mov	r1, r9
 801475a:	4638      	mov	r0, r7
 801475c:	47c0      	blx	r8
 801475e:	3001      	adds	r0, #1
 8014760:	d01e      	beq.n	80147a0 <_printf_common+0xa4>
 8014762:	6823      	ldr	r3, [r4, #0]
 8014764:	6922      	ldr	r2, [r4, #16]
 8014766:	f003 0306 	and.w	r3, r3, #6
 801476a:	2b04      	cmp	r3, #4
 801476c:	bf02      	ittt	eq
 801476e:	68e5      	ldreq	r5, [r4, #12]
 8014770:	6833      	ldreq	r3, [r6, #0]
 8014772:	1aed      	subeq	r5, r5, r3
 8014774:	68a3      	ldr	r3, [r4, #8]
 8014776:	bf0c      	ite	eq
 8014778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801477c:	2500      	movne	r5, #0
 801477e:	4293      	cmp	r3, r2
 8014780:	bfc4      	itt	gt
 8014782:	1a9b      	subgt	r3, r3, r2
 8014784:	18ed      	addgt	r5, r5, r3
 8014786:	2600      	movs	r6, #0
 8014788:	341a      	adds	r4, #26
 801478a:	42b5      	cmp	r5, r6
 801478c:	d11a      	bne.n	80147c4 <_printf_common+0xc8>
 801478e:	2000      	movs	r0, #0
 8014790:	e008      	b.n	80147a4 <_printf_common+0xa8>
 8014792:	2301      	movs	r3, #1
 8014794:	4652      	mov	r2, sl
 8014796:	4649      	mov	r1, r9
 8014798:	4638      	mov	r0, r7
 801479a:	47c0      	blx	r8
 801479c:	3001      	adds	r0, #1
 801479e:	d103      	bne.n	80147a8 <_printf_common+0xac>
 80147a0:	f04f 30ff 	mov.w	r0, #4294967295
 80147a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80147a8:	3501      	adds	r5, #1
 80147aa:	e7c6      	b.n	801473a <_printf_common+0x3e>
 80147ac:	18e1      	adds	r1, r4, r3
 80147ae:	1c5a      	adds	r2, r3, #1
 80147b0:	2030      	movs	r0, #48	; 0x30
 80147b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80147b6:	4422      	add	r2, r4
 80147b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80147bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80147c0:	3302      	adds	r3, #2
 80147c2:	e7c7      	b.n	8014754 <_printf_common+0x58>
 80147c4:	2301      	movs	r3, #1
 80147c6:	4622      	mov	r2, r4
 80147c8:	4649      	mov	r1, r9
 80147ca:	4638      	mov	r0, r7
 80147cc:	47c0      	blx	r8
 80147ce:	3001      	adds	r0, #1
 80147d0:	d0e6      	beq.n	80147a0 <_printf_common+0xa4>
 80147d2:	3601      	adds	r6, #1
 80147d4:	e7d9      	b.n	801478a <_printf_common+0x8e>
	...

080147d8 <_printf_i>:
 80147d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80147dc:	7e0f      	ldrb	r7, [r1, #24]
 80147de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80147e0:	2f78      	cmp	r7, #120	; 0x78
 80147e2:	4691      	mov	r9, r2
 80147e4:	4680      	mov	r8, r0
 80147e6:	460c      	mov	r4, r1
 80147e8:	469a      	mov	sl, r3
 80147ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80147ee:	d807      	bhi.n	8014800 <_printf_i+0x28>
 80147f0:	2f62      	cmp	r7, #98	; 0x62
 80147f2:	d80a      	bhi.n	801480a <_printf_i+0x32>
 80147f4:	2f00      	cmp	r7, #0
 80147f6:	f000 80d4 	beq.w	80149a2 <_printf_i+0x1ca>
 80147fa:	2f58      	cmp	r7, #88	; 0x58
 80147fc:	f000 80c0 	beq.w	8014980 <_printf_i+0x1a8>
 8014800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014808:	e03a      	b.n	8014880 <_printf_i+0xa8>
 801480a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801480e:	2b15      	cmp	r3, #21
 8014810:	d8f6      	bhi.n	8014800 <_printf_i+0x28>
 8014812:	a101      	add	r1, pc, #4	; (adr r1, 8014818 <_printf_i+0x40>)
 8014814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014818:	08014871 	.word	0x08014871
 801481c:	08014885 	.word	0x08014885
 8014820:	08014801 	.word	0x08014801
 8014824:	08014801 	.word	0x08014801
 8014828:	08014801 	.word	0x08014801
 801482c:	08014801 	.word	0x08014801
 8014830:	08014885 	.word	0x08014885
 8014834:	08014801 	.word	0x08014801
 8014838:	08014801 	.word	0x08014801
 801483c:	08014801 	.word	0x08014801
 8014840:	08014801 	.word	0x08014801
 8014844:	08014989 	.word	0x08014989
 8014848:	080148b1 	.word	0x080148b1
 801484c:	08014943 	.word	0x08014943
 8014850:	08014801 	.word	0x08014801
 8014854:	08014801 	.word	0x08014801
 8014858:	080149ab 	.word	0x080149ab
 801485c:	08014801 	.word	0x08014801
 8014860:	080148b1 	.word	0x080148b1
 8014864:	08014801 	.word	0x08014801
 8014868:	08014801 	.word	0x08014801
 801486c:	0801494b 	.word	0x0801494b
 8014870:	682b      	ldr	r3, [r5, #0]
 8014872:	1d1a      	adds	r2, r3, #4
 8014874:	681b      	ldr	r3, [r3, #0]
 8014876:	602a      	str	r2, [r5, #0]
 8014878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801487c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014880:	2301      	movs	r3, #1
 8014882:	e09f      	b.n	80149c4 <_printf_i+0x1ec>
 8014884:	6820      	ldr	r0, [r4, #0]
 8014886:	682b      	ldr	r3, [r5, #0]
 8014888:	0607      	lsls	r7, r0, #24
 801488a:	f103 0104 	add.w	r1, r3, #4
 801488e:	6029      	str	r1, [r5, #0]
 8014890:	d501      	bpl.n	8014896 <_printf_i+0xbe>
 8014892:	681e      	ldr	r6, [r3, #0]
 8014894:	e003      	b.n	801489e <_printf_i+0xc6>
 8014896:	0646      	lsls	r6, r0, #25
 8014898:	d5fb      	bpl.n	8014892 <_printf_i+0xba>
 801489a:	f9b3 6000 	ldrsh.w	r6, [r3]
 801489e:	2e00      	cmp	r6, #0
 80148a0:	da03      	bge.n	80148aa <_printf_i+0xd2>
 80148a2:	232d      	movs	r3, #45	; 0x2d
 80148a4:	4276      	negs	r6, r6
 80148a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80148aa:	485a      	ldr	r0, [pc, #360]	; (8014a14 <_printf_i+0x23c>)
 80148ac:	230a      	movs	r3, #10
 80148ae:	e012      	b.n	80148d6 <_printf_i+0xfe>
 80148b0:	682b      	ldr	r3, [r5, #0]
 80148b2:	6820      	ldr	r0, [r4, #0]
 80148b4:	1d19      	adds	r1, r3, #4
 80148b6:	6029      	str	r1, [r5, #0]
 80148b8:	0605      	lsls	r5, r0, #24
 80148ba:	d501      	bpl.n	80148c0 <_printf_i+0xe8>
 80148bc:	681e      	ldr	r6, [r3, #0]
 80148be:	e002      	b.n	80148c6 <_printf_i+0xee>
 80148c0:	0641      	lsls	r1, r0, #25
 80148c2:	d5fb      	bpl.n	80148bc <_printf_i+0xe4>
 80148c4:	881e      	ldrh	r6, [r3, #0]
 80148c6:	4853      	ldr	r0, [pc, #332]	; (8014a14 <_printf_i+0x23c>)
 80148c8:	2f6f      	cmp	r7, #111	; 0x6f
 80148ca:	bf0c      	ite	eq
 80148cc:	2308      	moveq	r3, #8
 80148ce:	230a      	movne	r3, #10
 80148d0:	2100      	movs	r1, #0
 80148d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80148d6:	6865      	ldr	r5, [r4, #4]
 80148d8:	60a5      	str	r5, [r4, #8]
 80148da:	2d00      	cmp	r5, #0
 80148dc:	bfa2      	ittt	ge
 80148de:	6821      	ldrge	r1, [r4, #0]
 80148e0:	f021 0104 	bicge.w	r1, r1, #4
 80148e4:	6021      	strge	r1, [r4, #0]
 80148e6:	b90e      	cbnz	r6, 80148ec <_printf_i+0x114>
 80148e8:	2d00      	cmp	r5, #0
 80148ea:	d04b      	beq.n	8014984 <_printf_i+0x1ac>
 80148ec:	4615      	mov	r5, r2
 80148ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80148f2:	fb03 6711 	mls	r7, r3, r1, r6
 80148f6:	5dc7      	ldrb	r7, [r0, r7]
 80148f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80148fc:	4637      	mov	r7, r6
 80148fe:	42bb      	cmp	r3, r7
 8014900:	460e      	mov	r6, r1
 8014902:	d9f4      	bls.n	80148ee <_printf_i+0x116>
 8014904:	2b08      	cmp	r3, #8
 8014906:	d10b      	bne.n	8014920 <_printf_i+0x148>
 8014908:	6823      	ldr	r3, [r4, #0]
 801490a:	07de      	lsls	r6, r3, #31
 801490c:	d508      	bpl.n	8014920 <_printf_i+0x148>
 801490e:	6923      	ldr	r3, [r4, #16]
 8014910:	6861      	ldr	r1, [r4, #4]
 8014912:	4299      	cmp	r1, r3
 8014914:	bfde      	ittt	le
 8014916:	2330      	movle	r3, #48	; 0x30
 8014918:	f805 3c01 	strble.w	r3, [r5, #-1]
 801491c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014920:	1b52      	subs	r2, r2, r5
 8014922:	6122      	str	r2, [r4, #16]
 8014924:	f8cd a000 	str.w	sl, [sp]
 8014928:	464b      	mov	r3, r9
 801492a:	aa03      	add	r2, sp, #12
 801492c:	4621      	mov	r1, r4
 801492e:	4640      	mov	r0, r8
 8014930:	f7ff fee4 	bl	80146fc <_printf_common>
 8014934:	3001      	adds	r0, #1
 8014936:	d14a      	bne.n	80149ce <_printf_i+0x1f6>
 8014938:	f04f 30ff 	mov.w	r0, #4294967295
 801493c:	b004      	add	sp, #16
 801493e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014942:	6823      	ldr	r3, [r4, #0]
 8014944:	f043 0320 	orr.w	r3, r3, #32
 8014948:	6023      	str	r3, [r4, #0]
 801494a:	4833      	ldr	r0, [pc, #204]	; (8014a18 <_printf_i+0x240>)
 801494c:	2778      	movs	r7, #120	; 0x78
 801494e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014952:	6823      	ldr	r3, [r4, #0]
 8014954:	6829      	ldr	r1, [r5, #0]
 8014956:	061f      	lsls	r7, r3, #24
 8014958:	f851 6b04 	ldr.w	r6, [r1], #4
 801495c:	d402      	bmi.n	8014964 <_printf_i+0x18c>
 801495e:	065f      	lsls	r7, r3, #25
 8014960:	bf48      	it	mi
 8014962:	b2b6      	uxthmi	r6, r6
 8014964:	07df      	lsls	r7, r3, #31
 8014966:	bf48      	it	mi
 8014968:	f043 0320 	orrmi.w	r3, r3, #32
 801496c:	6029      	str	r1, [r5, #0]
 801496e:	bf48      	it	mi
 8014970:	6023      	strmi	r3, [r4, #0]
 8014972:	b91e      	cbnz	r6, 801497c <_printf_i+0x1a4>
 8014974:	6823      	ldr	r3, [r4, #0]
 8014976:	f023 0320 	bic.w	r3, r3, #32
 801497a:	6023      	str	r3, [r4, #0]
 801497c:	2310      	movs	r3, #16
 801497e:	e7a7      	b.n	80148d0 <_printf_i+0xf8>
 8014980:	4824      	ldr	r0, [pc, #144]	; (8014a14 <_printf_i+0x23c>)
 8014982:	e7e4      	b.n	801494e <_printf_i+0x176>
 8014984:	4615      	mov	r5, r2
 8014986:	e7bd      	b.n	8014904 <_printf_i+0x12c>
 8014988:	682b      	ldr	r3, [r5, #0]
 801498a:	6826      	ldr	r6, [r4, #0]
 801498c:	6961      	ldr	r1, [r4, #20]
 801498e:	1d18      	adds	r0, r3, #4
 8014990:	6028      	str	r0, [r5, #0]
 8014992:	0635      	lsls	r5, r6, #24
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	d501      	bpl.n	801499c <_printf_i+0x1c4>
 8014998:	6019      	str	r1, [r3, #0]
 801499a:	e002      	b.n	80149a2 <_printf_i+0x1ca>
 801499c:	0670      	lsls	r0, r6, #25
 801499e:	d5fb      	bpl.n	8014998 <_printf_i+0x1c0>
 80149a0:	8019      	strh	r1, [r3, #0]
 80149a2:	2300      	movs	r3, #0
 80149a4:	6123      	str	r3, [r4, #16]
 80149a6:	4615      	mov	r5, r2
 80149a8:	e7bc      	b.n	8014924 <_printf_i+0x14c>
 80149aa:	682b      	ldr	r3, [r5, #0]
 80149ac:	1d1a      	adds	r2, r3, #4
 80149ae:	602a      	str	r2, [r5, #0]
 80149b0:	681d      	ldr	r5, [r3, #0]
 80149b2:	6862      	ldr	r2, [r4, #4]
 80149b4:	2100      	movs	r1, #0
 80149b6:	4628      	mov	r0, r5
 80149b8:	f7eb fc42 	bl	8000240 <memchr>
 80149bc:	b108      	cbz	r0, 80149c2 <_printf_i+0x1ea>
 80149be:	1b40      	subs	r0, r0, r5
 80149c0:	6060      	str	r0, [r4, #4]
 80149c2:	6863      	ldr	r3, [r4, #4]
 80149c4:	6123      	str	r3, [r4, #16]
 80149c6:	2300      	movs	r3, #0
 80149c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80149cc:	e7aa      	b.n	8014924 <_printf_i+0x14c>
 80149ce:	6923      	ldr	r3, [r4, #16]
 80149d0:	462a      	mov	r2, r5
 80149d2:	4649      	mov	r1, r9
 80149d4:	4640      	mov	r0, r8
 80149d6:	47d0      	blx	sl
 80149d8:	3001      	adds	r0, #1
 80149da:	d0ad      	beq.n	8014938 <_printf_i+0x160>
 80149dc:	6823      	ldr	r3, [r4, #0]
 80149de:	079b      	lsls	r3, r3, #30
 80149e0:	d413      	bmi.n	8014a0a <_printf_i+0x232>
 80149e2:	68e0      	ldr	r0, [r4, #12]
 80149e4:	9b03      	ldr	r3, [sp, #12]
 80149e6:	4298      	cmp	r0, r3
 80149e8:	bfb8      	it	lt
 80149ea:	4618      	movlt	r0, r3
 80149ec:	e7a6      	b.n	801493c <_printf_i+0x164>
 80149ee:	2301      	movs	r3, #1
 80149f0:	4632      	mov	r2, r6
 80149f2:	4649      	mov	r1, r9
 80149f4:	4640      	mov	r0, r8
 80149f6:	47d0      	blx	sl
 80149f8:	3001      	adds	r0, #1
 80149fa:	d09d      	beq.n	8014938 <_printf_i+0x160>
 80149fc:	3501      	adds	r5, #1
 80149fe:	68e3      	ldr	r3, [r4, #12]
 8014a00:	9903      	ldr	r1, [sp, #12]
 8014a02:	1a5b      	subs	r3, r3, r1
 8014a04:	42ab      	cmp	r3, r5
 8014a06:	dcf2      	bgt.n	80149ee <_printf_i+0x216>
 8014a08:	e7eb      	b.n	80149e2 <_printf_i+0x20a>
 8014a0a:	2500      	movs	r5, #0
 8014a0c:	f104 0619 	add.w	r6, r4, #25
 8014a10:	e7f5      	b.n	80149fe <_printf_i+0x226>
 8014a12:	bf00      	nop
 8014a14:	08015f0d 	.word	0x08015f0d
 8014a18:	08015f1e 	.word	0x08015f1e

08014a1c <__sflush_r>:
 8014a1c:	898a      	ldrh	r2, [r1, #12]
 8014a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a22:	4605      	mov	r5, r0
 8014a24:	0710      	lsls	r0, r2, #28
 8014a26:	460c      	mov	r4, r1
 8014a28:	d458      	bmi.n	8014adc <__sflush_r+0xc0>
 8014a2a:	684b      	ldr	r3, [r1, #4]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	dc05      	bgt.n	8014a3c <__sflush_r+0x20>
 8014a30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	dc02      	bgt.n	8014a3c <__sflush_r+0x20>
 8014a36:	2000      	movs	r0, #0
 8014a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a3e:	2e00      	cmp	r6, #0
 8014a40:	d0f9      	beq.n	8014a36 <__sflush_r+0x1a>
 8014a42:	2300      	movs	r3, #0
 8014a44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014a48:	682f      	ldr	r7, [r5, #0]
 8014a4a:	6a21      	ldr	r1, [r4, #32]
 8014a4c:	602b      	str	r3, [r5, #0]
 8014a4e:	d032      	beq.n	8014ab6 <__sflush_r+0x9a>
 8014a50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014a52:	89a3      	ldrh	r3, [r4, #12]
 8014a54:	075a      	lsls	r2, r3, #29
 8014a56:	d505      	bpl.n	8014a64 <__sflush_r+0x48>
 8014a58:	6863      	ldr	r3, [r4, #4]
 8014a5a:	1ac0      	subs	r0, r0, r3
 8014a5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014a5e:	b10b      	cbz	r3, 8014a64 <__sflush_r+0x48>
 8014a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014a62:	1ac0      	subs	r0, r0, r3
 8014a64:	2300      	movs	r3, #0
 8014a66:	4602      	mov	r2, r0
 8014a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014a6a:	6a21      	ldr	r1, [r4, #32]
 8014a6c:	4628      	mov	r0, r5
 8014a6e:	47b0      	blx	r6
 8014a70:	1c43      	adds	r3, r0, #1
 8014a72:	89a3      	ldrh	r3, [r4, #12]
 8014a74:	d106      	bne.n	8014a84 <__sflush_r+0x68>
 8014a76:	6829      	ldr	r1, [r5, #0]
 8014a78:	291d      	cmp	r1, #29
 8014a7a:	d82b      	bhi.n	8014ad4 <__sflush_r+0xb8>
 8014a7c:	4a29      	ldr	r2, [pc, #164]	; (8014b24 <__sflush_r+0x108>)
 8014a7e:	410a      	asrs	r2, r1
 8014a80:	07d6      	lsls	r6, r2, #31
 8014a82:	d427      	bmi.n	8014ad4 <__sflush_r+0xb8>
 8014a84:	2200      	movs	r2, #0
 8014a86:	6062      	str	r2, [r4, #4]
 8014a88:	04d9      	lsls	r1, r3, #19
 8014a8a:	6922      	ldr	r2, [r4, #16]
 8014a8c:	6022      	str	r2, [r4, #0]
 8014a8e:	d504      	bpl.n	8014a9a <__sflush_r+0x7e>
 8014a90:	1c42      	adds	r2, r0, #1
 8014a92:	d101      	bne.n	8014a98 <__sflush_r+0x7c>
 8014a94:	682b      	ldr	r3, [r5, #0]
 8014a96:	b903      	cbnz	r3, 8014a9a <__sflush_r+0x7e>
 8014a98:	6560      	str	r0, [r4, #84]	; 0x54
 8014a9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a9c:	602f      	str	r7, [r5, #0]
 8014a9e:	2900      	cmp	r1, #0
 8014aa0:	d0c9      	beq.n	8014a36 <__sflush_r+0x1a>
 8014aa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014aa6:	4299      	cmp	r1, r3
 8014aa8:	d002      	beq.n	8014ab0 <__sflush_r+0x94>
 8014aaa:	4628      	mov	r0, r5
 8014aac:	f7fe fbb2 	bl	8013214 <_free_r>
 8014ab0:	2000      	movs	r0, #0
 8014ab2:	6360      	str	r0, [r4, #52]	; 0x34
 8014ab4:	e7c0      	b.n	8014a38 <__sflush_r+0x1c>
 8014ab6:	2301      	movs	r3, #1
 8014ab8:	4628      	mov	r0, r5
 8014aba:	47b0      	blx	r6
 8014abc:	1c41      	adds	r1, r0, #1
 8014abe:	d1c8      	bne.n	8014a52 <__sflush_r+0x36>
 8014ac0:	682b      	ldr	r3, [r5, #0]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d0c5      	beq.n	8014a52 <__sflush_r+0x36>
 8014ac6:	2b1d      	cmp	r3, #29
 8014ac8:	d001      	beq.n	8014ace <__sflush_r+0xb2>
 8014aca:	2b16      	cmp	r3, #22
 8014acc:	d101      	bne.n	8014ad2 <__sflush_r+0xb6>
 8014ace:	602f      	str	r7, [r5, #0]
 8014ad0:	e7b1      	b.n	8014a36 <__sflush_r+0x1a>
 8014ad2:	89a3      	ldrh	r3, [r4, #12]
 8014ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014ad8:	81a3      	strh	r3, [r4, #12]
 8014ada:	e7ad      	b.n	8014a38 <__sflush_r+0x1c>
 8014adc:	690f      	ldr	r7, [r1, #16]
 8014ade:	2f00      	cmp	r7, #0
 8014ae0:	d0a9      	beq.n	8014a36 <__sflush_r+0x1a>
 8014ae2:	0793      	lsls	r3, r2, #30
 8014ae4:	680e      	ldr	r6, [r1, #0]
 8014ae6:	bf08      	it	eq
 8014ae8:	694b      	ldreq	r3, [r1, #20]
 8014aea:	600f      	str	r7, [r1, #0]
 8014aec:	bf18      	it	ne
 8014aee:	2300      	movne	r3, #0
 8014af0:	eba6 0807 	sub.w	r8, r6, r7
 8014af4:	608b      	str	r3, [r1, #8]
 8014af6:	f1b8 0f00 	cmp.w	r8, #0
 8014afa:	dd9c      	ble.n	8014a36 <__sflush_r+0x1a>
 8014afc:	6a21      	ldr	r1, [r4, #32]
 8014afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014b00:	4643      	mov	r3, r8
 8014b02:	463a      	mov	r2, r7
 8014b04:	4628      	mov	r0, r5
 8014b06:	47b0      	blx	r6
 8014b08:	2800      	cmp	r0, #0
 8014b0a:	dc06      	bgt.n	8014b1a <__sflush_r+0xfe>
 8014b0c:	89a3      	ldrh	r3, [r4, #12]
 8014b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b12:	81a3      	strh	r3, [r4, #12]
 8014b14:	f04f 30ff 	mov.w	r0, #4294967295
 8014b18:	e78e      	b.n	8014a38 <__sflush_r+0x1c>
 8014b1a:	4407      	add	r7, r0
 8014b1c:	eba8 0800 	sub.w	r8, r8, r0
 8014b20:	e7e9      	b.n	8014af6 <__sflush_r+0xda>
 8014b22:	bf00      	nop
 8014b24:	dfbffffe 	.word	0xdfbffffe

08014b28 <_fflush_r>:
 8014b28:	b538      	push	{r3, r4, r5, lr}
 8014b2a:	690b      	ldr	r3, [r1, #16]
 8014b2c:	4605      	mov	r5, r0
 8014b2e:	460c      	mov	r4, r1
 8014b30:	b913      	cbnz	r3, 8014b38 <_fflush_r+0x10>
 8014b32:	2500      	movs	r5, #0
 8014b34:	4628      	mov	r0, r5
 8014b36:	bd38      	pop	{r3, r4, r5, pc}
 8014b38:	b118      	cbz	r0, 8014b42 <_fflush_r+0x1a>
 8014b3a:	6a03      	ldr	r3, [r0, #32]
 8014b3c:	b90b      	cbnz	r3, 8014b42 <_fflush_r+0x1a>
 8014b3e:	f7fe f9a5 	bl	8012e8c <__sinit>
 8014b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d0f3      	beq.n	8014b32 <_fflush_r+0xa>
 8014b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014b4c:	07d0      	lsls	r0, r2, #31
 8014b4e:	d404      	bmi.n	8014b5a <_fflush_r+0x32>
 8014b50:	0599      	lsls	r1, r3, #22
 8014b52:	d402      	bmi.n	8014b5a <_fflush_r+0x32>
 8014b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b56:	f7fe fb36 	bl	80131c6 <__retarget_lock_acquire_recursive>
 8014b5a:	4628      	mov	r0, r5
 8014b5c:	4621      	mov	r1, r4
 8014b5e:	f7ff ff5d 	bl	8014a1c <__sflush_r>
 8014b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014b64:	07da      	lsls	r2, r3, #31
 8014b66:	4605      	mov	r5, r0
 8014b68:	d4e4      	bmi.n	8014b34 <_fflush_r+0xc>
 8014b6a:	89a3      	ldrh	r3, [r4, #12]
 8014b6c:	059b      	lsls	r3, r3, #22
 8014b6e:	d4e1      	bmi.n	8014b34 <_fflush_r+0xc>
 8014b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014b72:	f7fe fb29 	bl	80131c8 <__retarget_lock_release_recursive>
 8014b76:	e7dd      	b.n	8014b34 <_fflush_r+0xc>

08014b78 <memmove>:
 8014b78:	4288      	cmp	r0, r1
 8014b7a:	b510      	push	{r4, lr}
 8014b7c:	eb01 0402 	add.w	r4, r1, r2
 8014b80:	d902      	bls.n	8014b88 <memmove+0x10>
 8014b82:	4284      	cmp	r4, r0
 8014b84:	4623      	mov	r3, r4
 8014b86:	d807      	bhi.n	8014b98 <memmove+0x20>
 8014b88:	1e43      	subs	r3, r0, #1
 8014b8a:	42a1      	cmp	r1, r4
 8014b8c:	d008      	beq.n	8014ba0 <memmove+0x28>
 8014b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014b92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014b96:	e7f8      	b.n	8014b8a <memmove+0x12>
 8014b98:	4402      	add	r2, r0
 8014b9a:	4601      	mov	r1, r0
 8014b9c:	428a      	cmp	r2, r1
 8014b9e:	d100      	bne.n	8014ba2 <memmove+0x2a>
 8014ba0:	bd10      	pop	{r4, pc}
 8014ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014ba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014baa:	e7f7      	b.n	8014b9c <memmove+0x24>

08014bac <_sbrk_r>:
 8014bac:	b538      	push	{r3, r4, r5, lr}
 8014bae:	4d06      	ldr	r5, [pc, #24]	; (8014bc8 <_sbrk_r+0x1c>)
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	4604      	mov	r4, r0
 8014bb4:	4608      	mov	r0, r1
 8014bb6:	602b      	str	r3, [r5, #0]
 8014bb8:	f7f6 ff30 	bl	800ba1c <_sbrk>
 8014bbc:	1c43      	adds	r3, r0, #1
 8014bbe:	d102      	bne.n	8014bc6 <_sbrk_r+0x1a>
 8014bc0:	682b      	ldr	r3, [r5, #0]
 8014bc2:	b103      	cbz	r3, 8014bc6 <_sbrk_r+0x1a>
 8014bc4:	6023      	str	r3, [r4, #0]
 8014bc6:	bd38      	pop	{r3, r4, r5, pc}
 8014bc8:	20004518 	.word	0x20004518

08014bcc <__assert_func>:
 8014bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014bce:	4614      	mov	r4, r2
 8014bd0:	461a      	mov	r2, r3
 8014bd2:	4b09      	ldr	r3, [pc, #36]	; (8014bf8 <__assert_func+0x2c>)
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	4605      	mov	r5, r0
 8014bd8:	68d8      	ldr	r0, [r3, #12]
 8014bda:	b14c      	cbz	r4, 8014bf0 <__assert_func+0x24>
 8014bdc:	4b07      	ldr	r3, [pc, #28]	; (8014bfc <__assert_func+0x30>)
 8014bde:	9100      	str	r1, [sp, #0]
 8014be0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014be4:	4906      	ldr	r1, [pc, #24]	; (8014c00 <__assert_func+0x34>)
 8014be6:	462b      	mov	r3, r5
 8014be8:	f000 f85c 	bl	8014ca4 <fiprintf>
 8014bec:	f000 f86c 	bl	8014cc8 <abort>
 8014bf0:	4b04      	ldr	r3, [pc, #16]	; (8014c04 <__assert_func+0x38>)
 8014bf2:	461c      	mov	r4, r3
 8014bf4:	e7f3      	b.n	8014bde <__assert_func+0x12>
 8014bf6:	bf00      	nop
 8014bf8:	20000378 	.word	0x20000378
 8014bfc:	08015f2f 	.word	0x08015f2f
 8014c00:	08015f3c 	.word	0x08015f3c
 8014c04:	08015f6a 	.word	0x08015f6a

08014c08 <_calloc_r>:
 8014c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c0a:	fba1 2402 	umull	r2, r4, r1, r2
 8014c0e:	b94c      	cbnz	r4, 8014c24 <_calloc_r+0x1c>
 8014c10:	4611      	mov	r1, r2
 8014c12:	9201      	str	r2, [sp, #4]
 8014c14:	f7fe fec2 	bl	801399c <_malloc_r>
 8014c18:	9a01      	ldr	r2, [sp, #4]
 8014c1a:	4605      	mov	r5, r0
 8014c1c:	b930      	cbnz	r0, 8014c2c <_calloc_r+0x24>
 8014c1e:	4628      	mov	r0, r5
 8014c20:	b003      	add	sp, #12
 8014c22:	bd30      	pop	{r4, r5, pc}
 8014c24:	220c      	movs	r2, #12
 8014c26:	6002      	str	r2, [r0, #0]
 8014c28:	2500      	movs	r5, #0
 8014c2a:	e7f8      	b.n	8014c1e <_calloc_r+0x16>
 8014c2c:	4621      	mov	r1, r4
 8014c2e:	f7fe fa13 	bl	8013058 <memset>
 8014c32:	e7f4      	b.n	8014c1e <_calloc_r+0x16>

08014c34 <malloc>:
 8014c34:	4b02      	ldr	r3, [pc, #8]	; (8014c40 <malloc+0xc>)
 8014c36:	4601      	mov	r1, r0
 8014c38:	6818      	ldr	r0, [r3, #0]
 8014c3a:	f7fe beaf 	b.w	801399c <_malloc_r>
 8014c3e:	bf00      	nop
 8014c40:	20000378 	.word	0x20000378

08014c44 <_realloc_r>:
 8014c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c48:	4680      	mov	r8, r0
 8014c4a:	4614      	mov	r4, r2
 8014c4c:	460e      	mov	r6, r1
 8014c4e:	b921      	cbnz	r1, 8014c5a <_realloc_r+0x16>
 8014c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c54:	4611      	mov	r1, r2
 8014c56:	f7fe bea1 	b.w	801399c <_malloc_r>
 8014c5a:	b92a      	cbnz	r2, 8014c68 <_realloc_r+0x24>
 8014c5c:	f7fe fada 	bl	8013214 <_free_r>
 8014c60:	4625      	mov	r5, r4
 8014c62:	4628      	mov	r0, r5
 8014c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c68:	f000 f835 	bl	8014cd6 <_malloc_usable_size_r>
 8014c6c:	4284      	cmp	r4, r0
 8014c6e:	4607      	mov	r7, r0
 8014c70:	d802      	bhi.n	8014c78 <_realloc_r+0x34>
 8014c72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8014c76:	d812      	bhi.n	8014c9e <_realloc_r+0x5a>
 8014c78:	4621      	mov	r1, r4
 8014c7a:	4640      	mov	r0, r8
 8014c7c:	f7fe fe8e 	bl	801399c <_malloc_r>
 8014c80:	4605      	mov	r5, r0
 8014c82:	2800      	cmp	r0, #0
 8014c84:	d0ed      	beq.n	8014c62 <_realloc_r+0x1e>
 8014c86:	42bc      	cmp	r4, r7
 8014c88:	4622      	mov	r2, r4
 8014c8a:	4631      	mov	r1, r6
 8014c8c:	bf28      	it	cs
 8014c8e:	463a      	movcs	r2, r7
 8014c90:	f7fe faa3 	bl	80131da <memcpy>
 8014c94:	4631      	mov	r1, r6
 8014c96:	4640      	mov	r0, r8
 8014c98:	f7fe fabc 	bl	8013214 <_free_r>
 8014c9c:	e7e1      	b.n	8014c62 <_realloc_r+0x1e>
 8014c9e:	4635      	mov	r5, r6
 8014ca0:	e7df      	b.n	8014c62 <_realloc_r+0x1e>
	...

08014ca4 <fiprintf>:
 8014ca4:	b40e      	push	{r1, r2, r3}
 8014ca6:	b503      	push	{r0, r1, lr}
 8014ca8:	4601      	mov	r1, r0
 8014caa:	ab03      	add	r3, sp, #12
 8014cac:	4805      	ldr	r0, [pc, #20]	; (8014cc4 <fiprintf+0x20>)
 8014cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8014cb2:	6800      	ldr	r0, [r0, #0]
 8014cb4:	9301      	str	r3, [sp, #4]
 8014cb6:	f000 f83f 	bl	8014d38 <_vfiprintf_r>
 8014cba:	b002      	add	sp, #8
 8014cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014cc0:	b003      	add	sp, #12
 8014cc2:	4770      	bx	lr
 8014cc4:	20000378 	.word	0x20000378

08014cc8 <abort>:
 8014cc8:	b508      	push	{r3, lr}
 8014cca:	2006      	movs	r0, #6
 8014ccc:	f000 fa0c 	bl	80150e8 <raise>
 8014cd0:	2001      	movs	r0, #1
 8014cd2:	f7f6 fe2c 	bl	800b92e <_exit>

08014cd6 <_malloc_usable_size_r>:
 8014cd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014cda:	1f18      	subs	r0, r3, #4
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	bfbc      	itt	lt
 8014ce0:	580b      	ldrlt	r3, [r1, r0]
 8014ce2:	18c0      	addlt	r0, r0, r3
 8014ce4:	4770      	bx	lr

08014ce6 <__sfputc_r>:
 8014ce6:	6893      	ldr	r3, [r2, #8]
 8014ce8:	3b01      	subs	r3, #1
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	b410      	push	{r4}
 8014cee:	6093      	str	r3, [r2, #8]
 8014cf0:	da08      	bge.n	8014d04 <__sfputc_r+0x1e>
 8014cf2:	6994      	ldr	r4, [r2, #24]
 8014cf4:	42a3      	cmp	r3, r4
 8014cf6:	db01      	blt.n	8014cfc <__sfputc_r+0x16>
 8014cf8:	290a      	cmp	r1, #10
 8014cfa:	d103      	bne.n	8014d04 <__sfputc_r+0x1e>
 8014cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d00:	f000 b934 	b.w	8014f6c <__swbuf_r>
 8014d04:	6813      	ldr	r3, [r2, #0]
 8014d06:	1c58      	adds	r0, r3, #1
 8014d08:	6010      	str	r0, [r2, #0]
 8014d0a:	7019      	strb	r1, [r3, #0]
 8014d0c:	4608      	mov	r0, r1
 8014d0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014d12:	4770      	bx	lr

08014d14 <__sfputs_r>:
 8014d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d16:	4606      	mov	r6, r0
 8014d18:	460f      	mov	r7, r1
 8014d1a:	4614      	mov	r4, r2
 8014d1c:	18d5      	adds	r5, r2, r3
 8014d1e:	42ac      	cmp	r4, r5
 8014d20:	d101      	bne.n	8014d26 <__sfputs_r+0x12>
 8014d22:	2000      	movs	r0, #0
 8014d24:	e007      	b.n	8014d36 <__sfputs_r+0x22>
 8014d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d2a:	463a      	mov	r2, r7
 8014d2c:	4630      	mov	r0, r6
 8014d2e:	f7ff ffda 	bl	8014ce6 <__sfputc_r>
 8014d32:	1c43      	adds	r3, r0, #1
 8014d34:	d1f3      	bne.n	8014d1e <__sfputs_r+0xa>
 8014d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014d38 <_vfiprintf_r>:
 8014d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d3c:	460d      	mov	r5, r1
 8014d3e:	b09d      	sub	sp, #116	; 0x74
 8014d40:	4614      	mov	r4, r2
 8014d42:	4698      	mov	r8, r3
 8014d44:	4606      	mov	r6, r0
 8014d46:	b118      	cbz	r0, 8014d50 <_vfiprintf_r+0x18>
 8014d48:	6a03      	ldr	r3, [r0, #32]
 8014d4a:	b90b      	cbnz	r3, 8014d50 <_vfiprintf_r+0x18>
 8014d4c:	f7fe f89e 	bl	8012e8c <__sinit>
 8014d50:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d52:	07d9      	lsls	r1, r3, #31
 8014d54:	d405      	bmi.n	8014d62 <_vfiprintf_r+0x2a>
 8014d56:	89ab      	ldrh	r3, [r5, #12]
 8014d58:	059a      	lsls	r2, r3, #22
 8014d5a:	d402      	bmi.n	8014d62 <_vfiprintf_r+0x2a>
 8014d5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d5e:	f7fe fa32 	bl	80131c6 <__retarget_lock_acquire_recursive>
 8014d62:	89ab      	ldrh	r3, [r5, #12]
 8014d64:	071b      	lsls	r3, r3, #28
 8014d66:	d501      	bpl.n	8014d6c <_vfiprintf_r+0x34>
 8014d68:	692b      	ldr	r3, [r5, #16]
 8014d6a:	b99b      	cbnz	r3, 8014d94 <_vfiprintf_r+0x5c>
 8014d6c:	4629      	mov	r1, r5
 8014d6e:	4630      	mov	r0, r6
 8014d70:	f000 f93a 	bl	8014fe8 <__swsetup_r>
 8014d74:	b170      	cbz	r0, 8014d94 <_vfiprintf_r+0x5c>
 8014d76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d78:	07dc      	lsls	r4, r3, #31
 8014d7a:	d504      	bpl.n	8014d86 <_vfiprintf_r+0x4e>
 8014d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d80:	b01d      	add	sp, #116	; 0x74
 8014d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d86:	89ab      	ldrh	r3, [r5, #12]
 8014d88:	0598      	lsls	r0, r3, #22
 8014d8a:	d4f7      	bmi.n	8014d7c <_vfiprintf_r+0x44>
 8014d8c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d8e:	f7fe fa1b 	bl	80131c8 <__retarget_lock_release_recursive>
 8014d92:	e7f3      	b.n	8014d7c <_vfiprintf_r+0x44>
 8014d94:	2300      	movs	r3, #0
 8014d96:	9309      	str	r3, [sp, #36]	; 0x24
 8014d98:	2320      	movs	r3, #32
 8014d9a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014da2:	2330      	movs	r3, #48	; 0x30
 8014da4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014f58 <_vfiprintf_r+0x220>
 8014da8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014dac:	f04f 0901 	mov.w	r9, #1
 8014db0:	4623      	mov	r3, r4
 8014db2:	469a      	mov	sl, r3
 8014db4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014db8:	b10a      	cbz	r2, 8014dbe <_vfiprintf_r+0x86>
 8014dba:	2a25      	cmp	r2, #37	; 0x25
 8014dbc:	d1f9      	bne.n	8014db2 <_vfiprintf_r+0x7a>
 8014dbe:	ebba 0b04 	subs.w	fp, sl, r4
 8014dc2:	d00b      	beq.n	8014ddc <_vfiprintf_r+0xa4>
 8014dc4:	465b      	mov	r3, fp
 8014dc6:	4622      	mov	r2, r4
 8014dc8:	4629      	mov	r1, r5
 8014dca:	4630      	mov	r0, r6
 8014dcc:	f7ff ffa2 	bl	8014d14 <__sfputs_r>
 8014dd0:	3001      	adds	r0, #1
 8014dd2:	f000 80a9 	beq.w	8014f28 <_vfiprintf_r+0x1f0>
 8014dd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014dd8:	445a      	add	r2, fp
 8014dda:	9209      	str	r2, [sp, #36]	; 0x24
 8014ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	f000 80a1 	beq.w	8014f28 <_vfiprintf_r+0x1f0>
 8014de6:	2300      	movs	r3, #0
 8014de8:	f04f 32ff 	mov.w	r2, #4294967295
 8014dec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014df0:	f10a 0a01 	add.w	sl, sl, #1
 8014df4:	9304      	str	r3, [sp, #16]
 8014df6:	9307      	str	r3, [sp, #28]
 8014df8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014dfc:	931a      	str	r3, [sp, #104]	; 0x68
 8014dfe:	4654      	mov	r4, sl
 8014e00:	2205      	movs	r2, #5
 8014e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e06:	4854      	ldr	r0, [pc, #336]	; (8014f58 <_vfiprintf_r+0x220>)
 8014e08:	f7eb fa1a 	bl	8000240 <memchr>
 8014e0c:	9a04      	ldr	r2, [sp, #16]
 8014e0e:	b9d8      	cbnz	r0, 8014e48 <_vfiprintf_r+0x110>
 8014e10:	06d1      	lsls	r1, r2, #27
 8014e12:	bf44      	itt	mi
 8014e14:	2320      	movmi	r3, #32
 8014e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e1a:	0713      	lsls	r3, r2, #28
 8014e1c:	bf44      	itt	mi
 8014e1e:	232b      	movmi	r3, #43	; 0x2b
 8014e20:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014e24:	f89a 3000 	ldrb.w	r3, [sl]
 8014e28:	2b2a      	cmp	r3, #42	; 0x2a
 8014e2a:	d015      	beq.n	8014e58 <_vfiprintf_r+0x120>
 8014e2c:	9a07      	ldr	r2, [sp, #28]
 8014e2e:	4654      	mov	r4, sl
 8014e30:	2000      	movs	r0, #0
 8014e32:	f04f 0c0a 	mov.w	ip, #10
 8014e36:	4621      	mov	r1, r4
 8014e38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014e3c:	3b30      	subs	r3, #48	; 0x30
 8014e3e:	2b09      	cmp	r3, #9
 8014e40:	d94d      	bls.n	8014ede <_vfiprintf_r+0x1a6>
 8014e42:	b1b0      	cbz	r0, 8014e72 <_vfiprintf_r+0x13a>
 8014e44:	9207      	str	r2, [sp, #28]
 8014e46:	e014      	b.n	8014e72 <_vfiprintf_r+0x13a>
 8014e48:	eba0 0308 	sub.w	r3, r0, r8
 8014e4c:	fa09 f303 	lsl.w	r3, r9, r3
 8014e50:	4313      	orrs	r3, r2
 8014e52:	9304      	str	r3, [sp, #16]
 8014e54:	46a2      	mov	sl, r4
 8014e56:	e7d2      	b.n	8014dfe <_vfiprintf_r+0xc6>
 8014e58:	9b03      	ldr	r3, [sp, #12]
 8014e5a:	1d19      	adds	r1, r3, #4
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	9103      	str	r1, [sp, #12]
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	bfbb      	ittet	lt
 8014e64:	425b      	neglt	r3, r3
 8014e66:	f042 0202 	orrlt.w	r2, r2, #2
 8014e6a:	9307      	strge	r3, [sp, #28]
 8014e6c:	9307      	strlt	r3, [sp, #28]
 8014e6e:	bfb8      	it	lt
 8014e70:	9204      	strlt	r2, [sp, #16]
 8014e72:	7823      	ldrb	r3, [r4, #0]
 8014e74:	2b2e      	cmp	r3, #46	; 0x2e
 8014e76:	d10c      	bne.n	8014e92 <_vfiprintf_r+0x15a>
 8014e78:	7863      	ldrb	r3, [r4, #1]
 8014e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8014e7c:	d134      	bne.n	8014ee8 <_vfiprintf_r+0x1b0>
 8014e7e:	9b03      	ldr	r3, [sp, #12]
 8014e80:	1d1a      	adds	r2, r3, #4
 8014e82:	681b      	ldr	r3, [r3, #0]
 8014e84:	9203      	str	r2, [sp, #12]
 8014e86:	2b00      	cmp	r3, #0
 8014e88:	bfb8      	it	lt
 8014e8a:	f04f 33ff 	movlt.w	r3, #4294967295
 8014e8e:	3402      	adds	r4, #2
 8014e90:	9305      	str	r3, [sp, #20]
 8014e92:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014f68 <_vfiprintf_r+0x230>
 8014e96:	7821      	ldrb	r1, [r4, #0]
 8014e98:	2203      	movs	r2, #3
 8014e9a:	4650      	mov	r0, sl
 8014e9c:	f7eb f9d0 	bl	8000240 <memchr>
 8014ea0:	b138      	cbz	r0, 8014eb2 <_vfiprintf_r+0x17a>
 8014ea2:	9b04      	ldr	r3, [sp, #16]
 8014ea4:	eba0 000a 	sub.w	r0, r0, sl
 8014ea8:	2240      	movs	r2, #64	; 0x40
 8014eaa:	4082      	lsls	r2, r0
 8014eac:	4313      	orrs	r3, r2
 8014eae:	3401      	adds	r4, #1
 8014eb0:	9304      	str	r3, [sp, #16]
 8014eb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014eb6:	4829      	ldr	r0, [pc, #164]	; (8014f5c <_vfiprintf_r+0x224>)
 8014eb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ebc:	2206      	movs	r2, #6
 8014ebe:	f7eb f9bf 	bl	8000240 <memchr>
 8014ec2:	2800      	cmp	r0, #0
 8014ec4:	d03f      	beq.n	8014f46 <_vfiprintf_r+0x20e>
 8014ec6:	4b26      	ldr	r3, [pc, #152]	; (8014f60 <_vfiprintf_r+0x228>)
 8014ec8:	bb1b      	cbnz	r3, 8014f12 <_vfiprintf_r+0x1da>
 8014eca:	9b03      	ldr	r3, [sp, #12]
 8014ecc:	3307      	adds	r3, #7
 8014ece:	f023 0307 	bic.w	r3, r3, #7
 8014ed2:	3308      	adds	r3, #8
 8014ed4:	9303      	str	r3, [sp, #12]
 8014ed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014ed8:	443b      	add	r3, r7
 8014eda:	9309      	str	r3, [sp, #36]	; 0x24
 8014edc:	e768      	b.n	8014db0 <_vfiprintf_r+0x78>
 8014ede:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ee2:	460c      	mov	r4, r1
 8014ee4:	2001      	movs	r0, #1
 8014ee6:	e7a6      	b.n	8014e36 <_vfiprintf_r+0xfe>
 8014ee8:	2300      	movs	r3, #0
 8014eea:	3401      	adds	r4, #1
 8014eec:	9305      	str	r3, [sp, #20]
 8014eee:	4619      	mov	r1, r3
 8014ef0:	f04f 0c0a 	mov.w	ip, #10
 8014ef4:	4620      	mov	r0, r4
 8014ef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014efa:	3a30      	subs	r2, #48	; 0x30
 8014efc:	2a09      	cmp	r2, #9
 8014efe:	d903      	bls.n	8014f08 <_vfiprintf_r+0x1d0>
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d0c6      	beq.n	8014e92 <_vfiprintf_r+0x15a>
 8014f04:	9105      	str	r1, [sp, #20]
 8014f06:	e7c4      	b.n	8014e92 <_vfiprintf_r+0x15a>
 8014f08:	fb0c 2101 	mla	r1, ip, r1, r2
 8014f0c:	4604      	mov	r4, r0
 8014f0e:	2301      	movs	r3, #1
 8014f10:	e7f0      	b.n	8014ef4 <_vfiprintf_r+0x1bc>
 8014f12:	ab03      	add	r3, sp, #12
 8014f14:	9300      	str	r3, [sp, #0]
 8014f16:	462a      	mov	r2, r5
 8014f18:	4b12      	ldr	r3, [pc, #72]	; (8014f64 <_vfiprintf_r+0x22c>)
 8014f1a:	a904      	add	r1, sp, #16
 8014f1c:	4630      	mov	r0, r6
 8014f1e:	f3af 8000 	nop.w
 8014f22:	4607      	mov	r7, r0
 8014f24:	1c78      	adds	r0, r7, #1
 8014f26:	d1d6      	bne.n	8014ed6 <_vfiprintf_r+0x19e>
 8014f28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014f2a:	07d9      	lsls	r1, r3, #31
 8014f2c:	d405      	bmi.n	8014f3a <_vfiprintf_r+0x202>
 8014f2e:	89ab      	ldrh	r3, [r5, #12]
 8014f30:	059a      	lsls	r2, r3, #22
 8014f32:	d402      	bmi.n	8014f3a <_vfiprintf_r+0x202>
 8014f34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014f36:	f7fe f947 	bl	80131c8 <__retarget_lock_release_recursive>
 8014f3a:	89ab      	ldrh	r3, [r5, #12]
 8014f3c:	065b      	lsls	r3, r3, #25
 8014f3e:	f53f af1d 	bmi.w	8014d7c <_vfiprintf_r+0x44>
 8014f42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f44:	e71c      	b.n	8014d80 <_vfiprintf_r+0x48>
 8014f46:	ab03      	add	r3, sp, #12
 8014f48:	9300      	str	r3, [sp, #0]
 8014f4a:	462a      	mov	r2, r5
 8014f4c:	4b05      	ldr	r3, [pc, #20]	; (8014f64 <_vfiprintf_r+0x22c>)
 8014f4e:	a904      	add	r1, sp, #16
 8014f50:	4630      	mov	r0, r6
 8014f52:	f7ff fc41 	bl	80147d8 <_printf_i>
 8014f56:	e7e4      	b.n	8014f22 <_vfiprintf_r+0x1ea>
 8014f58:	08015efc 	.word	0x08015efc
 8014f5c:	08015f06 	.word	0x08015f06
 8014f60:	00000000 	.word	0x00000000
 8014f64:	08014d15 	.word	0x08014d15
 8014f68:	08015f02 	.word	0x08015f02

08014f6c <__swbuf_r>:
 8014f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f6e:	460e      	mov	r6, r1
 8014f70:	4614      	mov	r4, r2
 8014f72:	4605      	mov	r5, r0
 8014f74:	b118      	cbz	r0, 8014f7e <__swbuf_r+0x12>
 8014f76:	6a03      	ldr	r3, [r0, #32]
 8014f78:	b90b      	cbnz	r3, 8014f7e <__swbuf_r+0x12>
 8014f7a:	f7fd ff87 	bl	8012e8c <__sinit>
 8014f7e:	69a3      	ldr	r3, [r4, #24]
 8014f80:	60a3      	str	r3, [r4, #8]
 8014f82:	89a3      	ldrh	r3, [r4, #12]
 8014f84:	071a      	lsls	r2, r3, #28
 8014f86:	d525      	bpl.n	8014fd4 <__swbuf_r+0x68>
 8014f88:	6923      	ldr	r3, [r4, #16]
 8014f8a:	b31b      	cbz	r3, 8014fd4 <__swbuf_r+0x68>
 8014f8c:	6823      	ldr	r3, [r4, #0]
 8014f8e:	6922      	ldr	r2, [r4, #16]
 8014f90:	1a98      	subs	r0, r3, r2
 8014f92:	6963      	ldr	r3, [r4, #20]
 8014f94:	b2f6      	uxtb	r6, r6
 8014f96:	4283      	cmp	r3, r0
 8014f98:	4637      	mov	r7, r6
 8014f9a:	dc04      	bgt.n	8014fa6 <__swbuf_r+0x3a>
 8014f9c:	4621      	mov	r1, r4
 8014f9e:	4628      	mov	r0, r5
 8014fa0:	f7ff fdc2 	bl	8014b28 <_fflush_r>
 8014fa4:	b9e0      	cbnz	r0, 8014fe0 <__swbuf_r+0x74>
 8014fa6:	68a3      	ldr	r3, [r4, #8]
 8014fa8:	3b01      	subs	r3, #1
 8014faa:	60a3      	str	r3, [r4, #8]
 8014fac:	6823      	ldr	r3, [r4, #0]
 8014fae:	1c5a      	adds	r2, r3, #1
 8014fb0:	6022      	str	r2, [r4, #0]
 8014fb2:	701e      	strb	r6, [r3, #0]
 8014fb4:	6962      	ldr	r2, [r4, #20]
 8014fb6:	1c43      	adds	r3, r0, #1
 8014fb8:	429a      	cmp	r2, r3
 8014fba:	d004      	beq.n	8014fc6 <__swbuf_r+0x5a>
 8014fbc:	89a3      	ldrh	r3, [r4, #12]
 8014fbe:	07db      	lsls	r3, r3, #31
 8014fc0:	d506      	bpl.n	8014fd0 <__swbuf_r+0x64>
 8014fc2:	2e0a      	cmp	r6, #10
 8014fc4:	d104      	bne.n	8014fd0 <__swbuf_r+0x64>
 8014fc6:	4621      	mov	r1, r4
 8014fc8:	4628      	mov	r0, r5
 8014fca:	f7ff fdad 	bl	8014b28 <_fflush_r>
 8014fce:	b938      	cbnz	r0, 8014fe0 <__swbuf_r+0x74>
 8014fd0:	4638      	mov	r0, r7
 8014fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014fd4:	4621      	mov	r1, r4
 8014fd6:	4628      	mov	r0, r5
 8014fd8:	f000 f806 	bl	8014fe8 <__swsetup_r>
 8014fdc:	2800      	cmp	r0, #0
 8014fde:	d0d5      	beq.n	8014f8c <__swbuf_r+0x20>
 8014fe0:	f04f 37ff 	mov.w	r7, #4294967295
 8014fe4:	e7f4      	b.n	8014fd0 <__swbuf_r+0x64>
	...

08014fe8 <__swsetup_r>:
 8014fe8:	b538      	push	{r3, r4, r5, lr}
 8014fea:	4b2a      	ldr	r3, [pc, #168]	; (8015094 <__swsetup_r+0xac>)
 8014fec:	4605      	mov	r5, r0
 8014fee:	6818      	ldr	r0, [r3, #0]
 8014ff0:	460c      	mov	r4, r1
 8014ff2:	b118      	cbz	r0, 8014ffc <__swsetup_r+0x14>
 8014ff4:	6a03      	ldr	r3, [r0, #32]
 8014ff6:	b90b      	cbnz	r3, 8014ffc <__swsetup_r+0x14>
 8014ff8:	f7fd ff48 	bl	8012e8c <__sinit>
 8014ffc:	89a3      	ldrh	r3, [r4, #12]
 8014ffe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015002:	0718      	lsls	r0, r3, #28
 8015004:	d422      	bmi.n	801504c <__swsetup_r+0x64>
 8015006:	06d9      	lsls	r1, r3, #27
 8015008:	d407      	bmi.n	801501a <__swsetup_r+0x32>
 801500a:	2309      	movs	r3, #9
 801500c:	602b      	str	r3, [r5, #0]
 801500e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015012:	81a3      	strh	r3, [r4, #12]
 8015014:	f04f 30ff 	mov.w	r0, #4294967295
 8015018:	e034      	b.n	8015084 <__swsetup_r+0x9c>
 801501a:	0758      	lsls	r0, r3, #29
 801501c:	d512      	bpl.n	8015044 <__swsetup_r+0x5c>
 801501e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015020:	b141      	cbz	r1, 8015034 <__swsetup_r+0x4c>
 8015022:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015026:	4299      	cmp	r1, r3
 8015028:	d002      	beq.n	8015030 <__swsetup_r+0x48>
 801502a:	4628      	mov	r0, r5
 801502c:	f7fe f8f2 	bl	8013214 <_free_r>
 8015030:	2300      	movs	r3, #0
 8015032:	6363      	str	r3, [r4, #52]	; 0x34
 8015034:	89a3      	ldrh	r3, [r4, #12]
 8015036:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801503a:	81a3      	strh	r3, [r4, #12]
 801503c:	2300      	movs	r3, #0
 801503e:	6063      	str	r3, [r4, #4]
 8015040:	6923      	ldr	r3, [r4, #16]
 8015042:	6023      	str	r3, [r4, #0]
 8015044:	89a3      	ldrh	r3, [r4, #12]
 8015046:	f043 0308 	orr.w	r3, r3, #8
 801504a:	81a3      	strh	r3, [r4, #12]
 801504c:	6923      	ldr	r3, [r4, #16]
 801504e:	b94b      	cbnz	r3, 8015064 <__swsetup_r+0x7c>
 8015050:	89a3      	ldrh	r3, [r4, #12]
 8015052:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801505a:	d003      	beq.n	8015064 <__swsetup_r+0x7c>
 801505c:	4621      	mov	r1, r4
 801505e:	4628      	mov	r0, r5
 8015060:	f000 f884 	bl	801516c <__smakebuf_r>
 8015064:	89a0      	ldrh	r0, [r4, #12]
 8015066:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801506a:	f010 0301 	ands.w	r3, r0, #1
 801506e:	d00a      	beq.n	8015086 <__swsetup_r+0x9e>
 8015070:	2300      	movs	r3, #0
 8015072:	60a3      	str	r3, [r4, #8]
 8015074:	6963      	ldr	r3, [r4, #20]
 8015076:	425b      	negs	r3, r3
 8015078:	61a3      	str	r3, [r4, #24]
 801507a:	6923      	ldr	r3, [r4, #16]
 801507c:	b943      	cbnz	r3, 8015090 <__swsetup_r+0xa8>
 801507e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015082:	d1c4      	bne.n	801500e <__swsetup_r+0x26>
 8015084:	bd38      	pop	{r3, r4, r5, pc}
 8015086:	0781      	lsls	r1, r0, #30
 8015088:	bf58      	it	pl
 801508a:	6963      	ldrpl	r3, [r4, #20]
 801508c:	60a3      	str	r3, [r4, #8]
 801508e:	e7f4      	b.n	801507a <__swsetup_r+0x92>
 8015090:	2000      	movs	r0, #0
 8015092:	e7f7      	b.n	8015084 <__swsetup_r+0x9c>
 8015094:	20000378 	.word	0x20000378

08015098 <_raise_r>:
 8015098:	291f      	cmp	r1, #31
 801509a:	b538      	push	{r3, r4, r5, lr}
 801509c:	4604      	mov	r4, r0
 801509e:	460d      	mov	r5, r1
 80150a0:	d904      	bls.n	80150ac <_raise_r+0x14>
 80150a2:	2316      	movs	r3, #22
 80150a4:	6003      	str	r3, [r0, #0]
 80150a6:	f04f 30ff 	mov.w	r0, #4294967295
 80150aa:	bd38      	pop	{r3, r4, r5, pc}
 80150ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80150ae:	b112      	cbz	r2, 80150b6 <_raise_r+0x1e>
 80150b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80150b4:	b94b      	cbnz	r3, 80150ca <_raise_r+0x32>
 80150b6:	4620      	mov	r0, r4
 80150b8:	f000 f830 	bl	801511c <_getpid_r>
 80150bc:	462a      	mov	r2, r5
 80150be:	4601      	mov	r1, r0
 80150c0:	4620      	mov	r0, r4
 80150c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150c6:	f000 b817 	b.w	80150f8 <_kill_r>
 80150ca:	2b01      	cmp	r3, #1
 80150cc:	d00a      	beq.n	80150e4 <_raise_r+0x4c>
 80150ce:	1c59      	adds	r1, r3, #1
 80150d0:	d103      	bne.n	80150da <_raise_r+0x42>
 80150d2:	2316      	movs	r3, #22
 80150d4:	6003      	str	r3, [r0, #0]
 80150d6:	2001      	movs	r0, #1
 80150d8:	e7e7      	b.n	80150aa <_raise_r+0x12>
 80150da:	2400      	movs	r4, #0
 80150dc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80150e0:	4628      	mov	r0, r5
 80150e2:	4798      	blx	r3
 80150e4:	2000      	movs	r0, #0
 80150e6:	e7e0      	b.n	80150aa <_raise_r+0x12>

080150e8 <raise>:
 80150e8:	4b02      	ldr	r3, [pc, #8]	; (80150f4 <raise+0xc>)
 80150ea:	4601      	mov	r1, r0
 80150ec:	6818      	ldr	r0, [r3, #0]
 80150ee:	f7ff bfd3 	b.w	8015098 <_raise_r>
 80150f2:	bf00      	nop
 80150f4:	20000378 	.word	0x20000378

080150f8 <_kill_r>:
 80150f8:	b538      	push	{r3, r4, r5, lr}
 80150fa:	4d07      	ldr	r5, [pc, #28]	; (8015118 <_kill_r+0x20>)
 80150fc:	2300      	movs	r3, #0
 80150fe:	4604      	mov	r4, r0
 8015100:	4608      	mov	r0, r1
 8015102:	4611      	mov	r1, r2
 8015104:	602b      	str	r3, [r5, #0]
 8015106:	f7f6 fc02 	bl	800b90e <_kill>
 801510a:	1c43      	adds	r3, r0, #1
 801510c:	d102      	bne.n	8015114 <_kill_r+0x1c>
 801510e:	682b      	ldr	r3, [r5, #0]
 8015110:	b103      	cbz	r3, 8015114 <_kill_r+0x1c>
 8015112:	6023      	str	r3, [r4, #0]
 8015114:	bd38      	pop	{r3, r4, r5, pc}
 8015116:	bf00      	nop
 8015118:	20004518 	.word	0x20004518

0801511c <_getpid_r>:
 801511c:	f7f6 bbef 	b.w	800b8fe <_getpid>

08015120 <__swhatbuf_r>:
 8015120:	b570      	push	{r4, r5, r6, lr}
 8015122:	460c      	mov	r4, r1
 8015124:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015128:	2900      	cmp	r1, #0
 801512a:	b096      	sub	sp, #88	; 0x58
 801512c:	4615      	mov	r5, r2
 801512e:	461e      	mov	r6, r3
 8015130:	da0d      	bge.n	801514e <__swhatbuf_r+0x2e>
 8015132:	89a3      	ldrh	r3, [r4, #12]
 8015134:	f013 0f80 	tst.w	r3, #128	; 0x80
 8015138:	f04f 0100 	mov.w	r1, #0
 801513c:	bf0c      	ite	eq
 801513e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8015142:	2340      	movne	r3, #64	; 0x40
 8015144:	2000      	movs	r0, #0
 8015146:	6031      	str	r1, [r6, #0]
 8015148:	602b      	str	r3, [r5, #0]
 801514a:	b016      	add	sp, #88	; 0x58
 801514c:	bd70      	pop	{r4, r5, r6, pc}
 801514e:	466a      	mov	r2, sp
 8015150:	f000 f848 	bl	80151e4 <_fstat_r>
 8015154:	2800      	cmp	r0, #0
 8015156:	dbec      	blt.n	8015132 <__swhatbuf_r+0x12>
 8015158:	9901      	ldr	r1, [sp, #4]
 801515a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801515e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8015162:	4259      	negs	r1, r3
 8015164:	4159      	adcs	r1, r3
 8015166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801516a:	e7eb      	b.n	8015144 <__swhatbuf_r+0x24>

0801516c <__smakebuf_r>:
 801516c:	898b      	ldrh	r3, [r1, #12]
 801516e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015170:	079d      	lsls	r5, r3, #30
 8015172:	4606      	mov	r6, r0
 8015174:	460c      	mov	r4, r1
 8015176:	d507      	bpl.n	8015188 <__smakebuf_r+0x1c>
 8015178:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801517c:	6023      	str	r3, [r4, #0]
 801517e:	6123      	str	r3, [r4, #16]
 8015180:	2301      	movs	r3, #1
 8015182:	6163      	str	r3, [r4, #20]
 8015184:	b002      	add	sp, #8
 8015186:	bd70      	pop	{r4, r5, r6, pc}
 8015188:	ab01      	add	r3, sp, #4
 801518a:	466a      	mov	r2, sp
 801518c:	f7ff ffc8 	bl	8015120 <__swhatbuf_r>
 8015190:	9900      	ldr	r1, [sp, #0]
 8015192:	4605      	mov	r5, r0
 8015194:	4630      	mov	r0, r6
 8015196:	f7fe fc01 	bl	801399c <_malloc_r>
 801519a:	b948      	cbnz	r0, 80151b0 <__smakebuf_r+0x44>
 801519c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80151a0:	059a      	lsls	r2, r3, #22
 80151a2:	d4ef      	bmi.n	8015184 <__smakebuf_r+0x18>
 80151a4:	f023 0303 	bic.w	r3, r3, #3
 80151a8:	f043 0302 	orr.w	r3, r3, #2
 80151ac:	81a3      	strh	r3, [r4, #12]
 80151ae:	e7e3      	b.n	8015178 <__smakebuf_r+0xc>
 80151b0:	89a3      	ldrh	r3, [r4, #12]
 80151b2:	6020      	str	r0, [r4, #0]
 80151b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80151b8:	81a3      	strh	r3, [r4, #12]
 80151ba:	9b00      	ldr	r3, [sp, #0]
 80151bc:	6163      	str	r3, [r4, #20]
 80151be:	9b01      	ldr	r3, [sp, #4]
 80151c0:	6120      	str	r0, [r4, #16]
 80151c2:	b15b      	cbz	r3, 80151dc <__smakebuf_r+0x70>
 80151c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80151c8:	4630      	mov	r0, r6
 80151ca:	f000 f81d 	bl	8015208 <_isatty_r>
 80151ce:	b128      	cbz	r0, 80151dc <__smakebuf_r+0x70>
 80151d0:	89a3      	ldrh	r3, [r4, #12]
 80151d2:	f023 0303 	bic.w	r3, r3, #3
 80151d6:	f043 0301 	orr.w	r3, r3, #1
 80151da:	81a3      	strh	r3, [r4, #12]
 80151dc:	89a3      	ldrh	r3, [r4, #12]
 80151de:	431d      	orrs	r5, r3
 80151e0:	81a5      	strh	r5, [r4, #12]
 80151e2:	e7cf      	b.n	8015184 <__smakebuf_r+0x18>

080151e4 <_fstat_r>:
 80151e4:	b538      	push	{r3, r4, r5, lr}
 80151e6:	4d07      	ldr	r5, [pc, #28]	; (8015204 <_fstat_r+0x20>)
 80151e8:	2300      	movs	r3, #0
 80151ea:	4604      	mov	r4, r0
 80151ec:	4608      	mov	r0, r1
 80151ee:	4611      	mov	r1, r2
 80151f0:	602b      	str	r3, [r5, #0]
 80151f2:	f7f6 fbeb 	bl	800b9cc <_fstat>
 80151f6:	1c43      	adds	r3, r0, #1
 80151f8:	d102      	bne.n	8015200 <_fstat_r+0x1c>
 80151fa:	682b      	ldr	r3, [r5, #0]
 80151fc:	b103      	cbz	r3, 8015200 <_fstat_r+0x1c>
 80151fe:	6023      	str	r3, [r4, #0]
 8015200:	bd38      	pop	{r3, r4, r5, pc}
 8015202:	bf00      	nop
 8015204:	20004518 	.word	0x20004518

08015208 <_isatty_r>:
 8015208:	b538      	push	{r3, r4, r5, lr}
 801520a:	4d06      	ldr	r5, [pc, #24]	; (8015224 <_isatty_r+0x1c>)
 801520c:	2300      	movs	r3, #0
 801520e:	4604      	mov	r4, r0
 8015210:	4608      	mov	r0, r1
 8015212:	602b      	str	r3, [r5, #0]
 8015214:	f7f6 fbea 	bl	800b9ec <_isatty>
 8015218:	1c43      	adds	r3, r0, #1
 801521a:	d102      	bne.n	8015222 <_isatty_r+0x1a>
 801521c:	682b      	ldr	r3, [r5, #0]
 801521e:	b103      	cbz	r3, 8015222 <_isatty_r+0x1a>
 8015220:	6023      	str	r3, [r4, #0]
 8015222:	bd38      	pop	{r3, r4, r5, pc}
 8015224:	20004518 	.word	0x20004518

08015228 <_init>:
 8015228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801522a:	bf00      	nop
 801522c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801522e:	bc08      	pop	{r3}
 8015230:	469e      	mov	lr, r3
 8015232:	4770      	bx	lr

08015234 <_fini>:
 8015234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015236:	bf00      	nop
 8015238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801523a:	bc08      	pop	{r3}
 801523c:	469e      	mov	lr, r3
 801523e:	4770      	bx	lr
