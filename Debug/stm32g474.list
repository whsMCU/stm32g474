
stm32g474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016038  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000cda4  08016240  08016240  00026240  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022fe4  08022fe4  000403c8  2**0
                  CONTENTS
  4 .ARM          00000008  08022fe4  08022fe4  00032fe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022fec  08022fec  000403c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022fec  08022fec  00032fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022ff0  08022ff0  00032ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c8  20000000  08022ff4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008610  20000400  080233bc  00040400  2**6
                  ALLOC
 10 ._user_heap_stack 00000600  20008a10  080233bc  00048a10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000403c8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000403f8  2**0
                  CONTENTS, READONLY
 13 .debug_line   0002d0f9  00000000  00000000  0004043b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line_str 00000043  00000000  00000000  0006d534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_info   00024f3e  00000000  00000000  0006d577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00006134  00000000  00000000  000924b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001ea8  00000000  00000000  000985f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001192a2  00000000  00000000  0009a498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001745  00000000  00000000  001b373a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00031f52  00000000  00000000  001b4e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009234  00000000  00000000  001e6dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000400 	.word	0x20000400
 80001fc:	00000000 	.word	0x00000000
 8000200:	08016200 	.word	0x08016200

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000404 	.word	0x20000404
 800021c:	08016200 	.word	0x08016200

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a6 	b.w	8000ffc <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff33 	bl	8000b3c <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fca9 	bl	8000658 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc2a 	bl	8000564 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fca0 	bl	8000658 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff fae2 	bl	80002e8 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9e08      	ldr	r6, [sp, #32]
 8000d3a:	460d      	mov	r5, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	460f      	mov	r7, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4694      	mov	ip, r2
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0xe2>
 8000d4a:	fab2 f382 	clz	r3, r2
 8000d4e:	b143      	cbz	r3, 8000d62 <__udivmoddi4+0x2e>
 8000d50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d54:	f1c3 0220 	rsb	r2, r3, #32
 8000d58:	409f      	lsls	r7, r3
 8000d5a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d5e:	4317      	orrs	r7, r2
 8000d60:	409c      	lsls	r4, r3
 8000d62:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d66:	fa1f f58c 	uxth.w	r5, ip
 8000d6a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d6e:	0c22      	lsrs	r2, r4, #16
 8000d70:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d74:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d78:	fb01 f005 	mul.w	r0, r1, r5
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	d90a      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d80:	eb1c 0202 	adds.w	r2, ip, r2
 8000d84:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d88:	f080 811c 	bcs.w	8000fc4 <__udivmoddi4+0x290>
 8000d8c:	4290      	cmp	r0, r2
 8000d8e:	f240 8119 	bls.w	8000fc4 <__udivmoddi4+0x290>
 8000d92:	3902      	subs	r1, #2
 8000d94:	4462      	add	r2, ip
 8000d96:	1a12      	subs	r2, r2, r0
 8000d98:	b2a4      	uxth	r4, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000da6:	fb00 f505 	mul.w	r5, r0, r5
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	d90a      	bls.n	8000dc4 <__udivmoddi4+0x90>
 8000dae:	eb1c 0404 	adds.w	r4, ip, r4
 8000db2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db6:	f080 8107 	bcs.w	8000fc8 <__udivmoddi4+0x294>
 8000dba:	42a5      	cmp	r5, r4
 8000dbc:	f240 8104 	bls.w	8000fc8 <__udivmoddi4+0x294>
 8000dc0:	4464      	add	r4, ip
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc8:	1b64      	subs	r4, r4, r5
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11e      	cbz	r6, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40dc      	lsrs	r4, r3
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d908      	bls.n	8000df0 <__udivmoddi4+0xbc>
 8000dde:	2e00      	cmp	r6, #0
 8000de0:	f000 80ed 	beq.w	8000fbe <__udivmoddi4+0x28a>
 8000de4:	2100      	movs	r1, #0
 8000de6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dea:	4608      	mov	r0, r1
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	fab3 f183 	clz	r1, r3
 8000df4:	2900      	cmp	r1, #0
 8000df6:	d149      	bne.n	8000e8c <__udivmoddi4+0x158>
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	d302      	bcc.n	8000e02 <__udivmoddi4+0xce>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	f200 80f8 	bhi.w	8000ff2 <__udivmoddi4+0x2be>
 8000e02:	1a84      	subs	r4, r0, r2
 8000e04:	eb65 0203 	sbc.w	r2, r5, r3
 8000e08:	2001      	movs	r0, #1
 8000e0a:	4617      	mov	r7, r2
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d0e2      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	e9c6 4700 	strd	r4, r7, [r6]
 8000e14:	e7df      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e16:	b902      	cbnz	r2, 8000e1a <__udivmoddi4+0xe6>
 8000e18:	deff      	udf	#255	; 0xff
 8000e1a:	fab2 f382 	clz	r3, r2
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f040 8090 	bne.w	8000f44 <__udivmoddi4+0x210>
 8000e24:	1a8a      	subs	r2, r1, r2
 8000e26:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e2a:	fa1f fe8c 	uxth.w	lr, ip
 8000e2e:	2101      	movs	r1, #1
 8000e30:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e34:	fb07 2015 	mls	r0, r7, r5, r2
 8000e38:	0c22      	lsrs	r2, r4, #16
 8000e3a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e3e:	fb0e f005 	mul.w	r0, lr, r5
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x124>
 8000e46:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x122>
 8000e50:	4290      	cmp	r0, r2
 8000e52:	f200 80cb 	bhi.w	8000fec <__udivmoddi4+0x2b8>
 8000e56:	4645      	mov	r5, r8
 8000e58:	1a12      	subs	r2, r2, r0
 8000e5a:	b2a4      	uxth	r4, r4
 8000e5c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e60:	fb07 2210 	mls	r2, r7, r0, r2
 8000e64:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e68:	fb0e fe00 	mul.w	lr, lr, r0
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x14e>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x14c>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	f200 80bb 	bhi.w	8000ff6 <__udivmoddi4+0x2c2>
 8000e80:	4610      	mov	r0, r2
 8000e82:	eba4 040e 	sub.w	r4, r4, lr
 8000e86:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e8a:	e79f      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e8c:	f1c1 0720 	rsb	r7, r1, #32
 8000e90:	408b      	lsls	r3, r1
 8000e92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e9a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000ea2:	40fd      	lsrs	r5, r7
 8000ea4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea8:	4323      	orrs	r3, r4
 8000eaa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eae:	fa1f fe8c 	uxth.w	lr, ip
 8000eb2:	fb09 5518 	mls	r5, r9, r8, r5
 8000eb6:	0c1c      	lsrs	r4, r3, #16
 8000eb8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ebc:	fb08 f50e 	mul.w	r5, r8, lr
 8000ec0:	42a5      	cmp	r5, r4
 8000ec2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eca:	d90b      	bls.n	8000ee4 <__udivmoddi4+0x1b0>
 8000ecc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ed4:	f080 8088 	bcs.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	f240 8085 	bls.w	8000fe8 <__udivmoddi4+0x2b4>
 8000ede:	f1a8 0802 	sub.w	r8, r8, #2
 8000ee2:	4464      	add	r4, ip
 8000ee4:	1b64      	subs	r4, r4, r5
 8000ee6:	b29d      	uxth	r5, r3
 8000ee8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eec:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ef4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ef8:	45a6      	cmp	lr, r4
 8000efa:	d908      	bls.n	8000f0e <__udivmoddi4+0x1da>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f04:	d26c      	bcs.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f06:	45a6      	cmp	lr, r4
 8000f08:	d96a      	bls.n	8000fe0 <__udivmoddi4+0x2ac>
 8000f0a:	3b02      	subs	r3, #2
 8000f0c:	4464      	add	r4, ip
 8000f0e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f12:	fba3 9502 	umull	r9, r5, r3, r2
 8000f16:	eba4 040e 	sub.w	r4, r4, lr
 8000f1a:	42ac      	cmp	r4, r5
 8000f1c:	46c8      	mov	r8, r9
 8000f1e:	46ae      	mov	lr, r5
 8000f20:	d356      	bcc.n	8000fd0 <__udivmoddi4+0x29c>
 8000f22:	d053      	beq.n	8000fcc <__udivmoddi4+0x298>
 8000f24:	b156      	cbz	r6, 8000f3c <__udivmoddi4+0x208>
 8000f26:	ebb0 0208 	subs.w	r2, r0, r8
 8000f2a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f2e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f32:	40ca      	lsrs	r2, r1
 8000f34:	40cc      	lsrs	r4, r1
 8000f36:	4317      	orrs	r7, r2
 8000f38:	e9c6 7400 	strd	r7, r4, [r6]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	2100      	movs	r1, #0
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	f1c3 0120 	rsb	r1, r3, #32
 8000f48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f4c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f50:	fa25 f101 	lsr.w	r1, r5, r1
 8000f54:	409d      	lsls	r5, r3
 8000f56:	432a      	orrs	r2, r5
 8000f58:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f5c:	fa1f fe8c 	uxth.w	lr, ip
 8000f60:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f64:	fb07 1510 	mls	r5, r7, r0, r1
 8000f68:	0c11      	lsrs	r1, r2, #16
 8000f6a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f6e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f72:	428d      	cmp	r5, r1
 8000f74:	fa04 f403 	lsl.w	r4, r4, r3
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0x258>
 8000f7a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f7e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f82:	d22f      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f84:	428d      	cmp	r5, r1
 8000f86:	d92d      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000f88:	3802      	subs	r0, #2
 8000f8a:	4461      	add	r1, ip
 8000f8c:	1b49      	subs	r1, r1, r5
 8000f8e:	b292      	uxth	r2, r2
 8000f90:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f94:	fb07 1115 	mls	r1, r7, r5, r1
 8000f98:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f9c:	fb05 f10e 	mul.w	r1, r5, lr
 8000fa0:	4291      	cmp	r1, r2
 8000fa2:	d908      	bls.n	8000fb6 <__udivmoddi4+0x282>
 8000fa4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fa8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fac:	d216      	bcs.n	8000fdc <__udivmoddi4+0x2a8>
 8000fae:	4291      	cmp	r1, r2
 8000fb0:	d914      	bls.n	8000fdc <__udivmoddi4+0x2a8>
 8000fb2:	3d02      	subs	r5, #2
 8000fb4:	4462      	add	r2, ip
 8000fb6:	1a52      	subs	r2, r2, r1
 8000fb8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fbc:	e738      	b.n	8000e30 <__udivmoddi4+0xfc>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	4630      	mov	r0, r6
 8000fc2:	e708      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	e6e6      	b.n	8000d96 <__udivmoddi4+0x62>
 8000fc8:	4610      	mov	r0, r2
 8000fca:	e6fb      	b.n	8000dc4 <__udivmoddi4+0x90>
 8000fcc:	4548      	cmp	r0, r9
 8000fce:	d2a9      	bcs.n	8000f24 <__udivmoddi4+0x1f0>
 8000fd0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fd4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	e7a3      	b.n	8000f24 <__udivmoddi4+0x1f0>
 8000fdc:	4645      	mov	r5, r8
 8000fde:	e7ea      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000fe0:	462b      	mov	r3, r5
 8000fe2:	e794      	b.n	8000f0e <__udivmoddi4+0x1da>
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	e7d1      	b.n	8000f8c <__udivmoddi4+0x258>
 8000fe8:	46d0      	mov	r8, sl
 8000fea:	e77b      	b.n	8000ee4 <__udivmoddi4+0x1b0>
 8000fec:	3d02      	subs	r5, #2
 8000fee:	4462      	add	r2, ip
 8000ff0:	e732      	b.n	8000e58 <__udivmoddi4+0x124>
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e70a      	b.n	8000e0c <__udivmoddi4+0xd8>
 8000ff6:	4464      	add	r4, ip
 8000ff8:	3802      	subs	r0, #2
 8000ffa:	e742      	b.n	8000e82 <__udivmoddi4+0x14e>

08000ffc <__aeabi_idiv0>:
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop

08001000 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001000:	480d      	ldr	r0, [pc, #52]	; (8001038 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001002:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001004:	f00a fbfc 	bl	800b800 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <LoopForever+0x6>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	; (8001040 <LoopForever+0xa>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <LoopForever+0xe>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	; (800104c <LoopForever+0x16>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f013 f891 	bl	8014154 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001032:	f011 fe9d 	bl	8012d70 <main>

08001036 <LoopForever>:

LoopForever:
    b LoopForever
 8001036:	e7fe      	b.n	8001036 <LoopForever>
  ldr   r0, =_estack
 8001038:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	200003c8 	.word	0x200003c8
  ldr r2, =_sidata
 8001044:	08022ff4 	.word	0x08022ff4
  ldr r2, =_sbss
 8001048:	20000400 	.word	0x20000400
  ldr r4, =_ebss
 800104c:	20008a10 	.word	0x20008a10

08001050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_2_IRQHandler>

08001052 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b082      	sub	sp, #8
 8001056:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001058:	2300      	movs	r3, #0
 800105a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f939 	bl	80012d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001062:	200f      	movs	r0, #15
 8001064:	f000 f80e 	bl	8001084 <HAL_InitTick>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	e001      	b.n	8001078 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001074:	f00a fa7a 	bl	800b56c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001078:	79fb      	ldrb	r3, [r7, #7]

}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001090:	4b16      	ldr	r3, [pc, #88]	; (80010ec <HAL_InitTick+0x68>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d022      	beq.n	80010de <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001098:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <HAL_InitTick+0x6c>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	4b13      	ldr	r3, [pc, #76]	; (80010ec <HAL_InitTick+0x68>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80010a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f944 	bl	800133a <HAL_SYSTICK_Config>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d10f      	bne.n	80010d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2b0f      	cmp	r3, #15
 80010bc:	d809      	bhi.n	80010d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010be:	2200      	movs	r2, #0
 80010c0:	6879      	ldr	r1, [r7, #4]
 80010c2:	f04f 30ff 	mov.w	r0, #4294967295
 80010c6:	f000 f910 	bl	80012ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ca:	4a0a      	ldr	r2, [pc, #40]	; (80010f4 <HAL_InitTick+0x70>)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	e007      	b.n	80010e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
 80010d4:	73fb      	strb	r3, [r7, #15]
 80010d6:	e004      	b.n	80010e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	73fb      	strb	r3, [r7, #15]
 80010dc:	e001      	b.n	80010e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80010e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3710      	adds	r7, #16
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000004 	.word	0x20000004
 80010f0:	2000000c 	.word	0x2000000c
 80010f4:	20000000 	.word	0x20000000

080010f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <HAL_IncTick+0x1c>)
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b05      	ldr	r3, [pc, #20]	; (8001118 <HAL_IncTick+0x20>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4413      	add	r3, r2
 8001106:	4a03      	ldr	r2, [pc, #12]	; (8001114 <HAL_IncTick+0x1c>)
 8001108:	6013      	str	r3, [r2, #0]
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr
 8001114:	2000041c 	.word	0x2000041c
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return uwTick;
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_GetTick+0x14>)
 8001122:	681b      	ldr	r3, [r3, #0]
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	2000041c 	.word	0x2000041c

08001134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001150:	4013      	ands	r3, r2
 8001152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800115c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001166:	4a04      	ldr	r2, [pc, #16]	; (8001178 <__NVIC_SetPriorityGrouping+0x44>)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	60d3      	str	r3, [r2, #12]
}
 800116c:	bf00      	nop
 800116e:	3714      	adds	r7, #20
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <__NVIC_GetPriorityGrouping+0x18>)
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	f003 0307 	and.w	r3, r3, #7
}
 800118a:	4618      	mov	r0, r3
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	e000ed00 	.word	0xe000ed00

08001198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	db0b      	blt.n	80011c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	f003 021f 	and.w	r2, r3, #31
 80011b0:	4907      	ldr	r1, [pc, #28]	; (80011d0 <__NVIC_EnableIRQ+0x38>)
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	095b      	lsrs	r3, r3, #5
 80011b8:	2001      	movs	r0, #1
 80011ba:	fa00 f202 	lsl.w	r2, r0, r2
 80011be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000e100 	.word	0xe000e100

080011d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	6039      	str	r1, [r7, #0]
 80011de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db0a      	blt.n	80011fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	490c      	ldr	r1, [pc, #48]	; (8001220 <__NVIC_SetPriority+0x4c>)
 80011ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f2:	0112      	lsls	r2, r2, #4
 80011f4:	b2d2      	uxtb	r2, r2
 80011f6:	440b      	add	r3, r1
 80011f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011fc:	e00a      	b.n	8001214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	4908      	ldr	r1, [pc, #32]	; (8001224 <__NVIC_SetPriority+0x50>)
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	3b04      	subs	r3, #4
 800120c:	0112      	lsls	r2, r2, #4
 800120e:	b2d2      	uxtb	r2, r2
 8001210:	440b      	add	r3, r1
 8001212:	761a      	strb	r2, [r3, #24]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	e000e100 	.word	0xe000e100
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001228:	b480      	push	{r7}
 800122a:	b089      	sub	sp, #36	; 0x24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2b04      	cmp	r3, #4
 8001244:	bf28      	it	cs
 8001246:	2304      	movcs	r3, #4
 8001248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	3304      	adds	r3, #4
 800124e:	2b06      	cmp	r3, #6
 8001250:	d902      	bls.n	8001258 <NVIC_EncodePriority+0x30>
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3b03      	subs	r3, #3
 8001256:	e000      	b.n	800125a <NVIC_EncodePriority+0x32>
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	f04f 32ff 	mov.w	r2, #4294967295
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43da      	mvns	r2, r3
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	401a      	ands	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001270:	f04f 31ff 	mov.w	r1, #4294967295
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	fa01 f303 	lsl.w	r3, r1, r3
 800127a:	43d9      	mvns	r1, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	4313      	orrs	r3, r2
         );
}
 8001282:	4618      	mov	r0, r3
 8001284:	3724      	adds	r7, #36	; 0x24
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
	...

08001290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a0:	d301      	bcc.n	80012a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a2:	2301      	movs	r3, #1
 80012a4:	e00f      	b.n	80012c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a6:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <SysTick_Config+0x40>)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ae:	210f      	movs	r1, #15
 80012b0:	f04f 30ff 	mov.w	r0, #4294967295
 80012b4:	f7ff ff8e 	bl	80011d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b8:	4b05      	ldr	r3, [pc, #20]	; (80012d0 <SysTick_Config+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012be:	4b04      	ldr	r3, [pc, #16]	; (80012d0 <SysTick_Config+0x40>)
 80012c0:	2207      	movs	r2, #7
 80012c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c4:	2300      	movs	r3, #0
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	e000e010 	.word	0xe000e010

080012d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff ff29 	bl	8001134 <__NVIC_SetPriorityGrouping>
}
 80012e2:	bf00      	nop
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b086      	sub	sp, #24
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	60b9      	str	r1, [r7, #8]
 80012f4:	607a      	str	r2, [r7, #4]
 80012f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012f8:	f7ff ff40 	bl	800117c <__NVIC_GetPriorityGrouping>
 80012fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff ff90 	bl	8001228 <NVIC_EncodePriority>
 8001308:	4602      	mov	r2, r0
 800130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5f 	bl	80011d4 <__NVIC_SetPriority>
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff33 	bl	8001198 <__NVIC_EnableIRQ>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffa4 	bl	8001290 <SysTick_Config>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001352:	b580      	push	{r7, lr}
 8001354:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001356:	f00a f89d 	bl	800b494 <HAL_SYSTICK_Callback>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d101      	bne.n	8001372 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e08d      	b.n	800148e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	461a      	mov	r2, r3
 8001378:	4b47      	ldr	r3, [pc, #284]	; (8001498 <HAL_DMA_Init+0x138>)
 800137a:	429a      	cmp	r2, r3
 800137c:	d80f      	bhi.n	800139e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	4b45      	ldr	r3, [pc, #276]	; (800149c <HAL_DMA_Init+0x13c>)
 8001386:	4413      	add	r3, r2
 8001388:	4a45      	ldr	r2, [pc, #276]	; (80014a0 <HAL_DMA_Init+0x140>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	009a      	lsls	r2, r3, #2
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a42      	ldr	r2, [pc, #264]	; (80014a4 <HAL_DMA_Init+0x144>)
 800139a:	641a      	str	r2, [r3, #64]	; 0x40
 800139c:	e00e      	b.n	80013bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	4b40      	ldr	r3, [pc, #256]	; (80014a8 <HAL_DMA_Init+0x148>)
 80013a6:	4413      	add	r3, r2
 80013a8:	4a3d      	ldr	r2, [pc, #244]	; (80014a0 <HAL_DMA_Init+0x140>)
 80013aa:	fba2 2303 	umull	r2, r3, r2, r3
 80013ae:	091b      	lsrs	r3, r3, #4
 80013b0:	009a      	lsls	r2, r3, #2
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a3c      	ldr	r2, [pc, #240]	; (80014ac <HAL_DMA_Init+0x14c>)
 80013ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2202      	movs	r2, #2
 80013c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80013e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a1b      	ldr	r3, [r3, #32]
 80013fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001400:	68fa      	ldr	r2, [r7, #12]
 8001402:	4313      	orrs	r3, r2
 8001404:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 fa84 	bl	800191c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800141c:	d102      	bne.n	8001424 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142c:	b2d2      	uxtb	r2, r2
 800142e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001438:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d010      	beq.n	8001464 <HAL_DMA_Init+0x104>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b04      	cmp	r3, #4
 8001448:	d80c      	bhi.n	8001464 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f000 faa4 	bl	8001998 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	e008      	b.n	8001476 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2200      	movs	r2, #0
 8001474:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2200      	movs	r2, #0
 8001488:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40020407 	.word	0x40020407
 800149c:	bffdfff8 	.word	0xbffdfff8
 80014a0:	cccccccd 	.word	0xcccccccd
 80014a4:	40020000 	.word	0x40020000
 80014a8:	bffdfbf8 	.word	0xbffdfbf8
 80014ac:	40020400 	.word	0x40020400

080014b0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	60b9      	str	r1, [r7, #8]
 80014ba:	607a      	str	r2, [r7, #4]
 80014bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d101      	bne.n	80014d0 <HAL_DMA_Start_IT+0x20>
 80014cc:	2302      	movs	r3, #2
 80014ce:	e066      	b.n	800159e <HAL_DMA_Start_IT+0xee>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d155      	bne.n	8001590 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	2202      	movs	r2, #2
 80014e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	2200      	movs	r2, #0
 80014f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 0201 	bic.w	r2, r2, #1
 8001500:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	68b9      	ldr	r1, [r7, #8]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 f9c9 	bl	80018a0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	2b00      	cmp	r3, #0
 8001514:	d008      	beq.n	8001528 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f042 020e 	orr.w	r2, r2, #14
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	e00f      	b.n	8001548 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 0204 	bic.w	r2, r2, #4
 8001536:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 020a 	orr.w	r2, r2, #10
 8001546:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d007      	beq.n	8001566 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001564:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001578:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800157c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f042 0201 	orr.w	r2, r2, #1
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	e005      	b.n	800159c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001598:	2302      	movs	r3, #2
 800159a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800159c:	7dfb      	ldrb	r3, [r7, #23]
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ae:	2300      	movs	r3, #0
 80015b0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	2b02      	cmp	r3, #2
 80015bc:	d005      	beq.n	80015ca <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2204      	movs	r2, #4
 80015c2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e037      	b.n	800163a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 020e 	bic.w	r2, r2, #14
 80015d8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015e8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0201 	bic.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fe:	f003 021f 	and.w	r2, r3, #31
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	2101      	movs	r1, #1
 8001608:	fa01 f202 	lsl.w	r2, r1, r2
 800160c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	687a      	ldr	r2, [r7, #4]
 8001614:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001616:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161c:	2b00      	cmp	r3, #0
 800161e:	d00c      	beq.n	800163a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800162e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001638:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2201      	movs	r2, #1
 800163e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800164a:	7bfb      	ldrb	r3, [r7, #15]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800166a:	b2db      	uxtb	r3, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d00d      	beq.n	800168c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2204      	movs	r2, #4
 8001674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	73fb      	strb	r3, [r7, #15]
 800168a:	e047      	b.n	800171c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 020e 	bic.w	r2, r2, #14
 800169a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	f003 021f 	and.w	r2, r3, #31
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	2101      	movs	r1, #1
 80016ca:	fa01 f202 	lsl.w	r2, r1, r2
 80016ce:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00c      	beq.n	80016fc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	4798      	blx	r3
    }
  }
  return status;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b084      	sub	sp, #16
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f003 031f 	and.w	r3, r3, #31
 8001746:	2204      	movs	r2, #4
 8001748:	409a      	lsls	r2, r3
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	4013      	ands	r3, r2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d026      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x7a>
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f003 0304 	and.w	r3, r3, #4
 8001758:	2b00      	cmp	r3, #0
 800175a:	d021      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0320 	and.w	r3, r3, #32
 8001766:	2b00      	cmp	r3, #0
 8001768:	d107      	bne.n	800177a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f022 0204 	bic.w	r2, r2, #4
 8001778:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177e:	f003 021f 	and.w	r2, r3, #31
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001786:	2104      	movs	r1, #4
 8001788:	fa01 f202 	lsl.w	r2, r1, r2
 800178c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	2b00      	cmp	r3, #0
 8001794:	d071      	beq.n	800187a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800179e:	e06c      	b.n	800187a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	f003 031f 	and.w	r3, r3, #31
 80017a8:	2202      	movs	r2, #2
 80017aa:	409a      	lsls	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4013      	ands	r3, r2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d02e      	beq.n	8001812 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d029      	beq.n	8001812 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0320 	and.w	r3, r3, #32
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d10b      	bne.n	80017e4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f022 020a 	bic.w	r2, r2, #10
 80017da:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e8:	f003 021f 	and.w	r2, r3, #31
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	2102      	movs	r1, #2
 80017f2:	fa01 f202 	lsl.w	r2, r1, r2
 80017f6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001804:	2b00      	cmp	r3, #0
 8001806:	d038      	beq.n	800187a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001810:	e033      	b.n	800187a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f003 031f 	and.w	r3, r3, #31
 800181a:	2208      	movs	r2, #8
 800181c:	409a      	lsls	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	4013      	ands	r3, r2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d02a      	beq.n	800187c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001826:	68bb      	ldr	r3, [r7, #8]
 8001828:	f003 0308 	and.w	r3, r3, #8
 800182c:	2b00      	cmp	r3, #0
 800182e:	d025      	beq.n	800187c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 020e 	bic.w	r2, r2, #14
 800183e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001844:	f003 021f 	and.w	r2, r3, #31
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	2101      	movs	r1, #1
 800184e:	fa01 f202 	lsl.w	r2, r1, r2
 8001852:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800186e:	2b00      	cmp	r3, #0
 8001870:	d004      	beq.n	800187c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800187a:	bf00      	nop
 800187c:	bf00      	nop
}
 800187e:	3710      	adds	r7, #16
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001892:	b2db      	uxtb	r3, r3
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
 80018ac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018b6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d004      	beq.n	80018ca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018c8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f003 021f 	and.w	r2, r3, #31
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	2101      	movs	r1, #1
 80018d8:	fa01 f202 	lsl.w	r2, r1, r2
 80018dc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d108      	bne.n	8001900 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68ba      	ldr	r2, [r7, #8]
 80018fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018fe:	e007      	b.n	8001910 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	60da      	str	r2, [r3, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b16      	ldr	r3, [pc, #88]	; (8001984 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800192c:	429a      	cmp	r2, r3
 800192e:	d802      	bhi.n	8001936 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001930:	4b15      	ldr	r3, [pc, #84]	; (8001988 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	e001      	b.n	800193a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001936:	4b15      	ldr	r3, [pc, #84]	; (800198c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001938:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b2db      	uxtb	r3, r3
 8001944:	3b08      	subs	r3, #8
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001948:	fba2 2303 	umull	r2, r3, r2, r3
 800194c:	091b      	lsrs	r3, r3, #4
 800194e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	009a      	lsls	r2, r3, #2
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4413      	add	r3, r2
 800195c:	461a      	mov	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001966:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 031f 	and.w	r3, r3, #31
 800196e:	2201      	movs	r2, #1
 8001970:	409a      	lsls	r2, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001976:	bf00      	nop
 8001978:	371c      	adds	r7, #28
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40020407 	.word	0x40020407
 8001988:	40020800 	.word	0x40020800
 800198c:	40020820 	.word	0x40020820
 8001990:	cccccccd 	.word	0xcccccccd
 8001994:	40020880 	.word	0x40020880

08001998 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	461a      	mov	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a08      	ldr	r2, [pc, #32]	; (80019dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019ba:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	2201      	movs	r2, #1
 80019c6:	409a      	lsls	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	1000823f 	.word	0x1000823f
 80019dc:	40020940 	.word	0x40020940

080019e0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e147      	b.n	8001c82 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f00e fe2a 	bl	8010660 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699a      	ldr	r2, [r3, #24]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0210 	bic.w	r2, r2, #16
 8001a1a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a1c:	f7ff fb7e 	bl	800111c <HAL_GetTick>
 8001a20:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a22:	e012      	b.n	8001a4a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a24:	f7ff fb7a 	bl	800111c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b0a      	cmp	r3, #10
 8001a30:	d90b      	bls.n	8001a4a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a36:	f043 0201 	orr.w	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2203      	movs	r2, #3
 8001a42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e11b      	b.n	8001c82 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	2b08      	cmp	r3, #8
 8001a56:	d0e5      	beq.n	8001a24 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a68:	f7ff fb58 	bl	800111c <HAL_GetTick>
 8001a6c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a6e:	e012      	b.n	8001a96 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001a70:	f7ff fb54 	bl	800111c <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b0a      	cmp	r3, #10
 8001a7c:	d90b      	bls.n	8001a96 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	f043 0201 	orr.w	r2, r3, #1
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0f5      	b.n	8001c82 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0e5      	beq.n	8001a70 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699a      	ldr	r2, [r3, #24]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f042 0202 	orr.w	r2, r2, #2
 8001ab2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a74      	ldr	r2, [pc, #464]	; (8001c8c <HAL_FDCAN_Init+0x2ac>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d103      	bne.n	8001ac6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001abe:	4a74      	ldr	r2, [pc, #464]	; (8001c90 <HAL_FDCAN_Init+0x2b0>)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7c1b      	ldrb	r3, [r3, #16]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d108      	bne.n	8001ae0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699a      	ldr	r2, [r3, #24]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001adc:	619a      	str	r2, [r3, #24]
 8001ade:	e007      	b.n	8001af0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001aee:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	7c5b      	ldrb	r3, [r3, #17]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d108      	bne.n	8001b0a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699a      	ldr	r2, [r3, #24]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b06:	619a      	str	r2, [r3, #24]
 8001b08:	e007      	b.n	8001b1a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	699a      	ldr	r2, [r3, #24]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001b18:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	7c9b      	ldrb	r3, [r3, #18]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d108      	bne.n	8001b34 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699a      	ldr	r2, [r3, #24]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001b30:	619a      	str	r2, [r3, #24]
 8001b32:	e007      	b.n	8001b44 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	699a      	ldr	r2, [r3, #24]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001b42:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	430a      	orrs	r2, r1
 8001b58:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699a      	ldr	r2, [r3, #24]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001b68:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	691a      	ldr	r2, [r3, #16]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0210 	bic.w	r2, r2, #16
 8001b78:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d108      	bne.n	8001b94 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	699a      	ldr	r2, [r3, #24]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0204 	orr.w	r2, r2, #4
 8001b90:	619a      	str	r2, [r3, #24]
 8001b92:	e02c      	b.n	8001bee <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d028      	beq.n	8001bee <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d01c      	beq.n	8001bde <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699a      	ldr	r2, [r3, #24]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bb2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f042 0210 	orr.w	r2, r2, #16
 8001bc2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	d110      	bne.n	8001bee <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0220 	orr.w	r2, r2, #32
 8001bda:	619a      	str	r2, [r3, #24]
 8001bdc:	e007      	b.n	8001bee <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0220 	orr.w	r2, r2, #32
 8001bec:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69db      	ldr	r3, [r3, #28]
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001bfe:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001c06:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001c16:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001c18:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c22:	d115      	bne.n	8001c50 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c28:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c32:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001c3c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	3b01      	subs	r3, #1
 8001c46:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001c4c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001c4e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	430a      	orrs	r2, r1
 8001c62:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 fdac 	bl	80027c4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40006400 	.word	0x40006400
 8001c90:	40006500 	.word	0x40006500

08001c94 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b087      	sub	sp, #28
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001ca4:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d002      	beq.n	8001cb2 <HAL_FDCAN_ConfigFilter+0x1e>
 8001cac:	7dfb      	ldrb	r3, [r7, #23]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d13d      	bne.n	8001d2e <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d119      	bne.n	8001cee <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001cc6:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8001cce:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	e01d      	b.n	8001d2a <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	075a      	lsls	r2, r3, #29
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	079a      	lsls	r2, r3, #30
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	3304      	adds	r3, #4
 8001d22:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e006      	b.n	8001d3c <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d32:	f043 0202 	orr.w	r2, r3, #2
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
  }
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	371c      	adds	r7, #28
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	60f8      	str	r0, [r7, #12]
 8001d50:	60b9      	str	r1, [r7, #8]
 8001d52:	607a      	str	r2, [r7, #4]
 8001d54:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d116      	bne.n	8001d90 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d6a:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	011a      	lsls	r2, r3, #4
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	431a      	orrs	r2, r3
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	431a      	orrs	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	e006      	b.n	8001d9e <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d94:	f043 0204 	orr.w	r2, r3, #4
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
  }
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_FDCAN_ConfigTxDelayCompensation>:
  *         This parameter must be a number between 0x00 and 0x7F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan, uint32_t TdcOffset,
                                                      uint32_t TdcFilter)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b085      	sub	sp, #20
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	60f8      	str	r0, [r7, #12]
 8001db2:	60b9      	str	r1, [r7, #8]
 8001db4:	607a      	str	r2, [r7, #4]
  /* Check function parameters */
  assert_param(IS_FDCAN_MAX_VALUE(TdcOffset, 0x7FU));
  assert_param(IS_FDCAN_MAX_VALUE(TdcFilter, 0x7FU));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d108      	bne.n	8001dd4 <HAL_FDCAN_ConfigTxDelayCompensation+0x2a>
  {
    /* Configure TDC offset and filter window */
    hfdcan->Instance->TDCR = ((TdcFilter << FDCAN_TDCR_TDCF_Pos) | (TdcOffset << FDCAN_TDCR_TDCO_Pos));
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	0219      	lsls	r1, r3, #8
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	430a      	orrs	r2, r1
 8001dce:	649a      	str	r2, [r3, #72]	; 0x48

    /* Return function status */
    return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e006      	b.n	8001de2 <HAL_FDCAN_ConfigTxDelayCompensation+0x38>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dd8:	f043 0204 	orr.w	r2, r3, #4
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
  }
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d109      	bne.n	8001e16 <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001e10:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8001e12:	2300      	movs	r3, #0
 8001e14:	e006      	b.n	8001e24 <HAL_FDCAN_EnableTxDelayCompensation+0x36>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e1a:	f043 0204 	orr.w	r2, r3, #4
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
  }
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d110      	bne.n	8001e66 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0201 	bic.w	r2, r2, #1
 8001e5a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e006      	b.n	8001e74 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e6a:	f043 0204 	orr.w	r2, r3, #4
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
  }
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d156      	bne.n	8001f46 <HAL_FDCAN_Stop+0xc6>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	699a      	ldr	r2, [r3, #24]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ea8:	e011      	b.n	8001ece <HAL_FDCAN_Stop+0x4e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2b0a      	cmp	r3, #10
 8001eae:	d90b      	bls.n	8001ec8 <HAL_FDCAN_Stop+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e045      	b.n	8001f54 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	3301      	adds	r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0e6      	beq.n	8001eaa <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0210 	bic.w	r2, r2, #16
 8001eee:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001ef0:	e011      	b.n	8001f16 <HAL_FDCAN_Stop+0x96>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_VALUE)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2b0a      	cmp	r3, #10
 8001ef6:	d90b      	bls.n	8001f10 <HAL_FDCAN_Stop+0x90>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001efc:	f043 0201 	orr.w	r2, r3, #1
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2203      	movs	r2, #3
 8001f08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e021      	b.n	8001f54 <HAL_FDCAN_Stop+0xd4>
      }

      /* Increment counter */
      Counter++;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	3301      	adds	r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0308 	and.w	r3, r3, #8
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d0e6      	beq.n	8001ef2 <HAL_FDCAN_Stop+0x72>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	699a      	ldr	r2, [r3, #24]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0202 	orr.w	r2, r2, #2
 8001f32:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	659a      	str	r2, [r3, #88]	; 0x58

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Return function status */
    return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e006      	b.n	8001f54 <HAL_FDCAN_Stop+0xd4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4a:	f043 0208 	orr.w	r2, r3, #8
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
  }
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b086      	sub	sp, #24
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d12c      	bne.n	8001fd2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001f80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d007      	beq.n	8001f98 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e023      	b.n	8001fe0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001fa0:	0c1b      	lsrs	r3, r3, #16
 8001fa2:	f003 0303 	and.w	r3, r3, #3
 8001fa6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68b9      	ldr	r1, [r7, #8]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 fc74 	bl	800289c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2101      	movs	r1, #1
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	409a      	lsls	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e006      	b.n	8001fe0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fd6:	f043 0208 	orr.w	r2, r3, #8
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
  }
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b08b      	sub	sp, #44	; 0x2c
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
 8001ff4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002000:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8002002:	7efb      	ldrb	r3, [r7, #27]
 8002004:	2b02      	cmp	r3, #2
 8002006:	f040 80e8 	bne.w	80021da <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	2b40      	cmp	r3, #64	; 0x40
 800200e:	d137      	bne.n	8002080 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	f003 030f 	and.w	r3, r3, #15
 800201c:	2b00      	cmp	r3, #0
 800201e:	d107      	bne.n	8002030 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002024:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0db      	b.n	80021e8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002038:	0e1b      	lsrs	r3, r3, #24
 800203a:	f003 0301 	and.w	r3, r3, #1
 800203e:	2b01      	cmp	r3, #1
 8002040:	d10a      	bne.n	8002058 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800204a:	0a5b      	lsrs	r3, r3, #9
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b01      	cmp	r3, #1
 8002052:	d101      	bne.n	8002058 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002054:	2301      	movs	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002060:	0a1b      	lsrs	r3, r3, #8
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	4413      	add	r3, r2
 800206a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	440b      	add	r3, r1
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
 800207e:	e036      	b.n	80020ee <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002088:	f003 030f 	and.w	r3, r3, #15
 800208c:	2b00      	cmp	r3, #0
 800208e:	d107      	bne.n	80020a0 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002094:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e0a3      	b.n	80021e8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a8:	0e1b      	lsrs	r3, r3, #24
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d10a      	bne.n	80020c8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80020c4:	2301      	movs	r3, #1
 80020c6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020d0:	0a1b      	lsrs	r3, r3, #8
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	69fa      	ldr	r2, [r7, #28]
 80020d8:	4413      	add	r3, r2
 80020da:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80020e0:	69fa      	ldr	r2, [r7, #28]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	440b      	add	r3, r1
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d107      	bne.n	8002112 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8002102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	0c9b      	lsrs	r3, r3, #18
 8002108:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	e005      	b.n	800211e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8002136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002138:	3304      	adds	r3, #4
 800213a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b29a      	uxth	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	0c1b      	lsrs	r3, r3, #16
 800214c:	f003 020f 	and.w	r2, r3, #15
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	0e1b      	lsrs	r3, r3, #24
 8002172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800217a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0fda      	lsrs	r2, r3, #31
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	3304      	adds	r3, #4
 8002188:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
 8002192:	e00a      	b.n	80021aa <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	441a      	add	r2, r3
 800219a:	6839      	ldr	r1, [r7, #0]
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	440b      	add	r3, r1
 80021a0:	7812      	ldrb	r2, [r2, #0]
 80021a2:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80021a4:	6a3b      	ldr	r3, [r7, #32]
 80021a6:	3301      	adds	r3, #1
 80021a8:	623b      	str	r3, [r7, #32]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	4a11      	ldr	r2, [pc, #68]	; (80021f4 <HAL_FDCAN_GetRxMessage+0x20c>)
 80021b0:	5cd3      	ldrb	r3, [r2, r3]
 80021b2:	461a      	mov	r2, r3
 80021b4:	6a3b      	ldr	r3, [r7, #32]
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d3ec      	bcc.n	8002194 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b40      	cmp	r3, #64	; 0x40
 80021be:	d105      	bne.n	80021cc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69fa      	ldr	r2, [r7, #28]
 80021c6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80021ca:	e004      	b.n	80021d6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	69fa      	ldr	r2, [r7, #28]
 80021d2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	e006      	b.n	80021e8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021de:	f043 0208 	orr.w	r2, r3, #8
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
  }
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	372c      	adds	r7, #44	; 0x2c
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	08016a40 	.word	0x08016a40

080021f8 <HAL_FDCAN_GetProtocolStatus>:
  * @param  ProtocolStatus pointer to an FDCAN_ProtocolStatusTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetProtocolStatus(const FDCAN_HandleTypeDef *hfdcan,
                                              FDCAN_ProtocolStatusTypeDef *ProtocolStatus)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t StatusReg;

  /* Read the protocol status register */
  StatusReg = READ_REG(hfdcan->Instance->PSR);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	60fb      	str	r3, [r7, #12]

  /* Fill the protocol status structure */
  ProtocolStatus->LastErrorCode = (StatusReg & FDCAN_PSR_LEC);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f003 0207 	and.w	r2, r3, #7
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	601a      	str	r2, [r3, #0]
  ProtocolStatus->DataLastErrorCode = ((StatusReg & FDCAN_PSR_DLEC) >> FDCAN_PSR_DLEC_Pos);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	0a1b      	lsrs	r3, r3, #8
 8002218:	f003 0207 	and.w	r2, r3, #7
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	605a      	str	r2, [r3, #4]
  ProtocolStatus->Activity = (StatusReg & FDCAN_PSR_ACT);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	f003 0218 	and.w	r2, r3, #24
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	609a      	str	r2, [r3, #8]
  ProtocolStatus->ErrorPassive = ((StatusReg & FDCAN_PSR_EP) >> FDCAN_PSR_EP_Pos);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	095b      	lsrs	r3, r3, #5
 800222e:	f003 0201 	and.w	r2, r3, #1
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	60da      	str	r2, [r3, #12]
  ProtocolStatus->Warning = ((StatusReg & FDCAN_PSR_EW) >> FDCAN_PSR_EW_Pos);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	099b      	lsrs	r3, r3, #6
 800223a:	f003 0201 	and.w	r2, r3, #1
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	611a      	str	r2, [r3, #16]
  ProtocolStatus->BusOff = ((StatusReg & FDCAN_PSR_BO) >> FDCAN_PSR_BO_Pos);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	09db      	lsrs	r3, r3, #7
 8002246:	f003 0201 	and.w	r2, r3, #1
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	615a      	str	r2, [r3, #20]
  ProtocolStatus->RxESIflag = ((StatusReg & FDCAN_PSR_RESI) >> FDCAN_PSR_RESI_Pos);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	0adb      	lsrs	r3, r3, #11
 8002252:	f003 0201 	and.w	r2, r3, #1
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	619a      	str	r2, [r3, #24]
  ProtocolStatus->RxBRSflag = ((StatusReg & FDCAN_PSR_RBRS) >> FDCAN_PSR_RBRS_Pos);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	0b1b      	lsrs	r3, r3, #12
 800225e:	f003 0201 	and.w	r2, r3, #1
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	61da      	str	r2, [r3, #28]
  ProtocolStatus->RxFDFflag = ((StatusReg & FDCAN_PSR_REDL) >> FDCAN_PSR_REDL_Pos);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	0b5b      	lsrs	r3, r3, #13
 800226a:	f003 0201 	and.w	r2, r3, #1
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	621a      	str	r2, [r3, #32]
  ProtocolStatus->ProtocolException = ((StatusReg & FDCAN_PSR_PXE) >> FDCAN_PSR_PXE_Pos);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	0b9b      	lsrs	r3, r3, #14
 8002276:	f003 0201 	and.w	r2, r3, #1
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	625a      	str	r2, [r3, #36]	; 0x24
  ProtocolStatus->TDCvalue = ((StatusReg & FDCAN_PSR_TDCV) >> FDCAN_PSR_TDCV_Pos);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	0c1b      	lsrs	r3, r3, #16
 8002282:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <HAL_FDCAN_GetErrorCounters>:
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(const FDCAN_HandleTypeDef *hfdcan,
                                             FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a8:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	0a1b      	lsrs	r3, r3, #8
 80022b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	0bdb      	lsrs	r3, r3, #15
 80022c2:	f003 0201 	and.w	r2, r3, #1
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	0c1b      	lsrs	r3, r3, #16
 80022ce:	b2da      	uxtb	r2, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80022f8:	68fb      	ldr	r3, [r7, #12]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002306:	b480      	push	{r7}
 8002308:	b087      	sub	sp, #28
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002318:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800231a:	7dfb      	ldrb	r3, [r7, #23]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d003      	beq.n	8002328 <HAL_FDCAN_ActivateNotification+0x22>
 8002320:	7dfb      	ldrb	r3, [r7, #23]
 8002322:	2b02      	cmp	r3, #2
 8002324:	f040 80c8 	bne.w	80024b8 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232e:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d03b      	beq.n	80023bc <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d031      	beq.n	80023bc <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d027      	beq.n	80023bc <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d01d      	beq.n	80023bc <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	f003 0310 	and.w	r3, r3, #16
 8002390:	2b00      	cmp	r3, #0
 8002392:	d013      	beq.n	80023bc <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800239a:	2b00      	cmp	r3, #0
 800239c:	d004      	beq.n	80023a8 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d009      	beq.n	80023bc <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d00c      	beq.n	80023cc <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d107      	bne.n	80023cc <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f003 0301 	and.w	r3, r3, #1
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d13b      	bne.n	8002458 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d004      	beq.n	80023f4 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d131      	bne.n	8002458 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d004      	beq.n	8002408 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f003 0304 	and.w	r3, r3, #4
 8002404:	2b00      	cmp	r3, #0
 8002406:	d127      	bne.n	8002458 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d11d      	bne.n	8002458 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8002422:	2b00      	cmp	r3, #0
 8002424:	d004      	beq.n	8002430 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	f003 0310 	and.w	r3, r3, #16
 800242c:	2b00      	cmp	r3, #0
 800242e:	d113      	bne.n	8002458 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8002436:	2b00      	cmp	r3, #0
 8002438:	d004      	beq.n	8002444 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00c      	beq.n	8002468 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002454:	2b00      	cmp	r3, #0
 8002456:	d007      	beq.n	8002468 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0202 	orr.w	r2, r2, #2
 8002466:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	430a      	orrs	r2, r1
 8002482:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	430a      	orrs	r2, r1
 80024a0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e006      	b.n	80024c6 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024bc:	f043 0202 	orr.w	r2, r3, #2
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
  }
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	371c      	adds	r7, #28
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b08c      	sub	sp, #48	; 0x30
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80024e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ee:	4013      	ands	r3, r2
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f8:	f003 0307 	and.w	r3, r3, #7
 80024fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002504:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002506:	4013      	ands	r3, r2
 8002508:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002510:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800251c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251e:	4013      	ands	r3, r2
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002528:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800252c:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	6a3a      	ldr	r2, [r7, #32]
 8002536:	4013      	ands	r3, r2
 8002538:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002540:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002544:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	4013      	ands	r3, r2
 8002550:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002558:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002560:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00b      	beq.n	8002584 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002572:	2b00      	cmp	r3, #0
 8002574:	d006      	beq.n	8002584 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2240      	movs	r2, #64	; 0x40
 800257c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f916 	bl	80027b0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d019      	beq.n	80025c2 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d014      	beq.n	80025c2 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025a0:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	4013      	ands	r3, r2
 80025ae:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025b8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80025ba:	6939      	ldr	r1, [r7, #16]
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 f8d8 	bl	8002772 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80025c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ce:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80025d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8a2 	bl	800271c <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80025d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d007      	beq.n	80025ee <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80025e4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80025e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f00e f80d 	bl	8010608 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d007      	beq.n	8002604 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025fa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80025fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f897 	bl	8002732 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00c      	beq.n	8002628 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002614:	2b00      	cmp	r3, #0
 8002616:	d007      	beq.n	8002628 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002620:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f890 	bl	8002748 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800262e:	2b00      	cmp	r3, #0
 8002630:	d018      	beq.n	8002664 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002638:	2b00      	cmp	r3, #0
 800263a:	d013      	beq.n	8002664 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002644:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	4013      	ands	r3, r2
 8002652:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2280      	movs	r2, #128	; 0x80
 800265a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800265c:	68f9      	ldr	r1, [r7, #12]
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f87c 	bl	800275c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00c      	beq.n	8002688 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d007      	beq.n	8002688 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002680:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f000 f880 	bl	8002788 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00c      	beq.n	80026ac <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d007      	beq.n	80026ac <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026a4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f878 	bl	800279c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00f      	beq.n	80026d6 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026c8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ce:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d007      	beq.n	80026ec <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80026e4:	69f9      	ldr	r1, [r7, #28]
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f00d ff46 	bl	8010578 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80026ec:	6a3b      	ldr	r3, [r7, #32]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6a3a      	ldr	r2, [r7, #32]
 80026f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f00d ff42 	bl	8010598 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8002714:	bf00      	nop
 8002716:	3730      	adds	r7, #48	; 0x30
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8002732:	b480      	push	{r7}
 8002734:	b083      	sub	sp, #12
 8002736:	af00      	add	r7, sp, #0
 8002738:	6078      	str	r0, [r7, #4]
 800273a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
 800277a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800277c:	bf00      	nop
 800277e:	370c      	adds	r7, #12
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr

08002788 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80027cc:	4b30      	ldr	r3, [pc, #192]	; (8002890 <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 80027ce:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a2f      	ldr	r2, [pc, #188]	; (8002894 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d103      	bne.n	80027e2 <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80027e0:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2c      	ldr	r2, [pc, #176]	; (8002898 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d103      	bne.n	80027f4 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 80027f2:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002802:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800280a:	041a      	lsls	r2, r3, #16
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	430a      	orrs	r2, r1
 8002812:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f103 0270 	add.w	r2, r3, #112	; 0x70
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002828:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002830:	061a      	lsls	r2, r3, #24
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	e005      	b.n	8002876 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	3304      	adds	r3, #4
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	429a      	cmp	r2, r3
 8002880:	d3f3      	bcc.n	800286a <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8002882:	bf00      	nop
 8002884:	bf00      	nop
 8002886:	3714      	adds	r7, #20
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	4000a400 	.word	0x4000a400
 8002894:	40006800 	.word	0x40006800
 8002898:	40006c00 	.word	0x40006c00

0800289c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	607a      	str	r2, [r7, #4]
 80028a8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d10a      	bne.n	80028c8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80028ba:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	e00a      	b.n	80028de <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80028d0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80028d6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80028d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028dc:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80028e8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80028ee:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80028f4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	4613      	mov	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	440b      	add	r3, r1
 8002910:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	69fa      	ldr	r2, [r7, #28]
 8002916:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	3304      	adds	r3, #4
 800291c:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	3304      	adds	r3, #4
 8002928:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	e020      	b.n	8002972 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	3303      	adds	r3, #3
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	4413      	add	r3, r2
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	3302      	adds	r3, #2
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	440b      	add	r3, r1
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002948:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	3301      	adds	r3, #1
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	440b      	add	r3, r1
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8002956:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	440a      	add	r2, r1
 800295e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002960:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	3304      	adds	r3, #4
 800296a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	3304      	adds	r3, #4
 8002970:	617b      	str	r3, [r7, #20]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	4a06      	ldr	r2, [pc, #24]	; (8002990 <FDCAN_CopyMessageToRAM+0xf4>)
 8002978:	5cd3      	ldrb	r3, [r2, r3]
 800297a:	461a      	mov	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	4293      	cmp	r3, r2
 8002980:	d3d6      	bcc.n	8002930 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002982:	bf00      	nop
 8002984:	bf00      	nop
 8002986:	3724      	adds	r7, #36	; 0x24
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	08016a40 	.word	0x08016a40

08002994 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002994:	b480      	push	{r7}
 8002996:	b087      	sub	sp, #28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800299e:	2300      	movs	r3, #0
 80029a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029a2:	e15a      	b.n	8002c5a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	2101      	movs	r1, #1
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	4013      	ands	r3, r2
 80029b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f000 814c 	beq.w	8002c54 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0303 	and.w	r3, r3, #3
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d005      	beq.n	80029d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d130      	bne.n	8002a36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	2203      	movs	r2, #3
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	68da      	ldr	r2, [r3, #12]
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	693a      	ldr	r2, [r7, #16]
 8002a02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4013      	ands	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	091b      	lsrs	r3, r3, #4
 8002a20:	f003 0201 	and.w	r2, r3, #1
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	693a      	ldr	r2, [r7, #16]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	693a      	ldr	r2, [r7, #16]
 8002a34:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b03      	cmp	r3, #3
 8002a40:	d017      	beq.n	8002a72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	2203      	movs	r2, #3
 8002a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a52:	43db      	mvns	r3, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4013      	ands	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	689a      	ldr	r2, [r3, #8]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	693a      	ldr	r2, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d123      	bne.n	8002ac6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	08da      	lsrs	r2, r3, #3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3208      	adds	r2, #8
 8002a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	220f      	movs	r2, #15
 8002a96:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9a:	43db      	mvns	r3, r3
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	691a      	ldr	r2, [r3, #16]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	08da      	lsrs	r2, r3, #3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3208      	adds	r2, #8
 8002ac0:	6939      	ldr	r1, [r7, #16]
 8002ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	4013      	ands	r3, r2
 8002adc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f003 0203 	and.w	r2, r3, #3
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 80a6 	beq.w	8002c54 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b08:	4b5b      	ldr	r3, [pc, #364]	; (8002c78 <HAL_GPIO_Init+0x2e4>)
 8002b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b0c:	4a5a      	ldr	r2, [pc, #360]	; (8002c78 <HAL_GPIO_Init+0x2e4>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6613      	str	r3, [r2, #96]	; 0x60
 8002b14:	4b58      	ldr	r3, [pc, #352]	; (8002c78 <HAL_GPIO_Init+0x2e4>)
 8002b16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b18:	f003 0301 	and.w	r3, r3, #1
 8002b1c:	60bb      	str	r3, [r7, #8]
 8002b1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b20:	4a56      	ldr	r2, [pc, #344]	; (8002c7c <HAL_GPIO_Init+0x2e8>)
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	3302      	adds	r3, #2
 8002b28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	f003 0303 	and.w	r3, r3, #3
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	220f      	movs	r2, #15
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4013      	ands	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b4a:	d01f      	beq.n	8002b8c <HAL_GPIO_Init+0x1f8>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a4c      	ldr	r2, [pc, #304]	; (8002c80 <HAL_GPIO_Init+0x2ec>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d019      	beq.n	8002b88 <HAL_GPIO_Init+0x1f4>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a4b      	ldr	r2, [pc, #300]	; (8002c84 <HAL_GPIO_Init+0x2f0>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d013      	beq.n	8002b84 <HAL_GPIO_Init+0x1f0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a4a      	ldr	r2, [pc, #296]	; (8002c88 <HAL_GPIO_Init+0x2f4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00d      	beq.n	8002b80 <HAL_GPIO_Init+0x1ec>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a49      	ldr	r2, [pc, #292]	; (8002c8c <HAL_GPIO_Init+0x2f8>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d007      	beq.n	8002b7c <HAL_GPIO_Init+0x1e8>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a48      	ldr	r2, [pc, #288]	; (8002c90 <HAL_GPIO_Init+0x2fc>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d101      	bne.n	8002b78 <HAL_GPIO_Init+0x1e4>
 8002b74:	2305      	movs	r3, #5
 8002b76:	e00a      	b.n	8002b8e <HAL_GPIO_Init+0x1fa>
 8002b78:	2306      	movs	r3, #6
 8002b7a:	e008      	b.n	8002b8e <HAL_GPIO_Init+0x1fa>
 8002b7c:	2304      	movs	r3, #4
 8002b7e:	e006      	b.n	8002b8e <HAL_GPIO_Init+0x1fa>
 8002b80:	2303      	movs	r3, #3
 8002b82:	e004      	b.n	8002b8e <HAL_GPIO_Init+0x1fa>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e002      	b.n	8002b8e <HAL_GPIO_Init+0x1fa>
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e000      	b.n	8002b8e <HAL_GPIO_Init+0x1fa>
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	f002 0203 	and.w	r2, r2, #3
 8002b94:	0092      	lsls	r2, r2, #2
 8002b96:	4093      	lsls	r3, r2
 8002b98:	693a      	ldr	r2, [r7, #16]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b9e:	4937      	ldr	r1, [pc, #220]	; (8002c7c <HAL_GPIO_Init+0x2e8>)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	089b      	lsrs	r3, r3, #2
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bac:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <HAL_GPIO_Init+0x300>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bd0:	4a30      	ldr	r2, [pc, #192]	; (8002c94 <HAL_GPIO_Init+0x300>)
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002bd6:	4b2f      	ldr	r3, [pc, #188]	; (8002c94 <HAL_GPIO_Init+0x300>)
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	4013      	ands	r3, r2
 8002be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002bfa:	4a26      	ldr	r2, [pc, #152]	; (8002c94 <HAL_GPIO_Init+0x300>)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002c00:	4b24      	ldr	r3, [pc, #144]	; (8002c94 <HAL_GPIO_Init+0x300>)
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c24:	4a1b      	ldr	r2, [pc, #108]	; (8002c94 <HAL_GPIO_Init+0x300>)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c2a:	4b1a      	ldr	r3, [pc, #104]	; (8002c94 <HAL_GPIO_Init+0x300>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c4e:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <HAL_GPIO_Init+0x300>)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	3301      	adds	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	fa22 f303 	lsr.w	r3, r2, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f47f ae9d 	bne.w	80029a4 <HAL_GPIO_Init+0x10>
  }
}
 8002c6a:	bf00      	nop
 8002c6c:	bf00      	nop
 8002c6e:	371c      	adds	r7, #28
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	48000400 	.word	0x48000400
 8002c84:	48000800 	.word	0x48000800
 8002c88:	48000c00 	.word	0x48000c00
 8002c8c:	48001000 	.word	0x48001000
 8002c90:	48001400 	.word	0x48001400
 8002c94:	40010400 	.word	0x40010400

08002c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	691a      	ldr	r2, [r3, #16]
 8002ca8:	887b      	ldrh	r3, [r7, #2]
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d002      	beq.n	8002cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	73fb      	strb	r3, [r7, #15]
 8002cb4:	e001      	b.n	8002cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	807b      	strh	r3, [r7, #2]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cd8:	787b      	ldrb	r3, [r7, #1]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cde:	887a      	ldrh	r2, [r7, #2]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ce4:	e002      	b.n	8002cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002ce6:	887a      	ldrh	r2, [r7, #2]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	695b      	ldr	r3, [r3, #20]
 8002d08:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d0a:	887a      	ldrh	r2, [r7, #2]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	041a      	lsls	r2, r3, #16
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	43d9      	mvns	r1, r3
 8002d16:	887b      	ldrh	r3, [r7, #2]
 8002d18:	400b      	ands	r3, r1
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	619a      	str	r2, [r3, #24]
}
 8002d20:	bf00      	nop
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr

08002d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d42:	4a05      	ldr	r2, [pc, #20]	; (8002d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f806 	bl	8002d5c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40010400 	.word	0x40010400

08002d5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr

08002d72 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e08d      	b.n	8002ea0 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d106      	bne.n	8002d9e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f00e fc03 	bl	80115a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2224      	movs	r2, #36	; 0x24
 8002da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 0201 	bic.w	r2, r2, #1
 8002db4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685a      	ldr	r2, [r3, #4]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002dc2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689a      	ldr	r2, [r3, #8]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dd2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d107      	bne.n	8002dec <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	e006      	b.n	8002dfa <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002df8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d108      	bne.n	8002e14 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e10:	605a      	str	r2, [r3, #4]
 8002e12:	e007      	b.n	8002e24 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e22:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6812      	ldr	r2, [r2, #0]
 8002e2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e36:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e46:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	691a      	ldr	r2, [r3, #16]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	699b      	ldr	r3, [r3, #24]
 8002e58:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69d9      	ldr	r1, [r3, #28]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1a      	ldr	r2, [r3, #32]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f042 0201 	orr.w	r2, r2, #1
 8002e80:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2220      	movs	r2, #32
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3708      	adds	r7, #8
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b088      	sub	sp, #32
 8002eac:	af02      	add	r7, sp, #8
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	607a      	str	r2, [r7, #4]
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	817b      	strh	r3, [r7, #10]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	2b20      	cmp	r3, #32
 8002ec6:	f040 80fd 	bne.w	80030c4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d101      	bne.n	8002ed8 <HAL_I2C_Master_Transmit+0x30>
 8002ed4:	2302      	movs	r3, #2
 8002ed6:	e0f6      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x21e>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ee0:	f7fe f91c 	bl	800111c <HAL_GetTick>
 8002ee4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	2319      	movs	r3, #25
 8002eec:	2201      	movs	r2, #1
 8002eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f001 fa2d 	bl	8004352 <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e0e1      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2221      	movs	r2, #33	; 0x21
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	893a      	ldrh	r2, [r7, #8]
 8002f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2bff      	cmp	r3, #255	; 0xff
 8002f32:	d906      	bls.n	8002f42 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	22ff      	movs	r2, #255	; 0xff
 8002f38:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8002f3a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f3e:	617b      	str	r3, [r7, #20]
 8002f40:	e007      	b.n	8002f52 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f46:	b29a      	uxth	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002f4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f50:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d024      	beq.n	8002fa4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	781a      	ldrb	r2, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	3b01      	subs	r3, #1
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29a      	uxth	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	8979      	ldrh	r1, [r7, #10]
 8002f96:	4b4e      	ldr	r3, [pc, #312]	; (80030d0 <HAL_I2C_Master_Transmit+0x228>)
 8002f98:	9300      	str	r3, [sp, #0]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f001 fb9b 	bl	80046d8 <I2C_TransferConfig>
 8002fa2:	e066      	b.n	8003072 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	8979      	ldrh	r1, [r7, #10]
 8002fac:	4b48      	ldr	r3, [pc, #288]	; (80030d0 <HAL_I2C_Master_Transmit+0x228>)
 8002fae:	9300      	str	r3, [sp, #0]
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	68f8      	ldr	r0, [r7, #12]
 8002fb4:	f001 fb90 	bl	80046d8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002fb8:	e05b      	b.n	8003072 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	6a39      	ldr	r1, [r7, #32]
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f001 fa20 	bl	8004404 <I2C_WaitOnTXISFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e07b      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd2:	781a      	ldrb	r2, [r3, #0]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ff6:	3b01      	subs	r3, #1
 8002ff8:	b29a      	uxth	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003002:	b29b      	uxth	r3, r3
 8003004:	2b00      	cmp	r3, #0
 8003006:	d034      	beq.n	8003072 <HAL_I2C_Master_Transmit+0x1ca>
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300c:	2b00      	cmp	r3, #0
 800300e:	d130      	bne.n	8003072 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	2200      	movs	r2, #0
 8003018:	2180      	movs	r1, #128	; 0x80
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f001 f999 	bl	8004352 <I2C_WaitOnFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e04d      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800302e:	b29b      	uxth	r3, r3
 8003030:	2bff      	cmp	r3, #255	; 0xff
 8003032:	d90e      	bls.n	8003052 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	22ff      	movs	r2, #255	; 0xff
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	b2da      	uxtb	r2, r3
 8003040:	8979      	ldrh	r1, [r7, #10]
 8003042:	2300      	movs	r3, #0
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f001 fb44 	bl	80046d8 <I2C_TransferConfig>
 8003050:	e00f      	b.n	8003072 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	b2da      	uxtb	r2, r3
 8003062:	8979      	ldrh	r1, [r7, #10]
 8003064:	2300      	movs	r3, #0
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f001 fb33 	bl	80046d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	d19e      	bne.n	8002fba <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	6a39      	ldr	r1, [r7, #32]
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f001 fa06 	bl	8004492 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e01a      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2220      	movs	r2, #32
 8003096:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	6859      	ldr	r1, [r3, #4]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	4b0c      	ldr	r3, [pc, #48]	; (80030d4 <HAL_I2C_Master_Transmit+0x22c>)
 80030a4:	400b      	ands	r3, r1
 80030a6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2220      	movs	r2, #32
 80030ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e000      	b.n	80030c6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
  }
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3718      	adds	r7, #24
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	80002000 	.word	0x80002000
 80030d4:	fe00e800 	.word	0xfe00e800

080030d8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af02      	add	r7, sp, #8
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	4608      	mov	r0, r1
 80030e2:	4611      	mov	r1, r2
 80030e4:	461a      	mov	r2, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	817b      	strh	r3, [r7, #10]
 80030ea:	460b      	mov	r3, r1
 80030ec:	813b      	strh	r3, [r7, #8]
 80030ee:	4613      	mov	r3, r2
 80030f0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b20      	cmp	r3, #32
 80030fc:	f040 80f9 	bne.w	80032f2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_I2C_Mem_Write+0x34>
 8003106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003108:	2b00      	cmp	r3, #0
 800310a:	d105      	bne.n	8003118 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003112:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0ed      	b.n	80032f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800311e:	2b01      	cmp	r3, #1
 8003120:	d101      	bne.n	8003126 <HAL_I2C_Mem_Write+0x4e>
 8003122:	2302      	movs	r3, #2
 8003124:	e0e6      	b.n	80032f4 <HAL_I2C_Mem_Write+0x21c>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2201      	movs	r2, #1
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800312e:	f7fd fff5 	bl	800111c <HAL_GetTick>
 8003132:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	2319      	movs	r3, #25
 800313a:	2201      	movs	r2, #1
 800313c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f001 f906 	bl	8004352 <I2C_WaitOnFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e0d1      	b.n	80032f4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2221      	movs	r2, #33	; 0x21
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2240      	movs	r2, #64	; 0x40
 800315c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a3a      	ldr	r2, [r7, #32]
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003178:	88f8      	ldrh	r0, [r7, #6]
 800317a:	893a      	ldrh	r2, [r7, #8]
 800317c:	8979      	ldrh	r1, [r7, #10]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	9301      	str	r3, [sp, #4]
 8003182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003184:	9300      	str	r3, [sp, #0]
 8003186:	4603      	mov	r3, r0
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fc49 	bl	8003a20 <I2C_RequestMemoryWrite>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d005      	beq.n	80031a0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e0a9      	b.n	80032f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	2bff      	cmp	r3, #255	; 0xff
 80031a8:	d90e      	bls.n	80031c8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	22ff      	movs	r2, #255	; 0xff
 80031ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	8979      	ldrh	r1, [r7, #10]
 80031b8:	2300      	movs	r3, #0
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f001 fa89 	bl	80046d8 <I2C_TransferConfig>
 80031c6:	e00f      	b.n	80031e8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	8979      	ldrh	r1, [r7, #10]
 80031da:	2300      	movs	r3, #0
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f001 fa78 	bl	80046d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031ec:	68f8      	ldr	r0, [r7, #12]
 80031ee:	f001 f909 	bl	8004404 <I2C_WaitOnTXISFlagUntilTimeout>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e07b      	b.n	80032f4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	781a      	ldrb	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320c:	1c5a      	adds	r2, r3, #1
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003216:	b29b      	uxth	r3, r3
 8003218:	3b01      	subs	r3, #1
 800321a:	b29a      	uxth	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003224:	3b01      	subs	r3, #1
 8003226:	b29a      	uxth	r2, r3
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d034      	beq.n	80032a0 <HAL_I2C_Mem_Write+0x1c8>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800323a:	2b00      	cmp	r3, #0
 800323c:	d130      	bne.n	80032a0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	9300      	str	r3, [sp, #0]
 8003242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003244:	2200      	movs	r2, #0
 8003246:	2180      	movs	r1, #128	; 0x80
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f001 f882 	bl	8004352 <I2C_WaitOnFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e04d      	b.n	80032f4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29b      	uxth	r3, r3
 800325e:	2bff      	cmp	r3, #255	; 0xff
 8003260:	d90e      	bls.n	8003280 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	22ff      	movs	r2, #255	; 0xff
 8003266:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326c:	b2da      	uxtb	r2, r3
 800326e:	8979      	ldrh	r1, [r7, #10]
 8003270:	2300      	movs	r3, #0
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f001 fa2d 	bl	80046d8 <I2C_TransferConfig>
 800327e:	e00f      	b.n	80032a0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003284:	b29a      	uxth	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800328e:	b2da      	uxtb	r2, r3
 8003290:	8979      	ldrh	r1, [r7, #10]
 8003292:	2300      	movs	r3, #0
 8003294:	9300      	str	r3, [sp, #0]
 8003296:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f001 fa1c 	bl	80046d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d19e      	bne.n	80031e8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f001 f8ef 	bl	8004492 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d001      	beq.n	80032be <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e01a      	b.n	80032f4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2220      	movs	r2, #32
 80032c4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <HAL_I2C_Mem_Write+0x224>)
 80032d2:	400b      	ands	r3, r1
 80032d4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2220      	movs	r2, #32
 80032da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ee:	2300      	movs	r3, #0
 80032f0:	e000      	b.n	80032f4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80032f2:	2302      	movs	r3, #2
  }
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	fe00e800 	.word	0xfe00e800

08003300 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b088      	sub	sp, #32
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	4608      	mov	r0, r1
 800330a:	4611      	mov	r1, r2
 800330c:	461a      	mov	r2, r3
 800330e:	4603      	mov	r3, r0
 8003310:	817b      	strh	r3, [r7, #10]
 8003312:	460b      	mov	r3, r1
 8003314:	813b      	strh	r3, [r7, #8]
 8003316:	4613      	mov	r3, r2
 8003318:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b20      	cmp	r3, #32
 8003324:	f040 80fd 	bne.w	8003522 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_I2C_Mem_Read+0x34>
 800332e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003330:	2b00      	cmp	r3, #0
 8003332:	d105      	bne.n	8003340 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800333a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0f1      	b.n	8003524 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_I2C_Mem_Read+0x4e>
 800334a:	2302      	movs	r3, #2
 800334c:	e0ea      	b.n	8003524 <HAL_I2C_Mem_Read+0x224>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003356:	f7fd fee1 	bl	800111c <HAL_GetTick>
 800335a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	2319      	movs	r3, #25
 8003362:	2201      	movs	r2, #1
 8003364:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003368:	68f8      	ldr	r0, [r7, #12]
 800336a:	f000 fff2 	bl	8004352 <I2C_WaitOnFlagUntilTimeout>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e0d5      	b.n	8003524 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2222      	movs	r2, #34	; 0x22
 800337c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2240      	movs	r2, #64	; 0x40
 8003384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6a3a      	ldr	r2, [r7, #32]
 8003392:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003398:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033a0:	88f8      	ldrh	r0, [r7, #6]
 80033a2:	893a      	ldrh	r2, [r7, #8]
 80033a4:	8979      	ldrh	r1, [r7, #10]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	4603      	mov	r3, r0
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 fb89 	bl	8003ac8 <I2C_RequestMemoryRead>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d005      	beq.n	80033c8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e0ad      	b.n	8003524 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2bff      	cmp	r3, #255	; 0xff
 80033d0:	d90e      	bls.n	80033f0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	22ff      	movs	r2, #255	; 0xff
 80033d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	8979      	ldrh	r1, [r7, #10]
 80033e0:	4b52      	ldr	r3, [pc, #328]	; (800352c <HAL_I2C_Mem_Read+0x22c>)
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033e8:	68f8      	ldr	r0, [r7, #12]
 80033ea:	f001 f975 	bl	80046d8 <I2C_TransferConfig>
 80033ee:	e00f      	b.n	8003410 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033fe:	b2da      	uxtb	r2, r3
 8003400:	8979      	ldrh	r1, [r7, #10]
 8003402:	4b4a      	ldr	r3, [pc, #296]	; (800352c <HAL_I2C_Mem_Read+0x22c>)
 8003404:	9300      	str	r3, [sp, #0]
 8003406:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800340a:	68f8      	ldr	r0, [r7, #12]
 800340c:	f001 f964 	bl	80046d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	2200      	movs	r2, #0
 8003418:	2104      	movs	r1, #4
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 ff99 	bl	8004352 <I2C_WaitOnFlagUntilTimeout>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e07c      	b.n	8003524 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	b2d2      	uxtb	r2, r2
 8003436:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003452:	b29b      	uxth	r3, r3
 8003454:	3b01      	subs	r3, #1
 8003456:	b29a      	uxth	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d034      	beq.n	80034d0 <HAL_I2C_Mem_Read+0x1d0>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	2b00      	cmp	r3, #0
 800346c:	d130      	bne.n	80034d0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003474:	2200      	movs	r2, #0
 8003476:	2180      	movs	r1, #128	; 0x80
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 ff6a 	bl	8004352 <I2C_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e04d      	b.n	8003524 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348c:	b29b      	uxth	r3, r3
 800348e:	2bff      	cmp	r3, #255	; 0xff
 8003490:	d90e      	bls.n	80034b0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	22ff      	movs	r2, #255	; 0xff
 8003496:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800349c:	b2da      	uxtb	r2, r3
 800349e:	8979      	ldrh	r1, [r7, #10]
 80034a0:	2300      	movs	r3, #0
 80034a2:	9300      	str	r3, [sp, #0]
 80034a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f001 f915 	bl	80046d8 <I2C_TransferConfig>
 80034ae:	e00f      	b.n	80034d0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	8979      	ldrh	r1, [r7, #10]
 80034c2:	2300      	movs	r3, #0
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	f001 f904 	bl	80046d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d19a      	bne.n	8003410 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 ffd7 	bl	8004492 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e01a      	b.n	8003524 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2220      	movs	r2, #32
 80034f4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6859      	ldr	r1, [r3, #4]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <HAL_I2C_Mem_Read+0x230>)
 8003502:	400b      	ands	r3, r1
 8003504:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2220      	movs	r2, #32
 800350a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	e000      	b.n	8003524 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
  }
}
 8003524:	4618      	mov	r0, r3
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	80002400 	.word	0x80002400
 8003530:	fe00e800 	.word	0xfe00e800

08003534 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b08a      	sub	sp, #40	; 0x28
 8003538:	af02      	add	r7, sp, #8
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	607a      	str	r2, [r7, #4]
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	460b      	mov	r3, r1
 8003542:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b20      	cmp	r3, #32
 8003552:	f040 80d6 	bne.w	8003702 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003564:	d101      	bne.n	800356a <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003566:	2302      	movs	r3, #2
 8003568:	e0cc      	b.n	8003704 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003570:	2b01      	cmp	r3, #1
 8003572:	d101      	bne.n	8003578 <HAL_I2C_IsDeviceReady+0x44>
 8003574:	2302      	movs	r3, #2
 8003576:	e0c5      	b.n	8003704 <HAL_I2C_IsDeviceReady+0x1d0>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2224      	movs	r2, #36	; 0x24
 8003584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d107      	bne.n	80035a6 <HAL_I2C_IsDeviceReady+0x72>
 8003596:	897b      	ldrh	r3, [r7, #10]
 8003598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800359c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035a4:	e006      	b.n	80035b4 <HAL_I2C_IsDeviceReady+0x80>
 80035a6:	897b      	ldrh	r3, [r7, #10]
 80035a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80035b0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	6812      	ldr	r2, [r2, #0]
 80035b8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80035ba:	f7fd fdaf 	bl	800111c <HAL_GetTick>
 80035be:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b20      	cmp	r3, #32
 80035cc:	bf0c      	ite	eq
 80035ce:	2301      	moveq	r3, #1
 80035d0:	2300      	movne	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 0310 	and.w	r3, r3, #16
 80035e0:	2b10      	cmp	r3, #16
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80035ec:	e034      	b.n	8003658 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f4:	d01a      	beq.n	800362c <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80035f6:	f7fd fd91 	bl	800111c <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	683a      	ldr	r2, [r7, #0]
 8003602:	429a      	cmp	r2, r3
 8003604:	d302      	bcc.n	800360c <HAL_I2C_IsDeviceReady+0xd8>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10f      	bne.n	800362c <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003618:	f043 0220 	orr.w	r2, r3, #32
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e06b      	b.n	8003704 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	f003 0320 	and.w	r3, r3, #32
 8003636:	2b20      	cmp	r3, #32
 8003638:	bf0c      	ite	eq
 800363a:	2301      	moveq	r3, #1
 800363c:	2300      	movne	r3, #0
 800363e:	b2db      	uxtb	r3, r3
 8003640:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	699b      	ldr	r3, [r3, #24]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b10      	cmp	r3, #16
 800364e:	bf0c      	ite	eq
 8003650:	2301      	moveq	r3, #1
 8003652:	2300      	movne	r3, #0
 8003654:	b2db      	uxtb	r3, r3
 8003656:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003658:	7ffb      	ldrb	r3, [r7, #31]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d102      	bne.n	8003664 <HAL_I2C_IsDeviceReady+0x130>
 800365e:	7fbb      	ldrb	r3, [r7, #30]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0c4      	beq.n	80035ee <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b10      	cmp	r3, #16
 8003670:	d01a      	beq.n	80036a8 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2200      	movs	r2, #0
 800367a:	2120      	movs	r1, #32
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 fe68 	bl	8004352 <I2C_WaitOnFlagUntilTimeout>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e03b      	b.n	8003704 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2220      	movs	r2, #32
 8003692:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e02d      	b.n	8003704 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2200      	movs	r2, #0
 80036b0:	2120      	movs	r1, #32
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 fe4d 	bl	8004352 <I2C_WaitOnFlagUntilTimeout>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e020      	b.n	8003704 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2210      	movs	r2, #16
 80036c8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2220      	movs	r2, #32
 80036d0:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	3301      	adds	r3, #1
 80036d6:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	429a      	cmp	r2, r3
 80036de:	f63f af56 	bhi.w	800358e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	2220      	movs	r2, #32
 80036e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	f043 0220 	orr.w	r2, r3, #32
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8003702:	2302      	movs	r3, #2
  }
}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00f      	beq.n	800374e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373c:	f043 0201 	orr.w	r2, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800374c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00f      	beq.n	8003778 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003766:	f043 0208 	orr.w	r2, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003776:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00f      	beq.n	80037a2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00a      	beq.n	80037a2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003790:	f043 0202 	orr.w	r2, r3, #2
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037a0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f003 030b 	and.w	r3, r3, #11
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d003      	beq.n	80037ba <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80037b2:	68f9      	ldr	r1, [r7, #12]
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fc73 	bl	80040a0 <I2C_ITError>
  }
}
 80037ba:	bf00      	nop
 80037bc:	3718      	adds	r7, #24
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037c2:	b480      	push	{r7}
 80037c4:	b083      	sub	sp, #12
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d4:	4770      	bx	lr

080037d6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80037ea:	b480      	push	{r7}
 80037ec:	b083      	sub	sp, #12
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	460b      	mov	r3, r1
 80037f4:	70fb      	strb	r3, [r7, #3]
 80037f6:	4613      	mov	r3, r2
 80037f8:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003806:	b480      	push	{r7}
 8003808:	b083      	sub	sp, #12
 800380a:	af00      	add	r7, sp, #0
 800380c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b086      	sub	sp, #24
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <I2C_Slave_ISR_IT+0x24>
 800384e:	2302      	movs	r3, #2
 8003850:	e0e2      	b.n	8003a18 <I2C_Slave_ISR_IT+0x1ea>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f003 0320 	and.w	r3, r3, #32
 8003860:	2b00      	cmp	r3, #0
 8003862:	d009      	beq.n	8003878 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800386a:	2b00      	cmp	r3, #0
 800386c:	d004      	beq.n	8003878 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800386e:	6939      	ldr	r1, [r7, #16]
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 fa5d 	bl	8003d30 <I2C_ITSlaveCplt>
 8003876:	e0ca      	b.n	8003a0e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f003 0310 	and.w	r3, r3, #16
 800387e:	2b00      	cmp	r3, #0
 8003880:	d04b      	beq.n	800391a <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003888:	2b00      	cmp	r3, #0
 800388a:	d046      	beq.n	800391a <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003890:	b29b      	uxth	r3, r3
 8003892:	2b00      	cmp	r3, #0
 8003894:	d128      	bne.n	80038e8 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b28      	cmp	r3, #40	; 0x28
 80038a0:	d108      	bne.n	80038b4 <I2C_Slave_ISR_IT+0x86>
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038a8:	d104      	bne.n	80038b4 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80038aa:	6939      	ldr	r1, [r7, #16]
 80038ac:	68f8      	ldr	r0, [r7, #12]
 80038ae:	f000 fba3 	bl	8003ff8 <I2C_ITListenCplt>
 80038b2:	e031      	b.n	8003918 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	2b29      	cmp	r3, #41	; 0x29
 80038be:	d10e      	bne.n	80038de <I2C_Slave_ISR_IT+0xb0>
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038c6:	d00a      	beq.n	80038de <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2210      	movs	r2, #16
 80038ce:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fcfc 	bl	80042ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f9ce 	bl	8003c78 <I2C_ITSlaveSeqCplt>
 80038dc:	e01c      	b.n	8003918 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2210      	movs	r2, #16
 80038e4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80038e6:	e08f      	b.n	8003a08 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2210      	movs	r2, #16
 80038ee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	f043 0204 	orr.w	r2, r3, #4
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <I2C_Slave_ISR_IT+0xdc>
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003908:	d17e      	bne.n	8003a08 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	4619      	mov	r1, r3
 8003910:	68f8      	ldr	r0, [r7, #12]
 8003912:	f000 fbc5 	bl	80040a0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003916:	e077      	b.n	8003a08 <I2C_Slave_ISR_IT+0x1da>
 8003918:	e076      	b.n	8003a08 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	f003 0304 	and.w	r3, r3, #4
 8003920:	2b00      	cmp	r3, #0
 8003922:	d02f      	beq.n	8003984 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800392a:	2b00      	cmp	r3, #0
 800392c:	d02a      	beq.n	8003984 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003932:	b29b      	uxth	r3, r3
 8003934:	2b00      	cmp	r3, #0
 8003936:	d018      	beq.n	800396a <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	b2d2      	uxtb	r2, r2
 8003944:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	1c5a      	adds	r2, r3, #1
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003954:	3b01      	subs	r3, #1
 8003956:	b29a      	uxth	r2, r3
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396e:	b29b      	uxth	r3, r3
 8003970:	2b00      	cmp	r3, #0
 8003972:	d14b      	bne.n	8003a0c <I2C_Slave_ISR_IT+0x1de>
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800397a:	d047      	beq.n	8003a0c <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f97b 	bl	8003c78 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003982:	e043      	b.n	8003a0c <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f003 0308 	and.w	r3, r3, #8
 800398a:	2b00      	cmp	r3, #0
 800398c:	d009      	beq.n	80039a2 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003998:	6939      	ldr	r1, [r7, #16]
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f8e8 	bl	8003b70 <I2C_ITAddrCplt>
 80039a0:	e035      	b.n	8003a0e <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d030      	beq.n	8003a0e <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d02b      	beq.n	8003a0e <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d018      	beq.n	80039f2 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	781a      	ldrb	r2, [r3, #0]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	1c5a      	adds	r2, r3, #1
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039da:	b29b      	uxth	r3, r3
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e8:	3b01      	subs	r3, #1
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	851a      	strh	r2, [r3, #40]	; 0x28
 80039f0:	e00d      	b.n	8003a0e <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039f8:	d002      	beq.n	8003a00 <I2C_Slave_ISR_IT+0x1d2>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003a00:	68f8      	ldr	r0, [r7, #12]
 8003a02:	f000 f939 	bl	8003c78 <I2C_ITSlaveSeqCplt>
 8003a06:	e002      	b.n	8003a0e <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003a08:	bf00      	nop
 8003a0a:	e000      	b.n	8003a0e <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003a0c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003a16:	2300      	movs	r3, #0
}
 8003a18:	4618      	mov	r0, r3
 8003a1a:	3718      	adds	r7, #24
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	4608      	mov	r0, r1
 8003a2a:	4611      	mov	r1, r2
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	4603      	mov	r3, r0
 8003a30:	817b      	strh	r3, [r7, #10]
 8003a32:	460b      	mov	r3, r1
 8003a34:	813b      	strh	r3, [r7, #8]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003a3a:	88fb      	ldrh	r3, [r7, #6]
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	8979      	ldrh	r1, [r7, #10]
 8003a40:	4b20      	ldr	r3, [pc, #128]	; (8003ac4 <I2C_RequestMemoryWrite+0xa4>)
 8003a42:	9300      	str	r3, [sp, #0]
 8003a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fe45 	bl	80046d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	69b9      	ldr	r1, [r7, #24]
 8003a52:	68f8      	ldr	r0, [r7, #12]
 8003a54:	f000 fcd6 	bl	8004404 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e02c      	b.n	8003abc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a62:	88fb      	ldrh	r3, [r7, #6]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d105      	bne.n	8003a74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a68:	893b      	ldrh	r3, [r7, #8]
 8003a6a:	b2da      	uxtb	r2, r3
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	629a      	str	r2, [r3, #40]	; 0x28
 8003a72:	e015      	b.n	8003aa0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003a74:	893b      	ldrh	r3, [r7, #8]
 8003a76:	0a1b      	lsrs	r3, r3, #8
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	b2da      	uxtb	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	69b9      	ldr	r1, [r7, #24]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fcbc 	bl	8004404 <I2C_WaitOnTXISFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e012      	b.n	8003abc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003a96:	893b      	ldrh	r3, [r7, #8]
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	2180      	movs	r1, #128	; 0x80
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 fc51 	bl	8004352 <I2C_WaitOnFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	80002000 	.word	0x80002000

08003ac8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b086      	sub	sp, #24
 8003acc:	af02      	add	r7, sp, #8
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	4608      	mov	r0, r1
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	817b      	strh	r3, [r7, #10]
 8003ada:	460b      	mov	r3, r1
 8003adc:	813b      	strh	r3, [r7, #8]
 8003ade:	4613      	mov	r3, r2
 8003ae0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003ae2:	88fb      	ldrh	r3, [r7, #6]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	8979      	ldrh	r1, [r7, #10]
 8003ae8:	4b20      	ldr	r3, [pc, #128]	; (8003b6c <I2C_RequestMemoryRead+0xa4>)
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	2300      	movs	r3, #0
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 fdf2 	bl	80046d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003af4:	69fa      	ldr	r2, [r7, #28]
 8003af6:	69b9      	ldr	r1, [r7, #24]
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f000 fc83 	bl	8004404 <I2C_WaitOnTXISFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e02c      	b.n	8003b62 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b08:	88fb      	ldrh	r3, [r7, #6]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d105      	bne.n	8003b1a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b0e:	893b      	ldrh	r3, [r7, #8]
 8003b10:	b2da      	uxtb	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	629a      	str	r2, [r3, #40]	; 0x28
 8003b18:	e015      	b.n	8003b46 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b1a:	893b      	ldrh	r3, [r7, #8]
 8003b1c:	0a1b      	lsrs	r3, r3, #8
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	b2da      	uxtb	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	69b9      	ldr	r1, [r7, #24]
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f000 fc69 	bl	8004404 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b32:	4603      	mov	r3, r0
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d001      	beq.n	8003b3c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e012      	b.n	8003b62 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b3c:	893b      	ldrh	r3, [r7, #8]
 8003b3e:	b2da      	uxtb	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2140      	movs	r1, #64	; 0x40
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 fbfe 	bl	8004352 <I2C_WaitOnFlagUntilTimeout>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e000      	b.n	8003b62 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3710      	adds	r7, #16
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	80002000 	.word	0x80002000

08003b70 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b86:	2b28      	cmp	r3, #40	; 0x28
 8003b88:	d16a      	bne.n	8003c60 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	0c1b      	lsrs	r3, r3, #16
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f003 0301 	and.w	r3, r3, #1
 8003b98:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003ba8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bb6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003bc4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d138      	bne.n	8003c40 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003bce:	897b      	ldrh	r3, [r7, #10]
 8003bd0:	09db      	lsrs	r3, r3, #7
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	89bb      	ldrh	r3, [r7, #12]
 8003bd6:	4053      	eors	r3, r2
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	f003 0306 	and.w	r3, r3, #6
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d11c      	bne.n	8003c1c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003be2:	897b      	ldrh	r3, [r7, #10]
 8003be4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d13b      	bne.n	8003c70 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2208      	movs	r2, #8
 8003c04:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c0e:	89ba      	ldrh	r2, [r7, #12]
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	4619      	mov	r1, r3
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff fde8 	bl	80037ea <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003c1a:	e029      	b.n	8003c70 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003c1c:	893b      	ldrh	r3, [r7, #8]
 8003c1e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003c20:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fd89 	bl	800473c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c32:	89ba      	ldrh	r2, [r7, #12]
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	4619      	mov	r1, r3
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff fdd6 	bl	80037ea <HAL_I2C_AddrCallback>
}
 8003c3e:	e017      	b.n	8003c70 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003c40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 fd79 	bl	800473c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003c52:	89ba      	ldrh	r2, [r7, #12]
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	4619      	mov	r1, r3
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f7ff fdc6 	bl	80037ea <HAL_I2C_AddrCallback>
}
 8003c5e:	e007      	b.n	8003c70 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2208      	movs	r2, #8
 8003c66:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003c70:	bf00      	nop
 8003c72:	3710      	adds	r7, #16
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e00c      	b.n	8003cc6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d007      	beq.n	8003cc6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003cc4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b29      	cmp	r3, #41	; 0x29
 8003cd0:	d112      	bne.n	8003cf8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2228      	movs	r2, #40	; 0x28
 8003cd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2221      	movs	r2, #33	; 0x21
 8003cde:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 fd2a 	bl	800473c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff fd66 	bl	80037c2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003cf6:	e017      	b.n	8003d28 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b2a      	cmp	r3, #42	; 0x2a
 8003d02:	d111      	bne.n	8003d28 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2228      	movs	r2, #40	; 0x28
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2222      	movs	r2, #34	; 0x22
 8003d10:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003d12:	2102      	movs	r1, #2
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fd11 	bl	800473c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff fd57 	bl	80037d6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003d28:	bf00      	nop
 8003d2a:	3710      	adds	r7, #16
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b086      	sub	sp, #24
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d4a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d52:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003d5c:	7afb      	ldrb	r3, [r7, #11]
 8003d5e:	2b21      	cmp	r3, #33	; 0x21
 8003d60:	d002      	beq.n	8003d68 <I2C_ITSlaveCplt+0x38>
 8003d62:	7afb      	ldrb	r3, [r7, #11]
 8003d64:	2b29      	cmp	r3, #41	; 0x29
 8003d66:	d108      	bne.n	8003d7a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003d68:	f248 0101 	movw	r1, #32769	; 0x8001
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f000 fce5 	bl	800473c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2221      	movs	r2, #33	; 0x21
 8003d76:	631a      	str	r2, [r3, #48]	; 0x30
 8003d78:	e019      	b.n	8003dae <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003d7a:	7afb      	ldrb	r3, [r7, #11]
 8003d7c:	2b22      	cmp	r3, #34	; 0x22
 8003d7e:	d002      	beq.n	8003d86 <I2C_ITSlaveCplt+0x56>
 8003d80:	7afb      	ldrb	r3, [r7, #11]
 8003d82:	2b2a      	cmp	r3, #42	; 0x2a
 8003d84:	d108      	bne.n	8003d98 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003d86:	f248 0102 	movw	r1, #32770	; 0x8002
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f000 fcd6 	bl	800473c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2222      	movs	r2, #34	; 0x22
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
 8003d96:	e00a      	b.n	8003dae <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003d98:	7afb      	ldrb	r3, [r7, #11]
 8003d9a:	2b28      	cmp	r3, #40	; 0x28
 8003d9c:	d107      	bne.n	8003dae <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003d9e:	f248 0103 	movw	r1, #32771	; 0x8003
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fcca 	bl	800473c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dbc:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	6859      	ldr	r1, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4b89      	ldr	r3, [pc, #548]	; (8003ff0 <I2C_ITSlaveCplt+0x2c0>)
 8003dca:	400b      	ands	r3, r1
 8003dcc:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fa7d 	bl	80042ce <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d013      	beq.n	8003e06 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d01f      	beq.n	8003e36 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e04:	e017      	b.n	8003e36 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d012      	beq.n	8003e36 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e1e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d006      	beq.n	8003e36 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f003 0304 	and.w	r3, r3, #4
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d020      	beq.n	8003e82 <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f023 0304 	bic.w	r3, r3, #4
 8003e46:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00c      	beq.n	8003e82 <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	3b01      	subs	r3, #1
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d005      	beq.n	8003e98 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e90:	f043 0204 	orr.w	r2, r3, #4
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	f003 0310 	and.w	r3, r3, #16
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d049      	beq.n	8003f36 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d044      	beq.n	8003f36 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d128      	bne.n	8003f08 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b28      	cmp	r3, #40	; 0x28
 8003ec0:	d108      	bne.n	8003ed4 <I2C_ITSlaveCplt+0x1a4>
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003ec8:	d104      	bne.n	8003ed4 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003eca:	6979      	ldr	r1, [r7, #20]
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f893 	bl	8003ff8 <I2C_ITListenCplt>
 8003ed2:	e030      	b.n	8003f36 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b29      	cmp	r3, #41	; 0x29
 8003ede:	d10e      	bne.n	8003efe <I2C_ITSlaveCplt+0x1ce>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ee6:	d00a      	beq.n	8003efe <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2210      	movs	r2, #16
 8003eee:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f9ec 	bl	80042ce <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7ff febe 	bl	8003c78 <I2C_ITSlaveSeqCplt>
 8003efc:	e01b      	b.n	8003f36 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2210      	movs	r2, #16
 8003f04:	61da      	str	r2, [r3, #28]
 8003f06:	e016      	b.n	8003f36 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2210      	movs	r2, #16
 8003f0e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f14:	f043 0204 	orr.w	r2, r3, #4
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <I2C_ITSlaveCplt+0x1fa>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f28:	d105      	bne.n	8003f36 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	4619      	mov	r1, r3
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f8b5 	bl	80040a0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d010      	beq.n	8003f6e <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f50:	4619      	mov	r1, r3
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f8a4 	bl	80040a0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f5e:	b2db      	uxtb	r3, r3
 8003f60:	2b28      	cmp	r3, #40	; 0x28
 8003f62:	d141      	bne.n	8003fe8 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003f64:	6979      	ldr	r1, [r7, #20]
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f846 	bl	8003ff8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f6c:	e03c      	b.n	8003fe8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f76:	d014      	beq.n	8003fa2 <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff fe7d 	bl	8003c78 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a1c      	ldr	r2, [pc, #112]	; (8003ff4 <I2C_ITSlaveCplt+0x2c4>)
 8003f82:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f7ff fc33 	bl	8003806 <HAL_I2C_ListenCpltCallback>
}
 8003fa0:	e022      	b.n	8003fe8 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b22      	cmp	r3, #34	; 0x22
 8003fac:	d10e      	bne.n	8003fcc <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f7ff fc06 	bl	80037d6 <HAL_I2C_SlaveRxCpltCallback>
}
 8003fca:	e00d      	b.n	8003fe8 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff fbed 	bl	80037c2 <HAL_I2C_SlaveTxCpltCallback>
}
 8003fe8:	bf00      	nop
 8003fea:	3718      	adds	r7, #24
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	fe00e800 	.word	0xfe00e800
 8003ff4:	ffff0000 	.word	0xffff0000

08003ff8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a25      	ldr	r2, [pc, #148]	; (800409c <I2C_ITListenCplt+0xa4>)
 8004006:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2220      	movs	r2, #32
 8004012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	f003 0304 	and.w	r3, r3, #4
 800402a:	2b00      	cmp	r3, #0
 800402c:	d022      	beq.n	8004074 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004038:	b2d2      	uxtb	r2, r2
 800403a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800404a:	2b00      	cmp	r3, #0
 800404c:	d012      	beq.n	8004074 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406c:	f043 0204 	orr.w	r2, r3, #4
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004074:	f248 0103 	movw	r1, #32771	; 0x8003
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fb5f 	bl	800473c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2210      	movs	r2, #16
 8004084:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff fbb9 	bl	8003806 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	ffff0000 	.word	0xffff0000

080040a0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a6d      	ldr	r2, [pc, #436]	; (8004274 <I2C_ITError+0x1d4>)
 80040be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80040d2:	7bfb      	ldrb	r3, [r7, #15]
 80040d4:	2b28      	cmp	r3, #40	; 0x28
 80040d6:	d005      	beq.n	80040e4 <I2C_ITError+0x44>
 80040d8:	7bfb      	ldrb	r3, [r7, #15]
 80040da:	2b29      	cmp	r3, #41	; 0x29
 80040dc:	d002      	beq.n	80040e4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80040de:	7bfb      	ldrb	r3, [r7, #15]
 80040e0:	2b2a      	cmp	r3, #42	; 0x2a
 80040e2:	d10b      	bne.n	80040fc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80040e4:	2103      	movs	r1, #3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fb28 	bl	800473c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2228      	movs	r2, #40	; 0x28
 80040f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a60      	ldr	r2, [pc, #384]	; (8004278 <I2C_ITError+0x1d8>)
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34
 80040fa:	e030      	b.n	800415e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80040fc:	f248 0103 	movw	r1, #32771	; 0x8003
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fb1b 	bl	800473c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f8e1 	bl	80042ce <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004112:	b2db      	uxtb	r3, r3
 8004114:	2b60      	cmp	r3, #96	; 0x60
 8004116:	d01f      	beq.n	8004158 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f003 0320 	and.w	r3, r3, #32
 800412a:	2b20      	cmp	r3, #32
 800412c:	d114      	bne.n	8004158 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	f003 0310 	and.w	r3, r3, #16
 8004138:	2b10      	cmp	r3, #16
 800413a:	d109      	bne.n	8004150 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2210      	movs	r2, #16
 8004142:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004148:	f043 0204 	orr.w	r2, r3, #4
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2220      	movs	r2, #32
 8004156:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004162:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004168:	2b00      	cmp	r3, #0
 800416a:	d039      	beq.n	80041e0 <I2C_ITError+0x140>
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	2b11      	cmp	r3, #17
 8004170:	d002      	beq.n	8004178 <I2C_ITError+0xd8>
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	2b21      	cmp	r3, #33	; 0x21
 8004176:	d133      	bne.n	80041e0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004186:	d107      	bne.n	8004198 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004196:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419c:	4618      	mov	r0, r3
 800419e:	f7fd fb71 	bl	8001884 <HAL_DMA_GetState>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d017      	beq.n	80041d8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	4a33      	ldr	r2, [pc, #204]	; (800427c <I2C_ITError+0x1dc>)
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fd fa4b 	bl	8001658 <HAL_DMA_Abort_IT>
 80041c2:	4603      	mov	r3, r0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d04d      	beq.n	8004264 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041d2:	4610      	mov	r0, r2
 80041d4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041d6:	e045      	b.n	8004264 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f851 	bl	8004280 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80041de:	e041      	b.n	8004264 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d039      	beq.n	800425c <I2C_ITError+0x1bc>
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2b12      	cmp	r3, #18
 80041ec:	d002      	beq.n	80041f4 <I2C_ITError+0x154>
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b22      	cmp	r3, #34	; 0x22
 80041f2:	d133      	bne.n	800425c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004202:	d107      	bne.n	8004214 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004212:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	4618      	mov	r0, r3
 800421a:	f7fd fb33 	bl	8001884 <HAL_DMA_GetState>
 800421e:	4603      	mov	r3, r0
 8004220:	2b01      	cmp	r3, #1
 8004222:	d017      	beq.n	8004254 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004228:	4a14      	ldr	r2, [pc, #80]	; (800427c <I2C_ITError+0x1dc>)
 800422a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004238:	4618      	mov	r0, r3
 800423a:	f7fd fa0d 	bl	8001658 <HAL_DMA_Abort_IT>
 800423e:	4603      	mov	r3, r0
 8004240:	2b00      	cmp	r3, #0
 8004242:	d011      	beq.n	8004268 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800424e:	4610      	mov	r0, r2
 8004250:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004252:	e009      	b.n	8004268 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f000 f813 	bl	8004280 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800425a:	e005      	b.n	8004268 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	f000 f80f 	bl	8004280 <I2C_TreatErrorCallback>
  }
}
 8004262:	e002      	b.n	800426a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004264:	bf00      	nop
 8004266:	e000      	b.n	800426a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004268:	bf00      	nop
}
 800426a:	bf00      	nop
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	ffff0000 	.word	0xffff0000
 8004278:	0800382f 	.word	0x0800382f
 800427c:	08004317 	.word	0x08004317

08004280 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b60      	cmp	r3, #96	; 0x60
 8004292:	d10e      	bne.n	80042b2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2200      	movs	r2, #0
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7ff fab5 	bl	800381a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80042b0:	e009      	b.n	80042c6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f00d f947 	bl	8011554 <HAL_I2C_ErrorCallback>
}
 80042c6:	bf00      	nop
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}

080042ce <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b083      	sub	sp, #12
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d103      	bne.n	80042ec <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2200      	movs	r2, #0
 80042ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d007      	beq.n	800430a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699a      	ldr	r2, [r3, #24]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	619a      	str	r2, [r3, #24]
  }
}
 800430a:	bf00      	nop
 800430c:	370c      	adds	r7, #12
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr

08004316 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	2200      	movs	r2, #0
 8004332:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004340:	2200      	movs	r2, #0
 8004342:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff ff9b 	bl	8004280 <I2C_TreatErrorCallback>
}
 800434a:	bf00      	nop
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	603b      	str	r3, [r7, #0]
 800435e:	4613      	mov	r3, r2
 8004360:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004362:	e03b      	b.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	6839      	ldr	r1, [r7, #0]
 8004368:	68f8      	ldr	r0, [r7, #12]
 800436a:	f000 f8d5 	bl	8004518 <I2C_IsErrorOccurred>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d001      	beq.n	8004378 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e041      	b.n	80043fc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437e:	d02d      	beq.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004380:	f7fc fecc 	bl	800111c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	429a      	cmp	r2, r3
 800438e:	d302      	bcc.n	8004396 <I2C_WaitOnFlagUntilTimeout+0x44>
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d122      	bne.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699a      	ldr	r2, [r3, #24]
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4013      	ands	r3, r2
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	bf0c      	ite	eq
 80043a6:	2301      	moveq	r3, #1
 80043a8:	2300      	movne	r3, #0
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	461a      	mov	r2, r3
 80043ae:	79fb      	ldrb	r3, [r7, #7]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d113      	bne.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b8:	f043 0220 	orr.w	r2, r3, #32
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2220      	movs	r2, #32
 80043c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e00f      	b.n	80043fc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	4013      	ands	r3, r2
 80043e6:	68ba      	ldr	r2, [r7, #8]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	bf0c      	ite	eq
 80043ec:	2301      	moveq	r3, #1
 80043ee:	2300      	movne	r3, #0
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	461a      	mov	r2, r3
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d0b4      	beq.n	8004364 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3710      	adds	r7, #16
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004410:	e033      	b.n	800447a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	68f8      	ldr	r0, [r7, #12]
 8004418:	f000 f87e 	bl	8004518 <I2C_IsErrorOccurred>
 800441c:	4603      	mov	r3, r0
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e031      	b.n	800448a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442c:	d025      	beq.n	800447a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800442e:	f7fc fe75 	bl	800111c <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	68ba      	ldr	r2, [r7, #8]
 800443a:	429a      	cmp	r2, r3
 800443c:	d302      	bcc.n	8004444 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d11a      	bne.n	800447a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b02      	cmp	r3, #2
 8004450:	d013      	beq.n	800447a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e007      	b.n	800448a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b02      	cmp	r3, #2
 8004486:	d1c4      	bne.n	8004412 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}

08004492 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004492:	b580      	push	{r7, lr}
 8004494:	b084      	sub	sp, #16
 8004496:	af00      	add	r7, sp, #0
 8004498:	60f8      	str	r0, [r7, #12]
 800449a:	60b9      	str	r1, [r7, #8]
 800449c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800449e:	e02f      	b.n	8004500 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	68b9      	ldr	r1, [r7, #8]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 f837 	bl	8004518 <I2C_IsErrorOccurred>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e02d      	b.n	8004510 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b4:	f7fc fe32 	bl	800111c <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d302      	bcc.n	80044ca <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d11a      	bne.n	8004500 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d013      	beq.n	8004500 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2200      	movs	r2, #0
 80044f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	e007      	b.n	8004510 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0320 	and.w	r3, r3, #32
 800450a:	2b20      	cmp	r3, #32
 800450c:	d1c8      	bne.n	80044a0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	; 0x28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004524:	2300      	movs	r3, #0
 8004526:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004532:	2300      	movs	r3, #0
 8004534:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	f003 0310 	and.w	r3, r3, #16
 8004540:	2b00      	cmp	r3, #0
 8004542:	d068      	beq.n	8004616 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	2210      	movs	r2, #16
 800454a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800454c:	e049      	b.n	80045e2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004554:	d045      	beq.n	80045e2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004556:	f7fc fde1 	bl	800111c <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	429a      	cmp	r2, r3
 8004564:	d302      	bcc.n	800456c <I2C_IsErrorOccurred+0x54>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d13a      	bne.n	80045e2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004576:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800457e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800458a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458e:	d121      	bne.n	80045d4 <I2C_IsErrorOccurred+0xbc>
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004596:	d01d      	beq.n	80045d4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004598:	7cfb      	ldrb	r3, [r7, #19]
 800459a:	2b20      	cmp	r3, #32
 800459c:	d01a      	beq.n	80045d4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045ae:	f7fc fdb5 	bl	800111c <HAL_GetTick>
 80045b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045b4:	e00e      	b.n	80045d4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045b6:	f7fc fdb1 	bl	800111c <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	2b19      	cmp	r3, #25
 80045c2:	d907      	bls.n	80045d4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	f043 0320 	orr.w	r3, r3, #32
 80045ca:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80045d2:	e006      	b.n	80045e2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b20      	cmp	r3, #32
 80045e0:	d1e9      	bne.n	80045b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	f003 0320 	and.w	r3, r3, #32
 80045ec:	2b20      	cmp	r3, #32
 80045ee:	d003      	beq.n	80045f8 <I2C_IsErrorOccurred+0xe0>
 80045f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0aa      	beq.n	800454e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80045f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d103      	bne.n	8004608 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2220      	movs	r2, #32
 8004606:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	f043 0304 	orr.w	r3, r3, #4
 800460e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00b      	beq.n	8004640 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004628:	6a3b      	ldr	r3, [r7, #32]
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004638:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	f043 0308 	orr.w	r3, r3, #8
 8004650:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800465a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00b      	beq.n	8004684 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	f043 0302 	orr.w	r3, r3, #2
 8004672:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f44f 7200 	mov.w	r2, #512	; 0x200
 800467c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004684:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01c      	beq.n	80046c6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f7ff fe1e 	bl	80042ce <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	6859      	ldr	r1, [r3, #4]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4b0d      	ldr	r3, [pc, #52]	; (80046d4 <I2C_IsErrorOccurred+0x1bc>)
 800469e:	400b      	ands	r3, r1
 80046a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	431a      	orrs	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80046c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3728      	adds	r7, #40	; 0x28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	fe00e800 	.word	0xfe00e800

080046d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	607b      	str	r3, [r7, #4]
 80046e2:	460b      	mov	r3, r1
 80046e4:	817b      	strh	r3, [r7, #10]
 80046e6:	4613      	mov	r3, r2
 80046e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046ea:	897b      	ldrh	r3, [r7, #10]
 80046ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046f0:	7a7b      	ldrb	r3, [r7, #9]
 80046f2:	041b      	lsls	r3, r3, #16
 80046f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	4313      	orrs	r3, r2
 8004702:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004706:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	0d5b      	lsrs	r3, r3, #21
 8004712:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <I2C_TransferConfig+0x60>)
 8004718:	430b      	orrs	r3, r1
 800471a:	43db      	mvns	r3, r3
 800471c:	ea02 0103 	and.w	r1, r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	430a      	orrs	r2, r1
 8004728:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800472a:	bf00      	nop
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	03ff63ff 	.word	0x03ff63ff

0800473c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004748:	2300      	movs	r3, #0
 800474a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800474c:	887b      	ldrh	r3, [r7, #2]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00f      	beq.n	8004776 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800475c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800476a:	2b28      	cmp	r3, #40	; 0x28
 800476c:	d003      	beq.n	8004776 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004774:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004776:	887b      	ldrh	r3, [r7, #2]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00f      	beq.n	80047a0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004786:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800478e:	b2db      	uxtb	r3, r3
 8004790:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004794:	2b28      	cmp	r3, #40	; 0x28
 8004796:	d003      	beq.n	80047a0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800479e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80047a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	da03      	bge.n	80047b0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80047ae:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80047b0:	887b      	ldrh	r3, [r7, #2]
 80047b2:	2b10      	cmp	r3, #16
 80047b4:	d103      	bne.n	80047be <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80047bc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80047be:	887b      	ldrh	r3, [r7, #2]
 80047c0:	2b20      	cmp	r3, #32
 80047c2:	d103      	bne.n	80047cc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f043 0320 	orr.w	r3, r3, #32
 80047ca:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80047cc:	887b      	ldrh	r3, [r7, #2]
 80047ce:	2b40      	cmp	r3, #64	; 0x40
 80047d0:	d103      	bne.n	80047da <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047d8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6819      	ldr	r1, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	43da      	mvns	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	400a      	ands	r2, r1
 80047ea:	601a      	str	r2, [r3, #0]
}
 80047ec:	bf00      	nop
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
 8004800:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004808:	b2db      	uxtb	r3, r3
 800480a:	2b20      	cmp	r3, #32
 800480c:	d138      	bne.n	8004880 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004818:	2302      	movs	r3, #2
 800481a:	e032      	b.n	8004882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2224      	movs	r2, #36	; 0x24
 8004828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800484a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	6819      	ldr	r1, [r3, #0]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	683a      	ldr	r2, [r7, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2220      	movs	r2, #32
 8004870:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800487c:	2300      	movs	r3, #0
 800487e:	e000      	b.n	8004882 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004880:	2302      	movs	r3, #2
  }
}
 8004882:	4618      	mov	r0, r3
 8004884:	370c      	adds	r7, #12
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b20      	cmp	r3, #32
 80048a2:	d139      	bne.n	8004918 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e033      	b.n	800491a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2224      	movs	r2, #36	; 0x24
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0201 	bic.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80048e0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	68fa      	ldr	r2, [r7, #12]
 80048e8:	4313      	orrs	r3, r2
 80048ea:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0201 	orr.w	r2, r2, #1
 8004902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004914:	2300      	movs	r3, #0
 8004916:	e000      	b.n	800491a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr

08004926 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004926:	b580      	push	{r7, lr}
 8004928:	b084      	sub	sp, #16
 800492a:	af00      	add	r7, sp, #0
 800492c:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d101      	bne.n	8004938 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0c0      	b.n	8004aba <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	d106      	bne.n	8004952 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f00a fdd9 	bl	800f504 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2203      	movs	r2, #3
 8004956:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f004 fa35 	bl	8008dce <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004964:	2300      	movs	r3, #0
 8004966:	73fb      	strb	r3, [r7, #15]
 8004968:	e03e      	b.n	80049e8 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800496a:	7bfa      	ldrb	r2, [r7, #15]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	4413      	add	r3, r2
 8004974:	00db      	lsls	r3, r3, #3
 8004976:	440b      	add	r3, r1
 8004978:	3311      	adds	r3, #17
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800497e:	7bfa      	ldrb	r2, [r7, #15]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	440b      	add	r3, r1
 800498c:	3310      	adds	r3, #16
 800498e:	7bfa      	ldrb	r2, [r7, #15]
 8004990:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004992:	7bfa      	ldrb	r2, [r7, #15]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	4413      	add	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	440b      	add	r3, r1
 80049a0:	3313      	adds	r3, #19
 80049a2:	2200      	movs	r2, #0
 80049a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049a6:	7bfa      	ldrb	r2, [r7, #15]
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	4613      	mov	r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4413      	add	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	440b      	add	r3, r1
 80049b4:	3320      	adds	r3, #32
 80049b6:	2200      	movs	r2, #0
 80049b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049ba:	7bfa      	ldrb	r2, [r7, #15]
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	440b      	add	r3, r1
 80049c8:	3324      	adds	r3, #36	; 0x24
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	440b      	add	r3, r1
 80049de:	2200      	movs	r2, #0
 80049e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	3301      	adds	r3, #1
 80049e6:	73fb      	strb	r3, [r7, #15]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	791b      	ldrb	r3, [r3, #4]
 80049ec:	7bfa      	ldrb	r2, [r7, #15]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d3bb      	bcc.n	800496a <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f2:	2300      	movs	r3, #0
 80049f4:	73fb      	strb	r3, [r7, #15]
 80049f6:	e044      	b.n	8004a82 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049f8:	7bfa      	ldrb	r2, [r7, #15]
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	440b      	add	r3, r1
 8004a06:	f203 1351 	addw	r3, r3, #337	; 0x151
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a0e:	7bfa      	ldrb	r2, [r7, #15]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	440b      	add	r3, r1
 8004a1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004a20:	7bfa      	ldrb	r2, [r7, #15]
 8004a22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a24:	7bfa      	ldrb	r2, [r7, #15]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	4413      	add	r3, r2
 8004a2e:	00db      	lsls	r3, r3, #3
 8004a30:	440b      	add	r3, r1
 8004a32:	f203 1353 	addw	r3, r3, #339	; 0x153
 8004a36:	2200      	movs	r2, #0
 8004a38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a3a:	7bfa      	ldrb	r2, [r7, #15]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	440b      	add	r3, r1
 8004a48:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a50:	7bfa      	ldrb	r2, [r7, #15]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	440b      	add	r3, r1
 8004a5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a66:	7bfa      	ldrb	r2, [r7, #15]
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	440b      	add	r3, r1
 8004a74:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004a78:	2200      	movs	r2, #0
 8004a7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	791b      	ldrb	r3, [r3, #4]
 8004a86:	7bfa      	ldrb	r2, [r7, #15]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d3b5      	bcc.n	80049f8 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6818      	ldr	r0, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	3304      	adds	r3, #4
 8004a94:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004a98:	f004 f9b4 	bl	8008e04 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	7a9b      	ldrb	r3, [r3, #10]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d102      	bne.n	8004ab8 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f001 fc41 	bl	800633a <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b082      	sub	sp, #8
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_PCD_Start+0x16>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e012      	b.n	8004afe <HAL_PCD_Start+0x3c>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f004 f95b 	bl	8008da0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f006 fc1b 	bl	800b32a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f006 fc20 	bl	800b358 <USB_ReadInterrupts>
 8004b18:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d003      	beq.n	8004b2c <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 fb04 	bl	8005132 <PCD_EP_ISR_Handler>

    return;
 8004b2a:	e110      	b.n	8004d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d013      	beq.n	8004b5e <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b3e:	b29a      	uxth	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b48:	b292      	uxth	r2, r2
 8004b4a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f00a fd53 	bl	800f5fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b54:	2100      	movs	r1, #0
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f8fc 	bl	8004d54 <HAL_PCD_SetAddress>

    return;
 8004b5c:	e0f7      	b.n	8004d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00c      	beq.n	8004b82 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b7a:	b292      	uxth	r2, r2
 8004b7c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004b80:	e0e5      	b.n	8004d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00c      	beq.n	8004ba6 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b94:	b29a      	uxth	r2, r3
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b9e:	b292      	uxth	r2, r2
 8004ba0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004ba4:	e0d3      	b.n	8004d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d034      	beq.n	8004c1a <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0204 	bic.w	r2, r2, #4
 8004bc2:	b292      	uxth	r2, r2
 8004bc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f022 0208 	bic.w	r2, r2, #8
 8004bda:	b292      	uxth	r2, r2
 8004bdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d107      	bne.n	8004bfa <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f00a fef3 	bl	800f9e0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f00a fd36 	bl	800f66c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c08:	b29a      	uxth	r2, r3
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c12:	b292      	uxth	r2, r2
 8004c14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004c18:	e099      	b.n	8004d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d027      	beq.n	8004c74 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f042 0208 	orr.w	r2, r2, #8
 8004c36:	b292      	uxth	r2, r2
 8004c38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c4e:	b292      	uxth	r2, r2
 8004c50:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004c5c:	b29a      	uxth	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f042 0204 	orr.w	r2, r2, #4
 8004c66:	b292      	uxth	r2, r2
 8004c68:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f00a fce3 	bl	800f638 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004c72:	e06c      	b.n	8004d4e <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d040      	beq.n	8004d00 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c90:	b292      	uxth	r2, r2
 8004c92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d12b      	bne.n	8004cf8 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0204 	orr.w	r2, r2, #4
 8004cb2:	b292      	uxth	r2, r2
 8004cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0208 	orr.w	r2, r2, #8
 8004cca:	b292      	uxth	r2, r2
 8004ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	089b      	lsrs	r3, r3, #2
 8004ce4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004cee:	2101      	movs	r1, #1
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f00a fe75 	bl	800f9e0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004cf6:	e02a      	b.n	8004d4e <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f00a fc9d 	bl	800f638 <HAL_PCD_SuspendCallback>
    return;
 8004cfe:	e026      	b.n	8004d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00f      	beq.n	8004d2a <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d12:	b29a      	uxth	r2, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004d1c:	b292      	uxth	r2, r2
 8004d1e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f00a fc5b 	bl	800f5de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004d28:	e011      	b.n	8004d4e <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00c      	beq.n	8004d4e <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004d3c:	b29a      	uxth	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d46:	b292      	uxth	r2, r2
 8004d48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004d4c:	bf00      	nop
  }
}
 8004d4e:	3710      	adds	r7, #16
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}

08004d54 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d101      	bne.n	8004d6e <HAL_PCD_SetAddress+0x1a>
 8004d6a:	2302      	movs	r3, #2
 8004d6c:	e012      	b.n	8004d94 <HAL_PCD_SetAddress+0x40>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2201      	movs	r2, #1
 8004d72:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	78fa      	ldrb	r2, [r7, #3]
 8004d82:	4611      	mov	r1, r2
 8004d84:	4618      	mov	r0, r3
 8004d86:	f006 fabc 	bl	800b302 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	4608      	mov	r0, r1
 8004da6:	4611      	mov	r1, r2
 8004da8:	461a      	mov	r2, r3
 8004daa:	4603      	mov	r3, r0
 8004dac:	70fb      	strb	r3, [r7, #3]
 8004dae:	460b      	mov	r3, r1
 8004db0:	803b      	strh	r3, [r7, #0]
 8004db2:	4613      	mov	r3, r2
 8004db4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	da0e      	bge.n	8004de0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	f003 0207 	and.w	r2, r3, #7
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	3310      	adds	r3, #16
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	705a      	strb	r2, [r3, #1]
 8004dde:	e00e      	b.n	8004dfe <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	f003 0207 	and.w	r2, r3, #7
 8004de6:	4613      	mov	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4413      	add	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	4413      	add	r3, r2
 8004df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	b2da      	uxtb	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e0a:	883a      	ldrh	r2, [r7, #0]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	78ba      	ldrb	r2, [r7, #2]
 8004e14:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e16:	78bb      	ldrb	r3, [r7, #2]
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d102      	bne.n	8004e22 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_PCD_EP_Open+0x94>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e00e      	b.n	8004e4e <HAL_PCD_EP_Open+0xb2>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68f9      	ldr	r1, [r7, #12]
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f003 fffe 	bl	8008e40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8004e4c:	7afb      	ldrb	r3, [r7, #11]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}

08004e56 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	460b      	mov	r3, r1
 8004e60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004e62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	da0e      	bge.n	8004e88 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e6a:	78fb      	ldrb	r3, [r7, #3]
 8004e6c:	f003 0207 	and.w	r2, r3, #7
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	3310      	adds	r3, #16
 8004e7a:	687a      	ldr	r2, [r7, #4]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2201      	movs	r2, #1
 8004e84:	705a      	strb	r2, [r3, #1]
 8004e86:	e00e      	b.n	8004ea6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e88:	78fb      	ldrb	r3, [r7, #3]
 8004e8a:	f003 0207 	and.w	r2, r3, #7
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	00db      	lsls	r3, r3, #3
 8004e96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d101      	bne.n	8004ec0 <HAL_PCD_EP_Close+0x6a>
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	e00e      	b.n	8004ede <HAL_PCD_EP_Close+0x88>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68f9      	ldr	r1, [r7, #12]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f004 fb7a 	bl	80095c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b086      	sub	sp, #24
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	607a      	str	r2, [r7, #4]
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ef6:	7afb      	ldrb	r3, [r7, #11]
 8004ef8:	f003 0207 	and.w	r2, r3, #7
 8004efc:	4613      	mov	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4413      	add	r3, r2
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2200      	movs	r2, #0
 8004f24:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f26:	7afb      	ldrb	r3, [r7, #11]
 8004f28:	f003 0307 	and.w	r3, r3, #7
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6979      	ldr	r1, [r7, #20]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f004 fd32 	bl	80099a2 <USB_EPStartXfer>

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b083      	sub	sp, #12
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f54:	78fb      	ldrb	r3, [r7, #3]
 8004f56:	f003 0207 	and.w	r2, r3, #7
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	4613      	mov	r3, r2
 8004f5e:	009b      	lsls	r3, r3, #2
 8004f60:	4413      	add	r3, r2
 8004f62:	00db      	lsls	r3, r3, #3
 8004f64:	440b      	add	r3, r1
 8004f66:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004f6a:	681b      	ldr	r3, [r3, #0]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b086      	sub	sp, #24
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	60f8      	str	r0, [r7, #12]
 8004f80:	607a      	str	r2, [r7, #4]
 8004f82:	603b      	str	r3, [r7, #0]
 8004f84:	460b      	mov	r3, r1
 8004f86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f88:	7afb      	ldrb	r3, [r7, #11]
 8004f8a:	f003 0207 	and.w	r2, r3, #7
 8004f8e:	4613      	mov	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	4413      	add	r3, r2
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	3310      	adds	r3, #16
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2201      	movs	r2, #1
 8004fae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fc4:	7afb      	ldrb	r3, [r7, #11]
 8004fc6:	f003 0307 	and.w	r3, r3, #7
 8004fca:	b2da      	uxtb	r2, r3
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6979      	ldr	r1, [r7, #20]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f004 fce3 	bl	80099a2 <USB_EPStartXfer>

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b084      	sub	sp, #16
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	460b      	mov	r3, r1
 8004ff0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ff2:	78fb      	ldrb	r3, [r7, #3]
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	7912      	ldrb	r2, [r2, #4]
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e03e      	b.n	8005082 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005008:	2b00      	cmp	r3, #0
 800500a:	da0e      	bge.n	800502a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800500c:	78fb      	ldrb	r3, [r7, #3]
 800500e:	f003 0207 	and.w	r2, r3, #7
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	3310      	adds	r3, #16
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	4413      	add	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2201      	movs	r2, #1
 8005026:	705a      	strb	r2, [r3, #1]
 8005028:	e00c      	b.n	8005044 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800502a:	78fa      	ldrb	r2, [r7, #3]
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	4413      	add	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2200      	movs	r2, #0
 8005042:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2201      	movs	r2, #1
 8005048:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	b2da      	uxtb	r2, r3
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800505c:	2b01      	cmp	r3, #1
 800505e:	d101      	bne.n	8005064 <HAL_PCD_EP_SetStall+0x7e>
 8005060:	2302      	movs	r3, #2
 8005062:	e00e      	b.n	8005082 <HAL_PCD_EP_SetStall+0x9c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68f9      	ldr	r1, [r7, #12]
 8005072:	4618      	mov	r0, r3
 8005074:	f006 f846 	bl	800b104 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b084      	sub	sp, #16
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	460b      	mov	r3, r1
 8005094:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005096:	78fb      	ldrb	r3, [r7, #3]
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	7912      	ldrb	r2, [r2, #4]
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d901      	bls.n	80050a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e040      	b.n	800512a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80050a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	da0e      	bge.n	80050ce <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050b0:	78fb      	ldrb	r3, [r7, #3]
 80050b2:	f003 0207 	and.w	r2, r3, #7
 80050b6:	4613      	mov	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4413      	add	r3, r2
 80050bc:	00db      	lsls	r3, r3, #3
 80050be:	3310      	adds	r3, #16
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	4413      	add	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	705a      	strb	r2, [r3, #1]
 80050cc:	e00e      	b.n	80050ec <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	f003 0207 	and.w	r2, r3, #7
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	00db      	lsls	r3, r3, #3
 80050dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	4413      	add	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2200      	movs	r2, #0
 80050ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	2200      	movs	r2, #0
 80050f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80050f2:	78fb      	ldrb	r3, [r7, #3]
 80050f4:	f003 0307 	and.w	r3, r3, #7
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005104:	2b01      	cmp	r3, #1
 8005106:	d101      	bne.n	800510c <HAL_PCD_EP_ClrStall+0x82>
 8005108:	2302      	movs	r3, #2
 800510a:	e00e      	b.n	800512a <HAL_PCD_EP_ClrStall+0xa0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68f9      	ldr	r1, [r7, #12]
 800511a:	4618      	mov	r0, r3
 800511c:	f006 f843 	bl	800b1a6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8005132:	b580      	push	{r7, lr}
 8005134:	b096      	sub	sp, #88	; 0x58
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800513a:	e3ae      	b.n	800589a <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005144:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8005148:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800514c:	b2db      	uxtb	r3, r3
 800514e:	f003 030f 	and.w	r3, r3, #15
 8005152:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8005156:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800515a:	2b00      	cmp	r3, #0
 800515c:	f040 8170 	bne.w	8005440 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8005160:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005164:	f003 0310 	and.w	r3, r3, #16
 8005168:	2b00      	cmp	r3, #0
 800516a:	d14d      	bne.n	8005208 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	881b      	ldrh	r3, [r3, #0]
 8005172:	b29b      	uxth	r3, r3
 8005174:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800517c:	81fb      	strh	r3, [r7, #14]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	89fb      	ldrh	r3, [r7, #14]
 8005184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800518c:	b29b      	uxth	r3, r3
 800518e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3310      	adds	r3, #16
 8005194:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519e:	b29b      	uxth	r3, r3
 80051a0:	461a      	mov	r2, r3
 80051a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4413      	add	r3, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	4413      	add	r3, r2
 80051b0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051b4:	881b      	ldrh	r3, [r3, #0]
 80051b6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80051ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051bc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80051be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051c0:	695a      	ldr	r2, [r3, #20]
 80051c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051c4:	69db      	ldr	r3, [r3, #28]
 80051c6:	441a      	add	r2, r3
 80051c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ca:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80051cc:	2100      	movs	r1, #0
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f00a f9eb 	bl	800f5aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	7b1b      	ldrb	r3, [r3, #12]
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 835d 	beq.w	800589a <PCD_EP_ISR_Handler+0x768>
 80051e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f040 8358 	bne.w	800589a <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	7b1b      	ldrb	r3, [r3, #12]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	b292      	uxth	r2, r2
 80051fc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	731a      	strb	r2, [r3, #12]
 8005206:	e348      	b.n	800589a <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800520e:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800521a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800521e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005222:	2b00      	cmp	r3, #0
 8005224:	d032      	beq.n	800528c <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522e:	b29b      	uxth	r3, r3
 8005230:	461a      	mov	r2, r3
 8005232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	4413      	add	r3, r2
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	4413      	add	r3, r2
 8005240:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005244:	881b      	ldrh	r3, [r3, #0]
 8005246:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800524a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800524c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6818      	ldr	r0, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8005258:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800525a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800525c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800525e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8005260:	b29b      	uxth	r3, r3
 8005262:	f006 f8cb 	bl	800b3fc <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	b29a      	uxth	r2, r3
 800526e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005272:	4013      	ands	r3, r2
 8005274:	823b      	strh	r3, [r7, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	8a3a      	ldrh	r2, [r7, #16]
 800527c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005280:	b292      	uxth	r2, r2
 8005282:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f00a f963 	bl	800f550 <HAL_PCD_SetupStageCallback>
 800528a:	e306      	b.n	800589a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800528c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005290:	2b00      	cmp	r3, #0
 8005292:	f280 8302 	bge.w	800589a <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	b29a      	uxth	r2, r3
 800529e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80052a2:	4013      	ands	r3, r2
 80052a4:	83fb      	strh	r3, [r7, #30]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	8bfa      	ldrh	r2, [r7, #30]
 80052ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80052b0:	b292      	uxth	r2, r2
 80052b2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052bc:	b29b      	uxth	r3, r3
 80052be:	461a      	mov	r2, r3
 80052c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	4413      	add	r3, r2
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	6812      	ldr	r2, [r2, #0]
 80052cc:	4413      	add	r3, r2
 80052ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052da:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80052dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d019      	beq.n	8005318 <PCD_EP_ISR_Handler+0x1e6>
 80052e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d015      	beq.n	8005318 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6818      	ldr	r0, [r3, #0]
 80052f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052f2:	6959      	ldr	r1, [r3, #20]
 80052f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052f6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80052f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052fa:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f006 f87d 	bl	800b3fc <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005304:	695a      	ldr	r2, [r3, #20]
 8005306:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005308:	69db      	ldr	r3, [r3, #28]
 800530a:	441a      	add	r2, r3
 800530c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800530e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005310:	2100      	movs	r1, #0
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f00a f92e 	bl	800f574 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	881b      	ldrh	r3, [r3, #0]
 800531e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005322:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005326:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800532a:	2b00      	cmp	r3, #0
 800532c:	f040 82b5 	bne.w	800589a <PCD_EP_ISR_Handler+0x768>
 8005330:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005334:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005338:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800533c:	f000 82ad 	beq.w	800589a <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800534e:	b29b      	uxth	r3, r3
 8005350:	461a      	mov	r2, r3
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	4413      	add	r3, r2
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	b29b      	uxth	r3, r3
 8005366:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800536a:	b29a      	uxth	r2, r3
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b3e      	cmp	r3, #62	; 0x3e
 8005376:	d91d      	bls.n	80053b4 <PCD_EP_ISR_Handler+0x282>
 8005378:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	095b      	lsrs	r3, r3, #5
 800537e:	647b      	str	r3, [r7, #68]	; 0x44
 8005380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	f003 031f 	and.w	r3, r3, #31
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <PCD_EP_ISR_Handler+0x260>
 800538c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800538e:	3b01      	subs	r3, #1
 8005390:	647b      	str	r3, [r7, #68]	; 0x44
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	881b      	ldrh	r3, [r3, #0]
 8005396:	b29a      	uxth	r2, r3
 8005398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800539a:	b29b      	uxth	r3, r3
 800539c:	029b      	lsls	r3, r3, #10
 800539e:	b29b      	uxth	r3, r3
 80053a0:	4313      	orrs	r3, r2
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	801a      	strh	r2, [r3, #0]
 80053b2:	e026      	b.n	8005402 <PCD_EP_ISR_Handler+0x2d0>
 80053b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053b6:	691b      	ldr	r3, [r3, #16]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10a      	bne.n	80053d2 <PCD_EP_ISR_Handler+0x2a0>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	801a      	strh	r2, [r3, #0]
 80053d0:	e017      	b.n	8005402 <PCD_EP_ISR_Handler+0x2d0>
 80053d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	085b      	lsrs	r3, r3, #1
 80053d8:	647b      	str	r3, [r7, #68]	; 0x44
 80053da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d002      	beq.n	80053ec <PCD_EP_ISR_Handler+0x2ba>
 80053e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053e8:	3301      	adds	r3, #1
 80053ea:	647b      	str	r3, [r7, #68]	; 0x44
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	881b      	ldrh	r3, [r3, #0]
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	029b      	lsls	r3, r3, #10
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	4313      	orrs	r3, r2
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	881b      	ldrh	r3, [r3, #0]
 8005408:	b29b      	uxth	r3, r3
 800540a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	827b      	strh	r3, [r7, #18]
 8005414:	8a7b      	ldrh	r3, [r7, #18]
 8005416:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800541a:	827b      	strh	r3, [r7, #18]
 800541c:	8a7b      	ldrh	r3, [r7, #18]
 800541e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005422:	827b      	strh	r3, [r7, #18]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	8a7b      	ldrh	r3, [r7, #18]
 800542a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800542e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005432:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005436:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800543a:	b29b      	uxth	r3, r3
 800543c:	8013      	strh	r3, [r2, #0]
 800543e:	e22c      	b.n	800589a <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8005454:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8005458:	2b00      	cmp	r3, #0
 800545a:	f280 80f6 	bge.w	800564a <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	4413      	add	r3, r2
 800546c:	881b      	ldrh	r3, [r3, #0]
 800546e:	b29a      	uxth	r2, r3
 8005470:	f640 738f 	movw	r3, #3983	; 0xf8f
 8005474:	4013      	ands	r3, r2
 8005476:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	461a      	mov	r2, r3
 8005480:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800548c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005490:	b292      	uxth	r2, r2
 8005492:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8005494:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	00db      	lsls	r3, r3, #3
 80054a0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	4413      	add	r3, r2
 80054a8:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80054aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ac:	7b1b      	ldrb	r3, [r3, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d123      	bne.n	80054fa <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	461a      	mov	r2, r3
 80054be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4413      	add	r3, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	6812      	ldr	r2, [r2, #0]
 80054ca:	4413      	add	r3, r2
 80054cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80054da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80054de:	2b00      	cmp	r3, #0
 80054e0:	f000 808e 	beq.w	8005600 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6818      	ldr	r0, [r3, #0]
 80054e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ea:	6959      	ldr	r1, [r3, #20]
 80054ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054ee:	88da      	ldrh	r2, [r3, #6]
 80054f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80054f4:	f005 ff82 	bl	800b3fc <USB_ReadPMA>
 80054f8:	e082      	b.n	8005600 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80054fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054fc:	78db      	ldrb	r3, [r3, #3]
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d10a      	bne.n	8005518 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8005502:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005506:	461a      	mov	r2, r3
 8005508:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f9d3 	bl	80058b6 <HAL_PCD_EP_DB_Receive>
 8005510:	4603      	mov	r3, r0
 8005512:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8005516:	e073      	b.n	8005600 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	461a      	mov	r2, r3
 800551e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	4413      	add	r3, r2
 8005526:	881b      	ldrh	r3, [r3, #0]
 8005528:	b29b      	uxth	r3, r3
 800552a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005532:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	441a      	add	r2, r3
 8005544:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8005548:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800554c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005558:	b29b      	uxth	r3, r3
 800555a:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	461a      	mov	r2, r3
 8005562:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	4413      	add	r3, r2
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	b29b      	uxth	r3, r3
 800556e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005572:	2b00      	cmp	r3, #0
 8005574:	d022      	beq.n	80055bc <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557e:	b29b      	uxth	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	4413      	add	r3, r2
 800558a:	687a      	ldr	r2, [r7, #4]
 800558c:	6812      	ldr	r2, [r2, #0]
 800558e:	4413      	add	r3, r2
 8005590:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800559a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800559e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d02c      	beq.n	8005600 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6818      	ldr	r0, [r3, #0]
 80055aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ac:	6959      	ldr	r1, [r3, #20]
 80055ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055b0:	891a      	ldrh	r2, [r3, #8]
 80055b2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80055b6:	f005 ff21 	bl	800b3fc <USB_ReadPMA>
 80055ba:	e021      	b.n	8005600 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	00db      	lsls	r3, r3, #3
 80055ce:	4413      	add	r3, r2
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6812      	ldr	r2, [r2, #0]
 80055d4:	4413      	add	r3, r2
 80055d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055da:	881b      	ldrh	r3, [r3, #0]
 80055dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055e0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80055e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6818      	ldr	r0, [r3, #0]
 80055f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055f2:	6959      	ldr	r1, [r3, #20]
 80055f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055f6:	895a      	ldrh	r2, [r3, #10]
 80055f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80055fc:	f005 fefe 	bl	800b3fc <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005608:	441a      	add	r2, r3
 800560a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800560c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800560e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005610:	695a      	ldr	r2, [r3, #20]
 8005612:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8005616:	441a      	add	r2, r3
 8005618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800561a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800561c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d005      	beq.n	8005630 <PCD_EP_ISR_Handler+0x4fe>
 8005624:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800562a:	691b      	ldr	r3, [r3, #16]
 800562c:	429a      	cmp	r2, r3
 800562e:	d206      	bcs.n	800563e <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	4619      	mov	r1, r3
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f009 ff9c 	bl	800f574 <HAL_PCD_DataOutStageCallback>
 800563c:	e005      	b.n	800564a <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005644:	4618      	mov	r0, r3
 8005646:	f004 f9ac 	bl	80099a2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800564a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	2b00      	cmp	r3, #0
 8005654:	f000 8121 	beq.w	800589a <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8005658:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	3310      	adds	r3, #16
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	4413      	add	r3, r2
 800566a:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	461a      	mov	r2, r3
 8005672:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	881b      	ldrh	r3, [r3, #0]
 800567c:	b29b      	uxth	r3, r3
 800567e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8005682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005686:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	441a      	add	r2, r3
 8005698:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800569c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80056a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056aa:	78db      	ldrb	r3, [r3, #3]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	f040 80a2 	bne.w	80057f6 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80056b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056b4:	2200      	movs	r2, #0
 80056b6:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80056b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ba:	7b1b      	ldrb	r3, [r3, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 8093 	beq.w	80057e8 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80056c2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80056c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d046      	beq.n	800575c <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80056ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056d0:	785b      	ldrb	r3, [r3, #1]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d126      	bne.n	8005724 <PCD_EP_ISR_Handler+0x5f2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	627b      	str	r3, [r7, #36]	; 0x24
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	461a      	mov	r2, r3
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	4413      	add	r3, r2
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24
 80056ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	00da      	lsls	r2, r3, #3
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	4413      	add	r3, r2
 80056f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80056fc:	623b      	str	r3, [r7, #32]
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	881b      	ldrh	r3, [r3, #0]
 8005702:	b29b      	uxth	r3, r3
 8005704:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005708:	b29a      	uxth	r2, r3
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	801a      	strh	r2, [r3, #0]
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	881b      	ldrh	r3, [r3, #0]
 8005712:	b29b      	uxth	r3, r3
 8005714:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005718:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800571c:	b29a      	uxth	r2, r3
 800571e:	6a3b      	ldr	r3, [r7, #32]
 8005720:	801a      	strh	r2, [r3, #0]
 8005722:	e061      	b.n	80057e8 <PCD_EP_ISR_Handler+0x6b6>
 8005724:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005726:	785b      	ldrb	r3, [r3, #1]
 8005728:	2b01      	cmp	r3, #1
 800572a:	d15d      	bne.n	80057e8 <PCD_EP_ISR_Handler+0x6b6>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573a:	b29b      	uxth	r3, r3
 800573c:	461a      	mov	r2, r3
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	4413      	add	r3, r2
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005744:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	00da      	lsls	r2, r3, #3
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	4413      	add	r3, r2
 800574e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	2200      	movs	r2, #0
 8005758:	801a      	strh	r2, [r3, #0]
 800575a:	e045      	b.n	80057e8 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005764:	785b      	ldrb	r3, [r3, #1]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d126      	bne.n	80057b8 <PCD_EP_ISR_Handler+0x686>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	637b      	str	r3, [r7, #52]	; 0x34
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005778:	b29b      	uxth	r3, r3
 800577a:	461a      	mov	r2, r3
 800577c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800577e:	4413      	add	r3, r2
 8005780:	637b      	str	r3, [r7, #52]	; 0x34
 8005782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	00da      	lsls	r2, r3, #3
 8005788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578a:	4413      	add	r3, r2
 800578c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005790:	633b      	str	r3, [r7, #48]	; 0x30
 8005792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	b29b      	uxth	r3, r3
 8005798:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800579c:	b29a      	uxth	r2, r3
 800579e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a0:	801a      	strh	r2, [r3, #0]
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	881b      	ldrh	r3, [r3, #0]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b4:	801a      	strh	r2, [r3, #0]
 80057b6:	e017      	b.n	80057e8 <PCD_EP_ISR_Handler+0x6b6>
 80057b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ba:	785b      	ldrb	r3, [r3, #1]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d113      	bne.n	80057e8 <PCD_EP_ISR_Handler+0x6b6>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	461a      	mov	r2, r3
 80057cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ce:	4413      	add	r3, r2
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	00da      	lsls	r2, r3, #3
 80057d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057da:	4413      	add	r3, r2
 80057dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80057e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e4:	2200      	movs	r2, #0
 80057e6:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80057e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	4619      	mov	r1, r3
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f009 fedb 	bl	800f5aa <HAL_PCD_DataInStageCallback>
 80057f4:	e051      	b.n	800589a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80057f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80057fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d144      	bne.n	800588c <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580a:	b29b      	uxth	r3, r3
 800580c:	461a      	mov	r2, r3
 800580e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4413      	add	r3, r2
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6812      	ldr	r2, [r2, #0]
 800581a:	4413      	add	r3, r2
 800581c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005826:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800582a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800582c:	699a      	ldr	r2, [r3, #24]
 800582e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005832:	429a      	cmp	r2, r3
 8005834:	d907      	bls.n	8005846 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8005836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800583e:	1ad2      	subs	r2, r2, r3
 8005840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005842:	619a      	str	r2, [r3, #24]
 8005844:	e002      	b.n	800584c <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8005846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005848:	2200      	movs	r2, #0
 800584a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800584c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800584e:	699b      	ldr	r3, [r3, #24]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d106      	bne.n	8005862 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f009 fea5 	bl	800f5aa <HAL_PCD_DataInStageCallback>
 8005860:	e01b      	b.n	800589a <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8005862:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800586a:	441a      	add	r2, r3
 800586c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800586e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005870:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005878:	441a      	add	r2, r3
 800587a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800587c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005884:	4618      	mov	r0, r3
 8005886:	f004 f88c 	bl	80099a2 <USB_EPStartXfer>
 800588a:	e006      	b.n	800589a <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800588c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005890:	461a      	mov	r2, r3
 8005892:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f917 	bl	8005ac8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	b21b      	sxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	f6ff ac48 	blt.w	800513c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3758      	adds	r7, #88	; 0x58
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}

080058b6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80058b6:	b580      	push	{r7, lr}
 80058b8:	b088      	sub	sp, #32
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	60f8      	str	r0, [r7, #12]
 80058be:	60b9      	str	r1, [r7, #8]
 80058c0:	4613      	mov	r3, r2
 80058c2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80058c4:	88fb      	ldrh	r3, [r7, #6]
 80058c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d07c      	beq.n	80059c8 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	461a      	mov	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4413      	add	r3, r2
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	4413      	add	r3, r2
 80058e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058ec:	881b      	ldrh	r3, [r3, #0]
 80058ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058f2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	699a      	ldr	r2, [r3, #24]
 80058f8:	8b7b      	ldrh	r3, [r7, #26]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d306      	bcc.n	800590c <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	699a      	ldr	r2, [r3, #24]
 8005902:	8b7b      	ldrh	r3, [r7, #26]
 8005904:	1ad2      	subs	r2, r2, r3
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	619a      	str	r2, [r3, #24]
 800590a:	e002      	b.n	8005912 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2200      	movs	r2, #0
 8005910:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d123      	bne.n	8005962 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	461a      	mov	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	881b      	ldrh	r3, [r3, #0]
 800592a:	b29b      	uxth	r3, r3
 800592c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005934:	833b      	strh	r3, [r7, #24]
 8005936:	8b3b      	ldrh	r3, [r7, #24]
 8005938:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800593c:	833b      	strh	r3, [r7, #24]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	441a      	add	r2, r3
 800594c:	8b3b      	ldrh	r3, [r7, #24]
 800594e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800595a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800595e:	b29b      	uxth	r3, r3
 8005960:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005962:	88fb      	ldrh	r3, [r7, #6]
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01f      	beq.n	80059ac <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	461a      	mov	r2, r3
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	781b      	ldrb	r3, [r3, #0]
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	881b      	ldrh	r3, [r3, #0]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005986:	82fb      	strh	r3, [r7, #22]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	461a      	mov	r2, r3
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	009b      	lsls	r3, r3, #2
 8005994:	441a      	add	r2, r3
 8005996:	8afb      	ldrh	r3, [r7, #22]
 8005998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800599c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80059a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80059ac:	8b7b      	ldrh	r3, [r7, #26]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 8085 	beq.w	8005abe <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	6959      	ldr	r1, [r3, #20]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	891a      	ldrh	r2, [r3, #8]
 80059c0:	8b7b      	ldrh	r3, [r7, #26]
 80059c2:	f005 fd1b 	bl	800b3fc <USB_ReadPMA>
 80059c6:	e07a      	b.n	8005abe <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	461a      	mov	r2, r3
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	4413      	add	r3, r2
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	6812      	ldr	r2, [r2, #0]
 80059e0:	4413      	add	r3, r2
 80059e2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059e6:	881b      	ldrh	r3, [r3, #0]
 80059e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80059ec:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	8b7b      	ldrh	r3, [r7, #26]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d306      	bcc.n	8005a06 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	699a      	ldr	r2, [r3, #24]
 80059fc:	8b7b      	ldrh	r3, [r7, #26]
 80059fe:	1ad2      	subs	r2, r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	619a      	str	r2, [r3, #24]
 8005a04:	e002      	b.n	8005a0c <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d123      	bne.n	8005a5c <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	461a      	mov	r2, r3
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	4413      	add	r3, r2
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a2e:	83fb      	strh	r3, [r7, #30]
 8005a30:	8bfb      	ldrh	r3, [r7, #30]
 8005a32:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005a36:	83fb      	strh	r3, [r7, #30]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	441a      	add	r2, r3
 8005a46:	8bfb      	ldrh	r3, [r7, #30]
 8005a48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a58:	b29b      	uxth	r3, r3
 8005a5a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d11f      	bne.n	8005aa6 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	881b      	ldrh	r3, [r3, #0]
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a80:	83bb      	strh	r3, [r7, #28]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	461a      	mov	r2, r3
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	441a      	add	r2, r3
 8005a90:	8bbb      	ldrh	r3, [r7, #28]
 8005a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005aa6:	8b7b      	ldrh	r3, [r7, #26]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d008      	beq.n	8005abe <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6818      	ldr	r0, [r3, #0]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	6959      	ldr	r1, [r3, #20]
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	895a      	ldrh	r2, [r3, #10]
 8005ab8:	8b7b      	ldrh	r3, [r7, #26]
 8005aba:	f005 fc9f 	bl	800b3fc <USB_ReadPMA>
    }
  }

  return count;
 8005abe:	8b7b      	ldrh	r3, [r7, #26]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3720      	adds	r7, #32
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b0a4      	sub	sp, #144	; 0x90
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f000 81db 	beq.w	8005e98 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005aea:	b29b      	uxth	r3, r3
 8005aec:	461a      	mov	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	00db      	lsls	r3, r3, #3
 8005af4:	4413      	add	r3, r2
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	6812      	ldr	r2, [r2, #0]
 8005afa:	4413      	add	r3, r2
 8005afc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b06:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d907      	bls.n	8005b26 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	699a      	ldr	r2, [r3, #24]
 8005b1a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005b1e:	1ad2      	subs	r2, r2, r3
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	619a      	str	r2, [r3, #24]
 8005b24:	e002      	b.n	8005b2c <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f040 80b9 	bne.w	8005ca8 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	785b      	ldrb	r3, [r3, #1]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d126      	bne.n	8005b8c <HAL_PCD_EP_DB_Transmit+0xc4>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	461a      	mov	r2, r3
 8005b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b52:	4413      	add	r3, r2
 8005b54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	00da      	lsls	r2, r3, #3
 8005b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5e:	4413      	add	r3, r2
 8005b60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b74:	801a      	strh	r2, [r3, #0]
 8005b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29b      	uxth	r3, r3
 8005b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b88:	801a      	strh	r2, [r3, #0]
 8005b8a:	e01a      	b.n	8005bc2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d116      	bne.n	8005bc2 <HAL_PCD_EP_DB_Transmit+0xfa>
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	637b      	str	r3, [r7, #52]	; 0x34
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba8:	4413      	add	r3, r2
 8005baa:	637b      	str	r3, [r7, #52]	; 0x34
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	00da      	lsls	r2, r3, #3
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb4:	4413      	add	r3, r2
 8005bb6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005bba:	633b      	str	r3, [r7, #48]	; 0x30
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	785b      	ldrb	r3, [r3, #1]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d126      	bne.n	8005c1e <HAL_PCD_EP_DB_Transmit+0x156>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	61fb      	str	r3, [r7, #28]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bde:	b29b      	uxth	r3, r3
 8005be0:	461a      	mov	r2, r3
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	4413      	add	r3, r2
 8005be6:	61fb      	str	r3, [r7, #28]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	00da      	lsls	r2, r3, #3
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	4413      	add	r3, r2
 8005bf2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	69bb      	ldr	r3, [r7, #24]
 8005bfa:	881b      	ldrh	r3, [r3, #0]
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c02:	b29a      	uxth	r2, r3
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	e017      	b.n	8005c4e <HAL_PCD_EP_DB_Transmit+0x186>
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	785b      	ldrb	r3, [r3, #1]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d113      	bne.n	8005c4e <HAL_PCD_EP_DB_Transmit+0x186>
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	461a      	mov	r2, r3
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	4413      	add	r3, r2
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	00da      	lsls	r2, r3, #3
 8005c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c40:	4413      	add	r3, r2
 8005c42:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c46:	623b      	str	r3, [r7, #32]
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	4619      	mov	r1, r3
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f009 fca8 	bl	800f5aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 82fa 	beq.w	800625a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	4413      	add	r3, r2
 8005c74:	881b      	ldrh	r3, [r3, #0]
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c80:	82fb      	strh	r3, [r7, #22]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	461a      	mov	r2, r3
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	441a      	add	r2, r3
 8005c90:	8afb      	ldrh	r3, [r7, #22]
 8005c92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	8013      	strh	r3, [r2, #0]
 8005ca6:	e2d8      	b.n	800625a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005ca8:	88fb      	ldrh	r3, [r7, #6]
 8005caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d021      	beq.n	8005cf6 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4413      	add	r3, r2
 8005cc0:	881b      	ldrh	r3, [r3, #0]
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ccc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	441a      	add	r2, r3
 8005cde:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005ce2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ce6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	f040 82ac 	bne.w	800625a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d0a:	441a      	add	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	69da      	ldr	r2, [r3, #28]
 8005d14:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d18:	441a      	add	r2, r3
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	6a1a      	ldr	r2, [r3, #32]
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d30b      	bcc.n	8005d42 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	6a1a      	ldr	r2, [r3, #32]
 8005d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d3a:	1ad2      	subs	r2, r2, r3
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	621a      	str	r2, [r3, #32]
 8005d40:	e017      	b.n	8005d72 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d108      	bne.n	8005d5c <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005d4a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d4e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005d5a:	e00a      	b.n	8005d72 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	785b      	ldrb	r3, [r3, #1]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d165      	bne.n	8005e46 <HAL_PCD_EP_DB_Transmit+0x37e>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d8e:	4413      	add	r3, r2
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	00da      	lsls	r2, r3, #3
 8005d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005da0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	881b      	ldrh	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dac:	b29a      	uxth	r2, r3
 8005dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005db0:	801a      	strh	r2, [r3, #0]
 8005db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005db6:	2b3e      	cmp	r3, #62	; 0x3e
 8005db8:	d91d      	bls.n	8005df6 <HAL_PCD_EP_DB_Transmit+0x32e>
 8005dba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dbe:	095b      	lsrs	r3, r3, #5
 8005dc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d102      	bne.n	8005dd4 <HAL_PCD_EP_DB_Transmit+0x30c>
 8005dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dd0:	3b01      	subs	r3, #1
 8005dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd6:	881b      	ldrh	r3, [r3, #0]
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	029b      	lsls	r3, r3, #10
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	4313      	orrs	r3, r2
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	801a      	strh	r2, [r3, #0]
 8005df4:	e044      	b.n	8005e80 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005df6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d10a      	bne.n	8005e14 <HAL_PCD_EP_DB_Transmit+0x34c>
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e00:	881b      	ldrh	r3, [r3, #0]
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e10:	801a      	strh	r2, [r3, #0]
 8005e12:	e035      	b.n	8005e80 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e18:	085b      	lsrs	r3, r3, #1
 8005e1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <HAL_PCD_EP_DB_Transmit+0x366>
 8005e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	029b      	lsls	r3, r3, #10
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	e01c      	b.n	8005e80 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	785b      	ldrb	r3, [r3, #1]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d118      	bne.n	8005e80 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	647b      	str	r3, [r7, #68]	; 0x44
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	461a      	mov	r2, r3
 8005e60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e62:	4413      	add	r3, r2
 8005e64:	647b      	str	r3, [r7, #68]	; 0x44
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	00da      	lsls	r2, r3, #3
 8005e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e6e:	4413      	add	r3, r2
 8005e70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005e74:	643b      	str	r3, [r7, #64]	; 0x40
 8005e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e7e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6818      	ldr	r0, [r3, #0]
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	6959      	ldr	r1, [r3, #20]
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	891a      	ldrh	r2, [r3, #8]
 8005e8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f005 fa71 	bl	800b378 <USB_WritePMA>
 8005e96:	e1e0      	b.n	800625a <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	461a      	mov	r2, r3
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	00db      	lsls	r3, r3, #3
 8005eaa:	4413      	add	r3, r2
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ebc:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	699a      	ldr	r2, [r3, #24]
 8005ec4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d307      	bcc.n	8005edc <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	699a      	ldr	r2, [r3, #24]
 8005ed0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005ed4:	1ad2      	subs	r2, r2, r3
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	619a      	str	r2, [r3, #24]
 8005eda:	e002      	b.n	8005ee2 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f040 80c0 	bne.w	800606c <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	785b      	ldrb	r3, [r3, #1]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d126      	bne.n	8005f42 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f08:	4413      	add	r3, r2
 8005f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	00da      	lsls	r2, r3, #3
 8005f12:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f14:	4413      	add	r3, r2
 8005f16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f1a:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f1e:	881b      	ldrh	r3, [r3, #0]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f2a:	801a      	strh	r2, [r3, #0]
 8005f2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f2e:	881b      	ldrh	r3, [r3, #0]
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f3a:	b29a      	uxth	r2, r3
 8005f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f3e:	801a      	strh	r2, [r3, #0]
 8005f40:	e01a      	b.n	8005f78 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	785b      	ldrb	r3, [r3, #1]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d116      	bne.n	8005f78 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	667b      	str	r3, [r7, #100]	; 0x64
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f5e:	4413      	add	r3, r2
 8005f60:	667b      	str	r3, [r7, #100]	; 0x64
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	781b      	ldrb	r3, [r3, #0]
 8005f66:	00da      	lsls	r2, r3, #3
 8005f68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005f70:	663b      	str	r3, [r7, #96]	; 0x60
 8005f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f74:	2200      	movs	r2, #0
 8005f76:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	677b      	str	r3, [r7, #116]	; 0x74
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	785b      	ldrb	r3, [r3, #1]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d12b      	bne.n	8005fde <HAL_PCD_EP_DB_Transmit+0x516>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	461a      	mov	r2, r3
 8005f98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f9a:	4413      	add	r3, r2
 8005f9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	00da      	lsls	r2, r3, #3
 8005fa4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005fac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fc8:	881b      	ldrh	r3, [r3, #0]
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005fda:	801a      	strh	r2, [r3, #0]
 8005fdc:	e017      	b.n	800600e <HAL_PCD_EP_DB_Transmit+0x546>
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	785b      	ldrb	r3, [r3, #1]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d113      	bne.n	800600e <HAL_PCD_EP_DB_Transmit+0x546>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ff4:	4413      	add	r3, r2
 8005ff6:	677b      	str	r3, [r7, #116]	; 0x74
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	00da      	lsls	r2, r3, #3
 8005ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006000:	4413      	add	r3, r2
 8006002:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006006:	673b      	str	r3, [r7, #112]	; 0x70
 8006008:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800600a:	2200      	movs	r2, #0
 800600c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	4619      	mov	r1, r3
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f009 fac8 	bl	800f5aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800601a:	88fb      	ldrh	r3, [r7, #6]
 800601c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006020:	2b00      	cmp	r3, #0
 8006022:	f040 811a 	bne.w	800625a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	461a      	mov	r2, r3
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006040:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	781b      	ldrb	r3, [r3, #0]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	441a      	add	r2, r3
 8006052:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8006056:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800605e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006066:	b29b      	uxth	r3, r3
 8006068:	8013      	strh	r3, [r2, #0]
 800606a:	e0f6      	b.n	800625a <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800606c:	88fb      	ldrh	r3, [r7, #6]
 800606e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d121      	bne.n	80060ba <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	4413      	add	r3, r2
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	b29b      	uxth	r3, r3
 8006088:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006090:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	461a      	mov	r2, r3
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	441a      	add	r2, r3
 80060a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80060a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80060c0:	2b01      	cmp	r3, #1
 80060c2:	f040 80ca 	bne.w	800625a <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	695a      	ldr	r2, [r3, #20]
 80060ca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80060ce:	441a      	add	r2, r3
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	69da      	ldr	r2, [r3, #28]
 80060d8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80060dc:	441a      	add	r2, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	6a1a      	ldr	r2, [r3, #32]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d30b      	bcc.n	8006106 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	6a1a      	ldr	r2, [r3, #32]
 80060fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80060fe:	1ad2      	subs	r2, r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	621a      	str	r2, [r3, #32]
 8006104:	e017      	b.n	8006136 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d108      	bne.n	8006120 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800610e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800611e:	e00a      	b.n	8006136 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	6a1b      	ldr	r3, [r3, #32]
 8006124:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	2200      	movs	r2, #0
 800612c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	657b      	str	r3, [r7, #84]	; 0x54
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	785b      	ldrb	r3, [r3, #1]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d165      	bne.n	8006210 <HAL_PCD_EP_DB_Transmit+0x748>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	65fb      	str	r3, [r7, #92]	; 0x5c
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006152:	b29b      	uxth	r3, r3
 8006154:	461a      	mov	r2, r3
 8006156:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006158:	4413      	add	r3, r2
 800615a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	00da      	lsls	r2, r3, #3
 8006162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006164:	4413      	add	r3, r2
 8006166:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800616a:	65bb      	str	r3, [r7, #88]	; 0x58
 800616c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006176:	b29a      	uxth	r2, r3
 8006178:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800617a:	801a      	strh	r2, [r3, #0]
 800617c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006180:	2b3e      	cmp	r3, #62	; 0x3e
 8006182:	d91d      	bls.n	80061c0 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8006184:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006188:	095b      	lsrs	r3, r3, #5
 800618a:	66bb      	str	r3, [r7, #104]	; 0x68
 800618c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	2b00      	cmp	r3, #0
 8006196:	d102      	bne.n	800619e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8006198:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800619a:	3b01      	subs	r3, #1
 800619c:	66bb      	str	r3, [r7, #104]	; 0x68
 800619e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	029b      	lsls	r3, r3, #10
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	4313      	orrs	r3, r2
 80061ae:	b29b      	uxth	r3, r3
 80061b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061bc:	801a      	strh	r2, [r3, #0]
 80061be:	e041      	b.n	8006244 <HAL_PCD_EP_DB_Transmit+0x77c>
 80061c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d10a      	bne.n	80061de <HAL_PCD_EP_DB_Transmit+0x716>
 80061c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061ca:	881b      	ldrh	r3, [r3, #0]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061da:	801a      	strh	r2, [r3, #0]
 80061dc:	e032      	b.n	8006244 <HAL_PCD_EP_DB_Transmit+0x77c>
 80061de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061e2:	085b      	lsrs	r3, r3, #1
 80061e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80061e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061ea:	f003 0301 	and.w	r3, r3, #1
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d002      	beq.n	80061f8 <HAL_PCD_EP_DB_Transmit+0x730>
 80061f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80061f4:	3301      	adds	r3, #1
 80061f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80061f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006200:	b29b      	uxth	r3, r3
 8006202:	029b      	lsls	r3, r3, #10
 8006204:	b29b      	uxth	r3, r3
 8006206:	4313      	orrs	r3, r2
 8006208:	b29a      	uxth	r2, r3
 800620a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800620c:	801a      	strh	r2, [r3, #0]
 800620e:	e019      	b.n	8006244 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	785b      	ldrb	r3, [r3, #1]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d115      	bne.n	8006244 <HAL_PCD_EP_DB_Transmit+0x77c>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006220:	b29b      	uxth	r3, r3
 8006222:	461a      	mov	r2, r3
 8006224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006226:	4413      	add	r3, r2
 8006228:	657b      	str	r3, [r7, #84]	; 0x54
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	00da      	lsls	r2, r3, #3
 8006230:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006232:	4413      	add	r3, r2
 8006234:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006238:	653b      	str	r3, [r7, #80]	; 0x50
 800623a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800623e:	b29a      	uxth	r2, r3
 8006240:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006242:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	6959      	ldr	r1, [r3, #20]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	895a      	ldrh	r2, [r3, #10]
 8006250:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006254:	b29b      	uxth	r3, r3
 8006256:	f005 f88f 	bl	800b378 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	781b      	ldrb	r3, [r3, #0]
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006274:	82bb      	strh	r3, [r7, #20]
 8006276:	8abb      	ldrh	r3, [r7, #20]
 8006278:	f083 0310 	eor.w	r3, r3, #16
 800627c:	82bb      	strh	r3, [r7, #20]
 800627e:	8abb      	ldrh	r3, [r7, #20]
 8006280:	f083 0320 	eor.w	r3, r3, #32
 8006284:	82bb      	strh	r3, [r7, #20]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	461a      	mov	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	441a      	add	r2, r3
 8006294:	8abb      	ldrh	r3, [r7, #20]
 8006296:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800629a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800629e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3790      	adds	r7, #144	; 0x90
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	607b      	str	r3, [r7, #4]
 80062be:	460b      	mov	r3, r1
 80062c0:	817b      	strh	r3, [r7, #10]
 80062c2:	4613      	mov	r3, r2
 80062c4:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80062c6:	897b      	ldrh	r3, [r7, #10]
 80062c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00b      	beq.n	80062ea <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062d2:	897b      	ldrh	r3, [r7, #10]
 80062d4:	f003 0207 	and.w	r2, r3, #7
 80062d8:	4613      	mov	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	3310      	adds	r3, #16
 80062e2:	68fa      	ldr	r2, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	e009      	b.n	80062fe <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062ea:	897a      	ldrh	r2, [r7, #10]
 80062ec:	4613      	mov	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	00db      	lsls	r3, r3, #3
 80062f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80062fe:	893b      	ldrh	r3, [r7, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d107      	bne.n	8006314 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	2200      	movs	r2, #0
 8006308:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	b29a      	uxth	r2, r3
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	80da      	strh	r2, [r3, #6]
 8006312:	e00b      	b.n	800632c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	2201      	movs	r2, #1
 8006318:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	b29a      	uxth	r2, r3
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	0c1b      	lsrs	r3, r3, #16
 8006326:	b29a      	uxth	r2, r3
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	371c      	adds	r7, #28
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800633a:	b480      	push	{r7}
 800633c:	b085      	sub	sp, #20
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2200      	movs	r2, #0
 8006354:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800635e:	b29b      	uxth	r3, r3
 8006360:	f043 0301 	orr.w	r3, r3, #1
 8006364:	b29a      	uxth	r2, r3
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006372:	b29b      	uxth	r3, r3
 8006374:	f043 0302 	orr.w	r3, r3, #2
 8006378:	b29a      	uxth	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
	...

08006390 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006390:	b480      	push	{r7}
 8006392:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006394:	4b05      	ldr	r3, [pc, #20]	; (80063ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a04      	ldr	r2, [pc, #16]	; (80063ac <HAL_PWR_EnableBkUpAccess+0x1c>)
 800639a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800639e:	6013      	str	r3, [r2, #0]
}
 80063a0:	bf00      	nop
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	40007000 	.word	0x40007000

080063b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d141      	bne.n	8006442 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80063be:	4b4b      	ldr	r3, [pc, #300]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80063c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ca:	d131      	bne.n	8006430 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80063cc:	4b47      	ldr	r3, [pc, #284]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80063d2:	4a46      	ldr	r2, [pc, #280]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80063dc:	4b43      	ldr	r3, [pc, #268]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80063e4:	4a41      	ldr	r2, [pc, #260]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80063e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80063ea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80063ec:	4b40      	ldr	r3, [pc, #256]	; (80064f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	2232      	movs	r2, #50	; 0x32
 80063f2:	fb02 f303 	mul.w	r3, r2, r3
 80063f6:	4a3f      	ldr	r2, [pc, #252]	; (80064f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80063f8:	fba2 2303 	umull	r2, r3, r2, r3
 80063fc:	0c9b      	lsrs	r3, r3, #18
 80063fe:	3301      	adds	r3, #1
 8006400:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006402:	e002      	b.n	800640a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3b01      	subs	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800640a:	4b38      	ldr	r3, [pc, #224]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800640c:	695b      	ldr	r3, [r3, #20]
 800640e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006412:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006416:	d102      	bne.n	800641e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d1f2      	bne.n	8006404 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800641e:	4b33      	ldr	r3, [pc, #204]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800642a:	d158      	bne.n	80064de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e057      	b.n	80064e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006430:	4b2e      	ldr	r3, [pc, #184]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006432:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006436:	4a2d      	ldr	r2, [pc, #180]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006438:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800643c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006440:	e04d      	b.n	80064de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006448:	d141      	bne.n	80064ce <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800644a:	4b28      	ldr	r3, [pc, #160]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006456:	d131      	bne.n	80064bc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006458:	4b24      	ldr	r3, [pc, #144]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800645a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800645e:	4a23      	ldr	r2, [pc, #140]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006464:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006468:	4b20      	ldr	r3, [pc, #128]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006470:	4a1e      	ldr	r2, [pc, #120]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006472:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006476:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006478:	4b1d      	ldr	r3, [pc, #116]	; (80064f0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2232      	movs	r2, #50	; 0x32
 800647e:	fb02 f303 	mul.w	r3, r2, r3
 8006482:	4a1c      	ldr	r2, [pc, #112]	; (80064f4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006484:	fba2 2303 	umull	r2, r3, r2, r3
 8006488:	0c9b      	lsrs	r3, r3, #18
 800648a:	3301      	adds	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800648e:	e002      	b.n	8006496 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	3b01      	subs	r3, #1
 8006494:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006496:	4b15      	ldr	r3, [pc, #84]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006498:	695b      	ldr	r3, [r3, #20]
 800649a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800649e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a2:	d102      	bne.n	80064aa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d1f2      	bne.n	8006490 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80064aa:	4b10      	ldr	r3, [pc, #64]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064b6:	d112      	bne.n	80064de <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	e011      	b.n	80064e0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80064bc:	4b0b      	ldr	r3, [pc, #44]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064c2:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80064cc:	e007      	b.n	80064de <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80064ce:	4b07      	ldr	r3, [pc, #28]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80064d6:	4a05      	ldr	r2, [pc, #20]	; (80064ec <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80064d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064dc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3714      	adds	r7, #20
 80064e4:	46bd      	mov	sp, r7
 80064e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ea:	4770      	bx	lr
 80064ec:	40007000 	.word	0x40007000
 80064f0:	2000000c 	.word	0x2000000c
 80064f4:	431bde83 	.word	0x431bde83

080064f8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80064f8:	b480      	push	{r7}
 80064fa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80064fc:	4b05      	ldr	r3, [pc, #20]	; (8006514 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	4a04      	ldr	r2, [pc, #16]	; (8006514 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006502:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006506:	6093      	str	r3, [r2, #8]
}
 8006508:	bf00      	nop
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr
 8006512:	bf00      	nop
 8006514:	40007000 	.word	0x40007000

08006518 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b088      	sub	sp, #32
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e2fe      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0301 	and.w	r3, r3, #1
 8006532:	2b00      	cmp	r3, #0
 8006534:	d075      	beq.n	8006622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006536:	4b97      	ldr	r3, [pc, #604]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	f003 030c 	and.w	r3, r3, #12
 800653e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006540:	4b94      	ldr	r3, [pc, #592]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	2b0c      	cmp	r3, #12
 800654e:	d102      	bne.n	8006556 <HAL_RCC_OscConfig+0x3e>
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2b03      	cmp	r3, #3
 8006554:	d002      	beq.n	800655c <HAL_RCC_OscConfig+0x44>
 8006556:	69bb      	ldr	r3, [r7, #24]
 8006558:	2b08      	cmp	r3, #8
 800655a:	d10b      	bne.n	8006574 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800655c:	4b8d      	ldr	r3, [pc, #564]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006564:	2b00      	cmp	r3, #0
 8006566:	d05b      	beq.n	8006620 <HAL_RCC_OscConfig+0x108>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d157      	bne.n	8006620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e2d9      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800657c:	d106      	bne.n	800658c <HAL_RCC_OscConfig+0x74>
 800657e:	4b85      	ldr	r3, [pc, #532]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a84      	ldr	r2, [pc, #528]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 8006584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006588:	6013      	str	r3, [r2, #0]
 800658a:	e01d      	b.n	80065c8 <HAL_RCC_OscConfig+0xb0>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006594:	d10c      	bne.n	80065b0 <HAL_RCC_OscConfig+0x98>
 8006596:	4b7f      	ldr	r3, [pc, #508]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a7e      	ldr	r2, [pc, #504]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 800659c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065a0:	6013      	str	r3, [r2, #0]
 80065a2:	4b7c      	ldr	r3, [pc, #496]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a7b      	ldr	r2, [pc, #492]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 80065a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065ac:	6013      	str	r3, [r2, #0]
 80065ae:	e00b      	b.n	80065c8 <HAL_RCC_OscConfig+0xb0>
 80065b0:	4b78      	ldr	r3, [pc, #480]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a77      	ldr	r2, [pc, #476]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 80065b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	4b75      	ldr	r3, [pc, #468]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a74      	ldr	r2, [pc, #464]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 80065c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d013      	beq.n	80065f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065d0:	f7fa fda4 	bl	800111c <HAL_GetTick>
 80065d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065d6:	e008      	b.n	80065ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065d8:	f7fa fda0 	bl	800111c <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	2b64      	cmp	r3, #100	; 0x64
 80065e4:	d901      	bls.n	80065ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e29e      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065ea:	4b6a      	ldr	r3, [pc, #424]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d0f0      	beq.n	80065d8 <HAL_RCC_OscConfig+0xc0>
 80065f6:	e014      	b.n	8006622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065f8:	f7fa fd90 	bl	800111c <HAL_GetTick>
 80065fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80065fe:	e008      	b.n	8006612 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006600:	f7fa fd8c 	bl	800111c <HAL_GetTick>
 8006604:	4602      	mov	r2, r0
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	1ad3      	subs	r3, r2, r3
 800660a:	2b64      	cmp	r3, #100	; 0x64
 800660c:	d901      	bls.n	8006612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e28a      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006612:	4b60      	ldr	r3, [pc, #384]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1f0      	bne.n	8006600 <HAL_RCC_OscConfig+0xe8>
 800661e:	e000      	b.n	8006622 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b00      	cmp	r3, #0
 800662c:	d075      	beq.n	800671a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800662e:	4b59      	ldr	r3, [pc, #356]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 030c 	and.w	r3, r3, #12
 8006636:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006638:	4b56      	ldr	r3, [pc, #344]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f003 0303 	and.w	r3, r3, #3
 8006640:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	2b0c      	cmp	r3, #12
 8006646:	d102      	bne.n	800664e <HAL_RCC_OscConfig+0x136>
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2b02      	cmp	r3, #2
 800664c:	d002      	beq.n	8006654 <HAL_RCC_OscConfig+0x13c>
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	2b04      	cmp	r3, #4
 8006652:	d11f      	bne.n	8006694 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006654:	4b4f      	ldr	r3, [pc, #316]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800665c:	2b00      	cmp	r3, #0
 800665e:	d005      	beq.n	800666c <HAL_RCC_OscConfig+0x154>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d101      	bne.n	800666c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	e25d      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800666c:	4b49      	ldr	r3, [pc, #292]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	061b      	lsls	r3, r3, #24
 800667a:	4946      	ldr	r1, [pc, #280]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 800667c:	4313      	orrs	r3, r2
 800667e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006680:	4b45      	ldr	r3, [pc, #276]	; (8006798 <HAL_RCC_OscConfig+0x280>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4618      	mov	r0, r3
 8006686:	f7fa fcfd 	bl	8001084 <HAL_InitTick>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d043      	beq.n	8006718 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e249      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d023      	beq.n	80066e4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800669c:	4b3d      	ldr	r3, [pc, #244]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a3c      	ldr	r2, [pc, #240]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 80066a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066a8:	f7fa fd38 	bl	800111c <HAL_GetTick>
 80066ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066ae:	e008      	b.n	80066c2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066b0:	f7fa fd34 	bl	800111c <HAL_GetTick>
 80066b4:	4602      	mov	r2, r0
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	1ad3      	subs	r3, r2, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d901      	bls.n	80066c2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80066be:	2303      	movs	r3, #3
 80066c0:	e232      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066c2:	4b34      	ldr	r3, [pc, #208]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d0f0      	beq.n	80066b0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066ce:	4b31      	ldr	r3, [pc, #196]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	691b      	ldr	r3, [r3, #16]
 80066da:	061b      	lsls	r3, r3, #24
 80066dc:	492d      	ldr	r1, [pc, #180]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	604b      	str	r3, [r1, #4]
 80066e2:	e01a      	b.n	800671a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066e4:	4b2b      	ldr	r3, [pc, #172]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2a      	ldr	r2, [pc, #168]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 80066ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f0:	f7fa fd14 	bl	800111c <HAL_GetTick>
 80066f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80066f6:	e008      	b.n	800670a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066f8:	f7fa fd10 	bl	800111c <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b02      	cmp	r3, #2
 8006704:	d901      	bls.n	800670a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e20e      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800670a:	4b22      	ldr	r3, [pc, #136]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1f0      	bne.n	80066f8 <HAL_RCC_OscConfig+0x1e0>
 8006716:	e000      	b.n	800671a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006718:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	2b00      	cmp	r3, #0
 8006724:	d041      	beq.n	80067aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d01c      	beq.n	8006768 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800672e:	4b19      	ldr	r3, [pc, #100]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 8006730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006734:	4a17      	ldr	r2, [pc, #92]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 8006736:	f043 0301 	orr.w	r3, r3, #1
 800673a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673e:	f7fa fced 	bl	800111c <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006746:	f7fa fce9 	bl	800111c <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e1e7      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006758:	4b0e      	ldr	r3, [pc, #56]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 800675a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0ef      	beq.n	8006746 <HAL_RCC_OscConfig+0x22e>
 8006766:	e020      	b.n	80067aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006768:	4b0a      	ldr	r3, [pc, #40]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 800676a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800676e:	4a09      	ldr	r2, [pc, #36]	; (8006794 <HAL_RCC_OscConfig+0x27c>)
 8006770:	f023 0301 	bic.w	r3, r3, #1
 8006774:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006778:	f7fa fcd0 	bl	800111c <HAL_GetTick>
 800677c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800677e:	e00d      	b.n	800679c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006780:	f7fa fccc 	bl	800111c <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d906      	bls.n	800679c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e1ca      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
 8006792:	bf00      	nop
 8006794:	40021000 	.word	0x40021000
 8006798:	20000000 	.word	0x20000000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800679c:	4b8c      	ldr	r3, [pc, #560]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 800679e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067a2:	f003 0302 	and.w	r3, r3, #2
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1ea      	bne.n	8006780 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f003 0304 	and.w	r3, r3, #4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 80a6 	beq.w	8006904 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067b8:	2300      	movs	r3, #0
 80067ba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80067bc:	4b84      	ldr	r3, [pc, #528]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 80067be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d101      	bne.n	80067cc <HAL_RCC_OscConfig+0x2b4>
 80067c8:	2301      	movs	r3, #1
 80067ca:	e000      	b.n	80067ce <HAL_RCC_OscConfig+0x2b6>
 80067cc:	2300      	movs	r3, #0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00d      	beq.n	80067ee <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067d2:	4b7f      	ldr	r3, [pc, #508]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 80067d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d6:	4a7e      	ldr	r2, [pc, #504]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 80067d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067dc:	6593      	str	r3, [r2, #88]	; 0x58
 80067de:	4b7c      	ldr	r3, [pc, #496]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 80067e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80067ea:	2301      	movs	r3, #1
 80067ec:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067ee:	4b79      	ldr	r3, [pc, #484]	; (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d118      	bne.n	800682c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80067fa:	4b76      	ldr	r3, [pc, #472]	; (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	4a75      	ldr	r2, [pc, #468]	; (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 8006800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006806:	f7fa fc89 	bl	800111c <HAL_GetTick>
 800680a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800680c:	e008      	b.n	8006820 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800680e:	f7fa fc85 	bl	800111c <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	2b02      	cmp	r3, #2
 800681a:	d901      	bls.n	8006820 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800681c:	2303      	movs	r3, #3
 800681e:	e183      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006820:	4b6c      	ldr	r3, [pc, #432]	; (80069d4 <HAL_RCC_OscConfig+0x4bc>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006828:	2b00      	cmp	r3, #0
 800682a:	d0f0      	beq.n	800680e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	2b01      	cmp	r3, #1
 8006832:	d108      	bne.n	8006846 <HAL_RCC_OscConfig+0x32e>
 8006834:	4b66      	ldr	r3, [pc, #408]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 8006836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800683a:	4a65      	ldr	r2, [pc, #404]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006844:	e024      	b.n	8006890 <HAL_RCC_OscConfig+0x378>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	2b05      	cmp	r3, #5
 800684c:	d110      	bne.n	8006870 <HAL_RCC_OscConfig+0x358>
 800684e:	4b60      	ldr	r3, [pc, #384]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 8006850:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006854:	4a5e      	ldr	r2, [pc, #376]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 8006856:	f043 0304 	orr.w	r3, r3, #4
 800685a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800685e:	4b5c      	ldr	r3, [pc, #368]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 8006860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006864:	4a5a      	ldr	r2, [pc, #360]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 8006866:	f043 0301 	orr.w	r3, r3, #1
 800686a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800686e:	e00f      	b.n	8006890 <HAL_RCC_OscConfig+0x378>
 8006870:	4b57      	ldr	r3, [pc, #348]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 8006872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006876:	4a56      	ldr	r2, [pc, #344]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 8006878:	f023 0301 	bic.w	r3, r3, #1
 800687c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006880:	4b53      	ldr	r3, [pc, #332]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 8006882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006886:	4a52      	ldr	r2, [pc, #328]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 8006888:	f023 0304 	bic.w	r3, r3, #4
 800688c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d016      	beq.n	80068c6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006898:	f7fa fc40 	bl	800111c <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800689e:	e00a      	b.n	80068b6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068a0:	f7fa fc3c 	bl	800111c <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e138      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80068b6:	4b46      	ldr	r3, [pc, #280]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 80068b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0ed      	beq.n	80068a0 <HAL_RCC_OscConfig+0x388>
 80068c4:	e015      	b.n	80068f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068c6:	f7fa fc29 	bl	800111c <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068cc:	e00a      	b.n	80068e4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068ce:	f7fa fc25 	bl	800111c <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068dc:	4293      	cmp	r3, r2
 80068de:	d901      	bls.n	80068e4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80068e0:	2303      	movs	r3, #3
 80068e2:	e121      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80068e4:	4b3a      	ldr	r3, [pc, #232]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 80068e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ea:	f003 0302 	and.w	r3, r3, #2
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1ed      	bne.n	80068ce <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068f2:	7ffb      	ldrb	r3, [r7, #31]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d105      	bne.n	8006904 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068f8:	4b35      	ldr	r3, [pc, #212]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 80068fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fc:	4a34      	ldr	r2, [pc, #208]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 80068fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006902:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0320 	and.w	r3, r3, #32
 800690c:	2b00      	cmp	r3, #0
 800690e:	d03c      	beq.n	800698a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	699b      	ldr	r3, [r3, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d01c      	beq.n	8006952 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006918:	4b2d      	ldr	r3, [pc, #180]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 800691a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800691e:	4a2c      	ldr	r2, [pc, #176]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 8006920:	f043 0301 	orr.w	r3, r3, #1
 8006924:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006928:	f7fa fbf8 	bl	800111c <HAL_GetTick>
 800692c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800692e:	e008      	b.n	8006942 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006930:	f7fa fbf4 	bl	800111c <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b02      	cmp	r3, #2
 800693c:	d901      	bls.n	8006942 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e0f2      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006942:	4b23      	ldr	r3, [pc, #140]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 8006944:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006948:	f003 0302 	and.w	r3, r3, #2
 800694c:	2b00      	cmp	r3, #0
 800694e:	d0ef      	beq.n	8006930 <HAL_RCC_OscConfig+0x418>
 8006950:	e01b      	b.n	800698a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006952:	4b1f      	ldr	r3, [pc, #124]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 8006954:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006958:	4a1d      	ldr	r2, [pc, #116]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 800695a:	f023 0301 	bic.w	r3, r3, #1
 800695e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006962:	f7fa fbdb 	bl	800111c <HAL_GetTick>
 8006966:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006968:	e008      	b.n	800697c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800696a:	f7fa fbd7 	bl	800111c <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b02      	cmp	r3, #2
 8006976:	d901      	bls.n	800697c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e0d5      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800697c:	4b14      	ldr	r3, [pc, #80]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 800697e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006982:	f003 0302 	and.w	r3, r3, #2
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1ef      	bne.n	800696a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 80c9 	beq.w	8006b26 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006994:	4b0e      	ldr	r3, [pc, #56]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 8006996:	689b      	ldr	r3, [r3, #8]
 8006998:	f003 030c 	and.w	r3, r3, #12
 800699c:	2b0c      	cmp	r3, #12
 800699e:	f000 8083 	beq.w	8006aa8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	d15e      	bne.n	8006a68 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069aa:	4b09      	ldr	r3, [pc, #36]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a08      	ldr	r2, [pc, #32]	; (80069d0 <HAL_RCC_OscConfig+0x4b8>)
 80069b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b6:	f7fa fbb1 	bl	800111c <HAL_GetTick>
 80069ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069bc:	e00c      	b.n	80069d8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069be:	f7fa fbad 	bl	800111c <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d905      	bls.n	80069d8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e0ab      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
 80069d0:	40021000 	.word	0x40021000
 80069d4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80069d8:	4b55      	ldr	r3, [pc, #340]	; (8006b30 <HAL_RCC_OscConfig+0x618>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1ec      	bne.n	80069be <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80069e4:	4b52      	ldr	r3, [pc, #328]	; (8006b30 <HAL_RCC_OscConfig+0x618>)
 80069e6:	68da      	ldr	r2, [r3, #12]
 80069e8:	4b52      	ldr	r3, [pc, #328]	; (8006b34 <HAL_RCC_OscConfig+0x61c>)
 80069ea:	4013      	ands	r3, r2
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	6a11      	ldr	r1, [r2, #32]
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80069f4:	3a01      	subs	r2, #1
 80069f6:	0112      	lsls	r2, r2, #4
 80069f8:	4311      	orrs	r1, r2
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80069fe:	0212      	lsls	r2, r2, #8
 8006a00:	4311      	orrs	r1, r2
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006a06:	0852      	lsrs	r2, r2, #1
 8006a08:	3a01      	subs	r2, #1
 8006a0a:	0552      	lsls	r2, r2, #21
 8006a0c:	4311      	orrs	r1, r2
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a12:	0852      	lsrs	r2, r2, #1
 8006a14:	3a01      	subs	r2, #1
 8006a16:	0652      	lsls	r2, r2, #25
 8006a18:	4311      	orrs	r1, r2
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006a1e:	06d2      	lsls	r2, r2, #27
 8006a20:	430a      	orrs	r2, r1
 8006a22:	4943      	ldr	r1, [pc, #268]	; (8006b30 <HAL_RCC_OscConfig+0x618>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a28:	4b41      	ldr	r3, [pc, #260]	; (8006b30 <HAL_RCC_OscConfig+0x618>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a40      	ldr	r2, [pc, #256]	; (8006b30 <HAL_RCC_OscConfig+0x618>)
 8006a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a32:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006a34:	4b3e      	ldr	r3, [pc, #248]	; (8006b30 <HAL_RCC_OscConfig+0x618>)
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	4a3d      	ldr	r2, [pc, #244]	; (8006b30 <HAL_RCC_OscConfig+0x618>)
 8006a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006a3e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a40:	f7fa fb6c 	bl	800111c <HAL_GetTick>
 8006a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a48:	f7fa fb68 	bl	800111c <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e066      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006a5a:	4b35      	ldr	r3, [pc, #212]	; (8006b30 <HAL_RCC_OscConfig+0x618>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0f0      	beq.n	8006a48 <HAL_RCC_OscConfig+0x530>
 8006a66:	e05e      	b.n	8006b26 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a68:	4b31      	ldr	r3, [pc, #196]	; (8006b30 <HAL_RCC_OscConfig+0x618>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a30      	ldr	r2, [pc, #192]	; (8006b30 <HAL_RCC_OscConfig+0x618>)
 8006a6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a74:	f7fa fb52 	bl	800111c <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a7c:	f7fa fb4e 	bl	800111c <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e04c      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006a8e:	4b28      	ldr	r3, [pc, #160]	; (8006b30 <HAL_RCC_OscConfig+0x618>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1f0      	bne.n	8006a7c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006a9a:	4b25      	ldr	r3, [pc, #148]	; (8006b30 <HAL_RCC_OscConfig+0x618>)
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	4924      	ldr	r1, [pc, #144]	; (8006b30 <HAL_RCC_OscConfig+0x618>)
 8006aa0:	4b25      	ldr	r3, [pc, #148]	; (8006b38 <HAL_RCC_OscConfig+0x620>)
 8006aa2:	4013      	ands	r3, r2
 8006aa4:	60cb      	str	r3, [r1, #12]
 8006aa6:	e03e      	b.n	8006b26 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	69db      	ldr	r3, [r3, #28]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d101      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e039      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006ab4:	4b1e      	ldr	r3, [pc, #120]	; (8006b30 <HAL_RCC_OscConfig+0x618>)
 8006ab6:	68db      	ldr	r3, [r3, #12]
 8006ab8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f003 0203 	and.w	r2, r3, #3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a1b      	ldr	r3, [r3, #32]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d12c      	bne.n	8006b22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d123      	bne.n	8006b22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d11b      	bne.n	8006b22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006af6:	429a      	cmp	r2, r3
 8006af8:	d113      	bne.n	8006b22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b04:	085b      	lsrs	r3, r3, #1
 8006b06:	3b01      	subs	r3, #1
 8006b08:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d109      	bne.n	8006b22 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b18:	085b      	lsrs	r3, r3, #1
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d001      	beq.n	8006b26 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e000      	b.n	8006b28 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006b26:	2300      	movs	r3, #0
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3720      	adds	r7, #32
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40021000 	.word	0x40021000
 8006b34:	019f800c 	.word	0x019f800c
 8006b38:	feeefffc 	.word	0xfeeefffc

08006b3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006b46:	2300      	movs	r3, #0
 8006b48:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e11e      	b.n	8006d92 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b54:	4b91      	ldr	r3, [pc, #580]	; (8006d9c <HAL_RCC_ClockConfig+0x260>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f003 030f 	and.w	r3, r3, #15
 8006b5c:	683a      	ldr	r2, [r7, #0]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d910      	bls.n	8006b84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b62:	4b8e      	ldr	r3, [pc, #568]	; (8006d9c <HAL_RCC_ClockConfig+0x260>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f023 020f 	bic.w	r2, r3, #15
 8006b6a:	498c      	ldr	r1, [pc, #560]	; (8006d9c <HAL_RCC_ClockConfig+0x260>)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b72:	4b8a      	ldr	r3, [pc, #552]	; (8006d9c <HAL_RCC_ClockConfig+0x260>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f003 030f 	and.w	r3, r3, #15
 8006b7a:	683a      	ldr	r2, [r7, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d001      	beq.n	8006b84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	e106      	b.n	8006d92 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0301 	and.w	r3, r3, #1
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d073      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	2b03      	cmp	r3, #3
 8006b96:	d129      	bne.n	8006bec <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006b98:	4b81      	ldr	r3, [pc, #516]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e0f4      	b.n	8006d92 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006ba8:	f000 f99e 	bl	8006ee8 <RCC_GetSysClockFreqFromPLLSource>
 8006bac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	4a7c      	ldr	r2, [pc, #496]	; (8006da4 <HAL_RCC_ClockConfig+0x268>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d93f      	bls.n	8006c36 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006bb6:	4b7a      	ldr	r3, [pc, #488]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d009      	beq.n	8006bd6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d033      	beq.n	8006c36 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d12f      	bne.n	8006c36 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006bd6:	4b72      	ldr	r3, [pc, #456]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bde:	4a70      	ldr	r2, [pc, #448]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006be4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006be6:	2380      	movs	r3, #128	; 0x80
 8006be8:	617b      	str	r3, [r7, #20]
 8006bea:	e024      	b.n	8006c36 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d107      	bne.n	8006c04 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006bf4:	4b6a      	ldr	r3, [pc, #424]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d109      	bne.n	8006c14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e0c6      	b.n	8006d92 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006c04:	4b66      	ldr	r3, [pc, #408]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d101      	bne.n	8006c14 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e0be      	b.n	8006d92 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006c14:	f000 f8ce 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8006c18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	4a61      	ldr	r2, [pc, #388]	; (8006da4 <HAL_RCC_ClockConfig+0x268>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d909      	bls.n	8006c36 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006c22:	4b5f      	ldr	r3, [pc, #380]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c2a:	4a5d      	ldr	r2, [pc, #372]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c30:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006c32:	2380      	movs	r3, #128	; 0x80
 8006c34:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c36:	4b5a      	ldr	r3, [pc, #360]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f023 0203 	bic.w	r2, r3, #3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	4957      	ldr	r1, [pc, #348]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c48:	f7fa fa68 	bl	800111c <HAL_GetTick>
 8006c4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c4e:	e00a      	b.n	8006c66 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c50:	f7fa fa64 	bl	800111c <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e095      	b.n	8006d92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c66:	4b4e      	ldr	r3, [pc, #312]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	f003 020c 	and.w	r2, r3, #12
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d1eb      	bne.n	8006c50 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d023      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c90:	4b43      	ldr	r3, [pc, #268]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	4a42      	ldr	r2, [pc, #264]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006c96:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006c9a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f003 0308 	and.w	r3, r3, #8
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d007      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006ca8:	4b3d      	ldr	r3, [pc, #244]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006cb0:	4a3b      	ldr	r2, [pc, #236]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006cb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006cb6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cb8:	4b39      	ldr	r3, [pc, #228]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	4936      	ldr	r1, [pc, #216]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	608b      	str	r3, [r1, #8]
 8006cca:	e008      	b.n	8006cde <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	d105      	bne.n	8006cde <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006cd2:	4b33      	ldr	r3, [pc, #204]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	4a32      	ldr	r2, [pc, #200]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006cd8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cdc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cde:	4b2f      	ldr	r3, [pc, #188]	; (8006d9c <HAL_RCC_ClockConfig+0x260>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 030f 	and.w	r3, r3, #15
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d21d      	bcs.n	8006d28 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cec:	4b2b      	ldr	r3, [pc, #172]	; (8006d9c <HAL_RCC_ClockConfig+0x260>)
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f023 020f 	bic.w	r2, r3, #15
 8006cf4:	4929      	ldr	r1, [pc, #164]	; (8006d9c <HAL_RCC_ClockConfig+0x260>)
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006cfc:	f7fa fa0e 	bl	800111c <HAL_GetTick>
 8006d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d02:	e00a      	b.n	8006d1a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d04:	f7fa fa0a 	bl	800111c <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e03b      	b.n	8006d92 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d1a:	4b20      	ldr	r3, [pc, #128]	; (8006d9c <HAL_RCC_ClockConfig+0x260>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f003 030f 	and.w	r3, r3, #15
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d1ed      	bne.n	8006d04 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0304 	and.w	r3, r3, #4
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d008      	beq.n	8006d46 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d34:	4b1a      	ldr	r3, [pc, #104]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	4917      	ldr	r1, [pc, #92]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 0308 	and.w	r3, r3, #8
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d009      	beq.n	8006d66 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d52:	4b13      	ldr	r3, [pc, #76]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	691b      	ldr	r3, [r3, #16]
 8006d5e:	00db      	lsls	r3, r3, #3
 8006d60:	490f      	ldr	r1, [pc, #60]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006d62:	4313      	orrs	r3, r2
 8006d64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006d66:	f000 f825 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	4b0c      	ldr	r3, [pc, #48]	; (8006da0 <HAL_RCC_ClockConfig+0x264>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	091b      	lsrs	r3, r3, #4
 8006d72:	f003 030f 	and.w	r3, r3, #15
 8006d76:	490c      	ldr	r1, [pc, #48]	; (8006da8 <HAL_RCC_ClockConfig+0x26c>)
 8006d78:	5ccb      	ldrb	r3, [r1, r3]
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8006d82:	4a0a      	ldr	r2, [pc, #40]	; (8006dac <HAL_RCC_ClockConfig+0x270>)
 8006d84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006d86:	4b0a      	ldr	r3, [pc, #40]	; (8006db0 <HAL_RCC_ClockConfig+0x274>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	f7fa f97a 	bl	8001084 <HAL_InitTick>
 8006d90:	4603      	mov	r3, r0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3718      	adds	r7, #24
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	40022000 	.word	0x40022000
 8006da0:	40021000 	.word	0x40021000
 8006da4:	04c4b400 	.word	0x04c4b400
 8006da8:	08016a78 	.word	0x08016a78
 8006dac:	2000000c 	.word	0x2000000c
 8006db0:	20000000 	.word	0x20000000

08006db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006dba:	4b2c      	ldr	r3, [pc, #176]	; (8006e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f003 030c 	and.w	r3, r3, #12
 8006dc2:	2b04      	cmp	r3, #4
 8006dc4:	d102      	bne.n	8006dcc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006dc6:	4b2a      	ldr	r3, [pc, #168]	; (8006e70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006dc8:	613b      	str	r3, [r7, #16]
 8006dca:	e047      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006dcc:	4b27      	ldr	r3, [pc, #156]	; (8006e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 030c 	and.w	r3, r3, #12
 8006dd4:	2b08      	cmp	r3, #8
 8006dd6:	d102      	bne.n	8006dde <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006dd8:	4b26      	ldr	r3, [pc, #152]	; (8006e74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006dda:	613b      	str	r3, [r7, #16]
 8006ddc:	e03e      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006dde:	4b23      	ldr	r3, [pc, #140]	; (8006e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f003 030c 	and.w	r3, r3, #12
 8006de6:	2b0c      	cmp	r3, #12
 8006de8:	d136      	bne.n	8006e58 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006dea:	4b20      	ldr	r3, [pc, #128]	; (8006e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f003 0303 	and.w	r3, r3, #3
 8006df2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006df4:	4b1d      	ldr	r3, [pc, #116]	; (8006e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	091b      	lsrs	r3, r3, #4
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	3301      	adds	r3, #1
 8006e00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d10c      	bne.n	8006e22 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e08:	4a1a      	ldr	r2, [pc, #104]	; (8006e74 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e10:	4a16      	ldr	r2, [pc, #88]	; (8006e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e12:	68d2      	ldr	r2, [r2, #12]
 8006e14:	0a12      	lsrs	r2, r2, #8
 8006e16:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e1a:	fb02 f303 	mul.w	r3, r2, r3
 8006e1e:	617b      	str	r3, [r7, #20]
      break;
 8006e20:	e00c      	b.n	8006e3c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006e22:	4a13      	ldr	r2, [pc, #76]	; (8006e70 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2a:	4a10      	ldr	r2, [pc, #64]	; (8006e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e2c:	68d2      	ldr	r2, [r2, #12]
 8006e2e:	0a12      	lsrs	r2, r2, #8
 8006e30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e34:	fb02 f303 	mul.w	r3, r2, r3
 8006e38:	617b      	str	r3, [r7, #20]
      break;
 8006e3a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	0e5b      	lsrs	r3, r3, #25
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	3301      	adds	r3, #1
 8006e48:	005b      	lsls	r3, r3, #1
 8006e4a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e54:	613b      	str	r3, [r7, #16]
 8006e56:	e001      	b.n	8006e5c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006e5c:	693b      	ldr	r3, [r7, #16]
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	371c      	adds	r7, #28
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
 8006e6a:	bf00      	nop
 8006e6c:	40021000 	.word	0x40021000
 8006e70:	00f42400 	.word	0x00f42400
 8006e74:	007a1200 	.word	0x007a1200

08006e78 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e7c:	4b03      	ldr	r3, [pc, #12]	; (8006e8c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	2000000c 	.word	0x2000000c

08006e90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006e94:	f7ff fff0 	bl	8006e78 <HAL_RCC_GetHCLKFreq>
 8006e98:	4602      	mov	r2, r0
 8006e9a:	4b06      	ldr	r3, [pc, #24]	; (8006eb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	0a1b      	lsrs	r3, r3, #8
 8006ea0:	f003 0307 	and.w	r3, r3, #7
 8006ea4:	4904      	ldr	r1, [pc, #16]	; (8006eb8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006ea6:	5ccb      	ldrb	r3, [r1, r3]
 8006ea8:	f003 031f 	and.w	r3, r3, #31
 8006eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	08016a88 	.word	0x08016a88

08006ebc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006ec0:	f7ff ffda 	bl	8006e78 <HAL_RCC_GetHCLKFreq>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	4b06      	ldr	r3, [pc, #24]	; (8006ee0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ec8:	689b      	ldr	r3, [r3, #8]
 8006eca:	0adb      	lsrs	r3, r3, #11
 8006ecc:	f003 0307 	and.w	r3, r3, #7
 8006ed0:	4904      	ldr	r1, [pc, #16]	; (8006ee4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006ed2:	5ccb      	ldrb	r3, [r1, r3]
 8006ed4:	f003 031f 	and.w	r3, r3, #31
 8006ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	40021000 	.word	0x40021000
 8006ee4:	08016a88 	.word	0x08016a88

08006ee8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006eee:	4b1e      	ldr	r3, [pc, #120]	; (8006f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f003 0303 	and.w	r3, r3, #3
 8006ef6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006ef8:	4b1b      	ldr	r3, [pc, #108]	; (8006f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	091b      	lsrs	r3, r3, #4
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	3301      	adds	r3, #1
 8006f04:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	2b03      	cmp	r3, #3
 8006f0a:	d10c      	bne.n	8006f26 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f0c:	4a17      	ldr	r2, [pc, #92]	; (8006f6c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f14:	4a14      	ldr	r2, [pc, #80]	; (8006f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f16:	68d2      	ldr	r2, [r2, #12]
 8006f18:	0a12      	lsrs	r2, r2, #8
 8006f1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f1e:	fb02 f303 	mul.w	r3, r2, r3
 8006f22:	617b      	str	r3, [r7, #20]
    break;
 8006f24:	e00c      	b.n	8006f40 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f26:	4a12      	ldr	r2, [pc, #72]	; (8006f70 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f2e:	4a0e      	ldr	r2, [pc, #56]	; (8006f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f30:	68d2      	ldr	r2, [r2, #12]
 8006f32:	0a12      	lsrs	r2, r2, #8
 8006f34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f38:	fb02 f303 	mul.w	r3, r2, r3
 8006f3c:	617b      	str	r3, [r7, #20]
    break;
 8006f3e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006f40:	4b09      	ldr	r3, [pc, #36]	; (8006f68 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	0e5b      	lsrs	r3, r3, #25
 8006f46:	f003 0303 	and.w	r3, r3, #3
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006f50:	697a      	ldr	r2, [r7, #20]
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f58:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006f5a:	687b      	ldr	r3, [r7, #4]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	371c      	adds	r7, #28
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	40021000 	.word	0x40021000
 8006f6c:	007a1200 	.word	0x007a1200
 8006f70:	00f42400 	.word	0x00f42400

08006f74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006f80:	2300      	movs	r3, #0
 8006f82:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	f000 8098 	beq.w	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f92:	2300      	movs	r3, #0
 8006f94:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f96:	4b43      	ldr	r3, [pc, #268]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10d      	bne.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006fa2:	4b40      	ldr	r3, [pc, #256]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fa6:	4a3f      	ldr	r2, [pc, #252]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fac:	6593      	str	r3, [r2, #88]	; 0x58
 8006fae:	4b3d      	ldr	r3, [pc, #244]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fb6:	60bb      	str	r3, [r7, #8]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fbe:	4b3a      	ldr	r3, [pc, #232]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a39      	ldr	r2, [pc, #228]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fc8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006fca:	f7fa f8a7 	bl	800111c <HAL_GetTick>
 8006fce:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fd0:	e009      	b.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fd2:	f7fa f8a3 	bl	800111c <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d902      	bls.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	74fb      	strb	r3, [r7, #19]
        break;
 8006fe4:	e005      	b.n	8006ff2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006fe6:	4b30      	ldr	r3, [pc, #192]	; (80070a8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0ef      	beq.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006ff2:	7cfb      	ldrb	r3, [r7, #19]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d159      	bne.n	80070ac <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006ff8:	4b2a      	ldr	r3, [pc, #168]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007002:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d01e      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800700e:	697a      	ldr	r2, [r7, #20]
 8007010:	429a      	cmp	r2, r3
 8007012:	d019      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007014:	4b23      	ldr	r3, [pc, #140]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800701e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007020:	4b20      	ldr	r3, [pc, #128]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007026:	4a1f      	ldr	r2, [pc, #124]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800702c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007030:	4b1c      	ldr	r3, [pc, #112]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007036:	4a1b      	ldr	r2, [pc, #108]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007038:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800703c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007040:	4a18      	ldr	r2, [pc, #96]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d016      	beq.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007052:	f7fa f863 	bl	800111c <HAL_GetTick>
 8007056:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007058:	e00b      	b.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800705a:	f7fa f85f 	bl	800111c <HAL_GetTick>
 800705e:	4602      	mov	r2, r0
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	f241 3288 	movw	r2, #5000	; 0x1388
 8007068:	4293      	cmp	r3, r2
 800706a:	d902      	bls.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	74fb      	strb	r3, [r7, #19]
            break;
 8007070:	e006      	b.n	8007080 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007072:	4b0c      	ldr	r3, [pc, #48]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007078:	f003 0302 	and.w	r3, r3, #2
 800707c:	2b00      	cmp	r3, #0
 800707e:	d0ec      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007080:	7cfb      	ldrb	r3, [r7, #19]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10b      	bne.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007086:	4b07      	ldr	r3, [pc, #28]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007088:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800708c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007094:	4903      	ldr	r1, [pc, #12]	; (80070a4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007096:	4313      	orrs	r3, r2
 8007098:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800709c:	e008      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800709e:	7cfb      	ldrb	r3, [r7, #19]
 80070a0:	74bb      	strb	r3, [r7, #18]
 80070a2:	e005      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80070a4:	40021000 	.word	0x40021000
 80070a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070ac:	7cfb      	ldrb	r3, [r7, #19]
 80070ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070b0:	7c7b      	ldrb	r3, [r7, #17]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d105      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070b6:	4ba7      	ldr	r3, [pc, #668]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ba:	4aa6      	ldr	r2, [pc, #664]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d00a      	beq.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80070ce:	4ba1      	ldr	r3, [pc, #644]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070d4:	f023 0203 	bic.w	r2, r3, #3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	499d      	ldr	r1, [pc, #628]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0302 	and.w	r3, r3, #2
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00a      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80070f0:	4b98      	ldr	r3, [pc, #608]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80070f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f6:	f023 020c 	bic.w	r2, r3, #12
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	4995      	ldr	r1, [pc, #596]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007100:	4313      	orrs	r3, r2
 8007102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00a      	beq.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007112:	4b90      	ldr	r3, [pc, #576]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007118:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68db      	ldr	r3, [r3, #12]
 8007120:	498c      	ldr	r1, [pc, #560]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007122:	4313      	orrs	r3, r2
 8007124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f003 0308 	and.w	r3, r3, #8
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00a      	beq.n	800714a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007134:	4b87      	ldr	r3, [pc, #540]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	691b      	ldr	r3, [r3, #16]
 8007142:	4984      	ldr	r1, [pc, #528]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007144:	4313      	orrs	r3, r2
 8007146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0310 	and.w	r3, r3, #16
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007156:	4b7f      	ldr	r3, [pc, #508]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800715c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	497b      	ldr	r1, [pc, #492]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007166:	4313      	orrs	r3, r2
 8007168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0320 	and.w	r3, r3, #32
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00a      	beq.n	800718e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007178:	4b76      	ldr	r3, [pc, #472]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800717a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800717e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	4973      	ldr	r1, [pc, #460]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007188:	4313      	orrs	r3, r2
 800718a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00a      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800719a:	4b6e      	ldr	r3, [pc, #440]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800719c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	69db      	ldr	r3, [r3, #28]
 80071a8:	496a      	ldr	r1, [pc, #424]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00a      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80071bc:	4b65      	ldr	r3, [pc, #404]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	4962      	ldr	r1, [pc, #392]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80071de:	4b5d      	ldr	r3, [pc, #372]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	4959      	ldr	r1, [pc, #356]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00a      	beq.n	8007216 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007200:	4b54      	ldr	r3, [pc, #336]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007202:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007206:	f023 0203 	bic.w	r2, r3, #3
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800720e:	4951      	ldr	r1, [pc, #324]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007210:	4313      	orrs	r3, r2
 8007212:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007222:	4b4c      	ldr	r3, [pc, #304]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007228:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007230:	4948      	ldr	r1, [pc, #288]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007232:	4313      	orrs	r3, r2
 8007234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007240:	2b00      	cmp	r3, #0
 8007242:	d015      	beq.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007244:	4b43      	ldr	r3, [pc, #268]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800724a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007252:	4940      	ldr	r1, [pc, #256]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007254:	4313      	orrs	r3, r2
 8007256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800725e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007262:	d105      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007264:	4b3b      	ldr	r3, [pc, #236]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	4a3a      	ldr	r2, [pc, #232]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800726a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800726e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007278:	2b00      	cmp	r3, #0
 800727a:	d015      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800727c:	4b35      	ldr	r3, [pc, #212]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800727e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007282:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728a:	4932      	ldr	r1, [pc, #200]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800728c:	4313      	orrs	r3, r2
 800728e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800729a:	d105      	bne.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800729c:	4b2d      	ldr	r3, [pc, #180]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	4a2c      	ldr	r2, [pc, #176]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072a6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d015      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80072b4:	4b27      	ldr	r3, [pc, #156]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ba:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c2:	4924      	ldr	r1, [pc, #144]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072d2:	d105      	bne.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80072d4:	4b1f      	ldr	r3, [pc, #124]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	4a1e      	ldr	r2, [pc, #120]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80072de:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d015      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80072ec:	4b19      	ldr	r3, [pc, #100]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fa:	4916      	ldr	r1, [pc, #88]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800730a:	d105      	bne.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800730c:	4b11      	ldr	r3, [pc, #68]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	4a10      	ldr	r2, [pc, #64]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007316:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d019      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007324:	4b0b      	ldr	r3, [pc, #44]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800732a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	4908      	ldr	r1, [pc, #32]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007334:	4313      	orrs	r3, r2
 8007336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007342:	d109      	bne.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007344:	4b03      	ldr	r3, [pc, #12]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	4a02      	ldr	r2, [pc, #8]	; (8007354 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800734a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800734e:	60d3      	str	r3, [r2, #12]
 8007350:	e002      	b.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007352:	bf00      	nop
 8007354:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d015      	beq.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007364:	4b29      	ldr	r3, [pc, #164]	; (800740c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007372:	4926      	ldr	r1, [pc, #152]	; (800740c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007374:	4313      	orrs	r3, r2
 8007376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800737e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007382:	d105      	bne.n	8007390 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007384:	4b21      	ldr	r3, [pc, #132]	; (800740c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	4a20      	ldr	r2, [pc, #128]	; (800740c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800738a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800738e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d015      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800739c:	4b1b      	ldr	r3, [pc, #108]	; (800740c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800739e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073aa:	4918      	ldr	r1, [pc, #96]	; (800740c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073ac:	4313      	orrs	r3, r2
 80073ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ba:	d105      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80073bc:	4b13      	ldr	r3, [pc, #76]	; (800740c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	4a12      	ldr	r2, [pc, #72]	; (800740c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073c6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d015      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80073d4:	4b0d      	ldr	r3, [pc, #52]	; (800740c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073e2:	490a      	ldr	r1, [pc, #40]	; (800740c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073e4:	4313      	orrs	r3, r2
 80073e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80073f2:	d105      	bne.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80073f4:	4b05      	ldr	r3, [pc, #20]	; (800740c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	4a04      	ldr	r2, [pc, #16]	; (800740c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80073fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80073fe:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007400:	7cbb      	ldrb	r3, [r7, #18]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3718      	adds	r7, #24
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
 800740a:	bf00      	nop
 800740c:	40021000 	.word	0x40021000

08007410 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d101      	bne.n	8007422 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800741e:	2301      	movs	r3, #1
 8007420:	e042      	b.n	80074a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007428:	2b00      	cmp	r3, #0
 800742a:	d106      	bne.n	800743a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f00b fab7 	bl	80129a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2224      	movs	r2, #36	; 0x24
 800743e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f022 0201 	bic.w	r2, r2, #1
 8007450:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007456:	2b00      	cmp	r3, #0
 8007458:	d002      	beq.n	8007460 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 ff42 	bl	80082e4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 fc43 	bl	8007cec <UART_SetConfig>
 8007466:	4603      	mov	r3, r0
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e01b      	b.n	80074a8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800747e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	689a      	ldr	r2, [r3, #8]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800748e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f042 0201 	orr.w	r2, r2, #1
 800749e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 ffc1 	bl	8008428 <UART_CheckIdleState>
 80074a6:	4603      	mov	r3, r0
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b08a      	sub	sp, #40	; 0x28
 80074b4:	af02      	add	r7, sp, #8
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	603b      	str	r3, [r7, #0]
 80074bc:	4613      	mov	r3, r2
 80074be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074c6:	2b20      	cmp	r3, #32
 80074c8:	d17b      	bne.n	80075c2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <HAL_UART_Transmit+0x26>
 80074d0:	88fb      	ldrh	r3, [r7, #6]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80074d6:	2301      	movs	r3, #1
 80074d8:	e074      	b.n	80075c4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2221      	movs	r2, #33	; 0x21
 80074e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074ea:	f7f9 fe17 	bl	800111c <HAL_GetTick>
 80074ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	88fa      	ldrh	r2, [r7, #6]
 80074f4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	88fa      	ldrh	r2, [r7, #6]
 80074fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007508:	d108      	bne.n	800751c <HAL_UART_Transmit+0x6c>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d104      	bne.n	800751c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	e003      	b.n	8007524 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007520:	2300      	movs	r3, #0
 8007522:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007524:	e030      	b.n	8007588 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2200      	movs	r2, #0
 800752e:	2180      	movs	r1, #128	; 0x80
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f001 f823 	bl	800857c <UART_WaitOnFlagUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d005      	beq.n	8007548 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2220      	movs	r2, #32
 8007540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e03d      	b.n	80075c4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d10b      	bne.n	8007566 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	881b      	ldrh	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800755c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800755e:	69bb      	ldr	r3, [r7, #24]
 8007560:	3302      	adds	r3, #2
 8007562:	61bb      	str	r3, [r7, #24]
 8007564:	e007      	b.n	8007576 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	781a      	ldrb	r2, [r3, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	3301      	adds	r3, #1
 8007574:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800758e:	b29b      	uxth	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1c8      	bne.n	8007526 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	2200      	movs	r2, #0
 800759c:	2140      	movs	r1, #64	; 0x40
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 ffec 	bl	800857c <UART_WaitOnFlagUntilTimeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d005      	beq.n	80075b6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2220      	movs	r2, #32
 80075ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e006      	b.n	80075c4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	2220      	movs	r2, #32
 80075ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	e000      	b.n	80075c4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80075c2:	2302      	movs	r3, #2
  }
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3720      	adds	r7, #32
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b08a      	sub	sp, #40	; 0x28
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	4613      	mov	r3, r2
 80075d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e0:	2b20      	cmp	r3, #32
 80075e2:	d137      	bne.n	8007654 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d002      	beq.n	80075f0 <HAL_UART_Receive_DMA+0x24>
 80075ea:	88fb      	ldrh	r3, [r7, #6]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d101      	bne.n	80075f4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e030      	b.n	8007656 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2200      	movs	r2, #0
 80075f8:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a18      	ldr	r2, [pc, #96]	; (8007660 <HAL_UART_Receive_DMA+0x94>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d01f      	beq.n	8007644 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d018      	beq.n	8007644 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	e853 3f00 	ldrex	r3, [r3]
 800761e:	613b      	str	r3, [r7, #16]
   return(result);
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	461a      	mov	r2, r3
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	623b      	str	r3, [r7, #32]
 8007632:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007634:	69f9      	ldr	r1, [r7, #28]
 8007636:	6a3a      	ldr	r2, [r7, #32]
 8007638:	e841 2300 	strex	r3, r2, [r1]
 800763c:	61bb      	str	r3, [r7, #24]
   return(result);
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d1e6      	bne.n	8007612 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007644:	88fb      	ldrh	r3, [r7, #6]
 8007646:	461a      	mov	r2, r3
 8007648:	68b9      	ldr	r1, [r7, #8]
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f001 f804 	bl	8008658 <UART_Start_Receive_DMA>
 8007650:	4603      	mov	r3, r0
 8007652:	e000      	b.n	8007656 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007654:	2302      	movs	r3, #2
  }
}
 8007656:	4618      	mov	r0, r3
 8007658:	3728      	adds	r7, #40	; 0x28
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}
 800765e:	bf00      	nop
 8007660:	40008000 	.word	0x40008000

08007664 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b0ba      	sub	sp, #232	; 0xe8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800768a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800768e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007692:	4013      	ands	r3, r2
 8007694:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007698:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800769c:	2b00      	cmp	r3, #0
 800769e:	d11b      	bne.n	80076d8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80076a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a4:	f003 0320 	and.w	r3, r3, #32
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d015      	beq.n	80076d8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80076ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076b0:	f003 0320 	and.w	r3, r3, #32
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d105      	bne.n	80076c4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80076b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d009      	beq.n	80076d8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	f000 82e3 	beq.w	8007c94 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	4798      	blx	r3
      }
      return;
 80076d6:	e2dd      	b.n	8007c94 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f000 8123 	beq.w	8007928 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80076e2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80076e6:	4b8d      	ldr	r3, [pc, #564]	; (800791c <HAL_UART_IRQHandler+0x2b8>)
 80076e8:	4013      	ands	r3, r2
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d106      	bne.n	80076fc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076ee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80076f2:	4b8b      	ldr	r3, [pc, #556]	; (8007920 <HAL_UART_IRQHandler+0x2bc>)
 80076f4:	4013      	ands	r3, r2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f000 8116 	beq.w	8007928 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d011      	beq.n	800772c <HAL_UART_IRQHandler+0xc8>
 8007708:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800770c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2201      	movs	r2, #1
 800771a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007722:	f043 0201 	orr.w	r2, r3, #1
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800772c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007730:	f003 0302 	and.w	r3, r3, #2
 8007734:	2b00      	cmp	r3, #0
 8007736:	d011      	beq.n	800775c <HAL_UART_IRQHandler+0xf8>
 8007738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800773c:	f003 0301 	and.w	r3, r3, #1
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00b      	beq.n	800775c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2202      	movs	r2, #2
 800774a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007752:	f043 0204 	orr.w	r2, r3, #4
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800775c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007760:	f003 0304 	and.w	r3, r3, #4
 8007764:	2b00      	cmp	r3, #0
 8007766:	d011      	beq.n	800778c <HAL_UART_IRQHandler+0x128>
 8007768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2204      	movs	r2, #4
 800777a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007782:	f043 0202 	orr.w	r2, r3, #2
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800778c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007790:	f003 0308 	and.w	r3, r3, #8
 8007794:	2b00      	cmp	r3, #0
 8007796:	d017      	beq.n	80077c8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800779c:	f003 0320 	and.w	r3, r3, #32
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d105      	bne.n	80077b0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80077a4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80077a8:	4b5c      	ldr	r3, [pc, #368]	; (800791c <HAL_UART_IRQHandler+0x2b8>)
 80077aa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d00b      	beq.n	80077c8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2208      	movs	r2, #8
 80077b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077be:	f043 0208 	orr.w	r2, r3, #8
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d012      	beq.n	80077fa <HAL_UART_IRQHandler+0x196>
 80077d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00c      	beq.n	80077fa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077f0:	f043 0220 	orr.w	r2, r3, #32
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007800:	2b00      	cmp	r3, #0
 8007802:	f000 8249 	beq.w	8007c98 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800780a:	f003 0320 	and.w	r3, r3, #32
 800780e:	2b00      	cmp	r3, #0
 8007810:	d013      	beq.n	800783a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007812:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b00      	cmp	r3, #0
 800781c:	d105      	bne.n	800782a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800781e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d007      	beq.n	800783a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800782e:	2b00      	cmp	r3, #0
 8007830:	d003      	beq.n	800783a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007840:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784e:	2b40      	cmp	r3, #64	; 0x40
 8007850:	d005      	beq.n	800785e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007856:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800785a:	2b00      	cmp	r3, #0
 800785c:	d054      	beq.n	8007908 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f000 ffe1 	bl	8008826 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800786e:	2b40      	cmp	r3, #64	; 0x40
 8007870:	d146      	bne.n	8007900 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3308      	adds	r3, #8
 8007878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007880:	e853 3f00 	ldrex	r3, [r3]
 8007884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007888:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800788c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3308      	adds	r3, #8
 800789a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800789e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80078a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80078aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80078b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1d9      	bne.n	8007872 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d017      	beq.n	80078f8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ce:	4a15      	ldr	r2, [pc, #84]	; (8007924 <HAL_UART_IRQHandler+0x2c0>)
 80078d0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078d8:	4618      	mov	r0, r3
 80078da:	f7f9 febd 	bl	8001658 <HAL_DMA_Abort_IT>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d019      	beq.n	8007918 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80078f2:	4610      	mov	r0, r2
 80078f4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f6:	e00f      	b.n	8007918 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f00b f841 	bl	8012980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078fe:	e00b      	b.n	8007918 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f00b f83d 	bl	8012980 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007906:	e007      	b.n	8007918 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f00b f839 	bl	8012980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8007916:	e1bf      	b.n	8007c98 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007918:	bf00      	nop
    return;
 800791a:	e1bd      	b.n	8007c98 <HAL_UART_IRQHandler+0x634>
 800791c:	10000001 	.word	0x10000001
 8007920:	04000120 	.word	0x04000120
 8007924:	08008add 	.word	0x08008add

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800792c:	2b01      	cmp	r3, #1
 800792e:	f040 8153 	bne.w	8007bd8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007936:	f003 0310 	and.w	r3, r3, #16
 800793a:	2b00      	cmp	r3, #0
 800793c:	f000 814c 	beq.w	8007bd8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007944:	f003 0310 	and.w	r3, r3, #16
 8007948:	2b00      	cmp	r3, #0
 800794a:	f000 8145 	beq.w	8007bd8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2210      	movs	r2, #16
 8007954:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007960:	2b40      	cmp	r3, #64	; 0x40
 8007962:	f040 80bb 	bne.w	8007adc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007974:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 818f 	beq.w	8007c9c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007984:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007988:	429a      	cmp	r2, r3
 800798a:	f080 8187 	bcs.w	8007c9c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007994:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0320 	and.w	r3, r3, #32
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f040 8087 	bne.w	8007aba <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80079b8:	e853 3f00 	ldrex	r3, [r3]
 80079bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80079c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80079c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	461a      	mov	r2, r3
 80079d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80079d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80079da:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80079e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80079e6:	e841 2300 	strex	r3, r2, [r1]
 80079ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1da      	bne.n	80079ac <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3308      	adds	r3, #8
 80079fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a00:	e853 3f00 	ldrex	r3, [r3]
 8007a04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a08:	f023 0301 	bic.w	r3, r3, #1
 8007a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	3308      	adds	r3, #8
 8007a16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007a1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007a1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007a22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007a26:	e841 2300 	strex	r3, r2, [r1]
 8007a2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d1e1      	bne.n	80079f6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	3308      	adds	r3, #8
 8007a38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	3308      	adds	r3, #8
 8007a52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a5e:	e841 2300 	strex	r3, r2, [r1]
 8007a62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1e3      	bne.n	8007a32 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a80:	e853 3f00 	ldrex	r3, [r3]
 8007a84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a88:	f023 0310 	bic.w	r3, r3, #16
 8007a8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	461a      	mov	r2, r3
 8007a96:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a9a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a9c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007aa0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007aa8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e4      	bne.n	8007a78 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7f9 fd76 	bl	80015a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2202      	movs	r2, #2
 8007abe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	1ad3      	subs	r3, r2, r3
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f8fd 	bl	8007cd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ada:	e0df      	b.n	8007c9c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	1ad3      	subs	r3, r2, r3
 8007aec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	f000 80d1 	beq.w	8007ca0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007afe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f000 80cc 	beq.w	8007ca0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b10:	e853 3f00 	ldrex	r3, [r3]
 8007b14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	461a      	mov	r2, r3
 8007b26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007b2a:	647b      	str	r3, [r7, #68]	; 0x44
 8007b2c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007b30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007b32:	e841 2300 	strex	r3, r2, [r1]
 8007b36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d1e4      	bne.n	8007b08 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3308      	adds	r3, #8
 8007b44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b48:	e853 3f00 	ldrex	r3, [r3]
 8007b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b54:	f023 0301 	bic.w	r3, r3, #1
 8007b58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	3308      	adds	r3, #8
 8007b62:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b66:	633a      	str	r2, [r7, #48]	; 0x30
 8007b68:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b6e:	e841 2300 	strex	r3, r2, [r1]
 8007b72:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d1e1      	bne.n	8007b3e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	f023 0310 	bic.w	r3, r3, #16
 8007ba2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	461a      	mov	r2, r3
 8007bac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007bb0:	61fb      	str	r3, [r7, #28]
 8007bb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	69b9      	ldr	r1, [r7, #24]
 8007bb6:	69fa      	ldr	r2, [r7, #28]
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	617b      	str	r3, [r7, #20]
   return(result);
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e4      	bne.n	8007b8e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 f87f 	bl	8007cd4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bd6:	e063      	b.n	8007ca0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00e      	beq.n	8007c02 <HAL_UART_IRQHandler+0x59e>
 8007be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007be8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d008      	beq.n	8007c02 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007bf8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 ffaf 	bl	8008b5e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c00:	e051      	b.n	8007ca6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d014      	beq.n	8007c38 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d105      	bne.n	8007c26 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d008      	beq.n	8007c38 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d03a      	beq.n	8007ca4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	4798      	blx	r3
    }
    return;
 8007c36:	e035      	b.n	8007ca4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d009      	beq.n	8007c58 <HAL_UART_IRQHandler+0x5f4>
 8007c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 ff59 	bl	8008b08 <UART_EndTransmit_IT>
    return;
 8007c56:	e026      	b.n	8007ca6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d009      	beq.n	8007c78 <HAL_UART_IRQHandler+0x614>
 8007c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d003      	beq.n	8007c78 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f000 ff88 	bl	8008b86 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c76:	e016      	b.n	8007ca6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d010      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x642>
 8007c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	da0c      	bge.n	8007ca6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 ff70 	bl	8008b72 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c92:	e008      	b.n	8007ca6 <HAL_UART_IRQHandler+0x642>
      return;
 8007c94:	bf00      	nop
 8007c96:	e006      	b.n	8007ca6 <HAL_UART_IRQHandler+0x642>
    return;
 8007c98:	bf00      	nop
 8007c9a:	e004      	b.n	8007ca6 <HAL_UART_IRQHandler+0x642>
      return;
 8007c9c:	bf00      	nop
 8007c9e:	e002      	b.n	8007ca6 <HAL_UART_IRQHandler+0x642>
      return;
 8007ca0:	bf00      	nop
 8007ca2:	e000      	b.n	8007ca6 <HAL_UART_IRQHandler+0x642>
    return;
 8007ca4:	bf00      	nop
  }
}
 8007ca6:	37e8      	adds	r7, #232	; 0xe8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b083      	sub	sp, #12
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cf0:	b08c      	sub	sp, #48	; 0x30
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	689a      	ldr	r2, [r3, #8]
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	431a      	orrs	r2, r3
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	431a      	orrs	r2, r3
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	69db      	ldr	r3, [r3, #28]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	4baa      	ldr	r3, [pc, #680]	; (8007fc4 <UART_SetConfig+0x2d8>)
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	6812      	ldr	r2, [r2, #0]
 8007d22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d24:	430b      	orrs	r3, r1
 8007d26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	68da      	ldr	r2, [r3, #12]
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a9f      	ldr	r2, [pc, #636]	; (8007fc8 <UART_SetConfig+0x2dc>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d004      	beq.n	8007d58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	6a1b      	ldr	r3, [r3, #32]
 8007d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d54:	4313      	orrs	r3, r2
 8007d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007d62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007d66:	697a      	ldr	r2, [r7, #20]
 8007d68:	6812      	ldr	r2, [r2, #0]
 8007d6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d6c:	430b      	orrs	r3, r1
 8007d6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d76:	f023 010f 	bic.w	r1, r3, #15
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a90      	ldr	r2, [pc, #576]	; (8007fcc <UART_SetConfig+0x2e0>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d125      	bne.n	8007ddc <UART_SetConfig+0xf0>
 8007d90:	4b8f      	ldr	r3, [pc, #572]	; (8007fd0 <UART_SetConfig+0x2e4>)
 8007d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d96:	f003 0303 	and.w	r3, r3, #3
 8007d9a:	2b03      	cmp	r3, #3
 8007d9c:	d81a      	bhi.n	8007dd4 <UART_SetConfig+0xe8>
 8007d9e:	a201      	add	r2, pc, #4	; (adr r2, 8007da4 <UART_SetConfig+0xb8>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007db5 	.word	0x08007db5
 8007da8:	08007dc5 	.word	0x08007dc5
 8007dac:	08007dbd 	.word	0x08007dbd
 8007db0:	08007dcd 	.word	0x08007dcd
 8007db4:	2301      	movs	r3, #1
 8007db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dba:	e116      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007dbc:	2302      	movs	r3, #2
 8007dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dc2:	e112      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007dc4:	2304      	movs	r3, #4
 8007dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dca:	e10e      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007dcc:	2308      	movs	r3, #8
 8007dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dd2:	e10a      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007dd4:	2310      	movs	r3, #16
 8007dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dda:	e106      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a7c      	ldr	r2, [pc, #496]	; (8007fd4 <UART_SetConfig+0x2e8>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d138      	bne.n	8007e58 <UART_SetConfig+0x16c>
 8007de6:	4b7a      	ldr	r3, [pc, #488]	; (8007fd0 <UART_SetConfig+0x2e4>)
 8007de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007dec:	f003 030c 	and.w	r3, r3, #12
 8007df0:	2b0c      	cmp	r3, #12
 8007df2:	d82d      	bhi.n	8007e50 <UART_SetConfig+0x164>
 8007df4:	a201      	add	r2, pc, #4	; (adr r2, 8007dfc <UART_SetConfig+0x110>)
 8007df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dfa:	bf00      	nop
 8007dfc:	08007e31 	.word	0x08007e31
 8007e00:	08007e51 	.word	0x08007e51
 8007e04:	08007e51 	.word	0x08007e51
 8007e08:	08007e51 	.word	0x08007e51
 8007e0c:	08007e41 	.word	0x08007e41
 8007e10:	08007e51 	.word	0x08007e51
 8007e14:	08007e51 	.word	0x08007e51
 8007e18:	08007e51 	.word	0x08007e51
 8007e1c:	08007e39 	.word	0x08007e39
 8007e20:	08007e51 	.word	0x08007e51
 8007e24:	08007e51 	.word	0x08007e51
 8007e28:	08007e51 	.word	0x08007e51
 8007e2c:	08007e49 	.word	0x08007e49
 8007e30:	2300      	movs	r3, #0
 8007e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e36:	e0d8      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007e38:	2302      	movs	r3, #2
 8007e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e3e:	e0d4      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007e40:	2304      	movs	r3, #4
 8007e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e46:	e0d0      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007e48:	2308      	movs	r3, #8
 8007e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e4e:	e0cc      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007e50:	2310      	movs	r3, #16
 8007e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e56:	e0c8      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a5e      	ldr	r2, [pc, #376]	; (8007fd8 <UART_SetConfig+0x2ec>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d125      	bne.n	8007eae <UART_SetConfig+0x1c2>
 8007e62:	4b5b      	ldr	r3, [pc, #364]	; (8007fd0 <UART_SetConfig+0x2e4>)
 8007e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e6c:	2b30      	cmp	r3, #48	; 0x30
 8007e6e:	d016      	beq.n	8007e9e <UART_SetConfig+0x1b2>
 8007e70:	2b30      	cmp	r3, #48	; 0x30
 8007e72:	d818      	bhi.n	8007ea6 <UART_SetConfig+0x1ba>
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d00a      	beq.n	8007e8e <UART_SetConfig+0x1a2>
 8007e78:	2b20      	cmp	r3, #32
 8007e7a:	d814      	bhi.n	8007ea6 <UART_SetConfig+0x1ba>
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d002      	beq.n	8007e86 <UART_SetConfig+0x19a>
 8007e80:	2b10      	cmp	r3, #16
 8007e82:	d008      	beq.n	8007e96 <UART_SetConfig+0x1aa>
 8007e84:	e00f      	b.n	8007ea6 <UART_SetConfig+0x1ba>
 8007e86:	2300      	movs	r3, #0
 8007e88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e8c:	e0ad      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007e8e:	2302      	movs	r3, #2
 8007e90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e94:	e0a9      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007e96:	2304      	movs	r3, #4
 8007e98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e9c:	e0a5      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007e9e:	2308      	movs	r3, #8
 8007ea0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ea4:	e0a1      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007ea6:	2310      	movs	r3, #16
 8007ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eac:	e09d      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a4a      	ldr	r2, [pc, #296]	; (8007fdc <UART_SetConfig+0x2f0>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d125      	bne.n	8007f04 <UART_SetConfig+0x218>
 8007eb8:	4b45      	ldr	r3, [pc, #276]	; (8007fd0 <UART_SetConfig+0x2e4>)
 8007eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ebe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007ec2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ec4:	d016      	beq.n	8007ef4 <UART_SetConfig+0x208>
 8007ec6:	2bc0      	cmp	r3, #192	; 0xc0
 8007ec8:	d818      	bhi.n	8007efc <UART_SetConfig+0x210>
 8007eca:	2b80      	cmp	r3, #128	; 0x80
 8007ecc:	d00a      	beq.n	8007ee4 <UART_SetConfig+0x1f8>
 8007ece:	2b80      	cmp	r3, #128	; 0x80
 8007ed0:	d814      	bhi.n	8007efc <UART_SetConfig+0x210>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d002      	beq.n	8007edc <UART_SetConfig+0x1f0>
 8007ed6:	2b40      	cmp	r3, #64	; 0x40
 8007ed8:	d008      	beq.n	8007eec <UART_SetConfig+0x200>
 8007eda:	e00f      	b.n	8007efc <UART_SetConfig+0x210>
 8007edc:	2300      	movs	r3, #0
 8007ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ee2:	e082      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eea:	e07e      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007eec:	2304      	movs	r3, #4
 8007eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ef2:	e07a      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007ef4:	2308      	movs	r3, #8
 8007ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007efa:	e076      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007efc:	2310      	movs	r3, #16
 8007efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f02:	e072      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a35      	ldr	r2, [pc, #212]	; (8007fe0 <UART_SetConfig+0x2f4>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d12a      	bne.n	8007f64 <UART_SetConfig+0x278>
 8007f0e:	4b30      	ldr	r3, [pc, #192]	; (8007fd0 <UART_SetConfig+0x2e4>)
 8007f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f1c:	d01a      	beq.n	8007f54 <UART_SetConfig+0x268>
 8007f1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f22:	d81b      	bhi.n	8007f5c <UART_SetConfig+0x270>
 8007f24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f28:	d00c      	beq.n	8007f44 <UART_SetConfig+0x258>
 8007f2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f2e:	d815      	bhi.n	8007f5c <UART_SetConfig+0x270>
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d003      	beq.n	8007f3c <UART_SetConfig+0x250>
 8007f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f38:	d008      	beq.n	8007f4c <UART_SetConfig+0x260>
 8007f3a:	e00f      	b.n	8007f5c <UART_SetConfig+0x270>
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f42:	e052      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007f44:	2302      	movs	r3, #2
 8007f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f4a:	e04e      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007f4c:	2304      	movs	r3, #4
 8007f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f52:	e04a      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007f54:	2308      	movs	r3, #8
 8007f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f5a:	e046      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007f5c:	2310      	movs	r3, #16
 8007f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f62:	e042      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a17      	ldr	r2, [pc, #92]	; (8007fc8 <UART_SetConfig+0x2dc>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d13a      	bne.n	8007fe4 <UART_SetConfig+0x2f8>
 8007f6e:	4b18      	ldr	r3, [pc, #96]	; (8007fd0 <UART_SetConfig+0x2e4>)
 8007f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f7c:	d01a      	beq.n	8007fb4 <UART_SetConfig+0x2c8>
 8007f7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f82:	d81b      	bhi.n	8007fbc <UART_SetConfig+0x2d0>
 8007f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f88:	d00c      	beq.n	8007fa4 <UART_SetConfig+0x2b8>
 8007f8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f8e:	d815      	bhi.n	8007fbc <UART_SetConfig+0x2d0>
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d003      	beq.n	8007f9c <UART_SetConfig+0x2b0>
 8007f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f98:	d008      	beq.n	8007fac <UART_SetConfig+0x2c0>
 8007f9a:	e00f      	b.n	8007fbc <UART_SetConfig+0x2d0>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fa2:	e022      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007fa4:	2302      	movs	r3, #2
 8007fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007faa:	e01e      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007fac:	2304      	movs	r3, #4
 8007fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fb2:	e01a      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007fb4:	2308      	movs	r3, #8
 8007fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fba:	e016      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007fbc:	2310      	movs	r3, #16
 8007fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc2:	e012      	b.n	8007fea <UART_SetConfig+0x2fe>
 8007fc4:	cfff69f3 	.word	0xcfff69f3
 8007fc8:	40008000 	.word	0x40008000
 8007fcc:	40013800 	.word	0x40013800
 8007fd0:	40021000 	.word	0x40021000
 8007fd4:	40004400 	.word	0x40004400
 8007fd8:	40004800 	.word	0x40004800
 8007fdc:	40004c00 	.word	0x40004c00
 8007fe0:	40005000 	.word	0x40005000
 8007fe4:	2310      	movs	r3, #16
 8007fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4aae      	ldr	r2, [pc, #696]	; (80082a8 <UART_SetConfig+0x5bc>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	f040 8097 	bne.w	8008124 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007ff6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ffa:	2b08      	cmp	r3, #8
 8007ffc:	d823      	bhi.n	8008046 <UART_SetConfig+0x35a>
 8007ffe:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <UART_SetConfig+0x318>)
 8008000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008004:	08008029 	.word	0x08008029
 8008008:	08008047 	.word	0x08008047
 800800c:	08008031 	.word	0x08008031
 8008010:	08008047 	.word	0x08008047
 8008014:	08008037 	.word	0x08008037
 8008018:	08008047 	.word	0x08008047
 800801c:	08008047 	.word	0x08008047
 8008020:	08008047 	.word	0x08008047
 8008024:	0800803f 	.word	0x0800803f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008028:	f7fe ff32 	bl	8006e90 <HAL_RCC_GetPCLK1Freq>
 800802c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800802e:	e010      	b.n	8008052 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008030:	4b9e      	ldr	r3, [pc, #632]	; (80082ac <UART_SetConfig+0x5c0>)
 8008032:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008034:	e00d      	b.n	8008052 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008036:	f7fe febd 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 800803a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800803c:	e009      	b.n	8008052 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800803e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008042:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008044:	e005      	b.n	8008052 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008050:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	2b00      	cmp	r3, #0
 8008056:	f000 8130 	beq.w	80082ba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805e:	4a94      	ldr	r2, [pc, #592]	; (80082b0 <UART_SetConfig+0x5c4>)
 8008060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008064:	461a      	mov	r2, r3
 8008066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008068:	fbb3 f3f2 	udiv	r3, r3, r2
 800806c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	685a      	ldr	r2, [r3, #4]
 8008072:	4613      	mov	r3, r2
 8008074:	005b      	lsls	r3, r3, #1
 8008076:	4413      	add	r3, r2
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	429a      	cmp	r2, r3
 800807c:	d305      	bcc.n	800808a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	429a      	cmp	r2, r3
 8008088:	d903      	bls.n	8008092 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008090:	e113      	b.n	80082ba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008094:	2200      	movs	r2, #0
 8008096:	60bb      	str	r3, [r7, #8]
 8008098:	60fa      	str	r2, [r7, #12]
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	4a84      	ldr	r2, [pc, #528]	; (80082b0 <UART_SetConfig+0x5c4>)
 80080a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080a4:	b29b      	uxth	r3, r3
 80080a6:	2200      	movs	r2, #0
 80080a8:	603b      	str	r3, [r7, #0]
 80080aa:	607a      	str	r2, [r7, #4]
 80080ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80080b4:	f7f8 fdf0 	bl	8000c98 <__aeabi_uldivmod>
 80080b8:	4602      	mov	r2, r0
 80080ba:	460b      	mov	r3, r1
 80080bc:	4610      	mov	r0, r2
 80080be:	4619      	mov	r1, r3
 80080c0:	f04f 0200 	mov.w	r2, #0
 80080c4:	f04f 0300 	mov.w	r3, #0
 80080c8:	020b      	lsls	r3, r1, #8
 80080ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080ce:	0202      	lsls	r2, r0, #8
 80080d0:	6979      	ldr	r1, [r7, #20]
 80080d2:	6849      	ldr	r1, [r1, #4]
 80080d4:	0849      	lsrs	r1, r1, #1
 80080d6:	2000      	movs	r0, #0
 80080d8:	460c      	mov	r4, r1
 80080da:	4605      	mov	r5, r0
 80080dc:	eb12 0804 	adds.w	r8, r2, r4
 80080e0:	eb43 0905 	adc.w	r9, r3, r5
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	469a      	mov	sl, r3
 80080ec:	4693      	mov	fp, r2
 80080ee:	4652      	mov	r2, sl
 80080f0:	465b      	mov	r3, fp
 80080f2:	4640      	mov	r0, r8
 80080f4:	4649      	mov	r1, r9
 80080f6:	f7f8 fdcf 	bl	8000c98 <__aeabi_uldivmod>
 80080fa:	4602      	mov	r2, r0
 80080fc:	460b      	mov	r3, r1
 80080fe:	4613      	mov	r3, r2
 8008100:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008108:	d308      	bcc.n	800811c <UART_SetConfig+0x430>
 800810a:	6a3b      	ldr	r3, [r7, #32]
 800810c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008110:	d204      	bcs.n	800811c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6a3a      	ldr	r2, [r7, #32]
 8008118:	60da      	str	r2, [r3, #12]
 800811a:	e0ce      	b.n	80082ba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008122:	e0ca      	b.n	80082ba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	69db      	ldr	r3, [r3, #28]
 8008128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800812c:	d166      	bne.n	80081fc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800812e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008132:	2b08      	cmp	r3, #8
 8008134:	d827      	bhi.n	8008186 <UART_SetConfig+0x49a>
 8008136:	a201      	add	r2, pc, #4	; (adr r2, 800813c <UART_SetConfig+0x450>)
 8008138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813c:	08008161 	.word	0x08008161
 8008140:	08008169 	.word	0x08008169
 8008144:	08008171 	.word	0x08008171
 8008148:	08008187 	.word	0x08008187
 800814c:	08008177 	.word	0x08008177
 8008150:	08008187 	.word	0x08008187
 8008154:	08008187 	.word	0x08008187
 8008158:	08008187 	.word	0x08008187
 800815c:	0800817f 	.word	0x0800817f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008160:	f7fe fe96 	bl	8006e90 <HAL_RCC_GetPCLK1Freq>
 8008164:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008166:	e014      	b.n	8008192 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008168:	f7fe fea8 	bl	8006ebc <HAL_RCC_GetPCLK2Freq>
 800816c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800816e:	e010      	b.n	8008192 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008170:	4b4e      	ldr	r3, [pc, #312]	; (80082ac <UART_SetConfig+0x5c0>)
 8008172:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008174:	e00d      	b.n	8008192 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008176:	f7fe fe1d 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 800817a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800817c:	e009      	b.n	8008192 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800817e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008182:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008184:	e005      	b.n	8008192 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008186:	2300      	movs	r3, #0
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008190:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 8090 	beq.w	80082ba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819e:	4a44      	ldr	r2, [pc, #272]	; (80082b0 <UART_SetConfig+0x5c4>)
 80081a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081a4:	461a      	mov	r2, r3
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80081ac:	005a      	lsls	r2, r3, #1
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	085b      	lsrs	r3, r3, #1
 80081b4:	441a      	add	r2, r3
 80081b6:	697b      	ldr	r3, [r7, #20]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80081be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	2b0f      	cmp	r3, #15
 80081c4:	d916      	bls.n	80081f4 <UART_SetConfig+0x508>
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081cc:	d212      	bcs.n	80081f4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081ce:	6a3b      	ldr	r3, [r7, #32]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	f023 030f 	bic.w	r3, r3, #15
 80081d6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081d8:	6a3b      	ldr	r3, [r7, #32]
 80081da:	085b      	lsrs	r3, r3, #1
 80081dc:	b29b      	uxth	r3, r3
 80081de:	f003 0307 	and.w	r3, r3, #7
 80081e2:	b29a      	uxth	r2, r3
 80081e4:	8bfb      	ldrh	r3, [r7, #30]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	8bfa      	ldrh	r2, [r7, #30]
 80081f0:	60da      	str	r2, [r3, #12]
 80081f2:	e062      	b.n	80082ba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80081f4:	2301      	movs	r3, #1
 80081f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081fa:	e05e      	b.n	80082ba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008200:	2b08      	cmp	r3, #8
 8008202:	d828      	bhi.n	8008256 <UART_SetConfig+0x56a>
 8008204:	a201      	add	r2, pc, #4	; (adr r2, 800820c <UART_SetConfig+0x520>)
 8008206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820a:	bf00      	nop
 800820c:	08008231 	.word	0x08008231
 8008210:	08008239 	.word	0x08008239
 8008214:	08008241 	.word	0x08008241
 8008218:	08008257 	.word	0x08008257
 800821c:	08008247 	.word	0x08008247
 8008220:	08008257 	.word	0x08008257
 8008224:	08008257 	.word	0x08008257
 8008228:	08008257 	.word	0x08008257
 800822c:	0800824f 	.word	0x0800824f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008230:	f7fe fe2e 	bl	8006e90 <HAL_RCC_GetPCLK1Freq>
 8008234:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008236:	e014      	b.n	8008262 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008238:	f7fe fe40 	bl	8006ebc <HAL_RCC_GetPCLK2Freq>
 800823c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800823e:	e010      	b.n	8008262 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008240:	4b1a      	ldr	r3, [pc, #104]	; (80082ac <UART_SetConfig+0x5c0>)
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008244:	e00d      	b.n	8008262 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008246:	f7fe fdb5 	bl	8006db4 <HAL_RCC_GetSysClockFreq>
 800824a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800824c:	e009      	b.n	8008262 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800824e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008254:	e005      	b.n	8008262 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008256:	2300      	movs	r3, #0
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008260:	bf00      	nop
    }

    if (pclk != 0U)
 8008262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008264:	2b00      	cmp	r3, #0
 8008266:	d028      	beq.n	80082ba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008268:	697b      	ldr	r3, [r7, #20]
 800826a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800826c:	4a10      	ldr	r2, [pc, #64]	; (80082b0 <UART_SetConfig+0x5c4>)
 800826e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008272:	461a      	mov	r2, r3
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	fbb3 f2f2 	udiv	r2, r3, r2
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	085b      	lsrs	r3, r3, #1
 8008280:	441a      	add	r2, r3
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	fbb2 f3f3 	udiv	r3, r2, r3
 800828a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800828c:	6a3b      	ldr	r3, [r7, #32]
 800828e:	2b0f      	cmp	r3, #15
 8008290:	d910      	bls.n	80082b4 <UART_SetConfig+0x5c8>
 8008292:	6a3b      	ldr	r3, [r7, #32]
 8008294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008298:	d20c      	bcs.n	80082b4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800829a:	6a3b      	ldr	r3, [r7, #32]
 800829c:	b29a      	uxth	r2, r3
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	60da      	str	r2, [r3, #12]
 80082a4:	e009      	b.n	80082ba <UART_SetConfig+0x5ce>
 80082a6:	bf00      	nop
 80082a8:	40008000 	.word	0x40008000
 80082ac:	00f42400 	.word	0x00f42400
 80082b0:	08016a50 	.word	0x08016a50
      }
      else
      {
        ret = HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	2201      	movs	r2, #1
 80082be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	2200      	movs	r2, #0
 80082ce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	2200      	movs	r2, #0
 80082d4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80082d6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3730      	adds	r7, #48	; 0x30
 80082de:	46bd      	mov	sp, r7
 80082e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080082e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b083      	sub	sp, #12
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f0:	f003 0308 	and.w	r3, r3, #8
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00a      	beq.n	800830e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008334:	f003 0302 	and.w	r3, r3, #2
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00a      	beq.n	8008352 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	430a      	orrs	r2, r1
 8008350:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008356:	f003 0304 	and.w	r3, r3, #4
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008378:	f003 0310 	and.w	r3, r3, #16
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00a      	beq.n	8008396 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	689b      	ldr	r3, [r3, #8]
 8008386:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839a:	f003 0320 	and.w	r3, r3, #32
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d00a      	beq.n	80083b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	430a      	orrs	r2, r1
 80083b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d01a      	beq.n	80083fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	430a      	orrs	r2, r1
 80083d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083e2:	d10a      	bne.n	80083fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00a      	beq.n	800841c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	430a      	orrs	r2, r1
 800841a:	605a      	str	r2, [r3, #4]
  }
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b098      	sub	sp, #96	; 0x60
 800842c:	af02      	add	r7, sp, #8
 800842e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008438:	f7f8 fe70 	bl	800111c <HAL_GetTick>
 800843c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0308 	and.w	r3, r3, #8
 8008448:	2b08      	cmp	r3, #8
 800844a:	d12f      	bne.n	80084ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800844c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008450:	9300      	str	r3, [sp, #0]
 8008452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008454:	2200      	movs	r2, #0
 8008456:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 f88e 	bl	800857c <UART_WaitOnFlagUntilTimeout>
 8008460:	4603      	mov	r3, r0
 8008462:	2b00      	cmp	r3, #0
 8008464:	d022      	beq.n	80084ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800846e:	e853 3f00 	ldrex	r3, [r3]
 8008472:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800847a:	653b      	str	r3, [r7, #80]	; 0x50
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	461a      	mov	r2, r3
 8008482:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008484:	647b      	str	r3, [r7, #68]	; 0x44
 8008486:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008488:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800848a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800848c:	e841 2300 	strex	r3, r2, [r1]
 8008490:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008494:	2b00      	cmp	r3, #0
 8008496:	d1e6      	bne.n	8008466 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2220      	movs	r2, #32
 800849c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e063      	b.n	8008574 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f003 0304 	and.w	r3, r3, #4
 80084b6:	2b04      	cmp	r3, #4
 80084b8:	d149      	bne.n	800854e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80084ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084c2:	2200      	movs	r2, #0
 80084c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f857 	bl	800857c <UART_WaitOnFlagUntilTimeout>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d03c      	beq.n	800854e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	623b      	str	r3, [r7, #32]
   return(result);
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	461a      	mov	r2, r3
 80084f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f2:	633b      	str	r3, [r7, #48]	; 0x30
 80084f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e6      	bne.n	80084d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	3308      	adds	r3, #8
 800850c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800850e:	693b      	ldr	r3, [r7, #16]
 8008510:	e853 3f00 	ldrex	r3, [r3]
 8008514:	60fb      	str	r3, [r7, #12]
   return(result);
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f023 0301 	bic.w	r3, r3, #1
 800851c:	64bb      	str	r3, [r7, #72]	; 0x48
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	3308      	adds	r3, #8
 8008524:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008526:	61fa      	str	r2, [r7, #28]
 8008528:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800852a:	69b9      	ldr	r1, [r7, #24]
 800852c:	69fa      	ldr	r2, [r7, #28]
 800852e:	e841 2300 	strex	r3, r2, [r1]
 8008532:	617b      	str	r3, [r7, #20]
   return(result);
 8008534:	697b      	ldr	r3, [r7, #20]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d1e5      	bne.n	8008506 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	2220      	movs	r2, #32
 800853e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e012      	b.n	8008574 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2220      	movs	r2, #32
 8008552:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2220      	movs	r2, #32
 800855a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	3758      	adds	r7, #88	; 0x58
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b084      	sub	sp, #16
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	603b      	str	r3, [r7, #0]
 8008588:	4613      	mov	r3, r2
 800858a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800858c:	e04f      	b.n	800862e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800858e:	69bb      	ldr	r3, [r7, #24]
 8008590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008594:	d04b      	beq.n	800862e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008596:	f7f8 fdc1 	bl	800111c <HAL_GetTick>
 800859a:	4602      	mov	r2, r0
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	1ad3      	subs	r3, r2, r3
 80085a0:	69ba      	ldr	r2, [r7, #24]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d302      	bcc.n	80085ac <UART_WaitOnFlagUntilTimeout+0x30>
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d101      	bne.n	80085b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085ac:	2303      	movs	r3, #3
 80085ae:	e04e      	b.n	800864e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f003 0304 	and.w	r3, r3, #4
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d037      	beq.n	800862e <UART_WaitOnFlagUntilTimeout+0xb2>
 80085be:	68bb      	ldr	r3, [r7, #8]
 80085c0:	2b80      	cmp	r3, #128	; 0x80
 80085c2:	d034      	beq.n	800862e <UART_WaitOnFlagUntilTimeout+0xb2>
 80085c4:	68bb      	ldr	r3, [r7, #8]
 80085c6:	2b40      	cmp	r3, #64	; 0x40
 80085c8:	d031      	beq.n	800862e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	f003 0308 	and.w	r3, r3, #8
 80085d4:	2b08      	cmp	r3, #8
 80085d6:	d110      	bne.n	80085fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2208      	movs	r2, #8
 80085de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 f920 	bl	8008826 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2208      	movs	r2, #8
 80085ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e029      	b.n	800864e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69db      	ldr	r3, [r3, #28]
 8008600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008604:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008608:	d111      	bne.n	800862e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008612:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 f906 	bl	8008826 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2220      	movs	r2, #32
 800861e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2200      	movs	r2, #0
 8008626:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e00f      	b.n	800864e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	69da      	ldr	r2, [r3, #28]
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	4013      	ands	r3, r2
 8008638:	68ba      	ldr	r2, [r7, #8]
 800863a:	429a      	cmp	r2, r3
 800863c:	bf0c      	ite	eq
 800863e:	2301      	moveq	r3, #1
 8008640:	2300      	movne	r3, #0
 8008642:	b2db      	uxtb	r3, r3
 8008644:	461a      	mov	r2, r3
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	429a      	cmp	r2, r3
 800864a:	d0a0      	beq.n	800858e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800864c:	2300      	movs	r3, #0
}
 800864e:	4618      	mov	r0, r3
 8008650:	3710      	adds	r7, #16
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
	...

08008658 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b096      	sub	sp, #88	; 0x58
 800865c:	af00      	add	r7, sp, #0
 800865e:	60f8      	str	r0, [r7, #12]
 8008660:	60b9      	str	r1, [r7, #8]
 8008662:	4613      	mov	r3, r2
 8008664:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	68ba      	ldr	r2, [r7, #8]
 800866a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	88fa      	ldrh	r2, [r7, #6]
 8008670:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2222      	movs	r2, #34	; 0x22
 8008680:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  if (huart->hdmarx != NULL)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800868a:	2b00      	cmp	r3, #0
 800868c:	d02d      	beq.n	80086ea <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008694:	4a40      	ldr	r2, [pc, #256]	; (8008798 <UART_Start_Receive_DMA+0x140>)
 8008696:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800869e:	4a3f      	ldr	r2, [pc, #252]	; (800879c <UART_Start_Receive_DMA+0x144>)
 80086a0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086a8:	4a3d      	ldr	r2, [pc, #244]	; (80087a0 <UART_Start_Receive_DMA+0x148>)
 80086aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80086b2:	2200      	movs	r2, #0
 80086b4:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	3324      	adds	r3, #36	; 0x24
 80086c2:	4619      	mov	r1, r3
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c8:	461a      	mov	r2, r3
 80086ca:	88fb      	ldrh	r3, [r7, #6]
 80086cc:	f7f8 fef0 	bl	80014b0 <HAL_DMA_Start_IT>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d009      	beq.n	80086ea <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2210      	movs	r2, #16
 80086da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2220      	movs	r2, #32
 80086e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      return HAL_ERROR;
 80086e6:	2301      	movs	r3, #1
 80086e8:	e051      	b.n	800878e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	691b      	ldr	r3, [r3, #16]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d018      	beq.n	8008724 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086fa:	e853 3f00 	ldrex	r3, [r3]
 80086fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008702:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008706:	657b      	str	r3, [r7, #84]	; 0x54
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	461a      	mov	r2, r3
 800870e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008710:	64bb      	str	r3, [r7, #72]	; 0x48
 8008712:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008714:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008716:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008718:	e841 2300 	strex	r3, r2, [r1]
 800871c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800871e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008720:	2b00      	cmp	r3, #0
 8008722:	d1e6      	bne.n	80086f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3308      	adds	r3, #8
 800872a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872e:	e853 3f00 	ldrex	r3, [r3]
 8008732:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008736:	f043 0301 	orr.w	r3, r3, #1
 800873a:	653b      	str	r3, [r7, #80]	; 0x50
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3308      	adds	r3, #8
 8008742:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008744:	637a      	str	r2, [r7, #52]	; 0x34
 8008746:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008748:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800874a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800874c:	e841 2300 	strex	r3, r2, [r1]
 8008750:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008754:	2b00      	cmp	r3, #0
 8008756:	d1e5      	bne.n	8008724 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	3308      	adds	r3, #8
 800875e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	e853 3f00 	ldrex	r3, [r3]
 8008766:	613b      	str	r3, [r7, #16]
   return(result);
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800876e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	3308      	adds	r3, #8
 8008776:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008778:	623a      	str	r2, [r7, #32]
 800877a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	69f9      	ldr	r1, [r7, #28]
 800877e:	6a3a      	ldr	r2, [r7, #32]
 8008780:	e841 2300 	strex	r3, r2, [r1]
 8008784:	61bb      	str	r3, [r7, #24]
   return(result);
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e5      	bne.n	8008758 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800878c:	2300      	movs	r3, #0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3758      	adds	r7, #88	; 0x58
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}
 8008796:	bf00      	nop
 8008798:	080088f3 	.word	0x080088f3
 800879c:	08008a1f 	.word	0x08008a1f
 80087a0:	08008a5d 	.word	0x08008a5d

080087a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b08f      	sub	sp, #60	; 0x3c
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b2:	6a3b      	ldr	r3, [r7, #32]
 80087b4:	e853 3f00 	ldrex	r3, [r3]
 80087b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80087c0:	637b      	str	r3, [r7, #52]	; 0x34
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80087cc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e6      	bne.n	80087ac <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	3308      	adds	r3, #8
 80087e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	e853 3f00 	ldrex	r3, [r3]
 80087ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80087f4:	633b      	str	r3, [r7, #48]	; 0x30
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	3308      	adds	r3, #8
 80087fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087fe:	61ba      	str	r2, [r7, #24]
 8008800:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008802:	6979      	ldr	r1, [r7, #20]
 8008804:	69ba      	ldr	r2, [r7, #24]
 8008806:	e841 2300 	strex	r3, r2, [r1]
 800880a:	613b      	str	r3, [r7, #16]
   return(result);
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d1e5      	bne.n	80087de <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2220      	movs	r2, #32
 8008816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800881a:	bf00      	nop
 800881c:	373c      	adds	r7, #60	; 0x3c
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008826:	b480      	push	{r7}
 8008828:	b095      	sub	sp, #84	; 0x54
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008842:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	461a      	mov	r2, r3
 800884a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800884c:	643b      	str	r3, [r7, #64]	; 0x40
 800884e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008852:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800885a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e6      	bne.n	800882e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	3308      	adds	r3, #8
 8008866:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008868:	6a3b      	ldr	r3, [r7, #32]
 800886a:	e853 3f00 	ldrex	r3, [r3]
 800886e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008876:	f023 0301 	bic.w	r3, r3, #1
 800887a:	64bb      	str	r3, [r7, #72]	; 0x48
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3308      	adds	r3, #8
 8008882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008884:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800888a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800888c:	e841 2300 	strex	r3, r2, [r1]
 8008890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008894:	2b00      	cmp	r3, #0
 8008896:	d1e3      	bne.n	8008860 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800889c:	2b01      	cmp	r3, #1
 800889e:	d118      	bne.n	80088d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	e853 3f00 	ldrex	r3, [r3]
 80088ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	f023 0310 	bic.w	r3, r3, #16
 80088b4:	647b      	str	r3, [r7, #68]	; 0x44
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	461a      	mov	r2, r3
 80088bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088be:	61bb      	str	r3, [r7, #24]
 80088c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	6979      	ldr	r1, [r7, #20]
 80088c4:	69ba      	ldr	r2, [r7, #24]
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	613b      	str	r3, [r7, #16]
   return(result);
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e6      	bne.n	80088a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2220      	movs	r2, #32
 80088d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	2200      	movs	r2, #0
 80088de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80088e6:	bf00      	nop
 80088e8:	3754      	adds	r7, #84	; 0x54
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80088f2:	b580      	push	{r7, lr}
 80088f4:	b09c      	sub	sp, #112	; 0x70
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088fe:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 0320 	and.w	r3, r3, #32
 800890a:	2b00      	cmp	r3, #0
 800890c:	d171      	bne.n	80089f2 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 800890e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008910:	2200      	movs	r2, #0
 8008912:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800891c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800891e:	e853 3f00 	ldrex	r3, [r3]
 8008922:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008924:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008926:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800892a:	66bb      	str	r3, [r7, #104]	; 0x68
 800892c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	461a      	mov	r2, r3
 8008932:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008934:	65bb      	str	r3, [r7, #88]	; 0x58
 8008936:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008938:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800893a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800893c:	e841 2300 	strex	r3, r2, [r1]
 8008940:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008944:	2b00      	cmp	r3, #0
 8008946:	d1e6      	bne.n	8008916 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	3308      	adds	r3, #8
 800894e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800895a:	f023 0301 	bic.w	r3, r3, #1
 800895e:	667b      	str	r3, [r7, #100]	; 0x64
 8008960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3308      	adds	r3, #8
 8008966:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008968:	647a      	str	r2, [r7, #68]	; 0x44
 800896a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800896e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e5      	bne.n	8008948 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800897c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3308      	adds	r3, #8
 8008982:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008986:	e853 3f00 	ldrex	r3, [r3]
 800898a:	623b      	str	r3, [r7, #32]
   return(result);
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008992:	663b      	str	r3, [r7, #96]	; 0x60
 8008994:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	3308      	adds	r3, #8
 800899a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800899c:	633a      	str	r2, [r7, #48]	; 0x30
 800899e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089a4:	e841 2300 	strex	r3, r2, [r1]
 80089a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e5      	bne.n	800897c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80089b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089b2:	2220      	movs	r2, #32
 80089b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d118      	bne.n	80089f2 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c6:	693b      	ldr	r3, [r7, #16]
 80089c8:	e853 3f00 	ldrex	r3, [r3]
 80089cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f023 0310 	bic.w	r3, r3, #16
 80089d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80089d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089de:	61fb      	str	r3, [r7, #28]
 80089e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e2:	69b9      	ldr	r1, [r7, #24]
 80089e4:	69fa      	ldr	r2, [r7, #28]
 80089e6:	e841 2300 	strex	r3, r2, [r1]
 80089ea:	617b      	str	r3, [r7, #20]
   return(result);
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d1e6      	bne.n	80089c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089f4:	2200      	movs	r2, #0
 80089f6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	d107      	bne.n	8008a10 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a06:	4619      	mov	r1, r3
 8008a08:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008a0a:	f7ff f963 	bl	8007cd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a0e:	e002      	b.n	8008a16 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8008a10:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8008a12:	f009 ffbf 	bl	8012994 <HAL_UART_RxCpltCallback>
}
 8008a16:	bf00      	nop
 8008a18:	3770      	adds	r7, #112	; 0x70
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a2a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a36:	2b01      	cmp	r3, #1
 8008a38:	d109      	bne.n	8008a4e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a40:	085b      	lsrs	r3, r3, #1
 8008a42:	b29b      	uxth	r3, r3
 8008a44:	4619      	mov	r1, r3
 8008a46:	68f8      	ldr	r0, [r7, #12]
 8008a48:	f7ff f944 	bl	8007cd4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a4c:	e002      	b.n	8008a54 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008a4e:	68f8      	ldr	r0, [r7, #12]
 8008a50:	f7ff f936 	bl	8007cc0 <HAL_UART_RxHalfCpltCallback>
}
 8008a54:	bf00      	nop
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b086      	sub	sp, #24
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a68:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008a6a:	697b      	ldr	r3, [r7, #20]
 8008a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a70:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a78:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a84:	2b80      	cmp	r3, #128	; 0x80
 8008a86:	d109      	bne.n	8008a9c <UART_DMAError+0x40>
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	2b21      	cmp	r3, #33	; 0x21
 8008a8c:	d106      	bne.n	8008a9c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2200      	movs	r2, #0
 8008a92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008a96:	6978      	ldr	r0, [r7, #20]
 8008a98:	f7ff fe84 	bl	80087a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa6:	2b40      	cmp	r3, #64	; 0x40
 8008aa8:	d109      	bne.n	8008abe <UART_DMAError+0x62>
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2b22      	cmp	r3, #34	; 0x22
 8008aae:	d106      	bne.n	8008abe <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008ab8:	6978      	ldr	r0, [r7, #20]
 8008aba:	f7ff feb4 	bl	8008826 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ac4:	f043 0210 	orr.w	r2, r3, #16
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ace:	6978      	ldr	r0, [r7, #20]
 8008ad0:	f009 ff56 	bl	8012980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ad4:	bf00      	nop
 8008ad6:	3718      	adds	r7, #24
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ae8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f009 ff40 	bl	8012980 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b00:	bf00      	nop
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b088      	sub	sp, #32
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	e853 3f00 	ldrex	r3, [r3]
 8008b1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b24:	61fb      	str	r3, [r7, #28]
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	461a      	mov	r2, r3
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	61bb      	str	r3, [r7, #24]
 8008b30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b32:	6979      	ldr	r1, [r7, #20]
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	e841 2300 	strex	r3, r2, [r1]
 8008b3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d1e6      	bne.n	8008b10 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2220      	movs	r2, #32
 8008b46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f7ff f8ab 	bl	8007cac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b56:	bf00      	nop
 8008b58:	3720      	adds	r7, #32
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	b083      	sub	sp, #12
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008b66:	bf00      	nop
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008b7a:	bf00      	nop
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008b86:	b480      	push	{r7}
 8008b88:	b083      	sub	sp, #12
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008b8e:	bf00      	nop
 8008b90:	370c      	adds	r7, #12
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	b085      	sub	sp, #20
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008ba8:	2b01      	cmp	r3, #1
 8008baa:	d101      	bne.n	8008bb0 <HAL_UARTEx_DisableFifoMode+0x16>
 8008bac:	2302      	movs	r3, #2
 8008bae:	e027      	b.n	8008c00 <HAL_UARTEx_DisableFifoMode+0x66>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2224      	movs	r2, #36	; 0x24
 8008bbc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0201 	bic.w	r2, r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008bde:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008bfe:	2300      	movs	r3, #0
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d101      	bne.n	8008c24 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c20:	2302      	movs	r3, #2
 8008c22:	e02d      	b.n	8008c80 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2224      	movs	r2, #36	; 0x24
 8008c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f022 0201 	bic.w	r2, r2, #1
 8008c4a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	430a      	orrs	r2, r1
 8008c5e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f84f 	bl	8008d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68fa      	ldr	r2, [r7, #12]
 8008c6c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2220      	movs	r2, #32
 8008c72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008c7e:	2300      	movs	r3, #0
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3710      	adds	r7, #16
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}

08008c88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b084      	sub	sp, #16
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
 8008c90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	d101      	bne.n	8008ca0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008c9c:	2302      	movs	r3, #2
 8008c9e:	e02d      	b.n	8008cfc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2224      	movs	r2, #36	; 0x24
 8008cac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f022 0201 	bic.w	r2, r2, #1
 8008cc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	683a      	ldr	r2, [r7, #0]
 8008cd8:	430a      	orrs	r2, r1
 8008cda:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 f811 	bl	8008d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	68fa      	ldr	r2, [r7, #12]
 8008ce8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2220      	movs	r2, #32
 8008cee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2200      	movs	r2, #0
 8008cf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008cfa:	2300      	movs	r3, #0
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	3710      	adds	r7, #16
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}

08008d04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d108      	bne.n	8008d26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d24:	e031      	b.n	8008d8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d26:	2308      	movs	r3, #8
 8008d28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d2a:	2308      	movs	r3, #8
 8008d2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	689b      	ldr	r3, [r3, #8]
 8008d34:	0e5b      	lsrs	r3, r3, #25
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	f003 0307 	and.w	r3, r3, #7
 8008d3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	0f5b      	lsrs	r3, r3, #29
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	f003 0307 	and.w	r3, r3, #7
 8008d4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d4e:	7bbb      	ldrb	r3, [r7, #14]
 8008d50:	7b3a      	ldrb	r2, [r7, #12]
 8008d52:	4911      	ldr	r1, [pc, #68]	; (8008d98 <UARTEx_SetNbDataToProcess+0x94>)
 8008d54:	5c8a      	ldrb	r2, [r1, r2]
 8008d56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008d5a:	7b3a      	ldrb	r2, [r7, #12]
 8008d5c:	490f      	ldr	r1, [pc, #60]	; (8008d9c <UARTEx_SetNbDataToProcess+0x98>)
 8008d5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008d60:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d64:	b29a      	uxth	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d6c:	7bfb      	ldrb	r3, [r7, #15]
 8008d6e:	7b7a      	ldrb	r2, [r7, #13]
 8008d70:	4909      	ldr	r1, [pc, #36]	; (8008d98 <UARTEx_SetNbDataToProcess+0x94>)
 8008d72:	5c8a      	ldrb	r2, [r1, r2]
 8008d74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008d78:	7b7a      	ldrb	r2, [r7, #13]
 8008d7a:	4908      	ldr	r1, [pc, #32]	; (8008d9c <UARTEx_SetNbDataToProcess+0x98>)
 8008d7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008d7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008d82:	b29a      	uxth	r2, r3
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008d8a:	bf00      	nop
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	08016a68 	.word	0x08016a68
 8008d9c:	08016a70 	.word	0x08016a70

08008da0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2200      	movs	r2, #0
 8008dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008db0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008db4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	b29a      	uxth	r2, r3
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr

08008dce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b085      	sub	sp, #20
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008dd6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008dda:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8008de2:	b29a      	uxth	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	43db      	mvns	r3, r3
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	4013      	ands	r3, r2
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008df6:	2300      	movs	r3, #0
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	1d3b      	adds	r3, r7, #4
 8008e0e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2201      	movs	r2, #1
 8008e16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3714      	adds	r7, #20
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3e:	4770      	bx	lr

08008e40 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b09d      	sub	sp, #116	; 0x74
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	781b      	ldrb	r3, [r3, #0]
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	4413      	add	r3, r2
 8008e5a:	881b      	ldrh	r3, [r3, #0]
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8008e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e66:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	78db      	ldrb	r3, [r3, #3]
 8008e6e:	2b03      	cmp	r3, #3
 8008e70:	d81f      	bhi.n	8008eb2 <USB_ActivateEndpoint+0x72>
 8008e72:	a201      	add	r2, pc, #4	; (adr r2, 8008e78 <USB_ActivateEndpoint+0x38>)
 8008e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e78:	08008e89 	.word	0x08008e89
 8008e7c:	08008ea5 	.word	0x08008ea5
 8008e80:	08008ebb 	.word	0x08008ebb
 8008e84:	08008e97 	.word	0x08008e97
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008e88:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e90:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008e94:	e012      	b.n	8008ebc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8008e96:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008e9a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008e9e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008ea2:	e00b      	b.n	8008ebc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8008ea4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008ea8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008eac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008eb0:	e004      	b.n	8008ebc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008eb8:	e000      	b.n	8008ebc <USB_ActivateEndpoint+0x7c>
      break;
 8008eba:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	441a      	add	r2, r3
 8008ec6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008eda:	b29b      	uxth	r3, r3
 8008edc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	781b      	ldrb	r3, [r3, #0]
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	b21b      	sxth	r3, r3
 8008eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ef6:	b21a      	sxth	r2, r3
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	b21b      	sxth	r3, r3
 8008efe:	4313      	orrs	r3, r2
 8008f00:	b21b      	sxth	r3, r3
 8008f02:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	441a      	add	r2, r3
 8008f10:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8008f14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f24:	b29b      	uxth	r3, r3
 8008f26:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	7b1b      	ldrb	r3, [r3, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	f040 8178 	bne.w	8009222 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	785b      	ldrb	r3, [r3, #1]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 8084 	beq.w	8009044 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	61bb      	str	r3, [r7, #24]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	461a      	mov	r2, r3
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	61bb      	str	r3, [r7, #24]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	00da      	lsls	r2, r3, #3
 8008f56:	69bb      	ldr	r3, [r7, #24]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f5e:	617b      	str	r3, [r7, #20]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	88db      	ldrh	r3, [r3, #6]
 8008f64:	085b      	lsrs	r3, r3, #1
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	005b      	lsls	r3, r3, #1
 8008f6a:	b29a      	uxth	r2, r3
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	827b      	strh	r3, [r7, #18]
 8008f7e:	8a7b      	ldrh	r3, [r7, #18]
 8008f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d01b      	beq.n	8008fc0 <USB_ActivateEndpoint+0x180>
 8008f88:	687a      	ldr	r2, [r7, #4]
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	781b      	ldrb	r3, [r3, #0]
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	881b      	ldrh	r3, [r3, #0]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f9e:	823b      	strh	r3, [r7, #16]
 8008fa0:	687a      	ldr	r2, [r7, #4]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	781b      	ldrb	r3, [r3, #0]
 8008fa6:	009b      	lsls	r3, r3, #2
 8008fa8:	441a      	add	r2, r3
 8008faa:	8a3b      	ldrh	r3, [r7, #16]
 8008fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008fb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	78db      	ldrb	r3, [r3, #3]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d020      	beq.n	800900a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	009b      	lsls	r3, r3, #2
 8008fd0:	4413      	add	r3, r2
 8008fd2:	881b      	ldrh	r3, [r3, #0]
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fde:	81bb      	strh	r3, [r7, #12]
 8008fe0:	89bb      	ldrh	r3, [r7, #12]
 8008fe2:	f083 0320 	eor.w	r3, r3, #32
 8008fe6:	81bb      	strh	r3, [r7, #12]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	441a      	add	r2, r3
 8008ff2:	89bb      	ldrh	r3, [r7, #12]
 8008ff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009004:	b29b      	uxth	r3, r3
 8009006:	8013      	strh	r3, [r2, #0]
 8009008:	e2d5      	b.n	80095b6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	4413      	add	r3, r2
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	b29b      	uxth	r3, r3
 8009018:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800901c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009020:	81fb      	strh	r3, [r7, #14]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	781b      	ldrb	r3, [r3, #0]
 8009028:	009b      	lsls	r3, r3, #2
 800902a:	441a      	add	r2, r3
 800902c:	89fb      	ldrh	r3, [r7, #14]
 800902e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009032:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800903a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800903e:	b29b      	uxth	r3, r3
 8009040:	8013      	strh	r3, [r2, #0]
 8009042:	e2b8      	b.n	80095b6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	633b      	str	r3, [r7, #48]	; 0x30
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800904e:	b29b      	uxth	r3, r3
 8009050:	461a      	mov	r2, r3
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	4413      	add	r3, r2
 8009056:	633b      	str	r3, [r7, #48]	; 0x30
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	781b      	ldrb	r3, [r3, #0]
 800905c:	00da      	lsls	r2, r3, #3
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	4413      	add	r3, r2
 8009062:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009066:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	88db      	ldrh	r3, [r3, #6]
 800906c:	085b      	lsrs	r3, r3, #1
 800906e:	b29b      	uxth	r3, r3
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	b29a      	uxth	r2, r3
 8009074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009076:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	62bb      	str	r3, [r7, #40]	; 0x28
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009082:	b29b      	uxth	r3, r3
 8009084:	461a      	mov	r2, r3
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	4413      	add	r3, r2
 800908a:	62bb      	str	r3, [r7, #40]	; 0x28
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	00da      	lsls	r2, r3, #3
 8009092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009094:	4413      	add	r3, r2
 8009096:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	881b      	ldrh	r3, [r3, #0]
 80090a0:	b29b      	uxth	r3, r3
 80090a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090aa:	801a      	strh	r2, [r3, #0]
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	2b3e      	cmp	r3, #62	; 0x3e
 80090b2:	d91d      	bls.n	80090f0 <USB_ActivateEndpoint+0x2b0>
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	691b      	ldr	r3, [r3, #16]
 80090b8:	095b      	lsrs	r3, r3, #5
 80090ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	691b      	ldr	r3, [r3, #16]
 80090c0:	f003 031f 	and.w	r3, r3, #31
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d102      	bne.n	80090ce <USB_ActivateEndpoint+0x28e>
 80090c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090ca:	3b01      	subs	r3, #1
 80090cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	b29a      	uxth	r2, r3
 80090d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80090d6:	b29b      	uxth	r3, r3
 80090d8:	029b      	lsls	r3, r3, #10
 80090da:	b29b      	uxth	r3, r3
 80090dc:	4313      	orrs	r3, r2
 80090de:	b29b      	uxth	r3, r3
 80090e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80090e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80090e8:	b29a      	uxth	r2, r3
 80090ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ec:	801a      	strh	r2, [r3, #0]
 80090ee:	e026      	b.n	800913e <USB_ActivateEndpoint+0x2fe>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	691b      	ldr	r3, [r3, #16]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <USB_ActivateEndpoint+0x2ce>
 80090f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009106:	b29a      	uxth	r2, r3
 8009108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800910a:	801a      	strh	r2, [r3, #0]
 800910c:	e017      	b.n	800913e <USB_ActivateEndpoint+0x2fe>
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	691b      	ldr	r3, [r3, #16]
 8009112:	085b      	lsrs	r3, r3, #1
 8009114:	66bb      	str	r3, [r7, #104]	; 0x68
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	2b00      	cmp	r3, #0
 8009120:	d002      	beq.n	8009128 <USB_ActivateEndpoint+0x2e8>
 8009122:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009124:	3301      	adds	r3, #1
 8009126:	66bb      	str	r3, [r7, #104]	; 0x68
 8009128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800912a:	881b      	ldrh	r3, [r3, #0]
 800912c:	b29a      	uxth	r2, r3
 800912e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009130:	b29b      	uxth	r3, r3
 8009132:	029b      	lsls	r3, r3, #10
 8009134:	b29b      	uxth	r3, r3
 8009136:	4313      	orrs	r3, r2
 8009138:	b29a      	uxth	r2, r3
 800913a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800913c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	781b      	ldrb	r3, [r3, #0]
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	881b      	ldrh	r3, [r3, #0]
 800914a:	847b      	strh	r3, [r7, #34]	; 0x22
 800914c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800914e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009152:	2b00      	cmp	r3, #0
 8009154:	d01b      	beq.n	800918e <USB_ActivateEndpoint+0x34e>
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	683b      	ldr	r3, [r7, #0]
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	009b      	lsls	r3, r3, #2
 800915e:	4413      	add	r3, r2
 8009160:	881b      	ldrh	r3, [r3, #0]
 8009162:	b29b      	uxth	r3, r3
 8009164:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009168:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800916c:	843b      	strh	r3, [r7, #32]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	683b      	ldr	r3, [r7, #0]
 8009172:	781b      	ldrb	r3, [r3, #0]
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	441a      	add	r2, r3
 8009178:	8c3b      	ldrh	r3, [r7, #32]
 800917a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800917e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009182:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800918a:	b29b      	uxth	r3, r3
 800918c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d124      	bne.n	80091e0 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4413      	add	r3, r2
 80091a0:	881b      	ldrh	r3, [r3, #0]
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091ac:	83bb      	strh	r3, [r7, #28]
 80091ae:	8bbb      	ldrh	r3, [r7, #28]
 80091b0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80091b4:	83bb      	strh	r3, [r7, #28]
 80091b6:	8bbb      	ldrh	r3, [r7, #28]
 80091b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80091bc:	83bb      	strh	r3, [r7, #28]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	781b      	ldrb	r3, [r3, #0]
 80091c4:	009b      	lsls	r3, r3, #2
 80091c6:	441a      	add	r2, r3
 80091c8:	8bbb      	ldrh	r3, [r7, #28]
 80091ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091da:	b29b      	uxth	r3, r3
 80091dc:	8013      	strh	r3, [r2, #0]
 80091de:	e1ea      	b.n	80095b6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80091e0:	687a      	ldr	r2, [r7, #4]
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	4413      	add	r3, r2
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091f6:	83fb      	strh	r3, [r7, #30]
 80091f8:	8bfb      	ldrh	r3, [r7, #30]
 80091fa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80091fe:	83fb      	strh	r3, [r7, #30]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	009b      	lsls	r3, r3, #2
 8009208:	441a      	add	r2, r3
 800920a:	8bfb      	ldrh	r3, [r7, #30]
 800920c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009210:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009214:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800921c:	b29b      	uxth	r3, r3
 800921e:	8013      	strh	r3, [r2, #0]
 8009220:	e1c9      	b.n	80095b6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	78db      	ldrb	r3, [r3, #3]
 8009226:	2b02      	cmp	r3, #2
 8009228:	d11e      	bne.n	8009268 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	009b      	lsls	r3, r3, #2
 8009232:	4413      	add	r3, r2
 8009234:	881b      	ldrh	r3, [r3, #0]
 8009236:	b29b      	uxth	r3, r3
 8009238:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800923c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009240:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009244:	687a      	ldr	r2, [r7, #4]
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	781b      	ldrb	r3, [r3, #0]
 800924a:	009b      	lsls	r3, r3, #2
 800924c:	441a      	add	r2, r3
 800924e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009252:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009256:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800925a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800925e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009262:	b29b      	uxth	r3, r3
 8009264:	8013      	strh	r3, [r2, #0]
 8009266:	e01d      	b.n	80092a4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	009b      	lsls	r3, r3, #2
 8009270:	4413      	add	r3, r2
 8009272:	881b      	ldrh	r3, [r3, #0]
 8009274:	b29b      	uxth	r3, r3
 8009276:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800927a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800927e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009282:	687a      	ldr	r2, [r7, #4]
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	441a      	add	r2, r3
 800928c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800929c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	461a      	mov	r2, r3
 80092b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092b4:	4413      	add	r3, r2
 80092b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	00da      	lsls	r2, r3, #3
 80092be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80092c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	891b      	ldrh	r3, [r3, #8]
 80092cc:	085b      	lsrs	r3, r3, #1
 80092ce:	b29b      	uxth	r3, r3
 80092d0:	005b      	lsls	r3, r3, #1
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092d6:	801a      	strh	r2, [r3, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	657b      	str	r3, [r7, #84]	; 0x54
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	461a      	mov	r2, r3
 80092e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092e8:	4413      	add	r3, r2
 80092ea:	657b      	str	r3, [r7, #84]	; 0x54
 80092ec:	683b      	ldr	r3, [r7, #0]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	00da      	lsls	r2, r3, #3
 80092f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092f4:	4413      	add	r3, r2
 80092f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80092fa:	653b      	str	r3, [r7, #80]	; 0x50
 80092fc:	683b      	ldr	r3, [r7, #0]
 80092fe:	895b      	ldrh	r3, [r3, #10]
 8009300:	085b      	lsrs	r3, r3, #1
 8009302:	b29b      	uxth	r3, r3
 8009304:	005b      	lsls	r3, r3, #1
 8009306:	b29a      	uxth	r2, r3
 8009308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800930a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	785b      	ldrb	r3, [r3, #1]
 8009310:	2b00      	cmp	r3, #0
 8009312:	f040 8093 	bne.w	800943c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	683b      	ldr	r3, [r7, #0]
 800931a:	781b      	ldrb	r3, [r3, #0]
 800931c:	009b      	lsls	r3, r3, #2
 800931e:	4413      	add	r3, r2
 8009320:	881b      	ldrh	r3, [r3, #0]
 8009322:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009326:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800932a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d01b      	beq.n	800936a <USB_ActivateEndpoint+0x52a>
 8009332:	687a      	ldr	r2, [r7, #4]
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	4413      	add	r3, r2
 800933c:	881b      	ldrh	r3, [r3, #0]
 800933e:	b29b      	uxth	r3, r3
 8009340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009348:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	009b      	lsls	r3, r3, #2
 8009352:	441a      	add	r2, r3
 8009354:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800935a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800935e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009366:	b29b      	uxth	r3, r3
 8009368:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800936a:	687a      	ldr	r2, [r7, #4]
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	881b      	ldrh	r3, [r3, #0]
 8009376:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009378:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800937a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937e:	2b00      	cmp	r3, #0
 8009380:	d01b      	beq.n	80093ba <USB_ActivateEndpoint+0x57a>
 8009382:	687a      	ldr	r2, [r7, #4]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	009b      	lsls	r3, r3, #2
 800938a:	4413      	add	r3, r2
 800938c:	881b      	ldrh	r3, [r3, #0]
 800938e:	b29b      	uxth	r3, r3
 8009390:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009398:	877b      	strh	r3, [r7, #58]	; 0x3a
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	441a      	add	r2, r3
 80093a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80093a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093b2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80093ba:	687a      	ldr	r2, [r7, #4]
 80093bc:	683b      	ldr	r3, [r7, #0]
 80093be:	781b      	ldrb	r3, [r3, #0]
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	881b      	ldrh	r3, [r3, #0]
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d0:	873b      	strh	r3, [r7, #56]	; 0x38
 80093d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093d4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80093d8:	873b      	strh	r3, [r7, #56]	; 0x38
 80093da:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80093e0:	873b      	strh	r3, [r7, #56]	; 0x38
 80093e2:	687a      	ldr	r2, [r7, #4]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	441a      	add	r2, r3
 80093ec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80093ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093fe:	b29b      	uxth	r3, r3
 8009400:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	009b      	lsls	r3, r3, #2
 800940a:	4413      	add	r3, r2
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	b29b      	uxth	r3, r3
 8009410:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009414:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009418:	86fb      	strh	r3, [r7, #54]	; 0x36
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	009b      	lsls	r3, r3, #2
 8009422:	441a      	add	r2, r3
 8009424:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009426:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800942a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800942e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009436:	b29b      	uxth	r3, r3
 8009438:	8013      	strh	r3, [r2, #0]
 800943a:	e0bc      	b.n	80095b6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	4413      	add	r3, r2
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800944c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009450:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009454:	2b00      	cmp	r3, #0
 8009456:	d01d      	beq.n	8009494 <USB_ActivateEndpoint+0x654>
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	009b      	lsls	r3, r3, #2
 8009460:	4413      	add	r3, r2
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	b29b      	uxth	r3, r3
 8009466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800946a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	441a      	add	r2, r3
 800947c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009488:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800948c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009490:	b29b      	uxth	r3, r3
 8009492:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009494:	687a      	ldr	r2, [r7, #4]
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	781b      	ldrb	r3, [r3, #0]
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4413      	add	r3, r2
 800949e:	881b      	ldrh	r3, [r3, #0]
 80094a0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80094a4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80094a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d01d      	beq.n	80094ec <USB_ActivateEndpoint+0x6ac>
 80094b0:	687a      	ldr	r2, [r7, #4]
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	781b      	ldrb	r3, [r3, #0]
 80094b6:	009b      	lsls	r3, r3, #2
 80094b8:	4413      	add	r3, r2
 80094ba:	881b      	ldrh	r3, [r3, #0]
 80094bc:	b29b      	uxth	r3, r3
 80094be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094c6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	781b      	ldrb	r3, [r3, #0]
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	441a      	add	r2, r3
 80094d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80094d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	78db      	ldrb	r3, [r3, #3]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d024      	beq.n	800953e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	4413      	add	r3, r2
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	b29b      	uxth	r3, r3
 8009502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800950a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800950e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009512:	f083 0320 	eor.w	r3, r3, #32
 8009516:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	781b      	ldrb	r3, [r3, #0]
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	441a      	add	r2, r3
 8009524:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009528:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800952c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009530:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009538:	b29b      	uxth	r3, r3
 800953a:	8013      	strh	r3, [r2, #0]
 800953c:	e01d      	b.n	800957a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	881b      	ldrh	r3, [r3, #0]
 800954a:	b29b      	uxth	r3, r3
 800954c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009554:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	441a      	add	r2, r3
 8009562:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009566:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800956a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800956e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009572:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009576:	b29b      	uxth	r3, r3
 8009578:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800957a:	687a      	ldr	r2, [r7, #4]
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	4413      	add	r3, r2
 8009584:	881b      	ldrh	r3, [r3, #0]
 8009586:	b29b      	uxth	r3, r3
 8009588:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800958c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009590:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	781b      	ldrb	r3, [r3, #0]
 800959a:	009b      	lsls	r3, r3, #2
 800959c:	441a      	add	r2, r3
 800959e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80095a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095b2:	b29b      	uxth	r3, r3
 80095b4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80095b6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3774      	adds	r7, #116	; 0x74
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop

080095c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b08d      	sub	sp, #52	; 0x34
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	7b1b      	ldrb	r3, [r3, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	f040 808e 	bne.w	80096f8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	785b      	ldrb	r3, [r3, #1]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d044      	beq.n	800966e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80095e4:	687a      	ldr	r2, [r7, #4]
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	781b      	ldrb	r3, [r3, #0]
 80095ea:	009b      	lsls	r3, r3, #2
 80095ec:	4413      	add	r3, r2
 80095ee:	881b      	ldrh	r3, [r3, #0]
 80095f0:	81bb      	strh	r3, [r7, #12]
 80095f2:	89bb      	ldrh	r3, [r7, #12]
 80095f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d01b      	beq.n	8009634 <USB_DeactivateEndpoint+0x6c>
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	781b      	ldrb	r3, [r3, #0]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	881b      	ldrh	r3, [r3, #0]
 8009608:	b29b      	uxth	r3, r3
 800960a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800960e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009612:	817b      	strh	r3, [r7, #10]
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	441a      	add	r2, r3
 800961e:	897b      	ldrh	r3, [r7, #10]
 8009620:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009624:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009628:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800962c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009630:	b29b      	uxth	r3, r3
 8009632:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	009b      	lsls	r3, r3, #2
 800963c:	4413      	add	r3, r2
 800963e:	881b      	ldrh	r3, [r3, #0]
 8009640:	b29b      	uxth	r3, r3
 8009642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009646:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800964a:	813b      	strh	r3, [r7, #8]
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	781b      	ldrb	r3, [r3, #0]
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	441a      	add	r2, r3
 8009656:	893b      	ldrh	r3, [r7, #8]
 8009658:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800965c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009660:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009668:	b29b      	uxth	r3, r3
 800966a:	8013      	strh	r3, [r2, #0]
 800966c:	e192      	b.n	8009994 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	881b      	ldrh	r3, [r3, #0]
 800967a:	827b      	strh	r3, [r7, #18]
 800967c:	8a7b      	ldrh	r3, [r7, #18]
 800967e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009682:	2b00      	cmp	r3, #0
 8009684:	d01b      	beq.n	80096be <USB_DeactivateEndpoint+0xf6>
 8009686:	687a      	ldr	r2, [r7, #4]
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	781b      	ldrb	r3, [r3, #0]
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	881b      	ldrh	r3, [r3, #0]
 8009692:	b29b      	uxth	r3, r3
 8009694:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009698:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800969c:	823b      	strh	r3, [r7, #16]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	441a      	add	r2, r3
 80096a8:	8a3b      	ldrh	r3, [r7, #16]
 80096aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80096b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096ba:	b29b      	uxth	r3, r3
 80096bc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	781b      	ldrb	r3, [r3, #0]
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	4413      	add	r3, r2
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	b29b      	uxth	r3, r3
 80096cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096d4:	81fb      	strh	r3, [r7, #14]
 80096d6:	687a      	ldr	r2, [r7, #4]
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	009b      	lsls	r3, r3, #2
 80096de:	441a      	add	r2, r3
 80096e0:	89fb      	ldrh	r3, [r7, #14]
 80096e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096f2:	b29b      	uxth	r3, r3
 80096f4:	8013      	strh	r3, [r2, #0]
 80096f6:	e14d      	b.n	8009994 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	785b      	ldrb	r3, [r3, #1]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	f040 80a5 	bne.w	800984c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009702:	687a      	ldr	r2, [r7, #4]
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	009b      	lsls	r3, r3, #2
 800970a:	4413      	add	r3, r2
 800970c:	881b      	ldrh	r3, [r3, #0]
 800970e:	843b      	strh	r3, [r7, #32]
 8009710:	8c3b      	ldrh	r3, [r7, #32]
 8009712:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009716:	2b00      	cmp	r3, #0
 8009718:	d01b      	beq.n	8009752 <USB_DeactivateEndpoint+0x18a>
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	881b      	ldrh	r3, [r3, #0]
 8009726:	b29b      	uxth	r3, r3
 8009728:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800972c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009730:	83fb      	strh	r3, [r7, #30]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	781b      	ldrb	r3, [r3, #0]
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	441a      	add	r2, r3
 800973c:	8bfb      	ldrh	r3, [r7, #30]
 800973e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009742:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009746:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800974a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800974e:	b29b      	uxth	r3, r3
 8009750:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	781b      	ldrb	r3, [r3, #0]
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	881b      	ldrh	r3, [r3, #0]
 800975e:	83bb      	strh	r3, [r7, #28]
 8009760:	8bbb      	ldrh	r3, [r7, #28]
 8009762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009766:	2b00      	cmp	r3, #0
 8009768:	d01b      	beq.n	80097a2 <USB_DeactivateEndpoint+0x1da>
 800976a:	687a      	ldr	r2, [r7, #4]
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	009b      	lsls	r3, r3, #2
 8009772:	4413      	add	r3, r2
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	b29b      	uxth	r3, r3
 8009778:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800977c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009780:	837b      	strh	r3, [r7, #26]
 8009782:	687a      	ldr	r2, [r7, #4]
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	009b      	lsls	r3, r3, #2
 800978a:	441a      	add	r2, r3
 800978c:	8b7b      	ldrh	r3, [r7, #26]
 800978e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009792:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009796:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800979a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800979e:	b29b      	uxth	r3, r3
 80097a0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	683b      	ldr	r3, [r7, #0]
 80097a6:	781b      	ldrb	r3, [r3, #0]
 80097a8:	009b      	lsls	r3, r3, #2
 80097aa:	4413      	add	r3, r2
 80097ac:	881b      	ldrh	r3, [r3, #0]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097b8:	833b      	strh	r3, [r7, #24]
 80097ba:	687a      	ldr	r2, [r7, #4]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	781b      	ldrb	r3, [r3, #0]
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	441a      	add	r2, r3
 80097c4:	8b3b      	ldrh	r3, [r7, #24]
 80097c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097d2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80097da:	687a      	ldr	r2, [r7, #4]
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	781b      	ldrb	r3, [r3, #0]
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	4413      	add	r3, r2
 80097e4:	881b      	ldrh	r3, [r3, #0]
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80097ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097f0:	82fb      	strh	r3, [r7, #22]
 80097f2:	687a      	ldr	r2, [r7, #4]
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	009b      	lsls	r3, r3, #2
 80097fa:	441a      	add	r2, r3
 80097fc:	8afb      	ldrh	r3, [r7, #22]
 80097fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009802:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800980a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800980e:	b29b      	uxth	r3, r3
 8009810:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	881b      	ldrh	r3, [r3, #0]
 800981e:	b29b      	uxth	r3, r3
 8009820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009828:	82bb      	strh	r3, [r7, #20]
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	683b      	ldr	r3, [r7, #0]
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	009b      	lsls	r3, r3, #2
 8009832:	441a      	add	r2, r3
 8009834:	8abb      	ldrh	r3, [r7, #20]
 8009836:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800983a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800983e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009842:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009846:	b29b      	uxth	r3, r3
 8009848:	8013      	strh	r3, [r2, #0]
 800984a:	e0a3      	b.n	8009994 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	781b      	ldrb	r3, [r3, #0]
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	881b      	ldrh	r3, [r3, #0]
 8009858:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800985a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800985c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009860:	2b00      	cmp	r3, #0
 8009862:	d01b      	beq.n	800989c <USB_DeactivateEndpoint+0x2d4>
 8009864:	687a      	ldr	r2, [r7, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	781b      	ldrb	r3, [r3, #0]
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4413      	add	r3, r2
 800986e:	881b      	ldrh	r3, [r3, #0]
 8009870:	b29b      	uxth	r3, r3
 8009872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800987a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	781b      	ldrb	r3, [r3, #0]
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	441a      	add	r2, r3
 8009886:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009888:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800988c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009890:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009898:	b29b      	uxth	r3, r3
 800989a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	881b      	ldrh	r3, [r3, #0]
 80098a8:	857b      	strh	r3, [r7, #42]	; 0x2a
 80098aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80098ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d01b      	beq.n	80098ec <USB_DeactivateEndpoint+0x324>
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	4413      	add	r3, r2
 80098be:	881b      	ldrh	r3, [r3, #0]
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80098cc:	687a      	ldr	r2, [r7, #4]
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	009b      	lsls	r3, r3, #2
 80098d4:	441a      	add	r2, r3
 80098d6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80098d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	683b      	ldr	r3, [r7, #0]
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	009b      	lsls	r3, r3, #2
 80098f4:	4413      	add	r3, r2
 80098f6:	881b      	ldrh	r3, [r3, #0]
 80098f8:	b29b      	uxth	r3, r3
 80098fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009902:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	009b      	lsls	r3, r3, #2
 800990c:	441a      	add	r2, r3
 800990e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009910:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009914:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800991c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009920:	b29b      	uxth	r3, r3
 8009922:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	683b      	ldr	r3, [r7, #0]
 8009928:	781b      	ldrb	r3, [r3, #0]
 800992a:	009b      	lsls	r3, r3, #2
 800992c:	4413      	add	r3, r2
 800992e:	881b      	ldrh	r3, [r3, #0]
 8009930:	b29b      	uxth	r3, r3
 8009932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800993a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800993c:	687a      	ldr	r2, [r7, #4]
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	009b      	lsls	r3, r3, #2
 8009944:	441a      	add	r2, r3
 8009946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009948:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800994c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009950:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009954:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009958:	b29b      	uxth	r3, r3
 800995a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	881b      	ldrh	r3, [r3, #0]
 8009968:	b29b      	uxth	r3, r3
 800996a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800996e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009972:	847b      	strh	r3, [r7, #34]	; 0x22
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	441a      	add	r2, r3
 800997e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009980:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009984:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009988:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800998c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009990:	b29b      	uxth	r3, r3
 8009992:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009994:	2300      	movs	r3, #0
}
 8009996:	4618      	mov	r0, r3
 8009998:	3734      	adds	r7, #52	; 0x34
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099a2:	b580      	push	{r7, lr}
 80099a4:	b0c2      	sub	sp, #264	; 0x108
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099b0:	6018      	str	r0, [r3, #0]
 80099b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ba:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80099bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	785b      	ldrb	r3, [r3, #1]
 80099c8:	2b01      	cmp	r3, #1
 80099ca:	f040 86b7 	bne.w	800a73c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80099ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	699a      	ldr	r2, [r3, #24]
 80099da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	691b      	ldr	r3, [r3, #16]
 80099e6:	429a      	cmp	r2, r3
 80099e8:	d908      	bls.n	80099fc <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80099ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	691b      	ldr	r3, [r3, #16]
 80099f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80099fa:	e007      	b.n	8009a0c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80099fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009a0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	7b1b      	ldrb	r3, [r3, #12]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d13a      	bne.n	8009a92 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6959      	ldr	r1, [r3, #20]
 8009a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	88da      	ldrh	r2, [r3, #6]
 8009a34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009a3e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009a42:	6800      	ldr	r0, [r0, #0]
 8009a44:	f001 fc98 	bl	800b378 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009a48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a4c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	613b      	str	r3, [r7, #16]
 8009a54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	461a      	mov	r2, r3
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	4413      	add	r3, r2
 8009a6a:	613b      	str	r3, [r7, #16]
 8009a6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	00da      	lsls	r2, r3, #3
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009a82:	60fb      	str	r3, [r7, #12]
 8009a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	801a      	strh	r2, [r3, #0]
 8009a8e:	f000 be1f 	b.w	800a6d0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	78db      	ldrb	r3, [r3, #3]
 8009a9e:	2b02      	cmp	r3, #2
 8009aa0:	f040 8462 	bne.w	800a368 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	6a1a      	ldr	r2, [r3, #32]
 8009ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	429a      	cmp	r2, r3
 8009abe:	f240 83df 	bls.w	800a280 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	881b      	ldrh	r3, [r3, #0]
 8009ade:	b29b      	uxth	r3, r3
 8009ae0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ae4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ae8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009aec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009af0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009afa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	441a      	add	r2, r3
 8009b06:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009b0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b12:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b1a:	b29b      	uxth	r3, r3
 8009b1c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8009b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6a1a      	ldr	r2, [r3, #32]
 8009b2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009b2e:	1ad2      	subs	r2, r2, r3
 8009b30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	881b      	ldrh	r3, [r3, #0]
 8009b58:	b29b      	uxth	r3, r3
 8009b5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 81c7 	beq.w	8009ef2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009b64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	633b      	str	r3, [r7, #48]	; 0x30
 8009b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	785b      	ldrb	r3, [r3, #1]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d177      	bne.n	8009c70 <USB_EPStartXfer+0x2ce>
 8009b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba0:	4413      	add	r3, r2
 8009ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	00da      	lsls	r2, r3, #3
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	881b      	ldrh	r3, [r3, #0]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	801a      	strh	r2, [r3, #0]
 8009bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd0:	2b3e      	cmp	r3, #62	; 0x3e
 8009bd2:	d921      	bls.n	8009c18 <USB_EPStartXfer+0x276>
 8009bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bd8:	095b      	lsrs	r3, r3, #5
 8009bda:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009be2:	f003 031f 	and.w	r3, r3, #31
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d104      	bne.n	8009bf4 <USB_EPStartXfer+0x252>
 8009bea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009bee:	3b01      	subs	r3, #1
 8009bf0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	881b      	ldrh	r3, [r3, #0]
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	029b      	lsls	r3, r3, #10
 8009c02:	b29b      	uxth	r3, r3
 8009c04:	4313      	orrs	r3, r2
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	801a      	strh	r2, [r3, #0]
 8009c16:	e050      	b.n	8009cba <USB_EPStartXfer+0x318>
 8009c18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10a      	bne.n	8009c36 <USB_EPStartXfer+0x294>
 8009c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c22:	881b      	ldrh	r3, [r3, #0]
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c2e:	b29a      	uxth	r2, r3
 8009c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c32:	801a      	strh	r2, [r3, #0]
 8009c34:	e041      	b.n	8009cba <USB_EPStartXfer+0x318>
 8009c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c3a:	085b      	lsrs	r3, r3, #1
 8009c3c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009c40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c44:	f003 0301 	and.w	r3, r3, #1
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d004      	beq.n	8009c56 <USB_EPStartXfer+0x2b4>
 8009c4c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009c50:	3301      	adds	r3, #1
 8009c52:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c58:	881b      	ldrh	r3, [r3, #0]
 8009c5a:	b29a      	uxth	r2, r3
 8009c5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	029b      	lsls	r3, r3, #10
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	4313      	orrs	r3, r2
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c6c:	801a      	strh	r2, [r3, #0]
 8009c6e:	e024      	b.n	8009cba <USB_EPStartXfer+0x318>
 8009c70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	785b      	ldrb	r3, [r3, #1]
 8009c7c:	2b01      	cmp	r3, #1
 8009c7e:	d11c      	bne.n	8009cba <USB_EPStartXfer+0x318>
 8009c80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c8e:	b29b      	uxth	r3, r3
 8009c90:	461a      	mov	r2, r3
 8009c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c94:	4413      	add	r3, r2
 8009c96:	633b      	str	r3, [r7, #48]	; 0x30
 8009c98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	00da      	lsls	r2, r3, #3
 8009ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca8:	4413      	add	r3, r2
 8009caa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009cae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cb8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009cba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	895b      	ldrh	r3, [r3, #10]
 8009cc6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	6959      	ldr	r1, [r3, #20]
 8009cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ce0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ce4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009ce8:	6800      	ldr	r0, [r0, #0]
 8009cea:	f001 fb45 	bl	800b378 <USB_WritePMA>
            ep->xfer_buff += len;
 8009cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009cf2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	695a      	ldr	r2, [r3, #20]
 8009cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cfe:	441a      	add	r2, r3
 8009d00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009d0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	6a1a      	ldr	r2, [r3, #32]
 8009d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d90f      	bls.n	8009d48 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8009d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	6a1a      	ldr	r2, [r3, #32]
 8009d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d38:	1ad2      	subs	r2, r2, r3
 8009d3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	621a      	str	r2, [r3, #32]
 8009d46:	e00e      	b.n	8009d66 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8009d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6a1b      	ldr	r3, [r3, #32]
 8009d54:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8009d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2200      	movs	r2, #0
 8009d64:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	785b      	ldrb	r3, [r3, #1]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d177      	bne.n	8009e66 <USB_EPStartXfer+0x4c4>
 8009d76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	61bb      	str	r3, [r7, #24]
 8009d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	461a      	mov	r2, r3
 8009d94:	69bb      	ldr	r3, [r7, #24]
 8009d96:	4413      	add	r3, r2
 8009d98:	61bb      	str	r3, [r7, #24]
 8009d9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	00da      	lsls	r2, r3, #3
 8009da8:	69bb      	ldr	r3, [r7, #24]
 8009daa:	4413      	add	r3, r2
 8009dac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009db0:	617b      	str	r3, [r7, #20]
 8009db2:	697b      	ldr	r3, [r7, #20]
 8009db4:	881b      	ldrh	r3, [r3, #0]
 8009db6:	b29b      	uxth	r3, r3
 8009db8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	801a      	strh	r2, [r3, #0]
 8009dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dc6:	2b3e      	cmp	r3, #62	; 0x3e
 8009dc8:	d921      	bls.n	8009e0e <USB_EPStartXfer+0x46c>
 8009dca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dce:	095b      	lsrs	r3, r3, #5
 8009dd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dd8:	f003 031f 	and.w	r3, r3, #31
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d104      	bne.n	8009dea <USB_EPStartXfer+0x448>
 8009de0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009de4:	3b01      	subs	r3, #1
 8009de6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	881b      	ldrh	r3, [r3, #0]
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	029b      	lsls	r3, r3, #10
 8009df8:	b29b      	uxth	r3, r3
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	801a      	strh	r2, [r3, #0]
 8009e0c:	e056      	b.n	8009ebc <USB_EPStartXfer+0x51a>
 8009e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d10a      	bne.n	8009e2c <USB_EPStartXfer+0x48a>
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e20:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e24:	b29a      	uxth	r2, r3
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	801a      	strh	r2, [r3, #0]
 8009e2a:	e047      	b.n	8009ebc <USB_EPStartXfer+0x51a>
 8009e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e30:	085b      	lsrs	r3, r3, #1
 8009e32:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e3a:	f003 0301 	and.w	r3, r3, #1
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d004      	beq.n	8009e4c <USB_EPStartXfer+0x4aa>
 8009e42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e46:	3301      	adds	r3, #1
 8009e48:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009e4c:	697b      	ldr	r3, [r7, #20]
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e56:	b29b      	uxth	r3, r3
 8009e58:	029b      	lsls	r3, r3, #10
 8009e5a:	b29b      	uxth	r3, r3
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	b29a      	uxth	r2, r3
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	801a      	strh	r2, [r3, #0]
 8009e64:	e02a      	b.n	8009ebc <USB_EPStartXfer+0x51a>
 8009e66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	785b      	ldrb	r3, [r3, #1]
 8009e72:	2b01      	cmp	r3, #1
 8009e74:	d122      	bne.n	8009ebc <USB_EPStartXfer+0x51a>
 8009e76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	623b      	str	r3, [r7, #32]
 8009e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e90:	b29b      	uxth	r3, r3
 8009e92:	461a      	mov	r2, r3
 8009e94:	6a3b      	ldr	r3, [r7, #32]
 8009e96:	4413      	add	r3, r2
 8009e98:	623b      	str	r3, [r7, #32]
 8009e9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009e9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	00da      	lsls	r2, r3, #3
 8009ea8:	6a3b      	ldr	r3, [r7, #32]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009eb0:	61fb      	str	r3, [r7, #28]
 8009eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009eb6:	b29a      	uxth	r2, r3
 8009eb8:	69fb      	ldr	r3, [r7, #28]
 8009eba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009ebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ec0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	891b      	ldrh	r3, [r3, #8]
 8009ec8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ecc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	6959      	ldr	r1, [r3, #20]
 8009ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009edc:	b29b      	uxth	r3, r3
 8009ede:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009ee2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009ee6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009eea:	6800      	ldr	r0, [r0, #0]
 8009eec:	f001 fa44 	bl	800b378 <USB_WritePMA>
 8009ef0:	e3ee      	b.n	800a6d0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ef6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	785b      	ldrb	r3, [r3, #1]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d177      	bne.n	8009ff2 <USB_EPStartXfer+0x650>
 8009f02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	461a      	mov	r2, r3
 8009f20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f22:	4413      	add	r3, r2
 8009f24:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	781b      	ldrb	r3, [r3, #0]
 8009f32:	00da      	lsls	r2, r3, #3
 8009f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f36:	4413      	add	r3, r2
 8009f38:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f3c:	647b      	str	r3, [r7, #68]	; 0x44
 8009f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f40:	881b      	ldrh	r3, [r3, #0]
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009f48:	b29a      	uxth	r2, r3
 8009f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f4c:	801a      	strh	r2, [r3, #0]
 8009f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f52:	2b3e      	cmp	r3, #62	; 0x3e
 8009f54:	d921      	bls.n	8009f9a <USB_EPStartXfer+0x5f8>
 8009f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f5a:	095b      	lsrs	r3, r3, #5
 8009f5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f64:	f003 031f 	and.w	r3, r3, #31
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d104      	bne.n	8009f76 <USB_EPStartXfer+0x5d4>
 8009f6c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f70:	3b01      	subs	r3, #1
 8009f72:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f78:	881b      	ldrh	r3, [r3, #0]
 8009f7a:	b29a      	uxth	r2, r3
 8009f7c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	029b      	lsls	r3, r3, #10
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	4313      	orrs	r3, r2
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009f8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009f92:	b29a      	uxth	r2, r3
 8009f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009f96:	801a      	strh	r2, [r3, #0]
 8009f98:	e056      	b.n	800a048 <USB_EPStartXfer+0x6a6>
 8009f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d10a      	bne.n	8009fb8 <USB_EPStartXfer+0x616>
 8009fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009fb0:	b29a      	uxth	r2, r3
 8009fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fb4:	801a      	strh	r2, [r3, #0]
 8009fb6:	e047      	b.n	800a048 <USB_EPStartXfer+0x6a6>
 8009fb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fbc:	085b      	lsrs	r3, r3, #1
 8009fbe:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009fc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009fc6:	f003 0301 	and.w	r3, r3, #1
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d004      	beq.n	8009fd8 <USB_EPStartXfer+0x636>
 8009fce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009fd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	b29a      	uxth	r2, r3
 8009fde:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	029b      	lsls	r3, r3, #10
 8009fe6:	b29b      	uxth	r3, r3
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009fee:	801a      	strh	r2, [r3, #0]
 8009ff0:	e02a      	b.n	800a048 <USB_EPStartXfer+0x6a6>
 8009ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	785b      	ldrb	r3, [r3, #1]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d122      	bne.n	800a048 <USB_EPStartXfer+0x6a6>
 800a002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a006:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	653b      	str	r3, [r7, #80]	; 0x50
 800a00e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	461a      	mov	r2, r3
 800a020:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a022:	4413      	add	r3, r2
 800a024:	653b      	str	r3, [r7, #80]	; 0x50
 800a026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a02a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	00da      	lsls	r2, r3, #3
 800a034:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a036:	4413      	add	r3, r2
 800a038:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a03c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a042:	b29a      	uxth	r2, r3
 800a044:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a046:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a048:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a04c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	891b      	ldrh	r3, [r3, #8]
 800a054:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a058:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a05c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	6959      	ldr	r1, [r3, #20]
 800a064:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a068:	b29b      	uxth	r3, r3
 800a06a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a06e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a072:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a076:	6800      	ldr	r0, [r0, #0]
 800a078:	f001 f97e 	bl	800b378 <USB_WritePMA>
            ep->xfer_buff += len;
 800a07c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a080:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	695a      	ldr	r2, [r3, #20]
 800a088:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a08c:	441a      	add	r2, r3
 800a08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a09a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a09e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	6a1a      	ldr	r2, [r3, #32]
 800a0a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	691b      	ldr	r3, [r3, #16]
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d90f      	bls.n	800a0d6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800a0b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	6a1a      	ldr	r2, [r3, #32]
 800a0c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0c6:	1ad2      	subs	r2, r2, r3
 800a0c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	621a      	str	r2, [r3, #32]
 800a0d4:	e00e      	b.n	800a0f4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800a0d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a0e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a0f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	643b      	str	r3, [r7, #64]	; 0x40
 800a100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	785b      	ldrb	r3, [r3, #1]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d177      	bne.n	800a200 <USB_EPStartXfer+0x85e>
 800a110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a114:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a11c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a120:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	461a      	mov	r2, r3
 800a12e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a130:	4413      	add	r3, r2
 800a132:	63bb      	str	r3, [r7, #56]	; 0x38
 800a134:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a138:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	00da      	lsls	r2, r3, #3
 800a142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a144:	4413      	add	r3, r2
 800a146:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a14a:	637b      	str	r3, [r7, #52]	; 0x34
 800a14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	b29b      	uxth	r3, r3
 800a152:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a156:	b29a      	uxth	r2, r3
 800a158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a15a:	801a      	strh	r2, [r3, #0]
 800a15c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a160:	2b3e      	cmp	r3, #62	; 0x3e
 800a162:	d921      	bls.n	800a1a8 <USB_EPStartXfer+0x806>
 800a164:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a168:	095b      	lsrs	r3, r3, #5
 800a16a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a16e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a172:	f003 031f 	and.w	r3, r3, #31
 800a176:	2b00      	cmp	r3, #0
 800a178:	d104      	bne.n	800a184 <USB_EPStartXfer+0x7e2>
 800a17a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a17e:	3b01      	subs	r3, #1
 800a180:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a186:	881b      	ldrh	r3, [r3, #0]
 800a188:	b29a      	uxth	r2, r3
 800a18a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a18e:	b29b      	uxth	r3, r3
 800a190:	029b      	lsls	r3, r3, #10
 800a192:	b29b      	uxth	r3, r3
 800a194:	4313      	orrs	r3, r2
 800a196:	b29b      	uxth	r3, r3
 800a198:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a19c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1a0:	b29a      	uxth	r2, r3
 800a1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a4:	801a      	strh	r2, [r3, #0]
 800a1a6:	e050      	b.n	800a24a <USB_EPStartXfer+0x8a8>
 800a1a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10a      	bne.n	800a1c6 <USB_EPStartXfer+0x824>
 800a1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1be:	b29a      	uxth	r2, r3
 800a1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c2:	801a      	strh	r2, [r3, #0]
 800a1c4:	e041      	b.n	800a24a <USB_EPStartXfer+0x8a8>
 800a1c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1ca:	085b      	lsrs	r3, r3, #1
 800a1cc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a1d4:	f003 0301 	and.w	r3, r3, #1
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d004      	beq.n	800a1e6 <USB_EPStartXfer+0x844>
 800a1dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800a1e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	b29a      	uxth	r2, r3
 800a1ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	029b      	lsls	r3, r3, #10
 800a1f4:	b29b      	uxth	r3, r3
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	b29a      	uxth	r2, r3
 800a1fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1fc:	801a      	strh	r2, [r3, #0]
 800a1fe:	e024      	b.n	800a24a <USB_EPStartXfer+0x8a8>
 800a200:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a204:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	785b      	ldrb	r3, [r3, #1]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d11c      	bne.n	800a24a <USB_EPStartXfer+0x8a8>
 800a210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a214:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a21e:	b29b      	uxth	r3, r3
 800a220:	461a      	mov	r2, r3
 800a222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a224:	4413      	add	r3, r2
 800a226:	643b      	str	r3, [r7, #64]	; 0x40
 800a228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a22c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	781b      	ldrb	r3, [r3, #0]
 800a234:	00da      	lsls	r2, r3, #3
 800a236:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a238:	4413      	add	r3, r2
 800a23a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a23e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a244:	b29a      	uxth	r2, r3
 800a246:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a248:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a24a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a24e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	895b      	ldrh	r3, [r3, #10]
 800a256:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a25a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a25e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6959      	ldr	r1, [r3, #20]
 800a266:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a26a:	b29b      	uxth	r3, r3
 800a26c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a270:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a274:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a278:	6800      	ldr	r0, [r0, #0]
 800a27a:	f001 f87d 	bl	800b378 <USB_WritePMA>
 800a27e:	e227      	b.n	800a6d0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	6a1b      	ldr	r3, [r3, #32]
 800a28c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800a290:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a294:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a29e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	009b      	lsls	r3, r3, #2
 800a2a8:	4413      	add	r3, r2
 800a2aa:	881b      	ldrh	r3, [r3, #0]
 800a2ac:	b29b      	uxth	r3, r3
 800a2ae:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a2b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2b6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	009b      	lsls	r3, r3, #2
 800a2d2:	441a      	add	r2, r3
 800a2d4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a2d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2e8:	b29b      	uxth	r3, r3
 800a2ea:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a2ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a306:	b29b      	uxth	r3, r3
 800a308:	461a      	mov	r2, r3
 800a30a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a30c:	4413      	add	r3, r2
 800a30e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a310:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a314:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	00da      	lsls	r2, r3, #3
 800a31e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a320:	4413      	add	r3, r2
 800a322:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a326:	65bb      	str	r3, [r7, #88]	; 0x58
 800a328:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a330:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	891b      	ldrh	r3, [r3, #8]
 800a33e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a346:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	6959      	ldr	r1, [r3, #20]
 800a34e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a352:	b29b      	uxth	r3, r3
 800a354:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a358:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a35c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a360:	6800      	ldr	r0, [r0, #0]
 800a362:	f001 f809 	bl	800b378 <USB_WritePMA>
 800a366:	e1b3      	b.n	800a6d0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a368:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a36c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	6a1a      	ldr	r2, [r3, #32]
 800a374:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a378:	1ad2      	subs	r2, r2, r3
 800a37a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a37e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a386:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a38a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a38e:	681a      	ldr	r2, [r3, #0]
 800a390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a394:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	009b      	lsls	r3, r3, #2
 800a39e:	4413      	add	r3, r2
 800a3a0:	881b      	ldrh	r3, [r3, #0]
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	f000 80c6 	beq.w	800a53a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a3ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	673b      	str	r3, [r7, #112]	; 0x70
 800a3ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	785b      	ldrb	r3, [r3, #1]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d177      	bne.n	800a4ba <USB_EPStartXfer+0xb18>
 800a3ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a3e4:	b29b      	uxth	r3, r3
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3ea:	4413      	add	r3, r2
 800a3ec:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	00da      	lsls	r2, r3, #3
 800a3fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a3fe:	4413      	add	r3, r2
 800a400:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a404:	667b      	str	r3, [r7, #100]	; 0x64
 800a406:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a410:	b29a      	uxth	r2, r3
 800a412:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a414:	801a      	strh	r2, [r3, #0]
 800a416:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a41a:	2b3e      	cmp	r3, #62	; 0x3e
 800a41c:	d921      	bls.n	800a462 <USB_EPStartXfer+0xac0>
 800a41e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a422:	095b      	lsrs	r3, r3, #5
 800a424:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a428:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a42c:	f003 031f 	and.w	r3, r3, #31
 800a430:	2b00      	cmp	r3, #0
 800a432:	d104      	bne.n	800a43e <USB_EPStartXfer+0xa9c>
 800a434:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a438:	3b01      	subs	r3, #1
 800a43a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a43e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a440:	881b      	ldrh	r3, [r3, #0]
 800a442:	b29a      	uxth	r2, r3
 800a444:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a448:	b29b      	uxth	r3, r3
 800a44a:	029b      	lsls	r3, r3, #10
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	4313      	orrs	r3, r2
 800a450:	b29b      	uxth	r3, r3
 800a452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a45e:	801a      	strh	r2, [r3, #0]
 800a460:	e050      	b.n	800a504 <USB_EPStartXfer+0xb62>
 800a462:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a466:	2b00      	cmp	r3, #0
 800a468:	d10a      	bne.n	800a480 <USB_EPStartXfer+0xade>
 800a46a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a46c:	881b      	ldrh	r3, [r3, #0]
 800a46e:	b29b      	uxth	r3, r3
 800a470:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a474:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a478:	b29a      	uxth	r2, r3
 800a47a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a47c:	801a      	strh	r2, [r3, #0]
 800a47e:	e041      	b.n	800a504 <USB_EPStartXfer+0xb62>
 800a480:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a484:	085b      	lsrs	r3, r3, #1
 800a486:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a48a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a48e:	f003 0301 	and.w	r3, r3, #1
 800a492:	2b00      	cmp	r3, #0
 800a494:	d004      	beq.n	800a4a0 <USB_EPStartXfer+0xafe>
 800a496:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a49a:	3301      	adds	r3, #1
 800a49c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a4a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4a2:	881b      	ldrh	r3, [r3, #0]
 800a4a4:	b29a      	uxth	r2, r3
 800a4a6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	029b      	lsls	r3, r3, #10
 800a4ae:	b29b      	uxth	r3, r3
 800a4b0:	4313      	orrs	r3, r2
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4b6:	801a      	strh	r2, [r3, #0]
 800a4b8:	e024      	b.n	800a504 <USB_EPStartXfer+0xb62>
 800a4ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	785b      	ldrb	r3, [r3, #1]
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d11c      	bne.n	800a504 <USB_EPStartXfer+0xb62>
 800a4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4d8:	b29b      	uxth	r3, r3
 800a4da:	461a      	mov	r2, r3
 800a4dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4de:	4413      	add	r3, r2
 800a4e0:	673b      	str	r3, [r7, #112]	; 0x70
 800a4e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	00da      	lsls	r2, r3, #3
 800a4f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a4f2:	4413      	add	r3, r2
 800a4f4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a4f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a502:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800a504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	895b      	ldrh	r3, [r3, #10]
 800a510:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	6959      	ldr	r1, [r3, #20]
 800a520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a524:	b29b      	uxth	r3, r3
 800a526:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a52a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a52e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a532:	6800      	ldr	r0, [r0, #0]
 800a534:	f000 ff20 	bl	800b378 <USB_WritePMA>
 800a538:	e0ca      	b.n	800a6d0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a53e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	785b      	ldrb	r3, [r3, #1]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d177      	bne.n	800a63a <USB_EPStartXfer+0xc98>
 800a54a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a54e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a564:	b29b      	uxth	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a56a:	4413      	add	r3, r2
 800a56c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a56e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a572:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	00da      	lsls	r2, r3, #3
 800a57c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a57e:	4413      	add	r3, r2
 800a580:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a584:	67bb      	str	r3, [r7, #120]	; 0x78
 800a586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a588:	881b      	ldrh	r3, [r3, #0]
 800a58a:	b29b      	uxth	r3, r3
 800a58c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a590:	b29a      	uxth	r2, r3
 800a592:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a594:	801a      	strh	r2, [r3, #0]
 800a596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a59a:	2b3e      	cmp	r3, #62	; 0x3e
 800a59c:	d921      	bls.n	800a5e2 <USB_EPStartXfer+0xc40>
 800a59e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a2:	095b      	lsrs	r3, r3, #5
 800a5a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a5a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5ac:	f003 031f 	and.w	r3, r3, #31
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d104      	bne.n	800a5be <USB_EPStartXfer+0xc1c>
 800a5b4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a5be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5c0:	881b      	ldrh	r3, [r3, #0]
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	029b      	lsls	r3, r3, #10
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5de:	801a      	strh	r2, [r3, #0]
 800a5e0:	e05c      	b.n	800a69c <USB_EPStartXfer+0xcfa>
 800a5e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d10a      	bne.n	800a600 <USB_EPStartXfer+0xc5e>
 800a5ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5ec:	881b      	ldrh	r3, [r3, #0]
 800a5ee:	b29b      	uxth	r3, r3
 800a5f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a5f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a5fc:	801a      	strh	r2, [r3, #0]
 800a5fe:	e04d      	b.n	800a69c <USB_EPStartXfer+0xcfa>
 800a600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a604:	085b      	lsrs	r3, r3, #1
 800a606:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a60e:	f003 0301 	and.w	r3, r3, #1
 800a612:	2b00      	cmp	r3, #0
 800a614:	d004      	beq.n	800a620 <USB_EPStartXfer+0xc7e>
 800a616:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a61a:	3301      	adds	r3, #1
 800a61c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800a620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a622:	881b      	ldrh	r3, [r3, #0]
 800a624:	b29a      	uxth	r2, r3
 800a626:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	029b      	lsls	r3, r3, #10
 800a62e:	b29b      	uxth	r3, r3
 800a630:	4313      	orrs	r3, r2
 800a632:	b29a      	uxth	r2, r3
 800a634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a636:	801a      	strh	r2, [r3, #0]
 800a638:	e030      	b.n	800a69c <USB_EPStartXfer+0xcfa>
 800a63a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a63e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	785b      	ldrb	r3, [r3, #1]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d128      	bne.n	800a69c <USB_EPStartXfer+0xcfa>
 800a64a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a64e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a65c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a666:	b29b      	uxth	r3, r3
 800a668:	461a      	mov	r2, r3
 800a66a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a66e:	4413      	add	r3, r2
 800a670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a678:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	781b      	ldrb	r3, [r3, #0]
 800a680:	00da      	lsls	r2, r3, #3
 800a682:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a686:	4413      	add	r3, r2
 800a688:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a68c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a690:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a694:	b29a      	uxth	r2, r3
 800a696:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a69a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a69c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	891b      	ldrh	r3, [r3, #8]
 800a6a8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a6ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	6959      	ldr	r1, [r3, #20]
 800a6b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6bc:	b29b      	uxth	r3, r3
 800a6be:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a6c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a6c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a6ca:	6800      	ldr	r0, [r0, #0]
 800a6cc:	f000 fe54 	bl	800b378 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800a6d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	4413      	add	r3, r2
 800a6ea:	881b      	ldrh	r3, [r3, #0]
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a6f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6f6:	817b      	strh	r3, [r7, #10]
 800a6f8:	897b      	ldrh	r3, [r7, #10]
 800a6fa:	f083 0310 	eor.w	r3, r3, #16
 800a6fe:	817b      	strh	r3, [r7, #10]
 800a700:	897b      	ldrh	r3, [r7, #10]
 800a702:	f083 0320 	eor.w	r3, r3, #32
 800a706:	817b      	strh	r3, [r7, #10]
 800a708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a70c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a710:	681a      	ldr	r2, [r3, #0]
 800a712:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a716:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	781b      	ldrb	r3, [r3, #0]
 800a71e:	009b      	lsls	r3, r3, #2
 800a720:	441a      	add	r2, r3
 800a722:	897b      	ldrh	r3, [r7, #10]
 800a724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a72c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a734:	b29b      	uxth	r3, r3
 800a736:	8013      	strh	r3, [r2, #0]
 800a738:	f000 bcde 	b.w	800b0f8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800a73c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a740:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	7b1b      	ldrb	r3, [r3, #12]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f040 80bb 	bne.w	800a8c4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800a74e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	699a      	ldr	r2, [r3, #24]
 800a75a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a75e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	691b      	ldr	r3, [r3, #16]
 800a766:	429a      	cmp	r2, r3
 800a768:	d917      	bls.n	800a79a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800a76a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a76e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a77a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a77e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	699a      	ldr	r2, [r3, #24]
 800a786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a78a:	1ad2      	subs	r2, r2, r3
 800a78c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	619a      	str	r2, [r3, #24]
 800a798:	e00e      	b.n	800a7b8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a79a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	699b      	ldr	r3, [r3, #24]
 800a7a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a7aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a7c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	461a      	mov	r2, r3
 800a7d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7dc:	4413      	add	r3, r2
 800a7de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a7e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	781b      	ldrb	r3, [r3, #0]
 800a7ee:	00da      	lsls	r2, r3, #3
 800a7f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7f4:	4413      	add	r3, r2
 800a7f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a7fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a802:	881b      	ldrh	r3, [r3, #0]
 800a804:	b29b      	uxth	r3, r3
 800a806:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a80a:	b29a      	uxth	r2, r3
 800a80c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a810:	801a      	strh	r2, [r3, #0]
 800a812:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a816:	2b3e      	cmp	r3, #62	; 0x3e
 800a818:	d924      	bls.n	800a864 <USB_EPStartXfer+0xec2>
 800a81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a81e:	095b      	lsrs	r3, r3, #5
 800a820:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a824:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a828:	f003 031f 	and.w	r3, r3, #31
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d104      	bne.n	800a83a <USB_EPStartXfer+0xe98>
 800a830:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a834:	3b01      	subs	r3, #1
 800a836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a83a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a83e:	881b      	ldrh	r3, [r3, #0]
 800a840:	b29a      	uxth	r2, r3
 800a842:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a846:	b29b      	uxth	r3, r3
 800a848:	029b      	lsls	r3, r3, #10
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	4313      	orrs	r3, r2
 800a84e:	b29b      	uxth	r3, r3
 800a850:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a854:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a858:	b29a      	uxth	r2, r3
 800a85a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a85e:	801a      	strh	r2, [r3, #0]
 800a860:	f000 bc10 	b.w	800b084 <USB_EPStartXfer+0x16e2>
 800a864:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d10c      	bne.n	800a886 <USB_EPStartXfer+0xee4>
 800a86c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a870:	881b      	ldrh	r3, [r3, #0]
 800a872:	b29b      	uxth	r3, r3
 800a874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a87c:	b29a      	uxth	r2, r3
 800a87e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a882:	801a      	strh	r2, [r3, #0]
 800a884:	e3fe      	b.n	800b084 <USB_EPStartXfer+0x16e2>
 800a886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a88a:	085b      	lsrs	r3, r3, #1
 800a88c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a890:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a894:	f003 0301 	and.w	r3, r3, #1
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d004      	beq.n	800a8a6 <USB_EPStartXfer+0xf04>
 800a89c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a8a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8aa:	881b      	ldrh	r3, [r3, #0]
 800a8ac:	b29a      	uxth	r2, r3
 800a8ae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	029b      	lsls	r3, r3, #10
 800a8b6:	b29b      	uxth	r3, r3
 800a8b8:	4313      	orrs	r3, r2
 800a8ba:	b29a      	uxth	r2, r3
 800a8bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a8c0:	801a      	strh	r2, [r3, #0]
 800a8c2:	e3df      	b.n	800b084 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a8c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	78db      	ldrb	r3, [r3, #3]
 800a8d0:	2b02      	cmp	r3, #2
 800a8d2:	f040 8218 	bne.w	800ad06 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a8d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	785b      	ldrb	r3, [r3, #1]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f040 809d 	bne.w	800aa22 <USB_EPStartXfer+0x1080>
 800a8e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a8f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a904:	b29b      	uxth	r3, r3
 800a906:	461a      	mov	r2, r3
 800a908:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a90c:	4413      	add	r3, r2
 800a90e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	781b      	ldrb	r3, [r3, #0]
 800a91e:	00da      	lsls	r2, r3, #3
 800a920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a924:	4413      	add	r3, r2
 800a926:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a92a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a92e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a932:	881b      	ldrh	r3, [r3, #0]
 800a934:	b29b      	uxth	r3, r3
 800a936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a93a:	b29a      	uxth	r2, r3
 800a93c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a940:	801a      	strh	r2, [r3, #0]
 800a942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	691b      	ldr	r3, [r3, #16]
 800a94e:	2b3e      	cmp	r3, #62	; 0x3e
 800a950:	d92b      	bls.n	800a9aa <USB_EPStartXfer+0x1008>
 800a952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a956:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	691b      	ldr	r3, [r3, #16]
 800a95e:	095b      	lsrs	r3, r3, #5
 800a960:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	691b      	ldr	r3, [r3, #16]
 800a970:	f003 031f 	and.w	r3, r3, #31
 800a974:	2b00      	cmp	r3, #0
 800a976:	d104      	bne.n	800a982 <USB_EPStartXfer+0xfe0>
 800a978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a97c:	3b01      	subs	r3, #1
 800a97e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a982:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a986:	881b      	ldrh	r3, [r3, #0]
 800a988:	b29a      	uxth	r2, r3
 800a98a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a98e:	b29b      	uxth	r3, r3
 800a990:	029b      	lsls	r3, r3, #10
 800a992:	b29b      	uxth	r3, r3
 800a994:	4313      	orrs	r3, r2
 800a996:	b29b      	uxth	r3, r3
 800a998:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a99c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9a6:	801a      	strh	r2, [r3, #0]
 800a9a8:	e070      	b.n	800aa8c <USB_EPStartXfer+0x10ea>
 800a9aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d10c      	bne.n	800a9d4 <USB_EPStartXfer+0x1032>
 800a9ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9be:	881b      	ldrh	r3, [r3, #0]
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9ca:	b29a      	uxth	r2, r3
 800a9cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9d0:	801a      	strh	r2, [r3, #0]
 800a9d2:	e05b      	b.n	800aa8c <USB_EPStartXfer+0x10ea>
 800a9d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	691b      	ldr	r3, [r3, #16]
 800a9e0:	085b      	lsrs	r3, r3, #1
 800a9e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a9e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	691b      	ldr	r3, [r3, #16]
 800a9f2:	f003 0301 	and.w	r3, r3, #1
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d004      	beq.n	800aa04 <USB_EPStartXfer+0x1062>
 800a9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a9fe:	3301      	adds	r3, #1
 800aa00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800aa04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa08:	881b      	ldrh	r3, [r3, #0]
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa10:	b29b      	uxth	r3, r3
 800aa12:	029b      	lsls	r3, r3, #10
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	4313      	orrs	r3, r2
 800aa18:	b29a      	uxth	r2, r3
 800aa1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa1e:	801a      	strh	r2, [r3, #0]
 800aa20:	e034      	b.n	800aa8c <USB_EPStartXfer+0x10ea>
 800aa22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	785b      	ldrb	r3, [r3, #1]
 800aa2e:	2b01      	cmp	r3, #1
 800aa30:	d12c      	bne.n	800aa8c <USB_EPStartXfer+0x10ea>
 800aa32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	461a      	mov	r2, r3
 800aa52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aa56:	4413      	add	r3, r2
 800aa58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	00da      	lsls	r2, r3, #3
 800aa6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800aa6e:	4413      	add	r3, r2
 800aa70:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800aa78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800aa8a:	801a      	strh	r2, [r3, #0]
 800aa8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aa9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	785b      	ldrb	r3, [r3, #1]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	f040 809d 	bne.w	800abe6 <USB_EPStartXfer+0x1244>
 800aaac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aab0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aaba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aabe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	461a      	mov	r2, r3
 800aacc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aad0:	4413      	add	r3, r2
 800aad2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aad6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aada:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	00da      	lsls	r2, r3, #3
 800aae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aae8:	4413      	add	r3, r2
 800aaea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aaee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aaf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aaf6:	881b      	ldrh	r3, [r3, #0]
 800aaf8:	b29b      	uxth	r3, r3
 800aafa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aafe:	b29a      	uxth	r2, r3
 800ab00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab04:	801a      	strh	r2, [r3, #0]
 800ab06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	691b      	ldr	r3, [r3, #16]
 800ab12:	2b3e      	cmp	r3, #62	; 0x3e
 800ab14:	d92b      	bls.n	800ab6e <USB_EPStartXfer+0x11cc>
 800ab16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab1a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	095b      	lsrs	r3, r3, #5
 800ab24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	691b      	ldr	r3, [r3, #16]
 800ab34:	f003 031f 	and.w	r3, r3, #31
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d104      	bne.n	800ab46 <USB_EPStartXfer+0x11a4>
 800ab3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab40:	3b01      	subs	r3, #1
 800ab42:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ab46:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab4a:	881b      	ldrh	r3, [r3, #0]
 800ab4c:	b29a      	uxth	r2, r3
 800ab4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ab52:	b29b      	uxth	r3, r3
 800ab54:	029b      	lsls	r3, r3, #10
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	4313      	orrs	r3, r2
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab6a:	801a      	strh	r2, [r3, #0]
 800ab6c:	e069      	b.n	800ac42 <USB_EPStartXfer+0x12a0>
 800ab6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	691b      	ldr	r3, [r3, #16]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d10c      	bne.n	800ab98 <USB_EPStartXfer+0x11f6>
 800ab7e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab82:	881b      	ldrh	r3, [r3, #0]
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab8a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ab94:	801a      	strh	r2, [r3, #0]
 800ab96:	e054      	b.n	800ac42 <USB_EPStartXfer+0x12a0>
 800ab98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	085b      	lsrs	r3, r3, #1
 800aba6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	691b      	ldr	r3, [r3, #16]
 800abb6:	f003 0301 	and.w	r3, r3, #1
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d004      	beq.n	800abc8 <USB_EPStartXfer+0x1226>
 800abbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abc2:	3301      	adds	r3, #1
 800abc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800abc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abcc:	881b      	ldrh	r3, [r3, #0]
 800abce:	b29a      	uxth	r2, r3
 800abd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	029b      	lsls	r3, r3, #10
 800abd8:	b29b      	uxth	r3, r3
 800abda:	4313      	orrs	r3, r2
 800abdc:	b29a      	uxth	r2, r3
 800abde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abe2:	801a      	strh	r2, [r3, #0]
 800abe4:	e02d      	b.n	800ac42 <USB_EPStartXfer+0x12a0>
 800abe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	785b      	ldrb	r3, [r3, #1]
 800abf2:	2b01      	cmp	r3, #1
 800abf4:	d125      	bne.n	800ac42 <USB_EPStartXfer+0x12a0>
 800abf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abfa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac04:	b29b      	uxth	r3, r3
 800ac06:	461a      	mov	r2, r3
 800ac08:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac0c:	4413      	add	r3, r2
 800ac0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800ac12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	00da      	lsls	r2, r3, #3
 800ac20:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac24:	4413      	add	r3, r2
 800ac26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ac2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	691b      	ldr	r3, [r3, #16]
 800ac3a:	b29a      	uxth	r2, r3
 800ac3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ac40:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800ac42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	69db      	ldr	r3, [r3, #28]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	f000 8218 	beq.w	800b084 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800ac54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac58:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac74:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d005      	beq.n	800ac8c <USB_EPStartXfer+0x12ea>
 800ac80:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d10d      	bne.n	800aca8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac8c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	f040 81f5 	bne.w	800b084 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800ac9a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800ac9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f040 81ee 	bne.w	800b084 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800aca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acb6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acce:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800acd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acda:	681a      	ldr	r2, [r3, #0]
 800acdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ace0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	781b      	ldrb	r3, [r3, #0]
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	441a      	add	r2, r3
 800acec:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800acf0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acf4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acf8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ad00:	b29b      	uxth	r3, r3
 800ad02:	8013      	strh	r3, [r2, #0]
 800ad04:	e1be      	b.n	800b084 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800ad06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	78db      	ldrb	r3, [r3, #3]
 800ad12:	2b01      	cmp	r3, #1
 800ad14:	f040 81b4 	bne.w	800b080 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800ad18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	699a      	ldr	r2, [r3, #24]
 800ad24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	691b      	ldr	r3, [r3, #16]
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d917      	bls.n	800ad64 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800ad34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800ad44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad48:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	699a      	ldr	r2, [r3, #24]
 800ad50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad54:	1ad2      	subs	r2, r2, r3
 800ad56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	619a      	str	r2, [r3, #24]
 800ad62:	e00e      	b.n	800ad82 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800ad64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad68:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	699b      	ldr	r3, [r3, #24]
 800ad70:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800ad74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800ad82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	785b      	ldrb	r3, [r3, #1]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	f040 8085 	bne.w	800ae9e <USB_EPStartXfer+0x14fc>
 800ad94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ada2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	461a      	mov	r2, r3
 800adb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800adb8:	4413      	add	r3, r2
 800adba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800adbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	00da      	lsls	r2, r3, #3
 800adcc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800add0:	4413      	add	r3, r2
 800add2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800add6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800adda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adde:	881b      	ldrh	r3, [r3, #0]
 800ade0:	b29b      	uxth	r3, r3
 800ade2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800adec:	801a      	strh	r2, [r3, #0]
 800adee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adf2:	2b3e      	cmp	r3, #62	; 0x3e
 800adf4:	d923      	bls.n	800ae3e <USB_EPStartXfer+0x149c>
 800adf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfa:	095b      	lsrs	r3, r3, #5
 800adfc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae04:	f003 031f 	and.w	r3, r3, #31
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d104      	bne.n	800ae16 <USB_EPStartXfer+0x1474>
 800ae0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae10:	3b01      	subs	r3, #1
 800ae12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae16:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae1a:	881b      	ldrh	r3, [r3, #0]
 800ae1c:	b29a      	uxth	r2, r3
 800ae1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	029b      	lsls	r3, r3, #10
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	4313      	orrs	r3, r2
 800ae2a:	b29b      	uxth	r3, r3
 800ae2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae34:	b29a      	uxth	r2, r3
 800ae36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae3a:	801a      	strh	r2, [r3, #0]
 800ae3c:	e060      	b.n	800af00 <USB_EPStartXfer+0x155e>
 800ae3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d10c      	bne.n	800ae60 <USB_EPStartXfer+0x14be>
 800ae46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae5c:	801a      	strh	r2, [r3, #0]
 800ae5e:	e04f      	b.n	800af00 <USB_EPStartXfer+0x155e>
 800ae60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae64:	085b      	lsrs	r3, r3, #1
 800ae66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae6e:	f003 0301 	and.w	r3, r3, #1
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d004      	beq.n	800ae80 <USB_EPStartXfer+0x14de>
 800ae76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae7a:	3301      	adds	r3, #1
 800ae7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800ae80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae84:	881b      	ldrh	r3, [r3, #0]
 800ae86:	b29a      	uxth	r2, r3
 800ae88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	029b      	lsls	r3, r3, #10
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	4313      	orrs	r3, r2
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ae9a:	801a      	strh	r2, [r3, #0]
 800ae9c:	e030      	b.n	800af00 <USB_EPStartXfer+0x155e>
 800ae9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aea2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	785b      	ldrb	r3, [r3, #1]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d128      	bne.n	800af00 <USB_EPStartXfer+0x155e>
 800aeae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aebc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aec0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	461a      	mov	r2, r3
 800aece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aed2:	4413      	add	r3, r2
 800aed4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800aed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aedc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	00da      	lsls	r2, r3, #3
 800aee6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800aeea:	4413      	add	r3, r2
 800aeec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aef0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800aef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aef8:	b29a      	uxth	r2, r3
 800aefa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800aefe:	801a      	strh	r2, [r3, #0]
 800af00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800af0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	785b      	ldrb	r3, [r3, #1]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	f040 8085 	bne.w	800b02a <USB_EPStartXfer+0x1688>
 800af20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800af2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	461a      	mov	r2, r3
 800af40:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af44:	4413      	add	r3, r2
 800af46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800af4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	781b      	ldrb	r3, [r3, #0]
 800af56:	00da      	lsls	r2, r3, #3
 800af58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800af5c:	4413      	add	r3, r2
 800af5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af6a:	881b      	ldrh	r3, [r3, #0]
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af72:	b29a      	uxth	r2, r3
 800af74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800af78:	801a      	strh	r2, [r3, #0]
 800af7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af7e:	2b3e      	cmp	r3, #62	; 0x3e
 800af80:	d923      	bls.n	800afca <USB_EPStartXfer+0x1628>
 800af82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af86:	095b      	lsrs	r3, r3, #5
 800af88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800af8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af90:	f003 031f 	and.w	r3, r3, #31
 800af94:	2b00      	cmp	r3, #0
 800af96:	d104      	bne.n	800afa2 <USB_EPStartXfer+0x1600>
 800af98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800af9c:	3b01      	subs	r3, #1
 800af9e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800afa2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800afa6:	881b      	ldrh	r3, [r3, #0]
 800afa8:	b29a      	uxth	r2, r3
 800afaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afae:	b29b      	uxth	r3, r3
 800afb0:	029b      	lsls	r3, r3, #10
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	4313      	orrs	r3, r2
 800afb6:	b29b      	uxth	r3, r3
 800afb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afc0:	b29a      	uxth	r2, r3
 800afc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800afc6:	801a      	strh	r2, [r3, #0]
 800afc8:	e05c      	b.n	800b084 <USB_EPStartXfer+0x16e2>
 800afca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d10c      	bne.n	800afec <USB_EPStartXfer+0x164a>
 800afd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800afd6:	881b      	ldrh	r3, [r3, #0]
 800afd8:	b29b      	uxth	r3, r3
 800afda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800afde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800afe2:	b29a      	uxth	r2, r3
 800afe4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800afe8:	801a      	strh	r2, [r3, #0]
 800afea:	e04b      	b.n	800b084 <USB_EPStartXfer+0x16e2>
 800afec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aff0:	085b      	lsrs	r3, r3, #1
 800aff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800aff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800affa:	f003 0301 	and.w	r3, r3, #1
 800affe:	2b00      	cmp	r3, #0
 800b000:	d004      	beq.n	800b00c <USB_EPStartXfer+0x166a>
 800b002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b006:	3301      	adds	r3, #1
 800b008:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b00c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b010:	881b      	ldrh	r3, [r3, #0]
 800b012:	b29a      	uxth	r2, r3
 800b014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b018:	b29b      	uxth	r3, r3
 800b01a:	029b      	lsls	r3, r3, #10
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	4313      	orrs	r3, r2
 800b020:	b29a      	uxth	r2, r3
 800b022:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b026:	801a      	strh	r2, [r3, #0]
 800b028:	e02c      	b.n	800b084 <USB_EPStartXfer+0x16e2>
 800b02a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b02e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	785b      	ldrb	r3, [r3, #1]
 800b036:	2b01      	cmp	r3, #1
 800b038:	d124      	bne.n	800b084 <USB_EPStartXfer+0x16e2>
 800b03a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b03e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b048:	b29b      	uxth	r3, r3
 800b04a:	461a      	mov	r2, r3
 800b04c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b050:	4413      	add	r3, r2
 800b052:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b056:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b05a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	00da      	lsls	r2, r3, #3
 800b064:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b068:	4413      	add	r3, r2
 800b06a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b06e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b076:	b29a      	uxth	r2, r3
 800b078:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b07c:	801a      	strh	r2, [r3, #0]
 800b07e:	e001      	b.n	800b084 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	e03a      	b.n	800b0fa <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b084:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b088:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b08c:	681a      	ldr	r2, [r3, #0]
 800b08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	009b      	lsls	r3, r3, #2
 800b09c:	4413      	add	r3, r2
 800b09e:	881b      	ldrh	r3, [r3, #0]
 800b0a0:	b29b      	uxth	r3, r3
 800b0a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b0a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b0ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b0b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b0b6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b0ba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b0be:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b0c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800b0c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0ce:	681a      	ldr	r2, [r3, #0]
 800b0d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	781b      	ldrb	r3, [r3, #0]
 800b0dc:	009b      	lsls	r3, r3, #2
 800b0de:	441a      	add	r2, r3
 800b0e0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b0e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b0e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b0ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b0f8:	2300      	movs	r3, #0
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800b100:	46bd      	mov	sp, r7
 800b102:	bd80      	pop	{r7, pc}

0800b104 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	785b      	ldrb	r3, [r3, #1]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d020      	beq.n	800b158 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	781b      	ldrb	r3, [r3, #0]
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	4413      	add	r3, r2
 800b120:	881b      	ldrh	r3, [r3, #0]
 800b122:	b29b      	uxth	r3, r3
 800b124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b12c:	81bb      	strh	r3, [r7, #12]
 800b12e:	89bb      	ldrh	r3, [r7, #12]
 800b130:	f083 0310 	eor.w	r3, r3, #16
 800b134:	81bb      	strh	r3, [r7, #12]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	009b      	lsls	r3, r3, #2
 800b13e:	441a      	add	r2, r3
 800b140:	89bb      	ldrh	r3, [r7, #12]
 800b142:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b146:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b14a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b152:	b29b      	uxth	r3, r3
 800b154:	8013      	strh	r3, [r2, #0]
 800b156:	e01f      	b.n	800b198 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	781b      	ldrb	r3, [r3, #0]
 800b15e:	009b      	lsls	r3, r3, #2
 800b160:	4413      	add	r3, r2
 800b162:	881b      	ldrh	r3, [r3, #0]
 800b164:	b29b      	uxth	r3, r3
 800b166:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b16a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b16e:	81fb      	strh	r3, [r7, #14]
 800b170:	89fb      	ldrh	r3, [r7, #14]
 800b172:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b176:	81fb      	strh	r3, [r7, #14]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	683b      	ldr	r3, [r7, #0]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	441a      	add	r2, r3
 800b182:	89fb      	ldrh	r3, [r7, #14]
 800b184:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b188:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b18c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b194:	b29b      	uxth	r3, r3
 800b196:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800b198:	2300      	movs	r3, #0
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3714      	adds	r7, #20
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a4:	4770      	bx	lr

0800b1a6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800b1a6:	b480      	push	{r7}
 800b1a8:	b087      	sub	sp, #28
 800b1aa:	af00      	add	r7, sp, #0
 800b1ac:	6078      	str	r0, [r7, #4]
 800b1ae:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	7b1b      	ldrb	r3, [r3, #12]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f040 809d 	bne.w	800b2f4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	785b      	ldrb	r3, [r3, #1]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d04c      	beq.n	800b25c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800b1c2:	687a      	ldr	r2, [r7, #4]
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	781b      	ldrb	r3, [r3, #0]
 800b1c8:	009b      	lsls	r3, r3, #2
 800b1ca:	4413      	add	r3, r2
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	823b      	strh	r3, [r7, #16]
 800b1d0:	8a3b      	ldrh	r3, [r7, #16]
 800b1d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d01b      	beq.n	800b212 <USB_EPClearStall+0x6c>
 800b1da:	687a      	ldr	r2, [r7, #4]
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	009b      	lsls	r3, r3, #2
 800b1e2:	4413      	add	r3, r2
 800b1e4:	881b      	ldrh	r3, [r3, #0]
 800b1e6:	b29b      	uxth	r3, r3
 800b1e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b1ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1f0:	81fb      	strh	r3, [r7, #14]
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	441a      	add	r2, r3
 800b1fc:	89fb      	ldrh	r3, [r7, #14]
 800b1fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b206:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b20a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b20e:	b29b      	uxth	r3, r3
 800b210:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	78db      	ldrb	r3, [r3, #3]
 800b216:	2b01      	cmp	r3, #1
 800b218:	d06c      	beq.n	800b2f4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800b21a:	687a      	ldr	r2, [r7, #4]
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	781b      	ldrb	r3, [r3, #0]
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	4413      	add	r3, r2
 800b224:	881b      	ldrh	r3, [r3, #0]
 800b226:	b29b      	uxth	r3, r3
 800b228:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b22c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b230:	81bb      	strh	r3, [r7, #12]
 800b232:	89bb      	ldrh	r3, [r7, #12]
 800b234:	f083 0320 	eor.w	r3, r3, #32
 800b238:	81bb      	strh	r3, [r7, #12]
 800b23a:	687a      	ldr	r2, [r7, #4]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	441a      	add	r2, r3
 800b244:	89bb      	ldrh	r3, [r7, #12]
 800b246:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b24a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b24e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b256:	b29b      	uxth	r3, r3
 800b258:	8013      	strh	r3, [r2, #0]
 800b25a:	e04b      	b.n	800b2f4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	683b      	ldr	r3, [r7, #0]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	009b      	lsls	r3, r3, #2
 800b264:	4413      	add	r3, r2
 800b266:	881b      	ldrh	r3, [r3, #0]
 800b268:	82fb      	strh	r3, [r7, #22]
 800b26a:	8afb      	ldrh	r3, [r7, #22]
 800b26c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d01b      	beq.n	800b2ac <USB_EPClearStall+0x106>
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	781b      	ldrb	r3, [r3, #0]
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4413      	add	r3, r2
 800b27e:	881b      	ldrh	r3, [r3, #0]
 800b280:	b29b      	uxth	r3, r3
 800b282:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b28a:	82bb      	strh	r3, [r7, #20]
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	009b      	lsls	r3, r3, #2
 800b294:	441a      	add	r2, r3
 800b296:	8abb      	ldrh	r3, [r7, #20]
 800b298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b29c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b2a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2a8:	b29b      	uxth	r3, r3
 800b2aa:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	009b      	lsls	r3, r3, #2
 800b2b4:	4413      	add	r3, r2
 800b2b6:	881b      	ldrh	r3, [r3, #0]
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b2be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2c2:	827b      	strh	r3, [r7, #18]
 800b2c4:	8a7b      	ldrh	r3, [r7, #18]
 800b2c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800b2ca:	827b      	strh	r3, [r7, #18]
 800b2cc:	8a7b      	ldrh	r3, [r7, #18]
 800b2ce:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800b2d2:	827b      	strh	r3, [r7, #18]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	781b      	ldrb	r3, [r3, #0]
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	441a      	add	r2, r3
 800b2de:	8a7b      	ldrh	r3, [r7, #18]
 800b2e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b2e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b2e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b2ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	371c      	adds	r7, #28
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b300:	4770      	bx	lr

0800b302 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800b302:	b480      	push	{r7}
 800b304:	b083      	sub	sp, #12
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	460b      	mov	r3, r1
 800b30c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800b30e:	78fb      	ldrb	r3, [r7, #3]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d103      	bne.n	800b31c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2280      	movs	r2, #128	; 0x80
 800b318:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800b31c:	2300      	movs	r3, #0
}
 800b31e:	4618      	mov	r0, r3
 800b320:	370c      	adds	r7, #12
 800b322:	46bd      	mov	sp, r7
 800b324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b328:	4770      	bx	lr

0800b32a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800b32a:	b480      	push	{r7}
 800b32c:	b083      	sub	sp, #12
 800b32e:	af00      	add	r7, sp, #0
 800b330:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800b338:	b29b      	uxth	r3, r3
 800b33a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b33e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b342:	b29a      	uxth	r2, r3
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	370c      	adds	r7, #12
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr

0800b358 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800b358:	b480      	push	{r7}
 800b35a:	b085      	sub	sp, #20
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800b366:	b29b      	uxth	r3, r3
 800b368:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800b36a:	68fb      	ldr	r3, [r7, #12]
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3714      	adds	r7, #20
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b378:	b480      	push	{r7}
 800b37a:	b08b      	sub	sp, #44	; 0x2c
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	60f8      	str	r0, [r7, #12]
 800b380:	60b9      	str	r1, [r7, #8]
 800b382:	4611      	mov	r1, r2
 800b384:	461a      	mov	r2, r3
 800b386:	460b      	mov	r3, r1
 800b388:	80fb      	strh	r3, [r7, #6]
 800b38a:	4613      	mov	r3, r2
 800b38c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800b38e:	88bb      	ldrh	r3, [r7, #4]
 800b390:	3301      	adds	r3, #1
 800b392:	085b      	lsrs	r3, r3, #1
 800b394:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b39e:	88fa      	ldrh	r2, [r7, #6]
 800b3a0:	697b      	ldr	r3, [r7, #20]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b3a8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b3ae:	e01b      	b.n	800b3e8 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	781b      	ldrb	r3, [r3, #0]
 800b3bc:	021b      	lsls	r3, r3, #8
 800b3be:	b21a      	sxth	r2, r3
 800b3c0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	b21b      	sxth	r3, r3
 800b3c8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800b3ca:	6a3b      	ldr	r3, [r7, #32]
 800b3cc:	8a7a      	ldrh	r2, [r7, #18]
 800b3ce:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800b3d0:	6a3b      	ldr	r3, [r7, #32]
 800b3d2:	3302      	adds	r3, #2
 800b3d4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800b3d6:	69fb      	ldr	r3, [r7, #28]
 800b3d8:	3301      	adds	r3, #1
 800b3da:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	3301      	adds	r3, #1
 800b3e0:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	627b      	str	r3, [r7, #36]	; 0x24
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d1e0      	bne.n	800b3b0 <USB_WritePMA+0x38>
  }
}
 800b3ee:	bf00      	nop
 800b3f0:	bf00      	nop
 800b3f2:	372c      	adds	r7, #44	; 0x2c
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fa:	4770      	bx	lr

0800b3fc <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b08b      	sub	sp, #44	; 0x2c
 800b400:	af00      	add	r7, sp, #0
 800b402:	60f8      	str	r0, [r7, #12]
 800b404:	60b9      	str	r1, [r7, #8]
 800b406:	4611      	mov	r1, r2
 800b408:	461a      	mov	r2, r3
 800b40a:	460b      	mov	r3, r1
 800b40c:	80fb      	strh	r3, [r7, #6]
 800b40e:	4613      	mov	r3, r2
 800b410:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800b412:	88bb      	ldrh	r3, [r7, #4]
 800b414:	085b      	lsrs	r3, r3, #1
 800b416:	b29b      	uxth	r3, r3
 800b418:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800b422:	88fa      	ldrh	r2, [r7, #6]
 800b424:	697b      	ldr	r3, [r7, #20]
 800b426:	4413      	add	r3, r2
 800b428:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b42c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	627b      	str	r3, [r7, #36]	; 0x24
 800b432:	e018      	b.n	800b466 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800b434:	6a3b      	ldr	r3, [r7, #32]
 800b436:	881b      	ldrh	r3, [r3, #0]
 800b438:	b29b      	uxth	r3, r3
 800b43a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800b43c:	6a3b      	ldr	r3, [r7, #32]
 800b43e:	3302      	adds	r3, #2
 800b440:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b442:	693b      	ldr	r3, [r7, #16]
 800b444:	b2da      	uxtb	r2, r3
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	3301      	adds	r3, #1
 800b44e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800b450:	693b      	ldr	r3, [r7, #16]
 800b452:	0a1b      	lsrs	r3, r3, #8
 800b454:	b2da      	uxtb	r2, r3
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	3301      	adds	r3, #1
 800b45e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800b460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b462:	3b01      	subs	r3, #1
 800b464:	627b      	str	r3, [r7, #36]	; 0x24
 800b466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d1e3      	bne.n	800b434 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800b46c:	88bb      	ldrh	r3, [r7, #4]
 800b46e:	f003 0301 	and.w	r3, r3, #1
 800b472:	b29b      	uxth	r3, r3
 800b474:	2b00      	cmp	r3, #0
 800b476:	d007      	beq.n	800b488 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800b478:	6a3b      	ldr	r3, [r7, #32]
 800b47a:	881b      	ldrh	r3, [r3, #0]
 800b47c:	b29b      	uxth	r3, r3
 800b47e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	b2da      	uxtb	r2, r3
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	701a      	strb	r2, [r3, #0]
  }
}
 800b488:	bf00      	nop
 800b48a:	372c      	adds	r7, #44	; 0x2c
 800b48c:	46bd      	mov	sp, r7
 800b48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b492:	4770      	bx	lr

0800b494 <HAL_SYSTICK_Callback>:
static volatile uint32_t sysTickValStamp = 0;

static volatile int sysTickPending = 0;

void HAL_SYSTICK_Callback(void)
{
 800b494:	b480      	push	{r7}
 800b496:	af00      	add	r7, sp, #0
    sysTickUptime++;
 800b498:	4b04      	ldr	r3, [pc, #16]	; (800b4ac <HAL_SYSTICK_Callback+0x18>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3301      	adds	r3, #1
 800b49e:	4a03      	ldr	r2, [pc, #12]	; (800b4ac <HAL_SYSTICK_Callback+0x18>)
 800b4a0:	6013      	str	r3, [r2, #0]
}
 800b4a2:	bf00      	nop
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr
 800b4ac:	20000420 	.word	0x20000420

0800b4b0 <delay>:
{
    return micros * usTicks;
}

void delay(uint32_t ms)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
    while (ms--)
 800b4b8:	e003      	b.n	800b4c2 <delay+0x12>
        delayMicroseconds(1000);
 800b4ba:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b4be:	f000 f835 	bl	800b52c <delayMicroseconds>
    while (ms--)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	1e5a      	subs	r2, r3, #1
 800b4c6:	607a      	str	r2, [r7, #4]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d1f6      	bne.n	800b4ba <delay+0xa>
}
 800b4cc:	bf00      	nop
 800b4ce:	bf00      	nop
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <millis>:

uint32_t millis(void)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b4da:	f7f5 fe1f 	bl	800111c <HAL_GetTick>
 800b4de:	4603      	mov	r3, r0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <micros>:

// Return system uptime in microseconds (rollover in 70minutes)

uint32_t micros(void)
{
 800b4e4:	b4b0      	push	{r4, r5, r7}
 800b4e6:	af00      	add	r7, sp, #0
	register uint32_t ms, cycle_cnt;

	do {
		ms = sysTickUptime;
 800b4e8:	4b0d      	ldr	r3, [pc, #52]	; (800b520 <micros+0x3c>)
 800b4ea:	681c      	ldr	r4, [r3, #0]
		cycle_cnt = SysTick->VAL;
 800b4ec:	4b0d      	ldr	r3, [pc, #52]	; (800b524 <micros+0x40>)
 800b4ee:	689d      	ldr	r5, [r3, #8]
	} while (ms != sysTickUptime);
 800b4f0:	4b0b      	ldr	r3, [pc, #44]	; (800b520 <micros+0x3c>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	429c      	cmp	r4, r3
 800b4f6:	d1f7      	bne.n	800b4e8 <micros+0x4>
	return (ms * 1000) + (usTicks * 1000 - cycle_cnt) / usTicks; //168
 800b4f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b4fc:	fb03 f204 	mul.w	r2, r3, r4
 800b500:	4b09      	ldr	r3, [pc, #36]	; (800b528 <micros+0x44>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800b508:	fb01 f303 	mul.w	r3, r1, r3
 800b50c:	1b59      	subs	r1, r3, r5
 800b50e:	4b06      	ldr	r3, [pc, #24]	; (800b528 <micros+0x44>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	fbb1 f3f3 	udiv	r3, r1, r3
 800b516:	4413      	add	r3, r2
}
 800b518:	4618      	mov	r0, r3
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bcb0      	pop	{r4, r5, r7}
 800b51e:	4770      	bx	lr
 800b520:	20000420 	.word	0x20000420
 800b524:	e000e010 	.word	0xe000e010
 800b528:	20000008 	.word	0x20000008

0800b52c <delayMicroseconds>:

void delayMicroseconds(uint32_t us)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b084      	sub	sp, #16
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
    uint32_t now = micros();
 800b534:	f7ff ffd6 	bl	800b4e4 <micros>
 800b538:	60f8      	str	r0, [r7, #12]
    while (micros() - now < us);
 800b53a:	bf00      	nop
 800b53c:	f7ff ffd2 	bl	800b4e4 <micros>
 800b540:	4602      	mov	r2, r0
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	1ad3      	subs	r3, r2, r3
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d8f7      	bhi.n	800b53c <delayMicroseconds+0x10>
}
 800b54c:	bf00      	nop
 800b54e:	bf00      	nop
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <__io_putchar>:

int __io_putchar(int ch)
{
 800b556:	b480      	push	{r7}
 800b558:	b083      	sub	sp, #12
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
  //uartWrite(_DEF_UART1, (uint8_t *)&ch, 1);
  return 1;
 800b55e:	2301      	movs	r3, #1
}
 800b560:	4618      	mov	r0, r3
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b082      	sub	sp, #8
 800b570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b572:	4b0f      	ldr	r3, [pc, #60]	; (800b5b0 <HAL_MspInit+0x44>)
 800b574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b576:	4a0e      	ldr	r2, [pc, #56]	; (800b5b0 <HAL_MspInit+0x44>)
 800b578:	f043 0301 	orr.w	r3, r3, #1
 800b57c:	6613      	str	r3, [r2, #96]	; 0x60
 800b57e:	4b0c      	ldr	r3, [pc, #48]	; (800b5b0 <HAL_MspInit+0x44>)
 800b580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b582:	f003 0301 	and.w	r3, r3, #1
 800b586:	607b      	str	r3, [r7, #4]
 800b588:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800b58a:	4b09      	ldr	r3, [pc, #36]	; (800b5b0 <HAL_MspInit+0x44>)
 800b58c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b58e:	4a08      	ldr	r2, [pc, #32]	; (800b5b0 <HAL_MspInit+0x44>)
 800b590:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b594:	6593      	str	r3, [r2, #88]	; 0x58
 800b596:	4b06      	ldr	r3, [pc, #24]	; (800b5b0 <HAL_MspInit+0x44>)
 800b598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b59a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b59e:	603b      	str	r3, [r7, #0]
 800b5a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800b5a2:	f7fa ffa9 	bl	80064f8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b5a6:	bf00      	nop
 800b5a8:	3708      	adds	r7, #8
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	40021000 	.word	0x40021000

0800b5b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800b5b4:	b480      	push	{r7}
 800b5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800b5b8:	e7fe      	b.n	800b5b8 <NMI_Handler+0x4>

0800b5ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800b5be:	e7fe      	b.n	800b5be <HardFault_Handler+0x4>

0800b5c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800b5c4:	e7fe      	b.n	800b5c4 <MemManage_Handler+0x4>

0800b5c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800b5ca:	e7fe      	b.n	800b5ca <BusFault_Handler+0x4>

0800b5cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800b5d0:	e7fe      	b.n	800b5d0 <UsageFault_Handler+0x4>

0800b5d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800b5d2:	b480      	push	{r7}
 800b5d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800b5d6:	bf00      	nop
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800b5e4:	bf00      	nop
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ec:	4770      	bx	lr

0800b5ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800b5ee:	b480      	push	{r7}
 800b5f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800b5f2:	bf00      	nop
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800b600:	f7f5 fd7a 	bl	80010f8 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 800b604:	f7f5 fea5 	bl	8001352 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800b608:	bf00      	nop
 800b60a:	bd80      	pop	{r7, pc}

0800b60c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800b610:	4802      	ldr	r0, [pc, #8]	; (800b61c <DMA1_Channel1_IRQHandler+0x10>)
 800b612:	f7f6 f888 	bl	8001726 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800b616:	bf00      	nop
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	20007c14 	.word	0x20007c14

0800b620 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800b624:	4802      	ldr	r0, [pc, #8]	; (800b630 <USB_LP_IRQHandler+0x10>)
 800b626:	f7f9 fa6e 	bl	8004b06 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800b62a:	bf00      	nop
 800b62c:	bd80      	pop	{r7, pc}
 800b62e:	bf00      	nop
 800b630:	20002b04 	.word	0x20002b04

0800b634 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800b634:	b480      	push	{r7}
 800b636:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_IRQn 0 */
  //HAL_SPI_IRQHandler(&hspi1);
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800b638:	bf00      	nop
 800b63a:	46bd      	mov	sp, r7
 800b63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b640:	4770      	bx	lr
	...

0800b644 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800b648:	4802      	ldr	r0, [pc, #8]	; (800b654 <USART2_IRQHandler+0x10>)
 800b64a:	f7fc f80b 	bl	8007664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800b64e:	bf00      	nop
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	20007b80 	.word	0x20007b80

0800b658 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800b65c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800b660:	f7f7 fb64 	bl	8002d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800b664:	bf00      	nop
 800b666:	bd80      	pop	{r7, pc}

0800b668 <QUADSPI_IRQHandler>:

/**
  * @brief This function handles QUADSPI global interrupt.
  */
void QUADSPI_IRQHandler(void)
{
 800b668:	b480      	push	{r7}
 800b66a:	af00      	add	r7, sp, #0
  /* USER CODE END QUADSPI_IRQn 0 */
  //HAL_QSPI_IRQHandler(&hqspi1);
  /* USER CODE BEGIN QUADSPI_IRQn 1 */

  /* USER CODE END QUADSPI_IRQn 1 */
}
 800b66c:	bf00      	nop
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800b676:	b480      	push	{r7}
 800b678:	af00      	add	r7, sp, #0
  return 1;
 800b67a:	2301      	movs	r3, #1
}
 800b67c:	4618      	mov	r0, r3
 800b67e:	46bd      	mov	sp, r7
 800b680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b684:	4770      	bx	lr

0800b686 <_kill>:

int _kill(int pid, int sig)
{
 800b686:	b580      	push	{r7, lr}
 800b688:	b082      	sub	sp, #8
 800b68a:	af00      	add	r7, sp, #0
 800b68c:	6078      	str	r0, [r7, #4]
 800b68e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800b690:	f008 fd5a 	bl	8014148 <__errno>
 800b694:	4603      	mov	r3, r0
 800b696:	2216      	movs	r2, #22
 800b698:	601a      	str	r2, [r3, #0]
  return -1;
 800b69a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b69e:	4618      	mov	r0, r3
 800b6a0:	3708      	adds	r7, #8
 800b6a2:	46bd      	mov	sp, r7
 800b6a4:	bd80      	pop	{r7, pc}

0800b6a6 <_exit>:

void _exit (int status)
{
 800b6a6:	b580      	push	{r7, lr}
 800b6a8:	b082      	sub	sp, #8
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800b6ae:	f04f 31ff 	mov.w	r1, #4294967295
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f7ff ffe7 	bl	800b686 <_kill>
  while (1) {}    /* Make sure we hang here */
 800b6b8:	e7fe      	b.n	800b6b8 <_exit+0x12>

0800b6ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b086      	sub	sp, #24
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	60f8      	str	r0, [r7, #12]
 800b6c2:	60b9      	str	r1, [r7, #8]
 800b6c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	617b      	str	r3, [r7, #20]
 800b6ca:	e00a      	b.n	800b6e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800b6cc:	f3af 8000 	nop.w
 800b6d0:	4601      	mov	r1, r0
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	1c5a      	adds	r2, r3, #1
 800b6d6:	60ba      	str	r2, [r7, #8]
 800b6d8:	b2ca      	uxtb	r2, r1
 800b6da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	617b      	str	r3, [r7, #20]
 800b6e2:	697a      	ldr	r2, [r7, #20]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	dbf0      	blt.n	800b6cc <_read+0x12>
  }

  return len;
 800b6ea:	687b      	ldr	r3, [r7, #4]
}
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	3718      	adds	r7, #24
 800b6f0:	46bd      	mov	sp, r7
 800b6f2:	bd80      	pop	{r7, pc}

0800b6f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	60f8      	str	r0, [r7, #12]
 800b6fc:	60b9      	str	r1, [r7, #8]
 800b6fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b700:	2300      	movs	r3, #0
 800b702:	617b      	str	r3, [r7, #20]
 800b704:	e009      	b.n	800b71a <_write+0x26>
  {
    __io_putchar(*ptr++);
 800b706:	68bb      	ldr	r3, [r7, #8]
 800b708:	1c5a      	adds	r2, r3, #1
 800b70a:	60ba      	str	r2, [r7, #8]
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	4618      	mov	r0, r3
 800b710:	f7ff ff21 	bl	800b556 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b714:	697b      	ldr	r3, [r7, #20]
 800b716:	3301      	adds	r3, #1
 800b718:	617b      	str	r3, [r7, #20]
 800b71a:	697a      	ldr	r2, [r7, #20]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	429a      	cmp	r2, r3
 800b720:	dbf1      	blt.n	800b706 <_write+0x12>
  }
  return len;
 800b722:	687b      	ldr	r3, [r7, #4]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3718      	adds	r7, #24
 800b728:	46bd      	mov	sp, r7
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <_close>:

int _close(int file)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800b734:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b738:	4618      	mov	r0, r3
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
 800b74c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800b74e:	683b      	ldr	r3, [r7, #0]
 800b750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b754:	605a      	str	r2, [r3, #4]
  return 0;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <_isatty>:

int _isatty(int file)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800b76c:	2301      	movs	r3, #1
}
 800b76e:	4618      	mov	r0, r3
 800b770:	370c      	adds	r7, #12
 800b772:	46bd      	mov	sp, r7
 800b774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b778:	4770      	bx	lr

0800b77a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800b77a:	b480      	push	{r7}
 800b77c:	b085      	sub	sp, #20
 800b77e:	af00      	add	r7, sp, #0
 800b780:	60f8      	str	r0, [r7, #12]
 800b782:	60b9      	str	r1, [r7, #8]
 800b784:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800b786:	2300      	movs	r3, #0
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b086      	sub	sp, #24
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800b79c:	4a14      	ldr	r2, [pc, #80]	; (800b7f0 <_sbrk+0x5c>)
 800b79e:	4b15      	ldr	r3, [pc, #84]	; (800b7f4 <_sbrk+0x60>)
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800b7a8:	4b13      	ldr	r3, [pc, #76]	; (800b7f8 <_sbrk+0x64>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d102      	bne.n	800b7b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800b7b0:	4b11      	ldr	r3, [pc, #68]	; (800b7f8 <_sbrk+0x64>)
 800b7b2:	4a12      	ldr	r2, [pc, #72]	; (800b7fc <_sbrk+0x68>)
 800b7b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800b7b6:	4b10      	ldr	r3, [pc, #64]	; (800b7f8 <_sbrk+0x64>)
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4413      	add	r3, r2
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	429a      	cmp	r2, r3
 800b7c2:	d207      	bcs.n	800b7d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800b7c4:	f008 fcc0 	bl	8014148 <__errno>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	220c      	movs	r2, #12
 800b7cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800b7ce:	f04f 33ff 	mov.w	r3, #4294967295
 800b7d2:	e009      	b.n	800b7e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800b7d4:	4b08      	ldr	r3, [pc, #32]	; (800b7f8 <_sbrk+0x64>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800b7da:	4b07      	ldr	r3, [pc, #28]	; (800b7f8 <_sbrk+0x64>)
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	4413      	add	r3, r2
 800b7e2:	4a05      	ldr	r2, [pc, #20]	; (800b7f8 <_sbrk+0x64>)
 800b7e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
}
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	3718      	adds	r7, #24
 800b7ec:	46bd      	mov	sp, r7
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	20020000 	.word	0x20020000
 800b7f4:	00000400 	.word	0x00000400
 800b7f8:	20000424 	.word	0x20000424
 800b7fc:	20008a10 	.word	0x20008a10

0800b800 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800b800:	b480      	push	{r7}
 800b802:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800b804:	4b06      	ldr	r3, [pc, #24]	; (800b820 <SystemInit+0x20>)
 800b806:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b80a:	4a05      	ldr	r2, [pc, #20]	; (800b820 <SystemInit+0x20>)
 800b80c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b810:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800b814:	bf00      	nop
 800b816:	46bd      	mov	sp, r7
 800b818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81c:	4770      	bx	lr
 800b81e:	bf00      	nop
 800b820:	e000ed00 	.word	0xe000ed00

0800b824 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800b828:	4b1b      	ldr	r3, [pc, #108]	; (800b898 <cliInit+0x74>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 800b82e:	4b1a      	ldr	r3, [pc, #104]	; (800b898 <cliInit+0x74>)
 800b830:	2200      	movs	r2, #0
 800b832:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 800b834:	4b18      	ldr	r3, [pc, #96]	; (800b898 <cliInit+0x74>)
 800b836:	2200      	movs	r2, #0
 800b838:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800b83a:	4b17      	ldr	r3, [pc, #92]	; (800b898 <cliInit+0x74>)
 800b83c:	2200      	movs	r2, #0
 800b83e:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 800b842:	4b15      	ldr	r3, [pc, #84]	; (800b898 <cliInit+0x74>)
 800b844:	2200      	movs	r2, #0
 800b846:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 800b84a:	4b13      	ldr	r3, [pc, #76]	; (800b898 <cliInit+0x74>)
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 800b852:	4b11      	ldr	r3, [pc, #68]	; (800b898 <cliInit+0x74>)
 800b854:	2200      	movs	r2, #0
 800b856:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800b85a:	4b0f      	ldr	r3, [pc, #60]	; (800b898 <cliInit+0x74>)
 800b85c:	4a0f      	ldr	r2, [pc, #60]	; (800b89c <cliInit+0x78>)
 800b85e:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 800b862:	4b0d      	ldr	r3, [pc, #52]	; (800b898 <cliInit+0x74>)
 800b864:	4a0e      	ldr	r2, [pc, #56]	; (800b8a0 <cliInit+0x7c>)
 800b866:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800b86a:	4b0b      	ldr	r3, [pc, #44]	; (800b898 <cliInit+0x74>)
 800b86c:	4a0d      	ldr	r2, [pc, #52]	; (800b8a4 <cliInit+0x80>)
 800b86e:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 800b872:	4b09      	ldr	r3, [pc, #36]	; (800b898 <cliInit+0x74>)
 800b874:	4a0c      	ldr	r2, [pc, #48]	; (800b8a8 <cliInit+0x84>)
 800b876:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0

  cliLineClean(&cli_node);
 800b87a:	4807      	ldr	r0, [pc, #28]	; (800b898 <cliInit+0x74>)
 800b87c:	f000 fb70 	bl	800bf60 <cliLineClean>


  cliAdd("help", cliShowList);
 800b880:	490a      	ldr	r1, [pc, #40]	; (800b8ac <cliInit+0x88>)
 800b882:	480b      	ldr	r0, [pc, #44]	; (800b8b0 <cliInit+0x8c>)
 800b884:	f000 fe2c 	bl	800c4e0 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 800b888:	490a      	ldr	r1, [pc, #40]	; (800b8b4 <cliInit+0x90>)
 800b88a:	480b      	ldr	r0, [pc, #44]	; (800b8b8 <cliInit+0x94>)
 800b88c:	f000 fe28 	bl	800c4e0 <cliAdd>

  return true;
 800b890:	2301      	movs	r3, #1
}
 800b892:	4618      	mov	r0, r3
 800b894:	bd80      	pop	{r7, pc}
 800b896:	bf00      	nop
 800b898:	20000428 	.word	0x20000428
 800b89c:	0800c371 	.word	0x0800c371
 800b8a0:	0800c3c1 	.word	0x0800c3c1
 800b8a4:	0800c419 	.word	0x0800c419
 800b8a8:	0800c461 	.word	0x0800c461
 800b8ac:	0800c575 	.word	0x0800c575
 800b8b0:	08016240 	.word	0x08016240
 800b8b4:	0800c5e5 	.word	0x0800c5e5
 800b8b8:	08016248 	.word	0x08016248

0800b8bc <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	6039      	str	r1, [r7, #0]
 800b8c6:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 800b8c8:	4a0a      	ldr	r2, [pc, #40]	; (800b8f4 <cliOpen+0x38>)
 800b8ca:	79fb      	ldrb	r3, [r7, #7]
 800b8cc:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 800b8ce:	4a09      	ldr	r2, [pc, #36]	; (800b8f4 <cliOpen+0x38>)
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 800b8d4:	79fb      	ldrb	r3, [r7, #7]
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f006 fe3d 	bl	8012558 <uartOpen>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	4b04      	ldr	r3, [pc, #16]	; (800b8f4 <cliOpen+0x38>)
 800b8e4:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 800b8e6:	4b03      	ldr	r3, [pc, #12]	; (800b8f4 <cliOpen+0x38>)
 800b8e8:	7a1b      	ldrb	r3, [r3, #8]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	20000428 	.word	0x20000428

0800b8f8 <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b084      	sub	sp, #16
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 800b900:	4b34      	ldr	r3, [pc, #208]	; (800b9d4 <cliShowLog+0xdc>)
 800b902:	7a5b      	ldrb	r3, [r3, #9]
 800b904:	2b00      	cmp	r3, #0
 800b906:	d061      	beq.n	800b9cc <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	7ad8      	ldrb	r0, [r3, #11]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800b912:	461a      	mov	r2, r3
 800b914:	4930      	ldr	r1, [pc, #192]	; (800b9d8 <cliShowLog+0xe0>)
 800b916:	f006 fffb 	bl	8012910 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	7ad8      	ldrb	r0, [r3, #11]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800b924:	461a      	mov	r2, r3
 800b926:	492d      	ldr	r1, [pc, #180]	; (800b9dc <cliShowLog+0xe4>)
 800b928:	f006 fff2 	bl	8012910 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	7ad8      	ldrb	r0, [r3, #11]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800b936:	461a      	mov	r2, r3
 800b938:	4929      	ldr	r1, [pc, #164]	; (800b9e0 <cliShowLog+0xe8>)
 800b93a:	f006 ffe9 	bl	8012910 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	7ad8      	ldrb	r0, [r3, #11]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800b948:	461a      	mov	r2, r3
 800b94a:	4926      	ldr	r1, [pc, #152]	; (800b9e4 <cliShowLog+0xec>)
 800b94c:	f006 ffe0 	bl	8012910 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	7ad8      	ldrb	r0, [r3, #11]
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800b95a:	461a      	mov	r2, r3
 800b95c:	4922      	ldr	r1, [pc, #136]	; (800b9e8 <cliShowLog+0xf0>)
 800b95e:	f006 ffd7 	bl	8012910 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	7ad8      	ldrb	r0, [r3, #11]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800b96c:	461a      	mov	r2, r3
 800b96e:	491f      	ldr	r1, [pc, #124]	; (800b9ec <cliShowLog+0xf4>)
 800b970:	f006 ffce 	bl	8012910 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	7ad8      	ldrb	r0, [r3, #11]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800b97e:	461a      	mov	r2, r3
 800b980:	491b      	ldr	r1, [pc, #108]	; (800b9f0 <cliShowLog+0xf8>)
 800b982:	f006 ffc5 	bl	8012910 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 800b986:	2300      	movs	r3, #0
 800b988:	60fb      	str	r3, [r7, #12]
 800b98a:	e012      	b.n	800b9b2 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	7ad8      	ldrb	r0, [r3, #11]
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	4613      	mov	r3, r2
 800b994:	009b      	lsls	r3, r3, #2
 800b996:	4413      	add	r3, r2
 800b998:	00da      	lsls	r2, r3, #3
 800b99a:	1ad2      	subs	r2, r2, r3
 800b99c:	f502 73cc 	add.w	r3, r2, #408	; 0x198
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	4913      	ldr	r1, [pc, #76]	; (800b9f4 <cliShowLog+0xfc>)
 800b9a8:	f006 ffb2 	bl	8012910 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	60fb      	str	r3, [r7, #12]
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800b9b8:	461a      	mov	r2, r3
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	4293      	cmp	r3, r2
 800b9be:	dbe5      	blt.n	800b98c <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	7adb      	ldrb	r3, [r3, #11]
 800b9c4:	490c      	ldr	r1, [pc, #48]	; (800b9f8 <cliShowLog+0x100>)
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f006 ffa2 	bl	8012910 <uartPrintf>
  }
}
 800b9cc:	bf00      	nop
 800b9ce:	3710      	adds	r7, #16
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	20000428 	.word	0x20000428
 800b9d8:	0801624c 	.word	0x0801624c
 800b9dc:	0801625c 	.word	0x0801625c
 800b9e0:	0801626c 	.word	0x0801626c
 800b9e4:	0801627c 	.word	0x0801627c
 800b9e8:	0801628c 	.word	0x0801628c
 800b9ec:	0801629c 	.word	0x0801629c
 800b9f0:	080162ac 	.word	0x080162ac
 800b9f4:	080162bc 	.word	0x080162bc
 800b9f8:	080162cc 	.word	0x080162cc

0800b9fc <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 800b9fc:	b580      	push	{r7, lr}
 800b9fe:	b082      	sub	sp, #8
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	4906      	ldr	r1, [pc, #24]	; (800ba24 <cliShowPrompt+0x28>)
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f006 ff80 	bl	8012910 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	781b      	ldrb	r3, [r3, #0]
 800ba14:	4904      	ldr	r1, [pc, #16]	; (800ba28 <cliShowPrompt+0x2c>)
 800ba16:	4618      	mov	r0, r3
 800ba18:	f006 ff7a 	bl	8012910 <uartPrintf>
}
 800ba1c:	bf00      	nop
 800ba1e:	3708      	adds	r7, #8
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}
 800ba24:	080162d0 	.word	0x080162d0
 800ba28:	080162d4 	.word	0x080162d4

0800ba2c <cliMain>:

bool cliMain(void)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 800ba30:	4b0e      	ldr	r3, [pc, #56]	; (800ba6c <cliMain+0x40>)
 800ba32:	7a1b      	ldrb	r3, [r3, #8]
 800ba34:	f083 0301 	eor.w	r3, r3, #1
 800ba38:	b2db      	uxtb	r3, r3
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <cliMain+0x16>
  {
    return false;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	e012      	b.n	800ba68 <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 800ba42:	4b0a      	ldr	r3, [pc, #40]	; (800ba6c <cliMain+0x40>)
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	4618      	mov	r0, r3
 800ba48:	f006 fed8 	bl	80127fc <uartAvailable>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d009      	beq.n	800ba66 <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 800ba52:	4b06      	ldr	r3, [pc, #24]	; (800ba6c <cliMain+0x40>)
 800ba54:	781b      	ldrb	r3, [r3, #0]
 800ba56:	4618      	mov	r0, r3
 800ba58:	f006 ff0c 	bl	8012874 <uartRead>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	4619      	mov	r1, r3
 800ba60:	4802      	ldr	r0, [pc, #8]	; (800ba6c <cliMain+0x40>)
 800ba62:	f000 f819 	bl	800ba98 <cliUpdate>
  }

  return true;
 800ba66:	2301      	movs	r3, #1
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	bd80      	pop	{r7, pc}
 800ba6c:	20000428 	.word	0x20000428

0800ba70 <cliWrite>:
{
  return uartRead(cli_node.ch);
}

uint32_t cliWrite(uint8_t *p_data, uint32_t length)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b082      	sub	sp, #8
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	6039      	str	r1, [r7, #0]
  return uartWrite(cli_node.ch, p_data, length);
 800ba7a:	4b06      	ldr	r3, [pc, #24]	; (800ba94 <cliWrite+0x24>)
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	683a      	ldr	r2, [r7, #0]
 800ba80:	6879      	ldr	r1, [r7, #4]
 800ba82:	4618      	mov	r0, r3
 800ba84:	f006 ff18 	bl	80128b8 <uartWrite>
 800ba88:	4603      	mov	r3, r0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3708      	adds	r7, #8
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	20000428 	.word	0x20000428

0800ba98 <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b08c      	sub	sp, #48	; 0x30
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
 800baa0:	460b      	mov	r3, r1
 800baa2:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 800baa4:	2300      	movs	r3, #0
 800baa6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800bab0:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	7c1b      	ldrb	r3, [r3, #16]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	f040 816d 	bne.w	800bd96 <cliUpdate+0x2fe>
  {
    switch(rx_data)
 800babc:	78fb      	ldrb	r3, [r7, #3]
 800babe:	2b7f      	cmp	r3, #127	; 0x7f
 800bac0:	d02a      	beq.n	800bb18 <cliUpdate+0x80>
 800bac2:	2b7f      	cmp	r3, #127	; 0x7f
 800bac4:	f300 80da 	bgt.w	800bc7c <cliUpdate+0x1e4>
 800bac8:	2b1b      	cmp	r3, #27
 800baca:	d021      	beq.n	800bb10 <cliUpdate+0x78>
 800bacc:	2b1b      	cmp	r3, #27
 800bace:	f300 80d5 	bgt.w	800bc7c <cliUpdate+0x1e4>
 800bad2:	2b08      	cmp	r3, #8
 800bad4:	d062      	beq.n	800bb9c <cliUpdate+0x104>
 800bad6:	2b0d      	cmp	r3, #13
 800bad8:	f040 80d0 	bne.w	800bc7c <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:

      	if (line->count > 0)
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d005      	beq.n	800baf2 <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 fa54 	bl	800bf94 <cliLineAdd>
          cliRunCmd(p_cli);
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f000 fb3f 	bl	800c170 <cliRunCmd>
        }

        line->count = 0;
 800baf2:	69fb      	ldr	r3, [r7, #28]
 800baf4:	2200      	movs	r2, #0
 800baf6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        line->cursor = 0;
 800bafa:	69fb      	ldr	r3, [r7, #28]
 800bafc:	2200      	movs	r2, #0
 800bafe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        line->buf[0] = 0;
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	2200      	movs	r2, #0
 800bb06:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7ff ff77 	bl	800b9fc <cliShowPrompt>
        break;
 800bb0e:	e142      	b.n	800bd96 <cliUpdate+0x2fe>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2201      	movs	r2, #1
 800bb14:	741a      	strb	r2, [r3, #16]
        break;
 800bb16:	e13e      	b.n	800bd96 <cliUpdate+0x2fe>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800bb1e:	69fb      	ldr	r3, [r7, #28]
 800bb20:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bb24:	429a      	cmp	r2, r3
 800bb26:	f080 8131 	bcs.w	800bd8c <cliUpdate+0x2f4>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bb36:	1ad3      	subs	r3, r2, r3
 800bb38:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 800bb3a:	2301      	movs	r3, #1
 800bb3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb3e:	e013      	b.n	800bb68 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bb46:	461a      	mov	r2, r3
 800bb48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb4a:	441a      	add	r2, r3
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bb52:	4619      	mov	r1, r3
 800bb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb56:	440b      	add	r3, r1
 800bb58:	3b01      	subs	r3, #1
 800bb5a:	69f9      	ldr	r1, [r7, #28]
 800bb5c:	5c89      	ldrb	r1, [r1, r2]
 800bb5e:	69fa      	ldr	r2, [r7, #28]
 800bb60:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 800bb62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb64:	3301      	adds	r3, #1
 800bb66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bb68:	7efb      	ldrb	r3, [r7, #27]
 800bb6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb6c:	429a      	cmp	r2, r3
 800bb6e:	dbe7      	blt.n	800bb40 <cliUpdate+0xa8>
          }

          line->count--;
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bb76:	3b01      	subs	r3, #1
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          line->buf[line->count] = 0;
 800bb80:	69fb      	ldr	r3, [r7, #28]
 800bb82:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bb86:	461a      	mov	r2, r3
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	2100      	movs	r1, #0
 800bb8c:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	498d      	ldr	r1, [pc, #564]	; (800bdc8 <cliUpdate+0x330>)
 800bb94:	4618      	mov	r0, r3
 800bb96:	f006 febb 	bl	8012910 <uartPrintf>
        }
        break;
 800bb9a:	e0f7      	b.n	800bd8c <cliUpdate+0x2f4>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 800bb9c:	69fb      	ldr	r3, [r7, #28]
 800bb9e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d055      	beq.n	800bc52 <cliUpdate+0x1ba>
 800bba6:	69fb      	ldr	r3, [r7, #28]
 800bba8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d050      	beq.n	800bc52 <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 800bbb0:	69fb      	ldr	r3, [r7, #28]
 800bbb2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800bbb6:	69fb      	ldr	r3, [r7, #28]
 800bbb8:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	d10e      	bne.n	800bbde <cliUpdate+0x146>
          {
            line->count--;
 800bbc0:	69fb      	ldr	r3, [r7, #28]
 800bbc2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bbc6:	3b01      	subs	r3, #1
 800bbc8:	b2da      	uxtb	r2, r3
 800bbca:	69fb      	ldr	r3, [r7, #28]
 800bbcc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	69fb      	ldr	r3, [r7, #28]
 800bbda:	2100      	movs	r1, #0
 800bbdc:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 800bbde:	69fb      	ldr	r3, [r7, #28]
 800bbe0:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800bbe4:	69fb      	ldr	r3, [r7, #28]
 800bbe6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d231      	bcs.n	800bc52 <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bbfa:	1ad3      	subs	r3, r2, r3
 800bbfc:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 800bbfe:	2300      	movs	r3, #0
 800bc00:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc02:	e013      	b.n	800bc2c <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800bc04:	69fb      	ldr	r3, [r7, #28]
 800bc06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0e:	441a      	add	r2, r3
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bc16:	4619      	mov	r1, r3
 800bc18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc1a:	440b      	add	r3, r1
 800bc1c:	3b01      	subs	r3, #1
 800bc1e:	69f9      	ldr	r1, [r7, #28]
 800bc20:	5c89      	ldrb	r1, [r1, r2]
 800bc22:	69fa      	ldr	r2, [r7, #28]
 800bc24:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800bc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc28:	3301      	adds	r3, #1
 800bc2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800bc2c:	7ebb      	ldrb	r3, [r7, #26]
 800bc2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bc30:	429a      	cmp	r2, r3
 800bc32:	dbe7      	blt.n	800bc04 <cliUpdate+0x16c>
            }

            line->count--;
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	b2da      	uxtb	r2, r3
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bc4a:	461a      	mov	r2, r3
 800bc4c:	69fb      	ldr	r3, [r7, #28]
 800bc4e:	2100      	movs	r1, #0
 800bc50:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 800bc52:	69fb      	ldr	r3, [r7, #28]
 800bc54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f000 8099 	beq.w	800bd90 <cliUpdate+0x2f8>
        {
          line->cursor--;
 800bc5e:	69fb      	ldr	r3, [r7, #28]
 800bc60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bc64:	3b01      	subs	r3, #1
 800bc66:	b2da      	uxtb	r2, r3
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	4956      	ldr	r1, [pc, #344]	; (800bdcc <cliUpdate+0x334>)
 800bc74:	4618      	mov	r0, r3
 800bc76:	f006 fe4b 	bl	8012910 <uartPrintf>
        }
        break;
 800bc7a:	e089      	b.n	800bd90 <cliUpdate+0x2f8>


      default:
        if ((line->count + 1) < line->buf_len)
 800bc7c:	69fb      	ldr	r3, [r7, #28]
 800bc7e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bc82:	3301      	adds	r3, #1
 800bc84:	69fa      	ldr	r2, [r7, #28]
 800bc86:	f892 2020 	ldrb.w	r2, [r2, #32]
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	f280 8082 	bge.w	800bd94 <cliUpdate+0x2fc>
        {
          if (line->cursor == line->count)
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	d124      	bne.n	800bcea <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	1cf9      	adds	r1, r7, #3
 800bca6:	2201      	movs	r2, #1
 800bca8:	4618      	mov	r0, r3
 800bcaa:	f006 fe05 	bl	80128b8 <uartWrite>

            line->buf[line->cursor] = rx_data;
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	78f9      	ldrb	r1, [r7, #3]
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	5499      	strb	r1, [r3, r2]
            line->count++;
 800bcbc:	69fb      	ldr	r3, [r7, #28]
 800bcbe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	b2da      	uxtb	r2, r3
 800bcc6:	69fb      	ldr	r3, [r7, #28]
 800bcc8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 800bccc:	69fb      	ldr	r3, [r7, #28]
 800bcce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 800bcdc:	69fb      	ldr	r3, [r7, #28]
 800bcde:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bce2:	461a      	mov	r2, r3
 800bce4:	69fb      	ldr	r3, [r7, #28]
 800bce6:	2100      	movs	r1, #0
 800bce8:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 800bcea:	69fb      	ldr	r3, [r7, #28]
 800bcec:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800bcf0:	69fb      	ldr	r3, [r7, #28]
 800bcf2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d24c      	bcs.n	800bd94 <cliUpdate+0x2fc>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bd06:	1ad3      	subs	r3, r2, r3
 800bd08:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	627b      	str	r3, [r7, #36]	; 0x24
 800bd0e:	e013      	b.n	800bd38 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 800bd10:	69fb      	ldr	r3, [r7, #28]
 800bd12:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bd16:	461a      	mov	r2, r3
 800bd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	1e5a      	subs	r2, r3, #1
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bd24:	4619      	mov	r1, r3
 800bd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd28:	1acb      	subs	r3, r1, r3
 800bd2a:	69f9      	ldr	r1, [r7, #28]
 800bd2c:	5c89      	ldrb	r1, [r1, r2]
 800bd2e:	69fa      	ldr	r2, [r7, #28]
 800bd30:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 800bd32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd34:	3301      	adds	r3, #1
 800bd36:	627b      	str	r3, [r7, #36]	; 0x24
 800bd38:	7e7b      	ldrb	r3, [r7, #25]
 800bd3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	dbe7      	blt.n	800bd10 <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bd46:	461a      	mov	r2, r3
 800bd48:	78f9      	ldrb	r1, [r7, #3]
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	5499      	strb	r1, [r3, r2]
            line->count++;
 800bd4e:	69fb      	ldr	r3, [r7, #28]
 800bd50:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bd54:	3301      	adds	r3, #1
 800bd56:	b2da      	uxtb	r2, r3
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bd64:	3301      	adds	r3, #1
 800bd66:	b2da      	uxtb	r2, r3
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 800bd6e:	69fb      	ldr	r3, [r7, #28]
 800bd70:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bd74:	461a      	mov	r2, r3
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	2100      	movs	r1, #0
 800bd7a:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	781b      	ldrb	r3, [r3, #0]
 800bd80:	78fa      	ldrb	r2, [r7, #3]
 800bd82:	4913      	ldr	r1, [pc, #76]	; (800bdd0 <cliUpdate+0x338>)
 800bd84:	4618      	mov	r0, r3
 800bd86:	f006 fdc3 	bl	8012910 <uartPrintf>
          }
        }
        break;
 800bd8a:	e003      	b.n	800bd94 <cliUpdate+0x2fc>
        break;
 800bd8c:	bf00      	nop
 800bd8e:	e002      	b.n	800bd96 <cliUpdate+0x2fe>
        break;
 800bd90:	bf00      	nop
 800bd92:	e000      	b.n	800bd96 <cliUpdate+0x2fe>
        break;
 800bd94:	bf00      	nop
    }
  }

  switch(p_cli->state)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	7c1b      	ldrb	r3, [r3, #16]
 800bd9a:	3b01      	subs	r3, #1
 800bd9c:	2b03      	cmp	r3, #3
 800bd9e:	f200 80d2 	bhi.w	800bf46 <cliUpdate+0x4ae>
 800bda2:	a201      	add	r2, pc, #4	; (adr r2, 800bda8 <cliUpdate+0x310>)
 800bda4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bda8:	0800bdb9 	.word	0x0800bdb9
 800bdac:	0800bdc1 	.word	0x0800bdc1
 800bdb0:	0800bdd5 	.word	0x0800bdd5
 800bdb4:	0800bf3d 	.word	0x0800bf3d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2202      	movs	r2, #2
 800bdbc:	741a      	strb	r2, [r3, #16]
      break;
 800bdbe:	e0c2      	b.n	800bf46 <cliUpdate+0x4ae>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2203      	movs	r2, #3
 800bdc4:	741a      	strb	r2, [r3, #16]
      break;
 800bdc6:	e0be      	b.n	800bf46 <cliUpdate+0x4ae>
 800bdc8:	080162dc 	.word	0x080162dc
 800bdcc:	080162e4 	.word	0x080162e4
 800bdd0:	080162ec 	.word	0x080162ec

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 800bdda:	78fb      	ldrb	r3, [r7, #3]
 800bddc:	2b44      	cmp	r3, #68	; 0x44
 800bdde:	d11a      	bne.n	800be16 <cliUpdate+0x37e>
      {
        if (line->cursor > 0)
 800bde0:	69fb      	ldr	r3, [r7, #28]
 800bde2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d015      	beq.n	800be16 <cliUpdate+0x37e>
        {
          line->cursor--;
 800bdea:	69fb      	ldr	r3, [r7, #28]
 800bdec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bdf0:	3b01      	subs	r3, #1
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 800bdfa:	231b      	movs	r3, #27
 800bdfc:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800bdfe:	235b      	movs	r3, #91	; 0x5b
 800be00:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800be02:	78fb      	ldrb	r3, [r7, #3]
 800be04:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	f107 010c 	add.w	r1, r7, #12
 800be0e:	2203      	movs	r2, #3
 800be10:	4618      	mov	r0, r3
 800be12:	f006 fd51 	bl	80128b8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 800be16:	78fb      	ldrb	r3, [r7, #3]
 800be18:	2b43      	cmp	r3, #67	; 0x43
 800be1a:	d11d      	bne.n	800be58 <cliUpdate+0x3c0>
      {
        if (line->cursor < line->buf_len)
 800be1c:	69fb      	ldr	r3, [r7, #28]
 800be1e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800be22:	69fb      	ldr	r3, [r7, #28]
 800be24:	f893 3020 	ldrb.w	r3, [r3, #32]
 800be28:	429a      	cmp	r2, r3
 800be2a:	d215      	bcs.n	800be58 <cliUpdate+0x3c0>
        {
          line->cursor++;
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800be32:	3301      	adds	r3, #1
 800be34:	b2da      	uxtb	r2, r3
 800be36:	69fb      	ldr	r3, [r7, #28]
 800be38:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 800be3c:	231b      	movs	r3, #27
 800be3e:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 800be40:	235b      	movs	r3, #91	; 0x5b
 800be42:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 800be44:	78fb      	ldrb	r3, [r7, #3]
 800be46:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	f107 010c 	add.w	r1, r7, #12
 800be50:	2203      	movs	r2, #3
 800be52:	4618      	mov	r0, r3
 800be54:	f006 fd30 	bl	80128b8 <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 800be58:	78fb      	ldrb	r3, [r7, #3]
 800be5a:	2b41      	cmp	r3, #65	; 0x41
 800be5c:	d10c      	bne.n	800be78 <cliUpdate+0x3e0>
      {
        cliLineChange(p_cli, true);
 800be5e:	2101      	movs	r1, #1
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f000 f8eb 	bl	800c03c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	781a      	ldrb	r2, [r3, #0]
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800be70:	4619      	mov	r1, r3
 800be72:	4610      	mov	r0, r2
 800be74:	f006 fd4c 	bl	8012910 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 800be78:	78fb      	ldrb	r3, [r7, #3]
 800be7a:	2b42      	cmp	r3, #66	; 0x42
 800be7c:	d10c      	bne.n	800be98 <cliUpdate+0x400>
      {
        cliLineChange(p_cli, false);
 800be7e:	2100      	movs	r1, #0
 800be80:	6878      	ldr	r0, [r7, #4]
 800be82:	f000 f8db 	bl	800c03c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	781a      	ldrb	r2, [r3, #0]
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800be90:	4619      	mov	r1, r3
 800be92:	4610      	mov	r0, r2
 800be94:	f006 fd3c 	bl	8012910 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 800be98:	78fb      	ldrb	r3, [r7, #3]
 800be9a:	2b31      	cmp	r3, #49	; 0x31
 800be9c:	d10f      	bne.n	800bebe <cliUpdate+0x426>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	7818      	ldrb	r0, [r3, #0]
 800bea2:	69fb      	ldr	r3, [r7, #28]
 800bea4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bea8:	461a      	mov	r2, r3
 800beaa:	492b      	ldr	r1, [pc, #172]	; (800bf58 <cliUpdate+0x4c0>)
 800beac:	f006 fd30 	bl	8012910 <uartPrintf>
        line->cursor = 0;
 800beb0:	69fb      	ldr	r3, [r7, #28]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        p_cli->state = CLI_RX_SP4;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2204      	movs	r2, #4
 800bebc:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 800bebe:	78fb      	ldrb	r3, [r7, #3]
 800bec0:	2b34      	cmp	r3, #52	; 0x34
 800bec2:	d13f      	bne.n	800bf44 <cliUpdate+0x4ac>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 800bec4:	69fb      	ldr	r3, [r7, #28]
 800bec6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d210      	bcs.n	800bef6 <cliUpdate+0x45e>
        {
          mov_len = line->count - line->cursor;
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800beda:	b29a      	uxth	r2, r3
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bee2:	b29b      	uxth	r3, r3
 800bee4:	1ad3      	subs	r3, r2, r3
 800bee6:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	8afa      	ldrh	r2, [r7, #22]
 800beee:	491b      	ldr	r1, [pc, #108]	; (800bf5c <cliUpdate+0x4c4>)
 800bef0:	4618      	mov	r0, r3
 800bef2:	f006 fd0d 	bl	8012910 <uartPrintf>
        }
        if (line->cursor > line->count)
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d910      	bls.n	800bf28 <cliUpdate+0x490>
        {
          mov_len = line->cursor - line->count;
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800bf0c:	b29a      	uxth	r2, r3
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800bf14:	b29b      	uxth	r3, r3
 800bf16:	1ad3      	subs	r3, r2, r3
 800bf18:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	8afa      	ldrh	r2, [r7, #22]
 800bf20:	490d      	ldr	r1, [pc, #52]	; (800bf58 <cliUpdate+0x4c0>)
 800bf22:	4618      	mov	r0, r3
 800bf24:	f006 fcf4 	bl	8012910 <uartPrintf>
        }
        line->cursor = line->count;
 800bf28:	69fb      	ldr	r3, [r7, #28]
 800bf2a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        p_cli->state = CLI_RX_SP4;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2204      	movs	r2, #4
 800bf38:	741a      	strb	r2, [r3, #16]
      }
      break;
 800bf3a:	e003      	b.n	800bf44 <cliUpdate+0x4ac>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	2200      	movs	r2, #0
 800bf40:	741a      	strb	r2, [r3, #16]
      break;
 800bf42:	e000      	b.n	800bf46 <cliUpdate+0x4ae>
      break;
 800bf44:	bf00      	nop
  }



  cliShowLog(p_cli);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f7ff fcd6 	bl	800b8f8 <cliShowLog>

  return ret;
 800bf4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3730      	adds	r7, #48	; 0x30
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}
 800bf58:	080162f8 	.word	0x080162f8
 800bf5c:	08016300 	.word	0x08016300

0800bf60 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 800bf60:	b480      	push	{r7}
 800bf62:	b083      	sub	sp, #12
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  p_cli->line.cursor  = 0;
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	221f      	movs	r2, #31
 800bf7c:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  p_cli->line.buf[0]  = 0;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
}
 800bf88:	bf00      	nop
 800bf8a:	370c      	adds	r7, #12
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr

0800bf94 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 800bf94:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	6879      	ldr	r1, [r7, #4]
 800bfa6:	4613      	mov	r3, r2
 800bfa8:	009b      	lsls	r3, r3, #2
 800bfaa:	4413      	add	r3, r2
 800bfac:	00da      	lsls	r2, r3, #3
 800bfae:	1ad2      	subs	r2, r2, r3
 800bfb0:	188b      	adds	r3, r1, r2
 800bfb2:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	f503 7409 	add.w	r4, r3, #548	; 0x224
 800bfbc:	4694      	mov	ip, r2
 800bfbe:	f104 0e20 	add.w	lr, r4, #32
 800bfc2:	4665      	mov	r5, ip
 800bfc4:	4626      	mov	r6, r4
 800bfc6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800bfc8:	6028      	str	r0, [r5, #0]
 800bfca:	6069      	str	r1, [r5, #4]
 800bfcc:	60aa      	str	r2, [r5, #8]
 800bfce:	60eb      	str	r3, [r5, #12]
 800bfd0:	3410      	adds	r4, #16
 800bfd2:	f10c 0c10 	add.w	ip, ip, #16
 800bfd6:	4574      	cmp	r4, lr
 800bfd8:	d1f3      	bne.n	800bfc2 <cliLineAdd+0x2e>
 800bfda:	4663      	mov	r3, ip
 800bfdc:	4622      	mov	r2, r4
 800bfde:	8811      	ldrh	r1, [r2, #0]
 800bfe0:	7892      	ldrb	r2, [r2, #2]
 800bfe2:	8019      	strh	r1, [r3, #0]
 800bfe4:	709a      	strb	r2, [r3, #2]

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800bfec:	2b03      	cmp	r3, #3
 800bfee:	d807      	bhi.n	800c000 <cliLineAdd+0x6c>
  {
    p_cli->hist_line_count++;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800bff6:	3301      	adds	r3, #1
 800bff8:	b2da      	uxtb	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800c006:	b25a      	sxtb	r2, r3
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800c014:	3301      	adds	r3, #1
 800c016:	425a      	negs	r2, r3
 800c018:	f003 0303 	and.w	r3, r3, #3
 800c01c:	f002 0203 	and.w	r2, r2, #3
 800c020:	bf58      	it	pl
 800c022:	4253      	negpl	r3, r2
 800c024:	b2da      	uxtb	r2, r3
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 800c034:	bf00      	nop
 800c036:	370c      	adds	r7, #12
 800c038:	46bd      	mov	sp, r7
 800c03a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c03c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 800c03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c03e:	b085      	sub	sp, #20
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	460b      	mov	r3, r1
 800c046:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800c04e:	2b00      	cmp	r3, #0
 800c050:	f000 8086 	beq.w	800c160 <cliLineChange+0x124>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d008      	beq.n	800c070 <cliLineChange+0x34>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	7818      	ldrb	r0, [r3, #0]
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 800c068:	461a      	mov	r2, r3
 800c06a:	493f      	ldr	r1, [pc, #252]	; (800c168 <cliLineChange+0x12c>)
 800c06c:	f006 fc50 	bl	8012910 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800c076:	2b00      	cmp	r3, #0
 800c078:	d008      	beq.n	800c08c <cliLineChange+0x50>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	7818      	ldrb	r0, [r3, #0]
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 800c084:	461a      	mov	r2, r3
 800c086:	4939      	ldr	r1, [pc, #228]	; (800c16c <cliLineChange+0x130>)
 800c088:	f006 fc42 	bl	8012910 <uartPrintf>
  }


  if (key_up == true)
 800c08c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d125      	bne.n	800c0e0 <cliLineChange+0xa4>
  {
    if (p_cli->hist_line_new == true)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d006      	beq.n	800c0ac <cliLineChange+0x70>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 800c0a4:	b25a      	sxtb	r2, r3
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800c0b2:	461a      	mov	r2, r3
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 800c0ba:	4413      	add	r3, r2
 800c0bc:	3b01      	subs	r3, #1
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800c0c4:	fb93 f1f2 	sdiv	r1, r3, r2
 800c0c8:	fb01 f202 	mul.w	r2, r1, r2
 800c0cc:	1a9b      	subs	r3, r3, r2
 800c0ce:	b25a      	sxtb	r2, r3
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800c0dc:	73fb      	strb	r3, [r7, #15]
 800c0de:	e013      	b.n	800c108 <cliLineChange+0xcc>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800c0e6:	3301      	adds	r3, #1
 800c0e8:	687a      	ldr	r2, [r7, #4]
 800c0ea:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 800c0ee:	fb93 f1f2 	sdiv	r1, r3, r2
 800c0f2:	fb01 f202 	mul.w	r2, r1, r2
 800c0f6:	1a9b      	subs	r3, r3, r2
 800c0f8:	b25a      	sxtb	r2, r3
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800c106:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 800c108:	7bfa      	ldrb	r2, [r7, #15]
 800c10a:	6879      	ldr	r1, [r7, #4]
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	4613      	mov	r3, r2
 800c110:	009b      	lsls	r3, r3, #2
 800c112:	4413      	add	r3, r2
 800c114:	00da      	lsls	r2, r3, #3
 800c116:	1ad2      	subs	r2, r2, r3
 800c118:	1883      	adds	r3, r0, r2
 800c11a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800c11e:	461c      	mov	r4, r3
 800c120:	f501 7609 	add.w	r6, r1, #548	; 0x224
 800c124:	f104 0c20 	add.w	ip, r4, #32
 800c128:	4635      	mov	r5, r6
 800c12a:	4623      	mov	r3, r4
 800c12c:	6818      	ldr	r0, [r3, #0]
 800c12e:	6859      	ldr	r1, [r3, #4]
 800c130:	689a      	ldr	r2, [r3, #8]
 800c132:	68db      	ldr	r3, [r3, #12]
 800c134:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c136:	3410      	adds	r4, #16
 800c138:	3610      	adds	r6, #16
 800c13a:	4564      	cmp	r4, ip
 800c13c:	d1f4      	bne.n	800c128 <cliLineChange+0xec>
 800c13e:	4633      	mov	r3, r6
 800c140:	4622      	mov	r2, r4
 800c142:	8811      	ldrh	r1, [r2, #0]
 800c144:	7892      	ldrb	r2, [r2, #2]
 800c146:	8019      	strh	r1, [r3, #0]
 800c148:	709a      	strb	r2, [r3, #2]
  p_cli->line.cursor = p_cli->line.count;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	f893 2246 	ldrb.w	r2, [r3, #582]	; 0x246
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

  p_cli->hist_line_new = false;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 800c15e:	e000      	b.n	800c162 <cliLineChange+0x126>
    return;
 800c160:	bf00      	nop
}
 800c162:	3714      	adds	r7, #20
 800c164:	46bd      	mov	sp, r7
 800c166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c168:	080162f8 	.word	0x080162f8
 800c16c:	08016308 	.word	0x08016308

0800c170 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b084      	sub	sp, #16
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800c178:	2300      	movs	r3, #0
 800c17a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 f857 	bl	800c230 <cliParseArgs>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d04c      	beq.n	800c222 <cliRunCmd+0xb2>
  {
    cliPrintf("\r\n");
 800c188:	4828      	ldr	r0, [pc, #160]	; (800c22c <cliRunCmd+0xbc>)
 800c18a:	f000 f899 	bl	800c2c0 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800c194:	4618      	mov	r0, r3
 800c196:	f000 f8b7 	bl	800c308 <cliToUpper>

    p_cli->is_busy = true;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2201      	movs	r2, #1
 800c19e:	729a      	strb	r2, [r3, #10]
    for (int i=0; i<p_cli->cmd_count; i++)
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	60fb      	str	r3, [r7, #12]
 800c1a4:	e033      	b.n	800c20e <cliRunCmd+0x9e>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	4613      	mov	r3, r2
 800c1b0:	009b      	lsls	r3, r3, #2
 800c1b2:	4413      	add	r3, r2
 800c1b4:	009b      	lsls	r3, r3, #2
 800c1b6:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	4413      	add	r3, r2
 800c1be:	3304      	adds	r3, #4
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	f7f4 f82d 	bl	8000220 <strcmp>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d11d      	bne.n	800c208 <cliRunCmd+0x98>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8b3 3110 	ldrh.w	r3, [r3, #272]	; 0x110
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	b29a      	uxth	r2, r3
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	f503 728c 	add.w	r2, r3, #280	; 0x118
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 800c1e8:	6879      	ldr	r1, [r7, #4]
 800c1ea:	68fa      	ldr	r2, [r7, #12]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	440b      	add	r3, r1
 800c1f6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	f502 7263 	add.w	r2, r2, #908	; 0x38c
 800c202:	4610      	mov	r0, r2
 800c204:	4798      	blx	r3
        break;
 800c206:	e009      	b.n	800c21c <cliRunCmd+0xac>
    for (int i=0; i<p_cli->cmd_count; i++)
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	3301      	adds	r3, #1
 800c20c:	60fb      	str	r3, [r7, #12]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800c214:	461a      	mov	r2, r3
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	4293      	cmp	r3, r2
 800c21a:	dbc4      	blt.n	800c1a6 <cliRunCmd+0x36>
      }
    }
    p_cli->is_busy = false;
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2200      	movs	r2, #0
 800c220:	729a      	strb	r2, [r3, #10]
  }

  return ret;
 800c222:	7afb      	ldrb	r3, [r7, #11]
}
 800c224:	4618      	mov	r0, r3
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}
 800c22c:	08016310 	.word	0x08016310

0800c230 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b088      	sub	sp, #32
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800c238:	2300      	movs	r3, #0
 800c23a:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 800c23c:	2300      	movs	r3, #0
 800c23e:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  cmdline = (char *)p_cli->line.buf;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800c24e:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800c256:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800c258:	8afb      	ldrh	r3, [r7, #22]
 800c25a:	009b      	lsls	r3, r3, #2
 800c25c:	68fa      	ldr	r2, [r7, #12]
 800c25e:	4413      	add	r3, r2
 800c260:	2200      	movs	r2, #0
 800c262:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800c264:	4b15      	ldr	r3, [pc, #84]	; (800c2bc <cliParseArgs+0x8c>)
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	f107 0208 	add.w	r2, r7, #8
 800c26c:	4619      	mov	r1, r3
 800c26e:	6938      	ldr	r0, [r7, #16]
 800c270:	f007 ff20 	bl	80140b4 <strtok_r>
 800c274:	61b8      	str	r0, [r7, #24]
 800c276:	e010      	b.n	800c29a <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 800c278:	8afb      	ldrh	r3, [r7, #22]
 800c27a:	1c5a      	adds	r2, r3, #1
 800c27c:	82fa      	strh	r2, [r7, #22]
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	4413      	add	r3, r2
 800c284:	69ba      	ldr	r2, [r7, #24]
 800c286:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800c288:	4b0c      	ldr	r3, [pc, #48]	; (800c2bc <cliParseArgs+0x8c>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f107 0208 	add.w	r2, r7, #8
 800c290:	4619      	mov	r1, r3
 800c292:	2000      	movs	r0, #0
 800c294:	f007 ff0e 	bl	80140b4 <strtok_r>
 800c298:	61b8      	str	r0, [r7, #24]
 800c29a:	69bb      	ldr	r3, [r7, #24]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1eb      	bne.n	800c278 <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	8afa      	ldrh	r2, [r7, #22]
 800c2a4:	f8a3 2110 	strh.w	r2, [r3, #272]	; 0x110

  if (argc > 0)
 800c2a8:	8afb      	ldrh	r3, [r7, #22]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <cliParseArgs+0x82>
  {
    ret = true;
 800c2ae:	2301      	movs	r3, #1
 800c2b0:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 800c2b2:	7ffb      	ldrb	r3, [r7, #31]
}
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	3720      	adds	r7, #32
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	bd80      	pop	{r7, pc}
 800c2bc:	20000010 	.word	0x20000010

0800c2c0 <cliPrintf>:

  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 800c2c0:	b40f      	push	{r0, r1, r2, r3}
 800c2c2:	b580      	push	{r7, lr}
 800c2c4:	b084      	sub	sp, #16
 800c2c6:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 800c2c8:	f107 031c 	add.w	r3, r7, #28
 800c2cc:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 800c2ce:	4b0d      	ldr	r3, [pc, #52]	; (800c304 <cliPrintf+0x44>)
 800c2d0:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 255, fmt, arg);
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	f103 0011 	add.w	r0, r3, #17
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	69ba      	ldr	r2, [r7, #24]
 800c2dc:	21ff      	movs	r1, #255	; 0xff
 800c2de:	f007 fe99 	bl	8014014 <vsniprintf>
 800c2e2:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	7818      	ldrb	r0, [r3, #0]
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	3311      	adds	r3, #17
 800c2ec:	68ba      	ldr	r2, [r7, #8]
 800c2ee:	4619      	mov	r1, r3
 800c2f0:	f006 fae2 	bl	80128b8 <uartWrite>
}
 800c2f4:	bf00      	nop
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c2fe:	b004      	add	sp, #16
 800c300:	4770      	bx	lr
 800c302:	bf00      	nop
 800c304:	20000428 	.word	0x20000428

0800c308 <cliToUpper>:

  uartWrite(p_cli->ch, &data, 1);
}

void cliToUpper(char *str)
{
 800c308:	b480      	push	{r7}
 800c30a:	b085      	sub	sp, #20
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800c310:	2300      	movs	r3, #0
 800c312:	81fb      	strh	r3, [r7, #14]
 800c314:	e018      	b.n	800c348 <cliToUpper+0x40>
  {
    str_ch = str[i];
 800c316:	89fb      	ldrh	r3, [r7, #14]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	4413      	add	r3, r2
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 800c320:	7b7b      	ldrb	r3, [r7, #13]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d014      	beq.n	800c350 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800c326:	7b7b      	ldrb	r3, [r7, #13]
 800c328:	2b60      	cmp	r3, #96	; 0x60
 800c32a:	d905      	bls.n	800c338 <cliToUpper+0x30>
 800c32c:	7b7b      	ldrb	r3, [r7, #13]
 800c32e:	2b7a      	cmp	r3, #122	; 0x7a
 800c330:	d802      	bhi.n	800c338 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 800c332:	7b7b      	ldrb	r3, [r7, #13]
 800c334:	3b20      	subs	r3, #32
 800c336:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 800c338:	89fb      	ldrh	r3, [r7, #14]
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	4413      	add	r3, r2
 800c33e:	7b7a      	ldrb	r2, [r7, #13]
 800c340:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 800c342:	89fb      	ldrh	r3, [r7, #14]
 800c344:	3301      	adds	r3, #1
 800c346:	81fb      	strh	r3, [r7, #14]
 800c348:	89fb      	ldrh	r3, [r7, #14]
 800c34a:	2b0f      	cmp	r3, #15
 800c34c:	d9e3      	bls.n	800c316 <cliToUpper+0xe>
 800c34e:	e000      	b.n	800c352 <cliToUpper+0x4a>
      break;
 800c350:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 800c352:	89fb      	ldrh	r3, [r7, #14]
 800c354:	2b10      	cmp	r3, #16
 800c356:	d105      	bne.n	800c364 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800c358:	89fb      	ldrh	r3, [r7, #14]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	687a      	ldr	r2, [r7, #4]
 800c35e:	4413      	add	r3, r2
 800c360:	2200      	movs	r2, #0
 800c362:	701a      	strb	r2, [r3, #0]
  }
}
 800c364:	bf00      	nop
 800c366:	3714      	adds	r7, #20
 800c368:	46bd      	mov	sp, r7
 800c36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36e:	4770      	bx	lr

0800c370 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b084      	sub	sp, #16
 800c374:	af00      	add	r7, sp, #0
 800c376:	4603      	mov	r3, r0
 800c378:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800c37a:	2300      	movs	r3, #0
 800c37c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800c37e:	4b0f      	ldr	r3, [pc, #60]	; (800c3bc <cliArgsGetData+0x4c>)
 800c380:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800c382:	79fb      	ldrb	r3, [r7, #7]
 800c384:	b29a      	uxth	r2, r3
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800c38c:	429a      	cmp	r2, r3
 800c38e:	d301      	bcc.n	800c394 <cliArgsGetData+0x24>
  {
    return 0;
 800c390:	2300      	movs	r3, #0
 800c392:	e00e      	b.n	800c3b2 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800c39a:	79fb      	ldrb	r3, [r7, #7]
 800c39c:	009b      	lsls	r3, r3, #2
 800c39e:	4413      	add	r3, r2
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f007 fcc6 	bl	8013d38 <strtoul>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	60fb      	str	r3, [r7, #12]

  return ret;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	20000428 	.word	0x20000428

0800c3c0 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800c3ca:	f04f 0300 	mov.w	r3, #0
 800c3ce:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800c3d0:	4b10      	ldr	r3, [pc, #64]	; (800c414 <cliArgsGetFloat+0x54>)
 800c3d2:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800c3d4:	79fb      	ldrb	r3, [r7, #7]
 800c3d6:	b29a      	uxth	r2, r3
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d302      	bcc.n	800c3e8 <cliArgsGetFloat+0x28>
  {
    return 0;
 800c3e2:	f04f 0300 	mov.w	r3, #0
 800c3e6:	e00d      	b.n	800c404 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 800c3e8:	68bb      	ldr	r3, [r7, #8]
 800c3ea:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800c3ee:	79fb      	ldrb	r3, [r7, #7]
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	4413      	add	r3, r2
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f007 fbc5 	bl	8013b88 <strtof>
 800c3fe:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 800c402:	68fb      	ldr	r3, [r7, #12]
}
 800c404:	ee07 3a90 	vmov	s15, r3
 800c408:	eeb0 0a67 	vmov.f32	s0, s15
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}
 800c412:	bf00      	nop
 800c414:	20000428 	.word	0x20000428

0800c418 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800c418:	b480      	push	{r7}
 800c41a:	b085      	sub	sp, #20
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	4603      	mov	r3, r0
 800c420:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 800c422:	2300      	movs	r3, #0
 800c424:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800c426:	4b0d      	ldr	r3, [pc, #52]	; (800c45c <cliArgsGetStr+0x44>)
 800c428:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800c42a:	79fb      	ldrb	r3, [r7, #7]
 800c42c:	b29a      	uxth	r2, r3
 800c42e:	68bb      	ldr	r3, [r7, #8]
 800c430:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800c434:	429a      	cmp	r2, r3
 800c436:	d301      	bcc.n	800c43c <cliArgsGetStr+0x24>
  {
    return 0;
 800c438:	2300      	movs	r3, #0
 800c43a:	e008      	b.n	800c44e <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800c442:	79fb      	ldrb	r3, [r7, #7]
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	4413      	add	r3, r2
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	60fb      	str	r3, [r7, #12]

  return ret;
 800c44c:	68fb      	ldr	r3, [r7, #12]
}
 800c44e:	4618      	mov	r0, r3
 800c450:	3714      	adds	r7, #20
 800c452:	46bd      	mov	sp, r7
 800c454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	20000428 	.word	0x20000428

0800c460 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b084      	sub	sp, #16
 800c464:	af00      	add	r7, sp, #0
 800c466:	4603      	mov	r3, r0
 800c468:	6039      	str	r1, [r7, #0]
 800c46a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800c46c:	2300      	movs	r3, #0
 800c46e:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 800c470:	4b0f      	ldr	r3, [pc, #60]	; (800c4b0 <cliArgsIsStr+0x50>)
 800c472:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800c474:	79fb      	ldrb	r3, [r7, #7]
 800c476:	b29a      	uxth	r2, r3
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800c47e:	429a      	cmp	r2, r3
 800c480:	d301      	bcc.n	800c486 <cliArgsIsStr+0x26>
  {
    return 0;
 800c482:	2300      	movs	r3, #0
 800c484:	e010      	b.n	800c4a8 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800c48c:	79fb      	ldrb	r3, [r7, #7]
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	4413      	add	r3, r2
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	4619      	mov	r1, r3
 800c496:	6838      	ldr	r0, [r7, #0]
 800c498:	f7f3 fec2 	bl	8000220 <strcmp>
 800c49c:	4603      	mov	r3, r0
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d101      	bne.n	800c4a6 <cliArgsIsStr+0x46>
  {
    ret = true;
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c4a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}
 800c4b0:	20000428 	.word	0x20000428

0800c4b4 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b082      	sub	sp, #8
 800c4b8:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800c4ba:	4b08      	ldr	r3, [pc, #32]	; (800c4dc <cliKeepLoop+0x28>)
 800c4bc:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	4618      	mov	r0, r3
 800c4c4:	f006 f99a 	bl	80127fc <uartAvailable>
 800c4c8:	4603      	mov	r3, r0
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d101      	bne.n	800c4d2 <cliKeepLoop+0x1e>
  {
    return true;
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e000      	b.n	800c4d4 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 800c4d2:	2300      	movs	r3, #0
  }
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3708      	adds	r7, #8
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	20000428 	.word	0x20000428

0800c4e0 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b086      	sub	sp, #24
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  bool ret = true;
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 800c4ee:	4b20      	ldr	r3, [pc, #128]	; (800c570 <cliAdd+0x90>)
 800c4f0:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 800c4f2:	693b      	ldr	r3, [r7, #16]
 800c4f4:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800c4f8:	2b0f      	cmp	r3, #15
 800c4fa:	d901      	bls.n	800c500 <cliAdd+0x20>
  {
    return false;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	e032      	b.n	800c566 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 800c500:	693b      	ldr	r3, [r7, #16]
 800c502:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800c506:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800c508:	89fa      	ldrh	r2, [r7, #14]
 800c50a:	4613      	mov	r3, r2
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	4413      	add	r3, r2
 800c510:	009b      	lsls	r3, r3, #2
 800c512:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c516:	693a      	ldr	r2, [r7, #16]
 800c518:	4413      	add	r3, r2
 800c51a:	3304      	adds	r3, #4
 800c51c:	6879      	ldr	r1, [r7, #4]
 800c51e:	4618      	mov	r0, r3
 800c520:	f007 fe3f 	bl	80141a2 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 800c524:	89fa      	ldrh	r2, [r7, #14]
 800c526:	6939      	ldr	r1, [r7, #16]
 800c528:	4613      	mov	r3, r2
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	4413      	add	r3, r2
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	440b      	add	r3, r1
 800c532:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800c536:	683a      	ldr	r2, [r7, #0]
 800c538:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800c53a:	89fa      	ldrh	r2, [r7, #14]
 800c53c:	4613      	mov	r3, r2
 800c53e:	009b      	lsls	r3, r3, #2
 800c540:	4413      	add	r3, r2
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c548:	693a      	ldr	r2, [r7, #16]
 800c54a:	4413      	add	r3, r2
 800c54c:	3304      	adds	r3, #4
 800c54e:	4618      	mov	r0, r3
 800c550:	f7ff feda 	bl	800c308 <cliToUpper>

  p_cli->cmd_count++;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800c55a:	3301      	adds	r3, #1
 800c55c:	b29a      	uxth	r2, r3
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  return ret;
 800c564:	7dfb      	ldrb	r3, [r7, #23]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	20000428 	.word	0x20000428

0800c574 <cliShowList>:
{
  cliPrintf("\x1B[%dB", y);
}

void cliShowList(cli_args_t *args)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 800c57c:	4b15      	ldr	r3, [pc, #84]	; (800c5d4 <cliShowList+0x60>)
 800c57e:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 800c580:	4815      	ldr	r0, [pc, #84]	; (800c5d8 <cliShowList+0x64>)
 800c582:	f7ff fe9d 	bl	800c2c0 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800c586:	4815      	ldr	r0, [pc, #84]	; (800c5dc <cliShowList+0x68>)
 800c588:	f7ff fe9a 	bl	800c2c0 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 800c58c:	2300      	movs	r3, #0
 800c58e:	60fb      	str	r3, [r7, #12]
 800c590:	e012      	b.n	800c5b8 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 800c592:	68fa      	ldr	r2, [r7, #12]
 800c594:	4613      	mov	r3, r2
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	4413      	add	r3, r2
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	4413      	add	r3, r2
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7ff fe8a 	bl	800c2c0 <cliPrintf>
    cliPrintf("\r\n");
 800c5ac:	480a      	ldr	r0, [pc, #40]	; (800c5d8 <cliShowList+0x64>)
 800c5ae:	f7ff fe87 	bl	800c2c0 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	60fb      	str	r3, [r7, #12]
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800c5be:	461a      	mov	r2, r3
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	dbe5      	blt.n	800c592 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800c5c6:	4806      	ldr	r0, [pc, #24]	; (800c5e0 <cliShowList+0x6c>)
 800c5c8:	f7ff fe7a 	bl	800c2c0 <cliPrintf>
}
 800c5cc:	bf00      	nop
 800c5ce:	3710      	adds	r7, #16
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	20000428 	.word	0x20000428
 800c5d8:	08016310 	.word	0x08016310
 800c5dc:	08016334 	.word	0x08016334
 800c5e0:	08016354 	.word	0x08016354

0800c5e4 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b08c      	sub	sp, #48	; 0x30
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 800c5ec:	2310      	movs	r3, #16
 800c5ee:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	881b      	ldrh	r3, [r3, #0]
 800c5f4:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	685b      	ldr	r3, [r3, #4]
 800c5fa:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	881b      	ldrh	r3, [r3, #0]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d103      	bne.n	800c60c <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 800c604:	4840      	ldr	r0, [pc, #256]	; (800c708 <cliMemoryDump+0x124>)
 800c606:	f7ff fe5b 	bl	800c2c0 <cliPrintf>
 800c60a:	e07a      	b.n	800c702 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	2b01      	cmp	r3, #1
 800c610:	dd09      	ble.n	800c626 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 800c612:	693b      	ldr	r3, [r7, #16]
 800c614:	3304      	adds	r3, #4
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	2200      	movs	r2, #0
 800c61a:	2100      	movs	r1, #0
 800c61c:	4618      	mov	r0, r3
 800c61e:	f007 fb8b 	bl	8013d38 <strtoul>
 800c622:	4603      	mov	r3, r0
 800c624:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 800c626:	693b      	ldr	r3, [r7, #16]
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	2200      	movs	r2, #0
 800c62c:	2100      	movs	r1, #0
 800c62e:	4618      	mov	r0, r3
 800c630:	f007 fb82 	bl	8013d38 <strtoul>
 800c634:	4603      	mov	r3, r0
 800c636:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 800c638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63a:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 800c63c:	4833      	ldr	r0, [pc, #204]	; (800c70c <cliMemoryDump+0x128>)
 800c63e:	f7ff fe3f 	bl	800c2c0 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 800c642:	2300      	movs	r3, #0
 800c644:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c646:	e058      	b.n	800c6fa <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 800c648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c64a:	f003 0303 	and.w	r3, r3, #3
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d104      	bne.n	800c65c <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 800c652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c654:	4619      	mov	r1, r3
 800c656:	482e      	ldr	r0, [pc, #184]	; (800c710 <cliMemoryDump+0x12c>)
 800c658:	f7ff fe32 	bl	800c2c0 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 800c65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	4619      	mov	r1, r3
 800c662:	482c      	ldr	r0, [pc, #176]	; (800c714 <cliMemoryDump+0x130>)
 800c664:	f7ff fe2c 	bl	800c2c0 <cliPrintf>

    if ((idx%4) == 3)
 800c668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c66a:	425a      	negs	r2, r3
 800c66c:	f003 0303 	and.w	r3, r3, #3
 800c670:	f002 0203 	and.w	r2, r2, #3
 800c674:	bf58      	it	pl
 800c676:	4253      	negpl	r3, r2
 800c678:	2b03      	cmp	r3, #3
 800c67a:	d138      	bne.n	800c6ee <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 800c67c:	4826      	ldr	r0, [pc, #152]	; (800c718 <cliMemoryDump+0x134>)
 800c67e:	f7ff fe1f 	bl	800c2c0 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 800c682:	2300      	movs	r3, #0
 800c684:	623b      	str	r3, [r7, #32]
 800c686:	e02c      	b.n	800c6e2 <cliMemoryDump+0xfe>
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 800c68c:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 800c68e:	2300      	movs	r3, #0
 800c690:	61fb      	str	r3, [r7, #28]
 800c692:	e01d      	b.n	800c6d0 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 800c694:	f107 020c 	add.w	r2, r7, #12
 800c698:	69fb      	ldr	r3, [r7, #28]
 800c69a:	4413      	add	r3, r2
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	2b1f      	cmp	r3, #31
 800c6a0:	d910      	bls.n	800c6c4 <cliMemoryDump+0xe0>
 800c6a2:	f107 020c 	add.w	r2, r7, #12
 800c6a6:	69fb      	ldr	r3, [r7, #28]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	2b7e      	cmp	r3, #126	; 0x7e
 800c6ae:	d809      	bhi.n	800c6c4 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 800c6b0:	f107 020c 	add.w	r2, r7, #12
 800c6b4:	69fb      	ldr	r3, [r7, #28]
 800c6b6:	4413      	add	r3, r2
 800c6b8:	781b      	ldrb	r3, [r3, #0]
 800c6ba:	4619      	mov	r1, r3
 800c6bc:	4817      	ldr	r0, [pc, #92]	; (800c71c <cliMemoryDump+0x138>)
 800c6be:	f7ff fdff 	bl	800c2c0 <cliPrintf>
 800c6c2:	e002      	b.n	800c6ca <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 800c6c4:	4816      	ldr	r0, [pc, #88]	; (800c720 <cliMemoryDump+0x13c>)
 800c6c6:	f7ff fdfb 	bl	800c2c0 <cliPrintf>
        for (i=0;i<4;i++)
 800c6ca:	69fb      	ldr	r3, [r7, #28]
 800c6cc:	3301      	adds	r3, #1
 800c6ce:	61fb      	str	r3, [r7, #28]
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	2b03      	cmp	r3, #3
 800c6d4:	ddde      	ble.n	800c694 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	3304      	adds	r3, #4
 800c6da:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 800c6dc:	6a3b      	ldr	r3, [r7, #32]
 800c6de:	3301      	adds	r3, #1
 800c6e0:	623b      	str	r3, [r7, #32]
 800c6e2:	6a3b      	ldr	r3, [r7, #32]
 800c6e4:	2b03      	cmp	r3, #3
 800c6e6:	ddcf      	ble.n	800c688 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 800c6e8:	480e      	ldr	r0, [pc, #56]	; (800c724 <cliMemoryDump+0x140>)
 800c6ea:	f7ff fde9 	bl	800c2c0 <cliPrintf>
    }
    addr++;
 800c6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f0:	3304      	adds	r3, #4
 800c6f2:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 800c6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f6:	3301      	adds	r3, #1
 800c6f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c6fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6fe:	429a      	cmp	r2, r3
 800c700:	dba2      	blt.n	800c648 <cliMemoryDump+0x64>
  }
}
 800c702:	3730      	adds	r7, #48	; 0x30
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	08016374 	.word	0x08016374
 800c70c:	08016388 	.word	0x08016388
 800c710:	08016390 	.word	0x08016390
 800c714:	0801639c 	.word	0x0801639c
 800c718:	080163a4 	.word	0x080163a4
 800c71c:	080163a8 	.word	0x080163a8
 800c720:	080163ac 	.word	0x080163ac
 800c724:	080163b0 	.word	0x080163b0

0800c728 <logInit>:




bool logInit(void)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	af00      	add	r7, sp, #0
#ifdef _USE_HW_ROTS
  osMutexDef(mutex_lock);
  mutex_lock = osMutexCreate (osMutex(mutex_lock));
#endif

  log_buf_boot.line_index     = 0;
 800c72c:	4b14      	ldr	r3, [pc, #80]	; (800c780 <logInit+0x58>)
 800c72e:	2200      	movs	r2, #0
 800c730:	801a      	strh	r2, [r3, #0]
  log_buf_boot.buf_length     = 0;
 800c732:	4b13      	ldr	r3, [pc, #76]	; (800c780 <logInit+0x58>)
 800c734:	2200      	movs	r2, #0
 800c736:	805a      	strh	r2, [r3, #2]
  log_buf_boot.buf_length_max = LOG_BOOT_BUF_MAX;
 800c738:	4b11      	ldr	r3, [pc, #68]	; (800c780 <logInit+0x58>)
 800c73a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c73e:	809a      	strh	r2, [r3, #4]
  log_buf_boot.buf_index      = 0;
 800c740:	4b0f      	ldr	r3, [pc, #60]	; (800c780 <logInit+0x58>)
 800c742:	2200      	movs	r2, #0
 800c744:	80da      	strh	r2, [r3, #6]
  log_buf_boot.buf            = buf_boot;
 800c746:	4b0e      	ldr	r3, [pc, #56]	; (800c780 <logInit+0x58>)
 800c748:	4a0e      	ldr	r2, [pc, #56]	; (800c784 <logInit+0x5c>)
 800c74a:	609a      	str	r2, [r3, #8]


  log_buf_list.line_index     = 0;
 800c74c:	4b0e      	ldr	r3, [pc, #56]	; (800c788 <logInit+0x60>)
 800c74e:	2200      	movs	r2, #0
 800c750:	801a      	strh	r2, [r3, #0]
  log_buf_list.buf_length     = 0;
 800c752:	4b0d      	ldr	r3, [pc, #52]	; (800c788 <logInit+0x60>)
 800c754:	2200      	movs	r2, #0
 800c756:	805a      	strh	r2, [r3, #2]
  log_buf_list.buf_length_max = LOG_LIST_BUF_MAX;
 800c758:	4b0b      	ldr	r3, [pc, #44]	; (800c788 <logInit+0x60>)
 800c75a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c75e:	809a      	strh	r2, [r3, #4]
  log_buf_list.buf_index      = 0;
 800c760:	4b09      	ldr	r3, [pc, #36]	; (800c788 <logInit+0x60>)
 800c762:	2200      	movs	r2, #0
 800c764:	80da      	strh	r2, [r3, #6]
  log_buf_list.buf            = buf_list;
 800c766:	4b08      	ldr	r3, [pc, #32]	; (800c788 <logInit+0x60>)
 800c768:	4a08      	ldr	r2, [pc, #32]	; (800c78c <logInit+0x64>)
 800c76a:	609a      	str	r2, [r3, #8]


  is_init = true;
 800c76c:	4b08      	ldr	r3, [pc, #32]	; (800c790 <logInit+0x68>)
 800c76e:	2201      	movs	r2, #1
 800c770:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("log", cliCmd);
 800c772:	4908      	ldr	r1, [pc, #32]	; (800c794 <logInit+0x6c>)
 800c774:	4808      	ldr	r0, [pc, #32]	; (800c798 <logInit+0x70>)
 800c776:	f7ff feb3 	bl	800c4e0 <cliAdd>
#endif

  return true;
 800c77a:	2301      	movs	r3, #1
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	bd80      	pop	{r7, pc}
 800c780:	200007cc 	.word	0x200007cc
 800c784:	200007e4 	.word	0x200007e4
 800c788:	200007d8 	.word	0x200007d8
 800c78c:	20000be4 	.word	0x20000be4
 800c790:	200013e4 	.word	0x200013e4
 800c794:	0800c8f9 	.word	0x0800c8f9
 800c798:	080163c0 	.word	0x080163c0

0800c79c <logBufPrintf>:
  is_open  = true;
  return uartOpen(ch, baud);
}

bool logBufPrintf(log_buf_t *p_log, char *p_data, uint32_t length)
{
 800c79c:	b580      	push	{r7, lr}
 800c79e:	b08a      	sub	sp, #40	; 0x28
 800c7a0:	af02      	add	r7, sp, #8
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
  uint32_t buf_last;
  uint8_t *p_buf;
  int buf_len;


  buf_last = p_log->buf_index + length + 8;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	88db      	ldrh	r3, [r3, #6]
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	3308      	adds	r3, #8
 800c7b4:	61fb      	str	r3, [r7, #28]
  if (buf_last > p_log->buf_length_max)
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	889b      	ldrh	r3, [r3, #4]
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	d911      	bls.n	800c7e6 <logBufPrintf+0x4a>
  {
    p_log->buf_index = 0;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	80da      	strh	r2, [r3, #6]
    buf_last = p_log->buf_index + length + 8;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	88db      	ldrh	r3, [r3, #6]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	4413      	add	r3, r2
 800c7d2:	3308      	adds	r3, #8
 800c7d4:	61fb      	str	r3, [r7, #28]

    if (buf_last > p_log->buf_length_max)
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	889b      	ldrh	r3, [r3, #4]
 800c7da:	461a      	mov	r2, r3
 800c7dc:	69fb      	ldr	r3, [r7, #28]
 800c7de:	4293      	cmp	r3, r2
 800c7e0:	d901      	bls.n	800c7e6 <logBufPrintf+0x4a>
    {
      return false;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	e033      	b.n	800c84e <logBufPrintf+0xb2>
    }
  }

  p_buf = &p_log->buf[p_log->buf_index];
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	689b      	ldr	r3, [r3, #8]
 800c7ea:	68fa      	ldr	r2, [r7, #12]
 800c7ec:	88d2      	ldrh	r2, [r2, #6]
 800c7ee:	4413      	add	r3, r2
 800c7f0:	61bb      	str	r3, [r7, #24]

  buf_len = snprintf((char *)p_buf, length + 8, "%04X\t%s", p_log->line_index, p_data);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f103 0108 	add.w	r1, r3, #8
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	881b      	ldrh	r3, [r3, #0]
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	4613      	mov	r3, r2
 800c804:	4a14      	ldr	r2, [pc, #80]	; (800c858 <logBufPrintf+0xbc>)
 800c806:	69b8      	ldr	r0, [r7, #24]
 800c808:	f007 fb62 	bl	8013ed0 <sniprintf>
 800c80c:	6178      	str	r0, [r7, #20]
  p_log->line_index++;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	881b      	ldrh	r3, [r3, #0]
 800c812:	3301      	adds	r3, #1
 800c814:	b29a      	uxth	r2, r3
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	801a      	strh	r2, [r3, #0]
  p_log->buf_index += buf_len;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	88da      	ldrh	r2, [r3, #6]
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	b29b      	uxth	r3, r3
 800c822:	4413      	add	r3, r2
 800c824:	b29a      	uxth	r2, r3
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	80da      	strh	r2, [r3, #6]


  if (buf_len + p_log->buf_length <= p_log->buf_length_max)
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	885b      	ldrh	r3, [r3, #2]
 800c82e:	461a      	mov	r2, r3
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	4413      	add	r3, r2
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	8892      	ldrh	r2, [r2, #4]
 800c838:	4293      	cmp	r3, r2
 800c83a:	dc07      	bgt.n	800c84c <logBufPrintf+0xb0>
  {
    p_log->buf_length += buf_len;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	885a      	ldrh	r2, [r3, #2]
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	b29b      	uxth	r3, r3
 800c844:	4413      	add	r3, r2
 800c846:	b29a      	uxth	r2, r3
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	805a      	strh	r2, [r3, #2]
  }

  return true;
 800c84c:	2301      	movs	r3, #1
}
 800c84e:	4618      	mov	r0, r3
 800c850:	3720      	adds	r7, #32
 800c852:	46bd      	mov	sp, r7
 800c854:	bd80      	pop	{r7, pc}
 800c856:	bf00      	nop
 800c858:	080163c4 	.word	0x080163c4

0800c85c <logPrintf>:

void logPrintf(const char *fmt, ...)
{
 800c85c:	b40f      	push	{r0, r1, r2, r3}
 800c85e:	b580      	push	{r7, lr}
 800c860:	b082      	sub	sp, #8
 800c862:	af00      	add	r7, sp, #0
#endif

  va_list args;
  int len;

  if (is_init != true) return;
 800c864:	4b1c      	ldr	r3, [pc, #112]	; (800c8d8 <logPrintf+0x7c>)
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	f083 0301 	eor.w	r3, r3, #1
 800c86c:	b2db      	uxtb	r3, r3
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d12a      	bne.n	800c8c8 <logPrintf+0x6c>


  va_start(args, fmt);
 800c872:	f107 0314 	add.w	r3, r7, #20
 800c876:	603b      	str	r3, [r7, #0]
  len = vsnprintf(print_buf, 256, fmt, args);
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	693a      	ldr	r2, [r7, #16]
 800c87c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c880:	4816      	ldr	r0, [pc, #88]	; (800c8dc <logPrintf+0x80>)
 800c882:	f007 fbc7 	bl	8014014 <vsniprintf>
 800c886:	6078      	str	r0, [r7, #4]

  if (is_open == true && is_enable == true)
 800c888:	4b15      	ldr	r3, [pc, #84]	; (800c8e0 <logPrintf+0x84>)
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d00a      	beq.n	800c8a6 <logPrintf+0x4a>
 800c890:	4b14      	ldr	r3, [pc, #80]	; (800c8e4 <logPrintf+0x88>)
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d006      	beq.n	800c8a6 <logPrintf+0x4a>
  {
    uartWrite(log_ch, (uint8_t *)print_buf, len);
 800c898:	4b13      	ldr	r3, [pc, #76]	; (800c8e8 <logPrintf+0x8c>)
 800c89a:	781b      	ldrb	r3, [r3, #0]
 800c89c:	687a      	ldr	r2, [r7, #4]
 800c89e:	490f      	ldr	r1, [pc, #60]	; (800c8dc <logPrintf+0x80>)
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f006 f809 	bl	80128b8 <uartWrite>
  }

  if (is_boot_log)
 800c8a6:	4b11      	ldr	r3, [pc, #68]	; (800c8ec <logPrintf+0x90>)
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d005      	beq.n	800c8ba <logPrintf+0x5e>
  {
    logBufPrintf(&log_buf_boot, print_buf, len);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	490a      	ldr	r1, [pc, #40]	; (800c8dc <logPrintf+0x80>)
 800c8b4:	480e      	ldr	r0, [pc, #56]	; (800c8f0 <logPrintf+0x94>)
 800c8b6:	f7ff ff71 	bl	800c79c <logBufPrintf>
  }
  logBufPrintf(&log_buf_list, print_buf, len);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	461a      	mov	r2, r3
 800c8be:	4907      	ldr	r1, [pc, #28]	; (800c8dc <logPrintf+0x80>)
 800c8c0:	480c      	ldr	r0, [pc, #48]	; (800c8f4 <logPrintf+0x98>)
 800c8c2:	f7ff ff6b 	bl	800c79c <logBufPrintf>
 800c8c6:	e000      	b.n	800c8ca <logPrintf+0x6e>
  if (is_init != true) return;
 800c8c8:	bf00      	nop
  va_end(args);

#ifdef _USE_HW_ROTS
  osMutexRelease(mutex_lock);
#endif
}
 800c8ca:	3708      	adds	r7, #8
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c8d2:	b004      	add	sp, #16
 800c8d4:	4770      	bx	lr
 800c8d6:	bf00      	nop
 800c8d8:	200013e4 	.word	0x200013e4
 800c8dc:	200013e8 	.word	0x200013e8
 800c8e0:	200013e5 	.word	0x200013e5
 800c8e4:	20000015 	.word	0x20000015
 800c8e8:	20000016 	.word	0x20000016
 800c8ec:	20000014 	.word	0x20000014
 800c8f0:	200007cc 	.word	0x200007cc
 800c8f4:	200007d8 	.word	0x200007d8

0800c8f8 <cliCmd>:


#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b088      	sub	sp, #32
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800c900:	2300      	movs	r3, #0
 800c902:	77fb      	strb	r3, [r7, #31]



  if (args->argc == 1 && args->isStr(0, "info"))
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	881b      	ldrh	r3, [r3, #0]
 800c908:	2b01      	cmp	r3, #1
 800c90a:	d124      	bne.n	800c956 <cliCmd+0x5e>
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	695b      	ldr	r3, [r3, #20]
 800c910:	494c      	ldr	r1, [pc, #304]	; (800ca44 <cliCmd+0x14c>)
 800c912:	2000      	movs	r0, #0
 800c914:	4798      	blx	r3
 800c916:	4603      	mov	r3, r0
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d01c      	beq.n	800c956 <cliCmd+0x5e>
  {
    cliPrintf("boot.line_index %d\n", log_buf_boot.line_index);
 800c91c:	4b4a      	ldr	r3, [pc, #296]	; (800ca48 <cliCmd+0x150>)
 800c91e:	881b      	ldrh	r3, [r3, #0]
 800c920:	4619      	mov	r1, r3
 800c922:	484a      	ldr	r0, [pc, #296]	; (800ca4c <cliCmd+0x154>)
 800c924:	f7ff fccc 	bl	800c2c0 <cliPrintf>
    cliPrintf("boot.buf_length %d\n", log_buf_boot.buf_length);
 800c928:	4b47      	ldr	r3, [pc, #284]	; (800ca48 <cliCmd+0x150>)
 800c92a:	885b      	ldrh	r3, [r3, #2]
 800c92c:	4619      	mov	r1, r3
 800c92e:	4848      	ldr	r0, [pc, #288]	; (800ca50 <cliCmd+0x158>)
 800c930:	f7ff fcc6 	bl	800c2c0 <cliPrintf>
    cliPrintf("\n");
 800c934:	4847      	ldr	r0, [pc, #284]	; (800ca54 <cliCmd+0x15c>)
 800c936:	f7ff fcc3 	bl	800c2c0 <cliPrintf>
    cliPrintf("list.line_index %d\n", log_buf_list.line_index);
 800c93a:	4b47      	ldr	r3, [pc, #284]	; (800ca58 <cliCmd+0x160>)
 800c93c:	881b      	ldrh	r3, [r3, #0]
 800c93e:	4619      	mov	r1, r3
 800c940:	4846      	ldr	r0, [pc, #280]	; (800ca5c <cliCmd+0x164>)
 800c942:	f7ff fcbd 	bl	800c2c0 <cliPrintf>
    cliPrintf("list.buf_length %d\n", log_buf_list.buf_length);
 800c946:	4b44      	ldr	r3, [pc, #272]	; (800ca58 <cliCmd+0x160>)
 800c948:	885b      	ldrh	r3, [r3, #2]
 800c94a:	4619      	mov	r1, r3
 800c94c:	4844      	ldr	r0, [pc, #272]	; (800ca60 <cliCmd+0x168>)
 800c94e:	f7ff fcb7 	bl	800c2c0 <cliPrintf>

    ret = true;
 800c952:	2301      	movs	r3, #1
 800c954:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "boot"))
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	881b      	ldrh	r3, [r3, #0]
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d12d      	bne.n	800c9ba <cliCmd+0xc2>
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	695b      	ldr	r3, [r3, #20]
 800c962:	4940      	ldr	r1, [pc, #256]	; (800ca64 <cliCmd+0x16c>)
 800c964:	2000      	movs	r0, #0
 800c966:	4798      	blx	r3
 800c968:	4603      	mov	r3, r0
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d025      	beq.n	800c9ba <cliCmd+0xc2>
  {
    uint32_t index = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	61bb      	str	r3, [r7, #24]

    while(cliKeepLoop())
 800c972:	e019      	b.n	800c9a8 <cliCmd+0xb0>
    {
      uint32_t buf_len;

      buf_len = log_buf_boot.buf_length - index;
 800c974:	4b34      	ldr	r3, [pc, #208]	; (800ca48 <cliCmd+0x150>)
 800c976:	885b      	ldrh	r3, [r3, #2]
 800c978:	461a      	mov	r2, r3
 800c97a:	69bb      	ldr	r3, [r7, #24]
 800c97c:	1ad3      	subs	r3, r2, r3
 800c97e:	617b      	str	r3, [r7, #20]
      if (buf_len == 0)
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d016      	beq.n	800c9b4 <cliCmd+0xbc>
      {
        break;
      }
      if (buf_len > 64)
 800c986:	697b      	ldr	r3, [r7, #20]
 800c988:	2b40      	cmp	r3, #64	; 0x40
 800c98a:	d901      	bls.n	800c990 <cliCmd+0x98>
      {
        buf_len = 64;
 800c98c:	2340      	movs	r3, #64	; 0x40
 800c98e:	617b      	str	r3, [r7, #20]

      #ifdef _USE_HW_ROTS
      osMutexWait(mutex_lock, osWaitForever);
      #endif

      cliWrite((uint8_t *)&log_buf_boot.buf[index], buf_len);
 800c990:	4b2d      	ldr	r3, [pc, #180]	; (800ca48 <cliCmd+0x150>)
 800c992:	689a      	ldr	r2, [r3, #8]
 800c994:	69bb      	ldr	r3, [r7, #24]
 800c996:	4413      	add	r3, r2
 800c998:	6979      	ldr	r1, [r7, #20]
 800c99a:	4618      	mov	r0, r3
 800c99c:	f7ff f868 	bl	800ba70 <cliWrite>
      index += buf_len;
 800c9a0:	69ba      	ldr	r2, [r7, #24]
 800c9a2:	697b      	ldr	r3, [r7, #20]
 800c9a4:	4413      	add	r3, r2
 800c9a6:	61bb      	str	r3, [r7, #24]
    while(cliKeepLoop())
 800c9a8:	f7ff fd84 	bl	800c4b4 <cliKeepLoop>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d1e0      	bne.n	800c974 <cliCmd+0x7c>
 800c9b2:	e000      	b.n	800c9b6 <cliCmd+0xbe>
        break;
 800c9b4:	bf00      	nop

      #ifdef _USE_HW_ROTS
      osMutexRelease(mutex_lock);
      #endif
    }
    ret = true;
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	77fb      	strb	r3, [r7, #31]
  }

  if (args->argc == 1 && args->isStr(0, "list"))
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	881b      	ldrh	r3, [r3, #0]
 800c9be:	2b01      	cmp	r3, #1
 800c9c0:	d12d      	bne.n	800ca1e <cliCmd+0x126>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	695b      	ldr	r3, [r3, #20]
 800c9c6:	4928      	ldr	r1, [pc, #160]	; (800ca68 <cliCmd+0x170>)
 800c9c8:	2000      	movs	r0, #0
 800c9ca:	4798      	blx	r3
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d025      	beq.n	800ca1e <cliCmd+0x126>
  {
    uint32_t index = 0;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	613b      	str	r3, [r7, #16]

    while(cliKeepLoop())
 800c9d6:	e019      	b.n	800ca0c <cliCmd+0x114>
    {
      uint32_t buf_len;

      buf_len = log_buf_list.buf_length - index;
 800c9d8:	4b1f      	ldr	r3, [pc, #124]	; (800ca58 <cliCmd+0x160>)
 800c9da:	885b      	ldrh	r3, [r3, #2]
 800c9dc:	461a      	mov	r2, r3
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	60fb      	str	r3, [r7, #12]
      if (buf_len == 0)
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d016      	beq.n	800ca18 <cliCmd+0x120>
      {
        break;
      }
      if (buf_len > 64)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2b40      	cmp	r3, #64	; 0x40
 800c9ee:	d901      	bls.n	800c9f4 <cliCmd+0xfc>
      {
        buf_len = 64;
 800c9f0:	2340      	movs	r3, #64	; 0x40
 800c9f2:	60fb      	str	r3, [r7, #12]

      #ifdef _USE_HW_ROTS
      osMutexWait(mutex_lock, osWaitForever);
      #endif

      cliWrite((uint8_t *)&log_buf_list.buf[index], buf_len);
 800c9f4:	4b18      	ldr	r3, [pc, #96]	; (800ca58 <cliCmd+0x160>)
 800c9f6:	689a      	ldr	r2, [r3, #8]
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	68f9      	ldr	r1, [r7, #12]
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7ff f836 	bl	800ba70 <cliWrite>
      index += buf_len;
 800ca04:	693a      	ldr	r2, [r7, #16]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	4413      	add	r3, r2
 800ca0a:	613b      	str	r3, [r7, #16]
    while(cliKeepLoop())
 800ca0c:	f7ff fd52 	bl	800c4b4 <cliKeepLoop>
 800ca10:	4603      	mov	r3, r0
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d1e0      	bne.n	800c9d8 <cliCmd+0xe0>
 800ca16:	e000      	b.n	800ca1a <cliCmd+0x122>
        break;
 800ca18:	bf00      	nop
      #ifdef _USE_HW_ROTS
      osMutexRelease(mutex_lock);
      #endif

    }
    ret = true;
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	77fb      	strb	r3, [r7, #31]
  }

  if (ret == false)
 800ca1e:	7ffb      	ldrb	r3, [r7, #31]
 800ca20:	f083 0301 	eor.w	r3, r3, #1
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d008      	beq.n	800ca3c <cliCmd+0x144>
  {
    cliPrintf("log info\n");
 800ca2a:	4810      	ldr	r0, [pc, #64]	; (800ca6c <cliCmd+0x174>)
 800ca2c:	f7ff fc48 	bl	800c2c0 <cliPrintf>
    cliPrintf("log boot\n");
 800ca30:	480f      	ldr	r0, [pc, #60]	; (800ca70 <cliCmd+0x178>)
 800ca32:	f7ff fc45 	bl	800c2c0 <cliPrintf>
    cliPrintf("log list\n");
 800ca36:	480f      	ldr	r0, [pc, #60]	; (800ca74 <cliCmd+0x17c>)
 800ca38:	f7ff fc42 	bl	800c2c0 <cliPrintf>
  }
}
 800ca3c:	bf00      	nop
 800ca3e:	3720      	adds	r7, #32
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}
 800ca44:	080163cc 	.word	0x080163cc
 800ca48:	200007cc 	.word	0x200007cc
 800ca4c:	080163d4 	.word	0x080163d4
 800ca50:	080163e8 	.word	0x080163e8
 800ca54:	080163fc 	.word	0x080163fc
 800ca58:	200007d8 	.word	0x200007d8
 800ca5c:	08016400 	.word	0x08016400
 800ca60:	08016414 	.word	0x08016414
 800ca64:	08016428 	.word	0x08016428
 800ca68:	08016430 	.word	0x08016430
 800ca6c:	08016438 	.word	0x08016438
 800ca70:	08016444 	.word	0x08016444
 800ca74:	08016450 	.word	0x08016450

0800ca78 <qbufferCreate>:
{

}

bool qbufferCreate(qbuffer_t *p_node, uint8_t *p_buf, uint32_t length)
{
 800ca78:	b480      	push	{r7}
 800ca7a:	b087      	sub	sp, #28
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	60f8      	str	r0, [r7, #12]
 800ca80:	60b9      	str	r1, [r7, #8]
 800ca82:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800ca84:	2301      	movs	r3, #1
 800ca86:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2200      	movs	r2, #0
 800ca92:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	687a      	ldr	r2, [r7, #4]
 800ca98:	609a      	str	r2, [r3, #8]
  p_node->size  = 1;
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	2201      	movs	r2, #1
 800ca9e:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	68ba      	ldr	r2, [r7, #8]
 800caa4:	611a      	str	r2, [r3, #16]

  return ret;
 800caa6:	7dfb      	ldrb	r3, [r7, #23]
}
 800caa8:	4618      	mov	r0, r3
 800caaa:	371c      	adds	r7, #28
 800caac:	46bd      	mov	sp, r7
 800caae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab2:	4770      	bx	lr

0800cab4 <qbufferCreateBySize>:

bool qbufferCreateBySize(qbuffer_t *p_node, uint8_t *p_buf, uint32_t size, uint32_t length)
{
 800cab4:	b480      	push	{r7}
 800cab6:	b087      	sub	sp, #28
 800cab8:	af00      	add	r7, sp, #0
 800caba:	60f8      	str	r0, [r7, #12]
 800cabc:	60b9      	str	r1, [r7, #8]
 800cabe:	607a      	str	r2, [r7, #4]
 800cac0:	603b      	str	r3, [r7, #0]
  bool ret = true;
 800cac2:	2301      	movs	r3, #1
 800cac4:	75fb      	strb	r3, [r7, #23]

  p_node->in    = 0;
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2200      	movs	r2, #0
 800caca:	601a      	str	r2, [r3, #0]
  p_node->out   = 0;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	2200      	movs	r2, #0
 800cad0:	605a      	str	r2, [r3, #4]
  p_node->len   = length;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	683a      	ldr	r2, [r7, #0]
 800cad6:	609a      	str	r2, [r3, #8]
  p_node->size  = size;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	687a      	ldr	r2, [r7, #4]
 800cadc:	60da      	str	r2, [r3, #12]
  p_node->p_buf = p_buf;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	611a      	str	r2, [r3, #16]

  return ret;
 800cae4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	371c      	adds	r7, #28
 800caea:	46bd      	mov	sp, r7
 800caec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf0:	4770      	bx	lr

0800caf2 <qbufferWrite>:

bool qbufferWrite(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800caf2:	b480      	push	{r7}
 800caf4:	b08b      	sub	sp, #44	; 0x2c
 800caf6:	af00      	add	r7, sp, #0
 800caf8:	60f8      	str	r0, [r7, #12]
 800cafa:	60b9      	str	r1, [r7, #8]
 800cafc:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800cafe:	2301      	movs	r3, #1
 800cb00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t next_in;


  for (int i=0; i<length; i++)
 800cb04:	2300      	movs	r3, #0
 800cb06:	623b      	str	r3, [r7, #32]
 800cb08:	e043      	b.n	800cb92 <qbufferWrite+0xa0>
  {
    next_in = (p_node->in + 1) % p_node->len;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	3301      	adds	r3, #1
 800cb10:	68fa      	ldr	r2, [r7, #12]
 800cb12:	6892      	ldr	r2, [r2, #8]
 800cb14:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb18:	fb01 f202 	mul.w	r2, r1, r2
 800cb1c:	1a9b      	subs	r3, r3, r2
 800cb1e:	61bb      	str	r3, [r7, #24]

    if (next_in != p_node->out)
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	69ba      	ldr	r2, [r7, #24]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d02c      	beq.n	800cb84 <qbufferWrite+0x92>
    {
      if (p_node->p_buf != NULL && p_data != NULL)
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	691b      	ldr	r3, [r3, #16]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d024      	beq.n	800cb7c <qbufferWrite+0x8a>
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d021      	beq.n	800cb7c <qbufferWrite+0x8a>
      {
        uint8_t *p_buf;

        p_buf = &p_node->p_buf[p_node->in*p_node->size];
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	691a      	ldr	r2, [r3, #16]
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	68f9      	ldr	r1, [r7, #12]
 800cb42:	68c9      	ldr	r1, [r1, #12]
 800cb44:	fb01 f303 	mul.w	r3, r1, r3
 800cb48:	4413      	add	r3, r2
 800cb4a:	617b      	str	r3, [r7, #20]
        for (int j=0; j<p_node->size; j++)
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	61fb      	str	r3, [r7, #28]
 800cb50:	e00a      	b.n	800cb68 <qbufferWrite+0x76>
        {
          p_buf[j] = p_data[j];
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	68ba      	ldr	r2, [r7, #8]
 800cb56:	441a      	add	r2, r3
 800cb58:	69fb      	ldr	r3, [r7, #28]
 800cb5a:	6979      	ldr	r1, [r7, #20]
 800cb5c:	440b      	add	r3, r1
 800cb5e:	7812      	ldrb	r2, [r2, #0]
 800cb60:	701a      	strb	r2, [r3, #0]
        for (int j=0; j<p_node->size; j++)
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	3301      	adds	r3, #1
 800cb66:	61fb      	str	r3, [r7, #28]
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	68da      	ldr	r2, [r3, #12]
 800cb6c:	69fb      	ldr	r3, [r7, #28]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	d8ef      	bhi.n	800cb52 <qbufferWrite+0x60>
        }
        p_data += p_node->size;
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	68db      	ldr	r3, [r3, #12]
 800cb76:	68ba      	ldr	r2, [r7, #8]
 800cb78:	4413      	add	r3, r2
 800cb7a:	60bb      	str	r3, [r7, #8]
      }
      p_node->in = next_in;
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	69ba      	ldr	r2, [r7, #24]
 800cb80:	601a      	str	r2, [r3, #0]
 800cb82:	e003      	b.n	800cb8c <qbufferWrite+0x9a>
    }
    else
    {
      ret = false;
 800cb84:	2300      	movs	r3, #0
 800cb86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800cb8a:	e006      	b.n	800cb9a <qbufferWrite+0xa8>
  for (int i=0; i<length; i++)
 800cb8c:	6a3b      	ldr	r3, [r7, #32]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	623b      	str	r3, [r7, #32]
 800cb92:	6a3b      	ldr	r3, [r7, #32]
 800cb94:	687a      	ldr	r2, [r7, #4]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	d8b7      	bhi.n	800cb0a <qbufferWrite+0x18>
    }
  }

  return ret;
 800cb9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	372c      	adds	r7, #44	; 0x2c
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr

0800cbaa <qbufferRead>:

bool qbufferRead(qbuffer_t *p_node, uint8_t *p_data, uint32_t length)
{
 800cbaa:	b480      	push	{r7}
 800cbac:	b089      	sub	sp, #36	; 0x24
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	60f8      	str	r0, [r7, #12]
 800cbb2:	60b9      	str	r1, [r7, #8]
 800cbb4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	77fb      	strb	r3, [r7, #31]


  for (int i=0; i<length; i++)
 800cbba:	2300      	movs	r3, #0
 800cbbc:	61bb      	str	r3, [r7, #24]
 800cbbe:	e041      	b.n	800cc44 <qbufferRead+0x9a>
  {
    if (p_node->p_buf != NULL && p_data != NULL)
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	691b      	ldr	r3, [r3, #16]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d024      	beq.n	800cc12 <qbufferRead+0x68>
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d021      	beq.n	800cc12 <qbufferRead+0x68>
    {
      uint8_t *p_buf;

      p_buf = &p_node->p_buf[p_node->out*p_node->size];
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	691a      	ldr	r2, [r3, #16]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	685b      	ldr	r3, [r3, #4]
 800cbd6:	68f9      	ldr	r1, [r7, #12]
 800cbd8:	68c9      	ldr	r1, [r1, #12]
 800cbda:	fb01 f303 	mul.w	r3, r1, r3
 800cbde:	4413      	add	r3, r2
 800cbe0:	613b      	str	r3, [r7, #16]
      for (int j=0; j<p_node->size; j++)
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	617b      	str	r3, [r7, #20]
 800cbe6:	e00a      	b.n	800cbfe <qbufferRead+0x54>
      {
        p_data[j] = p_buf[j];
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	693a      	ldr	r2, [r7, #16]
 800cbec:	441a      	add	r2, r3
 800cbee:	697b      	ldr	r3, [r7, #20]
 800cbf0:	68b9      	ldr	r1, [r7, #8]
 800cbf2:	440b      	add	r3, r1
 800cbf4:	7812      	ldrb	r2, [r2, #0]
 800cbf6:	701a      	strb	r2, [r3, #0]
      for (int j=0; j<p_node->size; j++)
 800cbf8:	697b      	ldr	r3, [r7, #20]
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	617b      	str	r3, [r7, #20]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	68da      	ldr	r2, [r3, #12]
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	429a      	cmp	r2, r3
 800cc06:	d8ef      	bhi.n	800cbe8 <qbufferRead+0x3e>
      }

      p_data += p_node->size;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	68db      	ldr	r3, [r3, #12]
 800cc0c:	68ba      	ldr	r2, [r7, #8]
 800cc0e:	4413      	add	r3, r2
 800cc10:	60bb      	str	r3, [r7, #8]
    }

    if (p_node->out != p_node->in)
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	685a      	ldr	r2, [r3, #4]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d00c      	beq.n	800cc38 <qbufferRead+0x8e>
    {
      p_node->out = (p_node->out + 1) % p_node->len;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	3301      	adds	r3, #1
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	6892      	ldr	r2, [r2, #8]
 800cc28:	fbb3 f1f2 	udiv	r1, r3, r2
 800cc2c:	fb01 f202 	mul.w	r2, r1, r2
 800cc30:	1a9a      	subs	r2, r3, r2
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	605a      	str	r2, [r3, #4]
 800cc36:	e002      	b.n	800cc3e <qbufferRead+0x94>
    }
    else
    {
      ret = false;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	77fb      	strb	r3, [r7, #31]
      break;
 800cc3c:	e006      	b.n	800cc4c <qbufferRead+0xa2>
  for (int i=0; i<length; i++)
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	3301      	adds	r3, #1
 800cc42:	61bb      	str	r3, [r7, #24]
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d8b9      	bhi.n	800cbc0 <qbufferRead+0x16>
    }
  }

  return ret;
 800cc4c:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3724      	adds	r7, #36	; 0x24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc58:	4770      	bx	lr

0800cc5a <qbufferPeekWrite>:

uint8_t *qbufferPeekWrite(qbuffer_t *p_node)
{
 800cc5a:	b480      	push	{r7}
 800cc5c:	b083      	sub	sp, #12
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
  return &p_node->p_buf[p_node->in*p_node->size];
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	691a      	ldr	r2, [r3, #16]
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	6879      	ldr	r1, [r7, #4]
 800cc6c:	68c9      	ldr	r1, [r1, #12]
 800cc6e:	fb01 f303 	mul.w	r3, r1, r3
 800cc72:	4413      	add	r3, r2
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	370c      	adds	r7, #12
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <qbufferAvailable>:
  return &p_node->p_buf[p_node->out*p_node->size];
}


uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b085      	sub	sp, #20
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->len + p_node->in - p_node->out) % p_node->len;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	689a      	ldr	r2, [r3, #8]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	441a      	add	r2, r3
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	685b      	ldr	r3, [r3, #4]
 800cc96:	1ad3      	subs	r3, r2, r3
 800cc98:	687a      	ldr	r2, [r7, #4]
 800cc9a:	6892      	ldr	r2, [r2, #8]
 800cc9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cca0:	fb01 f202 	mul.w	r2, r1, r2
 800cca4:	1a9b      	subs	r3, r3, r2
 800cca6:	60fb      	str	r3, [r7, #12]

  return ret;
 800cca8:	68fb      	ldr	r3, [r7, #12]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3714      	adds	r7, #20
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb4:	4770      	bx	lr
	...

0800ccb8 <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	3306      	adds	r3, #6
 800ccc6:	2220      	movs	r2, #32
 800ccc8:	2100      	movs	r1, #0
 800ccca:	4618      	mov	r0, r3
 800cccc:	f007 f9b0 	bl	8014030 <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 800ccd0:	683b      	ldr	r3, [r7, #0]
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	781b      	ldrb	r3, [r3, #0]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d003      	beq.n	800cce6 <hanFontLoad+0x2e>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	781b      	ldrb	r3, [r3, #0]
 800cce2:	2b0a      	cmp	r3, #10
 800cce4:	d107      	bne.n	800ccf6 <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	2204      	movs	r2, #4
 800ccea:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	2201      	movs	r2, #1
 800ccf0:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 800ccf2:	2304      	movs	r3, #4
 800ccf4:	e03b      	b.n	800cd6e <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	b25b      	sxtb	r3, r3
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	da2b      	bge.n	800cd58 <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	041a      	lsls	r2, r3, #16
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	781b      	ldrb	r3, [r3, #0]
 800cd0c:	021b      	lsls	r3, r3, #8
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	3202      	adds	r2, #2
 800cd14:	7812      	ldrb	r2, [r2, #0]
 800cd16:	4313      	orrs	r3, r2
 800cd18:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	4a16      	ldr	r2, [pc, #88]	; (800cd78 <hanFontLoad+0xc0>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d30e      	bcc.n	800cd40 <hanFontLoad+0x88>
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	4a15      	ldr	r2, [pc, #84]	; (800cd7c <hanFontLoad+0xc4>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d80a      	bhi.n	800cd40 <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	2203      	movs	r2, #3
 800cd34:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 800cd36:	6839      	ldr	r1, [r7, #0]
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 f91f 	bl	800cf7c <hanUniFontLoad>
 800cd3e:	e009      	b.n	800cd54 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	2201      	movs	r2, #1
 800cd44:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	2202      	movs	r2, #2
 800cd4a:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 800cd4c:	6839      	ldr	r1, [r7, #0]
 800cd4e:	6878      	ldr	r0, [r7, #4]
 800cd50:	f000 f816 	bl	800cd80 <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 800cd54:	2301      	movs	r3, #1
 800cd56:	e00a      	b.n	800cd6e <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	2202      	movs	r2, #2
 800cd5c:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	2201      	movs	r2, #1
 800cd62:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fa30 	bl	800d1cc <hanEngFontLoad>
    return PHAN_ENG_CODE;
 800cd6c:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3710      	adds	r7, #16
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	00eab080 	.word	0x00eab080
 800cd7c:	00ed9fb0 	.word	0x00ed9fb0

0800cd80 <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
 800cd88:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	781b      	ldrb	r3, [r3, #0]
 800cd8e:	021b      	lsls	r3, r3, #8
 800cd90:	b21a      	sxth	r2, r3
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	3301      	adds	r3, #1
 800cd96:	781b      	ldrb	r3, [r3, #0]
 800cd98:	b21b      	sxth	r3, r3
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	b21b      	sxth	r3, r3
 800cd9e:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 800cda0:	89bb      	ldrh	r3, [r7, #12]
 800cda2:	4618      	mov	r0, r3
 800cda4:	f000 fa3c 	bl	800d220 <hanCnvCodeWan2Johab>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 800cdac:	89bb      	ldrh	r3, [r7, #12]
 800cdae:	0a9b      	lsrs	r3, r3, #10
 800cdb0:	b29b      	uxth	r3, r3
 800cdb2:	f003 031f 	and.w	r3, r3, #31
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	4b63      	ldr	r3, [pc, #396]	; (800cf48 <hanWanFontLoad+0x1c8>)
 800cdba:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 800cdbc:	89bb      	ldrh	r3, [r7, #12]
 800cdbe:	095b      	lsrs	r3, r3, #5
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	f003 031f 	and.w	r3, r3, #31
 800cdc6:	b29a      	uxth	r2, r3
 800cdc8:	4b60      	ldr	r3, [pc, #384]	; (800cf4c <hanWanFontLoad+0x1cc>)
 800cdca:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 800cdcc:	89bb      	ldrh	r3, [r7, #12]
 800cdce:	f003 031f 	and.w	r3, r3, #31
 800cdd2:	b29a      	uxth	r2, r3
 800cdd4:	4b5e      	ldr	r3, [pc, #376]	; (800cf50 <hanWanFontLoad+0x1d0>)
 800cdd6:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 800cdd8:	4b5b      	ldr	r3, [pc, #364]	; (800cf48 <hanWanFontLoad+0x1c8>)
 800cdda:	881b      	ldrh	r3, [r3, #0]
 800cddc:	461a      	mov	r2, r3
 800cdde:	4b5d      	ldr	r3, [pc, #372]	; (800cf54 <hanWanFontLoad+0x1d4>)
 800cde0:	5c9b      	ldrb	r3, [r3, r2]
 800cde2:	b29a      	uxth	r2, r3
 800cde4:	4b58      	ldr	r3, [pc, #352]	; (800cf48 <hanWanFontLoad+0x1c8>)
 800cde6:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 800cde8:	4b58      	ldr	r3, [pc, #352]	; (800cf4c <hanWanFontLoad+0x1cc>)
 800cdea:	881b      	ldrh	r3, [r3, #0]
 800cdec:	461a      	mov	r2, r3
 800cdee:	4b5a      	ldr	r3, [pc, #360]	; (800cf58 <hanWanFontLoad+0x1d8>)
 800cdf0:	5c9b      	ldrb	r3, [r3, r2]
 800cdf2:	b29a      	uxth	r2, r3
 800cdf4:	4b55      	ldr	r3, [pc, #340]	; (800cf4c <hanWanFontLoad+0x1cc>)
 800cdf6:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 800cdf8:	4b55      	ldr	r3, [pc, #340]	; (800cf50 <hanWanFontLoad+0x1d0>)
 800cdfa:	881b      	ldrh	r3, [r3, #0]
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	4b57      	ldr	r3, [pc, #348]	; (800cf5c <hanWanFontLoad+0x1dc>)
 800ce00:	5c9b      	ldrb	r3, [r3, r2]
 800ce02:	b29a      	uxth	r2, r3
 800ce04:	4b52      	ldr	r3, [pc, #328]	; (800cf50 <hanWanFontLoad+0x1d0>)
 800ce06:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 800ce08:	4b51      	ldr	r3, [pc, #324]	; (800cf50 <hanWanFontLoad+0x1d0>)
 800ce0a:	881b      	ldrh	r3, [r3, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d006      	beq.n	800ce1e <hanWanFontLoad+0x9e>
 800ce10:	4b4e      	ldr	r3, [pc, #312]	; (800cf4c <hanWanFontLoad+0x1cc>)
 800ce12:	881b      	ldrh	r3, [r3, #0]
 800ce14:	461a      	mov	r2, r3
 800ce16:	4b52      	ldr	r3, [pc, #328]	; (800cf60 <hanWanFontLoad+0x1e0>)
 800ce18:	5c9b      	ldrb	r3, [r3, r2]
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	e005      	b.n	800ce2a <hanWanFontLoad+0xaa>
 800ce1e:	4b4b      	ldr	r3, [pc, #300]	; (800cf4c <hanWanFontLoad+0x1cc>)
 800ce20:	881b      	ldrh	r3, [r3, #0]
 800ce22:	461a      	mov	r2, r3
 800ce24:	4b4f      	ldr	r3, [pc, #316]	; (800cf64 <hanWanFontLoad+0x1e4>)
 800ce26:	5c9b      	ldrb	r3, [r3, r2]
 800ce28:	b29b      	uxth	r3, r3
 800ce2a:	4a4f      	ldr	r2, [pc, #316]	; (800cf68 <hanWanFontLoad+0x1e8>)
 800ce2c:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 800ce2e:	4b46      	ldr	r3, [pc, #280]	; (800cf48 <hanWanFontLoad+0x1c8>)
 800ce30:	881b      	ldrh	r3, [r3, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d009      	beq.n	800ce4a <hanWanFontLoad+0xca>
 800ce36:	4b44      	ldr	r3, [pc, #272]	; (800cf48 <hanWanFontLoad+0x1c8>)
 800ce38:	881b      	ldrh	r3, [r3, #0]
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d005      	beq.n	800ce4a <hanWanFontLoad+0xca>
 800ce3e:	4b42      	ldr	r3, [pc, #264]	; (800cf48 <hanWanFontLoad+0x1c8>)
 800ce40:	881b      	ldrh	r3, [r3, #0]
 800ce42:	2b10      	cmp	r3, #16
 800ce44:	d001      	beq.n	800ce4a <hanWanFontLoad+0xca>
 800ce46:	2301      	movs	r3, #1
 800ce48:	e000      	b.n	800ce4c <hanWanFontLoad+0xcc>
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	4a40      	ldr	r2, [pc, #256]	; (800cf50 <hanWanFontLoad+0x1d0>)
 800ce50:	8812      	ldrh	r2, [r2, #0]
 800ce52:	2a00      	cmp	r2, #0
 800ce54:	d001      	beq.n	800ce5a <hanWanFontLoad+0xda>
 800ce56:	2202      	movs	r2, #2
 800ce58:	e000      	b.n	800ce5c <hanWanFontLoad+0xdc>
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	4413      	add	r3, r2
 800ce5e:	b29a      	uxth	r2, r3
 800ce60:	4b42      	ldr	r3, [pc, #264]	; (800cf6c <hanWanFontLoad+0x1ec>)
 800ce62:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 800ce64:	4b39      	ldr	r3, [pc, #228]	; (800cf4c <hanWanFontLoad+0x1cc>)
 800ce66:	881b      	ldrh	r3, [r3, #0]
 800ce68:	461a      	mov	r2, r3
 800ce6a:	4b41      	ldr	r3, [pc, #260]	; (800cf70 <hanWanFontLoad+0x1f0>)
 800ce6c:	5c9b      	ldrb	r3, [r3, r2]
 800ce6e:	b29a      	uxth	r2, r3
 800ce70:	4b40      	ldr	r3, [pc, #256]	; (800cf74 <hanWanFontLoad+0x1f4>)
 800ce72:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 800ce74:	2300      	movs	r3, #0
 800ce76:	81fb      	strh	r3, [r7, #14]
 800ce78:	e035      	b.n	800cee6 <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 800ce7a:	4b3b      	ldr	r3, [pc, #236]	; (800cf68 <hanWanFontLoad+0x1e8>)
 800ce7c:	881b      	ldrh	r3, [r3, #0]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	4613      	mov	r3, r2
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	4413      	add	r3, r2
 800ce86:	009b      	lsls	r3, r3, #2
 800ce88:	461a      	mov	r2, r3
 800ce8a:	4b2f      	ldr	r3, [pc, #188]	; (800cf48 <hanWanFontLoad+0x1c8>)
 800ce8c:	881b      	ldrh	r3, [r3, #0]
 800ce8e:	441a      	add	r2, r3
 800ce90:	89fb      	ldrh	r3, [r7, #14]
 800ce92:	4939      	ldr	r1, [pc, #228]	; (800cf78 <hanWanFontLoad+0x1f8>)
 800ce94:	0152      	lsls	r2, r2, #5
 800ce96:	4413      	add	r3, r2
 800ce98:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800ce9c:	89fb      	ldrh	r3, [r7, #14]
 800ce9e:	b2d1      	uxtb	r1, r2
 800cea0:	683a      	ldr	r2, [r7, #0]
 800cea2:	4413      	add	r3, r2
 800cea4:	460a      	mov	r2, r1
 800cea6:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 800cea8:	89fb      	ldrh	r3, [r7, #14]
 800ceaa:	683a      	ldr	r2, [r7, #0]
 800ceac:	4413      	add	r3, r2
 800ceae:	7999      	ldrb	r1, [r3, #6]
 800ceb0:	4b2e      	ldr	r3, [pc, #184]	; (800cf6c <hanWanFontLoad+0x1ec>)
 800ceb2:	881b      	ldrh	r3, [r3, #0]
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	2316      	movs	r3, #22
 800ceb8:	fb02 f303 	mul.w	r3, r2, r3
 800cebc:	33a0      	adds	r3, #160	; 0xa0
 800cebe:	4a23      	ldr	r2, [pc, #140]	; (800cf4c <hanWanFontLoad+0x1cc>)
 800cec0:	8812      	ldrh	r2, [r2, #0]
 800cec2:	441a      	add	r2, r3
 800cec4:	89fb      	ldrh	r3, [r7, #14]
 800cec6:	482c      	ldr	r0, [pc, #176]	; (800cf78 <hanWanFontLoad+0x1f8>)
 800cec8:	0152      	lsls	r2, r2, #5
 800ceca:	4413      	add	r3, r2
 800cecc:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800ced0:	b2da      	uxtb	r2, r3
 800ced2:	89fb      	ldrh	r3, [r7, #14]
 800ced4:	430a      	orrs	r2, r1
 800ced6:	b2d1      	uxtb	r1, r2
 800ced8:	683a      	ldr	r2, [r7, #0]
 800ceda:	4413      	add	r3, r2
 800cedc:	460a      	mov	r2, r1
 800cede:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 800cee0:	89fb      	ldrh	r3, [r7, #14]
 800cee2:	3301      	adds	r3, #1
 800cee4:	81fb      	strh	r3, [r7, #14]
 800cee6:	89fb      	ldrh	r3, [r7, #14]
 800cee8:	2b1f      	cmp	r3, #31
 800ceea:	d9c6      	bls.n	800ce7a <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 800ceec:	4b18      	ldr	r3, [pc, #96]	; (800cf50 <hanWanFontLoad+0x1d0>)
 800ceee:	881b      	ldrh	r3, [r3, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d025      	beq.n	800cf40 <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 800cef4:	2300      	movs	r3, #0
 800cef6:	81fb      	strh	r3, [r7, #14]
 800cef8:	e01f      	b.n	800cf3a <hanWanFontLoad+0x1ba>
 800cefa:	89fb      	ldrh	r3, [r7, #14]
 800cefc:	683a      	ldr	r2, [r7, #0]
 800cefe:	4413      	add	r3, r2
 800cf00:	7999      	ldrb	r1, [r3, #6]
 800cf02:	4b1c      	ldr	r3, [pc, #112]	; (800cf74 <hanWanFontLoad+0x1f4>)
 800cf04:	881b      	ldrh	r3, [r3, #0]
 800cf06:	461a      	mov	r2, r3
 800cf08:	4613      	mov	r3, r2
 800cf0a:	00db      	lsls	r3, r3, #3
 800cf0c:	1a9b      	subs	r3, r3, r2
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	33f8      	adds	r3, #248	; 0xf8
 800cf12:	4a0f      	ldr	r2, [pc, #60]	; (800cf50 <hanWanFontLoad+0x1d0>)
 800cf14:	8812      	ldrh	r2, [r2, #0]
 800cf16:	441a      	add	r2, r3
 800cf18:	89fb      	ldrh	r3, [r7, #14]
 800cf1a:	4817      	ldr	r0, [pc, #92]	; (800cf78 <hanWanFontLoad+0x1f8>)
 800cf1c:	0152      	lsls	r2, r2, #5
 800cf1e:	4413      	add	r3, r2
 800cf20:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	89fb      	ldrh	r3, [r7, #14]
 800cf28:	430a      	orrs	r2, r1
 800cf2a:	b2d1      	uxtb	r1, r2
 800cf2c:	683a      	ldr	r2, [r7, #0]
 800cf2e:	4413      	add	r3, r2
 800cf30:	460a      	mov	r2, r1
 800cf32:	719a      	strb	r2, [r3, #6]
 800cf34:	89fb      	ldrh	r3, [r7, #14]
 800cf36:	3301      	adds	r3, #1
 800cf38:	81fb      	strh	r3, [r7, #14]
 800cf3a:	89fb      	ldrh	r3, [r7, #14]
 800cf3c:	2b1f      	cmp	r3, #31
 800cf3e:	d9dc      	bls.n	800cefa <hanWanFontLoad+0x17a>
  }
}
 800cf40:	bf00      	nop
 800cf42:	3710      	adds	r7, #16
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	200014e8 	.word	0x200014e8
 800cf4c:	200014ea 	.word	0x200014ea
 800cf50:	200014ec 	.word	0x200014ec
 800cf54:	08018290 	.word	0x08018290
 800cf58:	080182b0 	.word	0x080182b0
 800cf5c:	080182d0 	.word	0x080182d0
 800cf60:	08018368 	.word	0x08018368
 800cf64:	08018350 	.word	0x08018350
 800cf68:	200014ee 	.word	0x200014ee
 800cf6c:	200014f0 	.word	0x200014f0
 800cf70:	08018380 	.word	0x08018380
 800cf74:	200014f2 	.word	0x200014f2
 800cf78:	0801a880 	.word	0x0801a880

0800cf7c <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	031b      	lsls	r3, r3, #12
 800cf8c:	b21a      	sxth	r2, r3
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	3301      	adds	r3, #1
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	019b      	lsls	r3, r3, #6
 800cf96:	b21b      	sxth	r3, r3
 800cf98:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800cf9c:	b21b      	sxth	r3, r3
 800cf9e:	4313      	orrs	r3, r2
 800cfa0:	b21a      	sxth	r2, r3
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	3302      	adds	r3, #2
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	b21b      	sxth	r3, r3
 800cfaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cfae:	b21b      	sxth	r3, r3
 800cfb0:	4313      	orrs	r3, r2
 800cfb2:	b21b      	sxth	r3, r3
 800cfb4:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 800cfb6:	89bb      	ldrh	r3, [r7, #12]
 800cfb8:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 800cfbc:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 800cfbe:	89ba      	ldrh	r2, [r7, #12]
 800cfc0:	0893      	lsrs	r3, r2, #2
 800cfc2:	4973      	ldr	r1, [pc, #460]	; (800d190 <hanUniFontLoad+0x214>)
 800cfc4:	fba1 3103 	umull	r3, r1, r1, r3
 800cfc8:	460b      	mov	r3, r1
 800cfca:	00db      	lsls	r3, r3, #3
 800cfcc:	1a5b      	subs	r3, r3, r1
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	1ad3      	subs	r3, r2, r3
 800cfd2:	b29a      	uxth	r2, r3
 800cfd4:	4b6f      	ldr	r3, [pc, #444]	; (800d194 <hanUniFontLoad+0x218>)
 800cfd6:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 800cfd8:	89bb      	ldrh	r3, [r7, #12]
 800cfda:	089b      	lsrs	r3, r3, #2
 800cfdc:	4a6c      	ldr	r2, [pc, #432]	; (800d190 <hanUniFontLoad+0x214>)
 800cfde:	fba2 2303 	umull	r2, r3, r2, r3
 800cfe2:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 800cfe4:	89b9      	ldrh	r1, [r7, #12]
 800cfe6:	4b6c      	ldr	r3, [pc, #432]	; (800d198 <hanUniFontLoad+0x21c>)
 800cfe8:	fba3 2301 	umull	r2, r3, r3, r1
 800cfec:	1aca      	subs	r2, r1, r3
 800cfee:	0852      	lsrs	r2, r2, #1
 800cff0:	4413      	add	r3, r2
 800cff2:	091a      	lsrs	r2, r3, #4
 800cff4:	4613      	mov	r3, r2
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	4413      	add	r3, r2
 800cffa:	00da      	lsls	r2, r3, #3
 800cffc:	1ad2      	subs	r2, r2, r3
 800cffe:	1a8b      	subs	r3, r1, r2
 800d000:	b29a      	uxth	r2, r3
 800d002:	4b66      	ldr	r3, [pc, #408]	; (800d19c <hanUniFontLoad+0x220>)
 800d004:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 800d006:	89ba      	ldrh	r2, [r7, #12]
 800d008:	4b63      	ldr	r3, [pc, #396]	; (800d198 <hanUniFontLoad+0x21c>)
 800d00a:	fba3 1302 	umull	r1, r3, r3, r2
 800d00e:	1ad2      	subs	r2, r2, r3
 800d010:	0852      	lsrs	r2, r2, #1
 800d012:	4413      	add	r3, r2
 800d014:	091b      	lsrs	r3, r3, #4
 800d016:	b29a      	uxth	r2, r3
 800d018:	4b61      	ldr	r3, [pc, #388]	; (800d1a0 <hanUniFontLoad+0x224>)
 800d01a:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 800d01c:	4b60      	ldr	r3, [pc, #384]	; (800d1a0 <hanUniFontLoad+0x224>)
 800d01e:	881b      	ldrh	r3, [r3, #0]
 800d020:	461a      	mov	r2, r3
 800d022:	4b60      	ldr	r3, [pc, #384]	; (800d1a4 <hanUniFontLoad+0x228>)
 800d024:	5c9b      	ldrb	r3, [r3, r2]
 800d026:	b29a      	uxth	r2, r3
 800d028:	4b5d      	ldr	r3, [pc, #372]	; (800d1a0 <hanUniFontLoad+0x224>)
 800d02a:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 800d02c:	4b5b      	ldr	r3, [pc, #364]	; (800d19c <hanUniFontLoad+0x220>)
 800d02e:	881b      	ldrh	r3, [r3, #0]
 800d030:	461a      	mov	r2, r3
 800d032:	4b5d      	ldr	r3, [pc, #372]	; (800d1a8 <hanUniFontLoad+0x22c>)
 800d034:	5c9b      	ldrb	r3, [r3, r2]
 800d036:	b29a      	uxth	r2, r3
 800d038:	4b58      	ldr	r3, [pc, #352]	; (800d19c <hanUniFontLoad+0x220>)
 800d03a:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 800d03c:	4b55      	ldr	r3, [pc, #340]	; (800d194 <hanUniFontLoad+0x218>)
 800d03e:	881b      	ldrh	r3, [r3, #0]
 800d040:	461a      	mov	r2, r3
 800d042:	4b5a      	ldr	r3, [pc, #360]	; (800d1ac <hanUniFontLoad+0x230>)
 800d044:	5c9b      	ldrb	r3, [r3, r2]
 800d046:	b29a      	uxth	r2, r3
 800d048:	4b52      	ldr	r3, [pc, #328]	; (800d194 <hanUniFontLoad+0x218>)
 800d04a:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 800d04c:	4b51      	ldr	r3, [pc, #324]	; (800d194 <hanUniFontLoad+0x218>)
 800d04e:	881b      	ldrh	r3, [r3, #0]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d006      	beq.n	800d062 <hanUniFontLoad+0xe6>
 800d054:	4b51      	ldr	r3, [pc, #324]	; (800d19c <hanUniFontLoad+0x220>)
 800d056:	881b      	ldrh	r3, [r3, #0]
 800d058:	461a      	mov	r2, r3
 800d05a:	4b55      	ldr	r3, [pc, #340]	; (800d1b0 <hanUniFontLoad+0x234>)
 800d05c:	5c9b      	ldrb	r3, [r3, r2]
 800d05e:	b29b      	uxth	r3, r3
 800d060:	e005      	b.n	800d06e <hanUniFontLoad+0xf2>
 800d062:	4b4e      	ldr	r3, [pc, #312]	; (800d19c <hanUniFontLoad+0x220>)
 800d064:	881b      	ldrh	r3, [r3, #0]
 800d066:	461a      	mov	r2, r3
 800d068:	4b52      	ldr	r3, [pc, #328]	; (800d1b4 <hanUniFontLoad+0x238>)
 800d06a:	5c9b      	ldrb	r3, [r3, r2]
 800d06c:	b29b      	uxth	r3, r3
 800d06e:	4a52      	ldr	r2, [pc, #328]	; (800d1b8 <hanUniFontLoad+0x23c>)
 800d070:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 800d072:	4b4b      	ldr	r3, [pc, #300]	; (800d1a0 <hanUniFontLoad+0x224>)
 800d074:	881b      	ldrh	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d009      	beq.n	800d08e <hanUniFontLoad+0x112>
 800d07a:	4b49      	ldr	r3, [pc, #292]	; (800d1a0 <hanUniFontLoad+0x224>)
 800d07c:	881b      	ldrh	r3, [r3, #0]
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d005      	beq.n	800d08e <hanUniFontLoad+0x112>
 800d082:	4b47      	ldr	r3, [pc, #284]	; (800d1a0 <hanUniFontLoad+0x224>)
 800d084:	881b      	ldrh	r3, [r3, #0]
 800d086:	2b10      	cmp	r3, #16
 800d088:	d001      	beq.n	800d08e <hanUniFontLoad+0x112>
 800d08a:	2301      	movs	r3, #1
 800d08c:	e000      	b.n	800d090 <hanUniFontLoad+0x114>
 800d08e:	2300      	movs	r3, #0
 800d090:	b29b      	uxth	r3, r3
 800d092:	4a40      	ldr	r2, [pc, #256]	; (800d194 <hanUniFontLoad+0x218>)
 800d094:	8812      	ldrh	r2, [r2, #0]
 800d096:	2a00      	cmp	r2, #0
 800d098:	d001      	beq.n	800d09e <hanUniFontLoad+0x122>
 800d09a:	2202      	movs	r2, #2
 800d09c:	e000      	b.n	800d0a0 <hanUniFontLoad+0x124>
 800d09e:	2200      	movs	r2, #0
 800d0a0:	4413      	add	r3, r2
 800d0a2:	b29a      	uxth	r2, r3
 800d0a4:	4b45      	ldr	r3, [pc, #276]	; (800d1bc <hanUniFontLoad+0x240>)
 800d0a6:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 800d0a8:	4b3c      	ldr	r3, [pc, #240]	; (800d19c <hanUniFontLoad+0x220>)
 800d0aa:	881b      	ldrh	r3, [r3, #0]
 800d0ac:	461a      	mov	r2, r3
 800d0ae:	4b44      	ldr	r3, [pc, #272]	; (800d1c0 <hanUniFontLoad+0x244>)
 800d0b0:	5c9b      	ldrb	r3, [r3, r2]
 800d0b2:	b29a      	uxth	r2, r3
 800d0b4:	4b43      	ldr	r3, [pc, #268]	; (800d1c4 <hanUniFontLoad+0x248>)
 800d0b6:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	81fb      	strh	r3, [r7, #14]
 800d0bc:	e035      	b.n	800d12a <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 800d0be:	4b3e      	ldr	r3, [pc, #248]	; (800d1b8 <hanUniFontLoad+0x23c>)
 800d0c0:	881b      	ldrh	r3, [r3, #0]
 800d0c2:	461a      	mov	r2, r3
 800d0c4:	4613      	mov	r3, r2
 800d0c6:	009b      	lsls	r3, r3, #2
 800d0c8:	4413      	add	r3, r2
 800d0ca:	009b      	lsls	r3, r3, #2
 800d0cc:	461a      	mov	r2, r3
 800d0ce:	4b34      	ldr	r3, [pc, #208]	; (800d1a0 <hanUniFontLoad+0x224>)
 800d0d0:	881b      	ldrh	r3, [r3, #0]
 800d0d2:	441a      	add	r2, r3
 800d0d4:	89fb      	ldrh	r3, [r7, #14]
 800d0d6:	493c      	ldr	r1, [pc, #240]	; (800d1c8 <hanUniFontLoad+0x24c>)
 800d0d8:	0152      	lsls	r2, r2, #5
 800d0da:	4413      	add	r3, r2
 800d0dc:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800d0e0:	89fb      	ldrh	r3, [r7, #14]
 800d0e2:	b2d1      	uxtb	r1, r2
 800d0e4:	683a      	ldr	r2, [r7, #0]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	460a      	mov	r2, r1
 800d0ea:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 800d0ec:	89fb      	ldrh	r3, [r7, #14]
 800d0ee:	683a      	ldr	r2, [r7, #0]
 800d0f0:	4413      	add	r3, r2
 800d0f2:	7999      	ldrb	r1, [r3, #6]
 800d0f4:	4b31      	ldr	r3, [pc, #196]	; (800d1bc <hanUniFontLoad+0x240>)
 800d0f6:	881b      	ldrh	r3, [r3, #0]
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	2316      	movs	r3, #22
 800d0fc:	fb02 f303 	mul.w	r3, r2, r3
 800d100:	33a0      	adds	r3, #160	; 0xa0
 800d102:	4a26      	ldr	r2, [pc, #152]	; (800d19c <hanUniFontLoad+0x220>)
 800d104:	8812      	ldrh	r2, [r2, #0]
 800d106:	441a      	add	r2, r3
 800d108:	89fb      	ldrh	r3, [r7, #14]
 800d10a:	482f      	ldr	r0, [pc, #188]	; (800d1c8 <hanUniFontLoad+0x24c>)
 800d10c:	0152      	lsls	r2, r2, #5
 800d10e:	4413      	add	r3, r2
 800d110:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800d114:	b2da      	uxtb	r2, r3
 800d116:	89fb      	ldrh	r3, [r7, #14]
 800d118:	430a      	orrs	r2, r1
 800d11a:	b2d1      	uxtb	r1, r2
 800d11c:	683a      	ldr	r2, [r7, #0]
 800d11e:	4413      	add	r3, r2
 800d120:	460a      	mov	r2, r1
 800d122:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 800d124:	89fb      	ldrh	r3, [r7, #14]
 800d126:	3301      	adds	r3, #1
 800d128:	81fb      	strh	r3, [r7, #14]
 800d12a:	89fb      	ldrh	r3, [r7, #14]
 800d12c:	2b1f      	cmp	r3, #31
 800d12e:	d9c6      	bls.n	800d0be <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 800d130:	4b18      	ldr	r3, [pc, #96]	; (800d194 <hanUniFontLoad+0x218>)
 800d132:	881b      	ldrh	r3, [r3, #0]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d025      	beq.n	800d184 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 800d138:	2300      	movs	r3, #0
 800d13a:	81fb      	strh	r3, [r7, #14]
 800d13c:	e01f      	b.n	800d17e <hanUniFontLoad+0x202>
 800d13e:	89fb      	ldrh	r3, [r7, #14]
 800d140:	683a      	ldr	r2, [r7, #0]
 800d142:	4413      	add	r3, r2
 800d144:	7999      	ldrb	r1, [r3, #6]
 800d146:	4b1f      	ldr	r3, [pc, #124]	; (800d1c4 <hanUniFontLoad+0x248>)
 800d148:	881b      	ldrh	r3, [r3, #0]
 800d14a:	461a      	mov	r2, r3
 800d14c:	4613      	mov	r3, r2
 800d14e:	00db      	lsls	r3, r3, #3
 800d150:	1a9b      	subs	r3, r3, r2
 800d152:	009b      	lsls	r3, r3, #2
 800d154:	33f8      	adds	r3, #248	; 0xf8
 800d156:	4a0f      	ldr	r2, [pc, #60]	; (800d194 <hanUniFontLoad+0x218>)
 800d158:	8812      	ldrh	r2, [r2, #0]
 800d15a:	441a      	add	r2, r3
 800d15c:	89fb      	ldrh	r3, [r7, #14]
 800d15e:	481a      	ldr	r0, [pc, #104]	; (800d1c8 <hanUniFontLoad+0x24c>)
 800d160:	0152      	lsls	r2, r2, #5
 800d162:	4413      	add	r3, r2
 800d164:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	89fb      	ldrh	r3, [r7, #14]
 800d16c:	430a      	orrs	r2, r1
 800d16e:	b2d1      	uxtb	r1, r2
 800d170:	683a      	ldr	r2, [r7, #0]
 800d172:	4413      	add	r3, r2
 800d174:	460a      	mov	r2, r1
 800d176:	719a      	strb	r2, [r3, #6]
 800d178:	89fb      	ldrh	r3, [r7, #14]
 800d17a:	3301      	adds	r3, #1
 800d17c:	81fb      	strh	r3, [r7, #14]
 800d17e:	89fb      	ldrh	r3, [r7, #14]
 800d180:	2b1f      	cmp	r3, #31
 800d182:	d9dc      	bls.n	800d13e <hanUniFontLoad+0x1c2>
  }
}
 800d184:	bf00      	nop
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr
 800d190:	24924925 	.word	0x24924925
 800d194:	200014f4 	.word	0x200014f4
 800d198:	86186187 	.word	0x86186187
 800d19c:	200014f6 	.word	0x200014f6
 800d1a0:	200014f8 	.word	0x200014f8
 800d1a4:	080182f0 	.word	0x080182f0
 800d1a8:	08018310 	.word	0x08018310
 800d1ac:	08018330 	.word	0x08018330
 800d1b0:	08018368 	.word	0x08018368
 800d1b4:	08018350 	.word	0x08018350
 800d1b8:	200014fa 	.word	0x200014fa
 800d1bc:	200014fc 	.word	0x200014fc
 800d1c0:	08018380 	.word	0x08018380
 800d1c4:	200014fe 	.word	0x200014fe
 800d1c8:	0801a880 	.word	0x0801a880

0800d1cc <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	b085      	sub	sp, #20
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 800d1dc:	7b7b      	ldrb	r3, [r7, #13]
 800d1de:	3b20      	subs	r3, #32
 800d1e0:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	81fb      	strh	r3, [r7, #14]
 800d1e6:	e00f      	b.n	800d208 <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 800d1e8:	7b7a      	ldrb	r2, [r7, #13]
 800d1ea:	89fb      	ldrh	r3, [r7, #14]
 800d1ec:	490b      	ldr	r1, [pc, #44]	; (800d21c <hanEngFontLoad+0x50>)
 800d1ee:	0112      	lsls	r2, r2, #4
 800d1f0:	4413      	add	r3, r2
 800d1f2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 800d1f6:	89fb      	ldrh	r3, [r7, #14]
 800d1f8:	b2d1      	uxtb	r1, r2
 800d1fa:	683a      	ldr	r2, [r7, #0]
 800d1fc:	4413      	add	r3, r2
 800d1fe:	460a      	mov	r2, r1
 800d200:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 800d202:	89fb      	ldrh	r3, [r7, #14]
 800d204:	3301      	adds	r3, #1
 800d206:	81fb      	strh	r3, [r7, #14]
 800d208:	89fb      	ldrh	r3, [r7, #14]
 800d20a:	2b0f      	cmp	r3, #15
 800d20c:	d9ec      	bls.n	800d1e8 <hanEngFontLoad+0x1c>
  }
}
 800d20e:	bf00      	nop
 800d210:	bf00      	nop
 800d212:	3714      	adds	r7, #20
 800d214:	46bd      	mov	sp, r7
 800d216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21a:	4770      	bx	lr
 800d21c:	08016a90 	.word	0x08016a90

0800d220 <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 800d220:	b480      	push	{r7}
 800d222:	b085      	sub	sp, #20
 800d224:	af00      	add	r7, sp, #0
 800d226:	4603      	mov	r3, r0
 800d228:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 800d22a:	88fb      	ldrh	r3, [r7, #6]
 800d22c:	0a1b      	lsrs	r3, r3, #8
 800d22e:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 800d230:	88fb      	ldrh	r3, [r7, #6]
 800d232:	b2db      	uxtb	r3, r3
 800d234:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 800d236:	89fb      	ldrh	r3, [r7, #14]
 800d238:	3bb0      	subs	r3, #176	; 0xb0
 800d23a:	225e      	movs	r2, #94	; 0x5e
 800d23c:	fb03 f202 	mul.w	r2, r3, r2
 800d240:	89bb      	ldrh	r3, [r7, #12]
 800d242:	3ba1      	subs	r3, #161	; 0xa1
 800d244:	4413      	add	r3, r2
 800d246:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 800d248:	4a05      	ldr	r2, [pc, #20]	; (800d260 <hanCnvCodeWan2Johab+0x40>)
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d250:	b29b      	uxth	r3, r3
}
 800d252:	4618      	mov	r0, r3
 800d254:	3714      	adds	r7, #20
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr
 800d25e:	bf00      	nop
 800d260:	080183c0 	.word	0x080183c0

0800d264 <ssd1306Init>:
static uint8_t ssd1306_buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];



bool ssd1306Init(void)
{
 800d264:	b580      	push	{r7, lr}
 800d266:	b082      	sub	sp, #8
 800d268:	af00      	add	r7, sp, #0
  bool ret;

  ret = ssd1306Reset();
 800d26a:	f000 f84f 	bl	800d30c <ssd1306Reset>
 800d26e:	4603      	mov	r3, r0
 800d270:	71fb      	strb	r3, [r7, #7]

  return ret;
 800d272:	79fb      	ldrb	r3, [r7, #7]
}
 800d274:	4618      	mov	r0, r3
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <ssd1306InitDriver>:

bool ssd1306InitDriver(lcd_driver_t *p_driver)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  p_driver->init        = ssd1306Init;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	4a0d      	ldr	r2, [pc, #52]	; (800d2bc <ssd1306InitDriver+0x40>)
 800d288:	601a      	str	r2, [r3, #0]
  p_driver->reset       = ssd1306Reset;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	4a0c      	ldr	r2, [pc, #48]	; (800d2c0 <ssd1306InitDriver+0x44>)
 800d28e:	605a      	str	r2, [r3, #4]
  p_driver->setWindow   = ssd1306SetWindow;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	4a0c      	ldr	r2, [pc, #48]	; (800d2c4 <ssd1306InitDriver+0x48>)
 800d294:	609a      	str	r2, [r3, #8]
  p_driver->getWidth    = ssd1306GetWidth;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	4a0b      	ldr	r2, [pc, #44]	; (800d2c8 <ssd1306InitDriver+0x4c>)
 800d29a:	60da      	str	r2, [r3, #12]
  p_driver->getHeight   = ssd1306GetHeight;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	4a0b      	ldr	r2, [pc, #44]	; (800d2cc <ssd1306InitDriver+0x50>)
 800d2a0:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = ssd1306SetCallBack;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	4a0a      	ldr	r2, [pc, #40]	; (800d2d0 <ssd1306InitDriver+0x54>)
 800d2a6:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer  = ssd1306SendBuffer;
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	4a0a      	ldr	r2, [pc, #40]	; (800d2d4 <ssd1306InitDriver+0x58>)
 800d2ac:	619a      	str	r2, [r3, #24]
  return true;
 800d2ae:	2301      	movs	r3, #1
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	370c      	adds	r7, #12
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr
 800d2bc:	0800d265 	.word	0x0800d265
 800d2c0:	0800d30d 	.word	0x0800d30d
 800d2c4:	0800d419 	.word	0x0800d419
 800d2c8:	0800d433 	.word	0x0800d433
 800d2cc:	0800d443 	.word	0x0800d443
 800d2d0:	0800d4c9 	.word	0x0800d4c9
 800d2d4:	0800d455 	.word	0x0800d455

0800d2d8 <ssd1306WriteCmd>:

bool ssd1306WriteCmd(uint8_t cmd_data)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af02      	add	r7, sp, #8
 800d2de:	4603      	mov	r3, r0
 800d2e0:	71fb      	strb	r3, [r7, #7]
  return i2cWriteByte(i2c_ch, i2c_dev, 0x00, cmd_data, 10);
 800d2e2:	4b08      	ldr	r3, [pc, #32]	; (800d304 <ssd1306WriteCmd+0x2c>)
 800d2e4:	7818      	ldrb	r0, [r3, #0]
 800d2e6:	4b08      	ldr	r3, [pc, #32]	; (800d308 <ssd1306WriteCmd+0x30>)
 800d2e8:	781b      	ldrb	r3, [r3, #0]
 800d2ea:	b299      	uxth	r1, r3
 800d2ec:	79fb      	ldrb	r3, [r7, #7]
 800d2ee:	220a      	movs	r2, #10
 800d2f0:	9200      	str	r2, [sp, #0]
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	f004 f846 	bl	8011384 <i2cWriteByte>
 800d2f8:	4603      	mov	r3, r0
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3708      	adds	r7, #8
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	20000038 	.word	0x20000038
 800d308:	20000039 	.word	0x20000039

0800d30c <ssd1306Reset>:

bool ssd1306Reset(void)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b082      	sub	sp, #8
 800d310:	af00      	add	r7, sp, #0
  bool ret;

  ret = i2cOpen(i2c_ch, I2C_FREQ_400KHz);
 800d312:	4b3f      	ldr	r3, [pc, #252]	; (800d410 <ssd1306Reset+0x104>)
 800d314:	781b      	ldrb	r3, [r3, #0]
 800d316:	2101      	movs	r1, #1
 800d318:	4618      	mov	r0, r3
 800d31a:	f003 feff 	bl	801111c <i2cOpen>
 800d31e:	4603      	mov	r3, r0
 800d320:	71fb      	strb	r3, [r7, #7]

  if (ret != true)
 800d322:	79fb      	ldrb	r3, [r7, #7]
 800d324:	f083 0301 	eor.w	r3, r3, #1
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d001      	beq.n	800d332 <ssd1306Reset+0x26>
  {
    return false;
 800d32e:	2300      	movs	r3, #0
 800d330:	e069      	b.n	800d406 <ssd1306Reset+0xfa>
  }

  if (i2cIsDeviceReady(i2c_ch, i2c_dev) != true)
 800d332:	4b37      	ldr	r3, [pc, #220]	; (800d410 <ssd1306Reset+0x104>)
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	4a37      	ldr	r2, [pc, #220]	; (800d414 <ssd1306Reset+0x108>)
 800d338:	7812      	ldrb	r2, [r2, #0]
 800d33a:	4611      	mov	r1, r2
 800d33c:	4618      	mov	r0, r3
 800d33e:	f003 ff53 	bl	80111e8 <i2cIsDeviceReady>
 800d342:	4603      	mov	r3, r0
 800d344:	f083 0301 	eor.w	r3, r3, #1
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d001      	beq.n	800d352 <ssd1306Reset+0x46>
  {
    return false;
 800d34e:	2300      	movs	r3, #0
 800d350:	e059      	b.n	800d406 <ssd1306Reset+0xfa>
  }

  /* Init LCD */
  ssd1306WriteCmd(0xAE); //display off
 800d352:	20ae      	movs	r0, #174	; 0xae
 800d354:	f7ff ffc0 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x20); //Set Memory Addressing Mode
 800d358:	2020      	movs	r0, #32
 800d35a:	f7ff ffbd 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800d35e:	2010      	movs	r0, #16
 800d360:	f7ff ffba 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800d364:	20b0      	movs	r0, #176	; 0xb0
 800d366:	f7ff ffb7 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xC8); //Set COM Output Scan Direction
 800d36a:	20c8      	movs	r0, #200	; 0xc8
 800d36c:	f7ff ffb4 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x00); //---set low column address
 800d370:	2000      	movs	r0, #0
 800d372:	f7ff ffb1 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x10); //---set high column address
 800d376:	2010      	movs	r0, #16
 800d378:	f7ff ffae 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x40); //--set start line address
 800d37c:	2040      	movs	r0, #64	; 0x40
 800d37e:	f7ff ffab 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x81); //--set contrast control register
 800d382:	2081      	movs	r0, #129	; 0x81
 800d384:	f7ff ffa8 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xFF);
 800d388:	20ff      	movs	r0, #255	; 0xff
 800d38a:	f7ff ffa5 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xA1); //--set segment re-map 0 to 127
 800d38e:	20a1      	movs	r0, #161	; 0xa1
 800d390:	f7ff ffa2 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xA6); //--set normal display
 800d394:	20a6      	movs	r0, #166	; 0xa6
 800d396:	f7ff ff9f 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xA8); //--set multiplex ratio(1 to 64)
 800d39a:	20a8      	movs	r0, #168	; 0xa8
 800d39c:	f7ff ff9c 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x3F); //
 800d3a0:	203f      	movs	r0, #63	; 0x3f
 800d3a2:	f7ff ff99 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800d3a6:	20a4      	movs	r0, #164	; 0xa4
 800d3a8:	f7ff ff96 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xD3); //-set display offset
 800d3ac:	20d3      	movs	r0, #211	; 0xd3
 800d3ae:	f7ff ff93 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x00); //-not offset
 800d3b2:	2000      	movs	r0, #0
 800d3b4:	f7ff ff90 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xD5); //--set display clock divide ratio/oscillator frequency
 800d3b8:	20d5      	movs	r0, #213	; 0xd5
 800d3ba:	f7ff ff8d 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xF0); //--set divide ratio
 800d3be:	20f0      	movs	r0, #240	; 0xf0
 800d3c0:	f7ff ff8a 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xD9); //--set pre-charge period
 800d3c4:	20d9      	movs	r0, #217	; 0xd9
 800d3c6:	f7ff ff87 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x22); //
 800d3ca:	2022      	movs	r0, #34	; 0x22
 800d3cc:	f7ff ff84 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xDA); //--set com pins hardware configuration
 800d3d0:	20da      	movs	r0, #218	; 0xda
 800d3d2:	f7ff ff81 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x12);
 800d3d6:	2012      	movs	r0, #18
 800d3d8:	f7ff ff7e 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xDB); //--set vcomh
 800d3dc:	20db      	movs	r0, #219	; 0xdb
 800d3de:	f7ff ff7b 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x20); //0x20,0.77xVcc
 800d3e2:	2020      	movs	r0, #32
 800d3e4:	f7ff ff78 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x8D); //--set DC-DC enable
 800d3e8:	208d      	movs	r0, #141	; 0x8d
 800d3ea:	f7ff ff75 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0x14); //
 800d3ee:	2014      	movs	r0, #20
 800d3f0:	f7ff ff72 	bl	800d2d8 <ssd1306WriteCmd>
  ssd1306WriteCmd(0xAF); //--turn on SSD1306 panel
 800d3f4:	20af      	movs	r0, #175	; 0xaf
 800d3f6:	f7ff ff6f 	bl	800d2d8 <ssd1306WriteCmd>

  ssd1306Fill(black);
 800d3fa:	2000      	movs	r0, #0
 800d3fc:	f000 f874 	bl	800d4e8 <ssd1306Fill>
  ssd1306UpdateDraw();
 800d400:	f000 f896 	bl	800d530 <ssd1306UpdateDraw>

  return true;
 800d404:	2301      	movs	r3, #1
}
 800d406:	4618      	mov	r0, r3
 800d408:	3708      	adds	r7, #8
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}
 800d40e:	bf00      	nop
 800d410:	20000038 	.word	0x20000038
 800d414:	20000039 	.word	0x20000039

0800d418 <ssd1306SetWindow>:

void ssd1306SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 800d418:	b480      	push	{r7}
 800d41a:	b085      	sub	sp, #20
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]
 800d424:	603b      	str	r3, [r7, #0]
}
 800d426:	bf00      	nop
 800d428:	3714      	adds	r7, #20
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr

0800d432 <ssd1306GetWidth>:

uint16_t ssd1306GetWidth(void)
{
 800d432:	b480      	push	{r7}
 800d434:	af00      	add	r7, sp, #0
  return LCD_WIDTH;
 800d436:	2380      	movs	r3, #128	; 0x80
}
 800d438:	4618      	mov	r0, r3
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <ssd1306GetHeight>:

uint16_t ssd1306GetHeight(void)
{
 800d442:	b480      	push	{r7}
 800d444:	af00      	add	r7, sp, #0
  return LCD_HEIGHT;
 800d446:	2340      	movs	r3, #64	; 0x40
}
 800d448:	4618      	mov	r0, r3
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr
	...

0800d454 <ssd1306SendBuffer>:

bool ssd1306SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b088      	sub	sp, #32
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60f8      	str	r0, [r7, #12]
 800d45c:	60b9      	str	r1, [r7, #8]
 800d45e:	607a      	str	r2, [r7, #4]
  uint16_t *p_buf = (uint16_t *)p_data;
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	617b      	str	r3, [r7, #20]


  for (int y=0; y<SSD1306_HEIGHT; y++)
 800d464:	2300      	movs	r3, #0
 800d466:	61fb      	str	r3, [r7, #28]
 800d468:	e01a      	b.n	800d4a0 <ssd1306SendBuffer+0x4c>
  {
    for (int x=0; x<SSD1306_WIDTH; x++)
 800d46a:	2300      	movs	r3, #0
 800d46c:	61bb      	str	r3, [r7, #24]
 800d46e:	e011      	b.n	800d494 <ssd1306SendBuffer+0x40>
    {
      ssd1306DrawPixel(x, y, p_buf[y*LCD_WIDTH + x]);
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	b2d8      	uxtb	r0, r3
 800d474:	69fb      	ldr	r3, [r7, #28]
 800d476:	b2d9      	uxtb	r1, r3
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	01da      	lsls	r2, r3, #7
 800d47c:	69bb      	ldr	r3, [r7, #24]
 800d47e:	4413      	add	r3, r2
 800d480:	005b      	lsls	r3, r3, #1
 800d482:	697a      	ldr	r2, [r7, #20]
 800d484:	4413      	add	r3, r2
 800d486:	881b      	ldrh	r3, [r3, #0]
 800d488:	461a      	mov	r2, r3
 800d48a:	f000 f88d 	bl	800d5a8 <ssd1306DrawPixel>
    for (int x=0; x<SSD1306_WIDTH; x++)
 800d48e:	69bb      	ldr	r3, [r7, #24]
 800d490:	3301      	adds	r3, #1
 800d492:	61bb      	str	r3, [r7, #24]
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	2b7f      	cmp	r3, #127	; 0x7f
 800d498:	ddea      	ble.n	800d470 <ssd1306SendBuffer+0x1c>
  for (int y=0; y<SSD1306_HEIGHT; y++)
 800d49a:	69fb      	ldr	r3, [r7, #28]
 800d49c:	3301      	adds	r3, #1
 800d49e:	61fb      	str	r3, [r7, #28]
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	2b3f      	cmp	r3, #63	; 0x3f
 800d4a4:	dde1      	ble.n	800d46a <ssd1306SendBuffer+0x16>
    }
  }

  ssd1306UpdateDraw();
 800d4a6:	f000 f843 	bl	800d530 <ssd1306UpdateDraw>

  if (frameCallBack != NULL)
 800d4aa:	4b06      	ldr	r3, [pc, #24]	; (800d4c4 <ssd1306SendBuffer+0x70>)
 800d4ac:	681b      	ldr	r3, [r3, #0]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d002      	beq.n	800d4b8 <ssd1306SendBuffer+0x64>
  {
    frameCallBack();
 800d4b2:	4b04      	ldr	r3, [pc, #16]	; (800d4c4 <ssd1306SendBuffer+0x70>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	4798      	blx	r3
  }
  return true;
 800d4b8:	2301      	movs	r3, #1
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3720      	adds	r7, #32
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop
 800d4c4:	20001500 	.word	0x20001500

0800d4c8 <ssd1306SetCallBack>:

bool ssd1306SetCallBack(void (*p_func)(void))
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 800d4d0:	4a04      	ldr	r2, [pc, #16]	; (800d4e4 <ssd1306SetCallBack+0x1c>)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6013      	str	r3, [r2, #0]

  return true;
 800d4d6:	2301      	movs	r3, #1
}
 800d4d8:	4618      	mov	r0, r3
 800d4da:	370c      	adds	r7, #12
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e2:	4770      	bx	lr
 800d4e4:	20001500 	.word	0x20001500

0800d4e8 <ssd1306Fill>:

void ssd1306Fill(uint16_t color)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b085      	sub	sp, #20
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	80fb      	strh	r3, [r7, #6]
  uint32_t i;

  for(i = 0; i < sizeof(ssd1306_buffer); i++)
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	60fb      	str	r3, [r7, #12]
 800d4f6:	e00d      	b.n	800d514 <ssd1306Fill+0x2c>
  {
    ssd1306_buffer[i] = (color > 0) ? 0xFF : 0x00;
 800d4f8:	88fb      	ldrh	r3, [r7, #6]
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d001      	beq.n	800d502 <ssd1306Fill+0x1a>
 800d4fe:	21ff      	movs	r1, #255	; 0xff
 800d500:	e000      	b.n	800d504 <ssd1306Fill+0x1c>
 800d502:	2100      	movs	r1, #0
 800d504:	4a09      	ldr	r2, [pc, #36]	; (800d52c <ssd1306Fill+0x44>)
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	4413      	add	r3, r2
 800d50a:	460a      	mov	r2, r1
 800d50c:	701a      	strb	r2, [r3, #0]
  for(i = 0; i < sizeof(ssd1306_buffer); i++)
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	3301      	adds	r3, #1
 800d512:	60fb      	str	r3, [r7, #12]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d51a:	d3ed      	bcc.n	800d4f8 <ssd1306Fill+0x10>
  }
}
 800d51c:	bf00      	nop
 800d51e:	bf00      	nop
 800d520:	3714      	adds	r7, #20
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr
 800d52a:	bf00      	nop
 800d52c:	20001504 	.word	0x20001504

0800d530 <ssd1306UpdateDraw>:

bool ssd1306UpdateDraw(void)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b084      	sub	sp, #16
 800d534:	af02      	add	r7, sp, #8
  uint8_t i;

  for (i = 0; i < 8; i++)
 800d536:	2300      	movs	r3, #0
 800d538:	71fb      	strb	r3, [r7, #7]
 800d53a:	e026      	b.n	800d58a <ssd1306UpdateDraw+0x5a>
  {
    ssd1306WriteCmd(0xB0 + i);
 800d53c:	79fb      	ldrb	r3, [r7, #7]
 800d53e:	3b50      	subs	r3, #80	; 0x50
 800d540:	b2db      	uxtb	r3, r3
 800d542:	4618      	mov	r0, r3
 800d544:	f7ff fec8 	bl	800d2d8 <ssd1306WriteCmd>
    ssd1306WriteCmd(0x00);
 800d548:	2000      	movs	r0, #0
 800d54a:	f7ff fec5 	bl	800d2d8 <ssd1306WriteCmd>
    ssd1306WriteCmd(0x10);
 800d54e:	2010      	movs	r0, #16
 800d550:	f7ff fec2 	bl	800d2d8 <ssd1306WriteCmd>

    if (i2cWriteBytes(i2c_ch, i2c_dev, 0x40, &ssd1306_buffer[SSD1306_WIDTH * i], SSD1306_WIDTH, 100) == false)
 800d554:	4b11      	ldr	r3, [pc, #68]	; (800d59c <ssd1306UpdateDraw+0x6c>)
 800d556:	7818      	ldrb	r0, [r3, #0]
 800d558:	4b11      	ldr	r3, [pc, #68]	; (800d5a0 <ssd1306UpdateDraw+0x70>)
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	b299      	uxth	r1, r3
 800d55e:	79fb      	ldrb	r3, [r7, #7]
 800d560:	01db      	lsls	r3, r3, #7
 800d562:	4a10      	ldr	r2, [pc, #64]	; (800d5a4 <ssd1306UpdateDraw+0x74>)
 800d564:	4413      	add	r3, r2
 800d566:	2264      	movs	r2, #100	; 0x64
 800d568:	9201      	str	r2, [sp, #4]
 800d56a:	2280      	movs	r2, #128	; 0x80
 800d56c:	9200      	str	r2, [sp, #0]
 800d56e:	2240      	movs	r2, #64	; 0x40
 800d570:	f003 ff28 	bl	80113c4 <i2cWriteBytes>
 800d574:	4603      	mov	r3, r0
 800d576:	f083 0301 	eor.w	r3, r3, #1
 800d57a:	b2db      	uxtb	r3, r3
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d001      	beq.n	800d584 <ssd1306UpdateDraw+0x54>
    {
      return false;
 800d580:	2300      	movs	r3, #0
 800d582:	e006      	b.n	800d592 <ssd1306UpdateDraw+0x62>
  for (i = 0; i < 8; i++)
 800d584:	79fb      	ldrb	r3, [r7, #7]
 800d586:	3301      	adds	r3, #1
 800d588:	71fb      	strb	r3, [r7, #7]
 800d58a:	79fb      	ldrb	r3, [r7, #7]
 800d58c:	2b07      	cmp	r3, #7
 800d58e:	d9d5      	bls.n	800d53c <ssd1306UpdateDraw+0xc>
    }
  }

  return true;
 800d590:	2301      	movs	r3, #1
}
 800d592:	4618      	mov	r0, r3
 800d594:	3708      	adds	r7, #8
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	20000038 	.word	0x20000038
 800d5a0:	20000039 	.word	0x20000039
 800d5a4:	20001504 	.word	0x20001504

0800d5a8 <ssd1306DrawPixel>:

void ssd1306DrawPixel(uint8_t x, uint8_t y, uint16_t color)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b083      	sub	sp, #12
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	71fb      	strb	r3, [r7, #7]
 800d5b2:	460b      	mov	r3, r1
 800d5b4:	71bb      	strb	r3, [r7, #6]
 800d5b6:	4613      	mov	r3, r2
 800d5b8:	80bb      	strh	r3, [r7, #4]
  if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 800d5ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	db3d      	blt.n	800d63e <ssd1306DrawPixel+0x96>
 800d5c2:	79bb      	ldrb	r3, [r7, #6]
 800d5c4:	2b3f      	cmp	r3, #63	; 0x3f
 800d5c6:	d83a      	bhi.n	800d63e <ssd1306DrawPixel+0x96>
  {
    return;
  }


  if (color > 0)
 800d5c8:	88bb      	ldrh	r3, [r7, #4]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d01a      	beq.n	800d604 <ssd1306DrawPixel+0x5c>
  {
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800d5ce:	79fa      	ldrb	r2, [r7, #7]
 800d5d0:	79bb      	ldrb	r3, [r7, #6]
 800d5d2:	08db      	lsrs	r3, r3, #3
 800d5d4:	b2d8      	uxtb	r0, r3
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	01db      	lsls	r3, r3, #7
 800d5da:	4413      	add	r3, r2
 800d5dc:	4a1b      	ldr	r2, [pc, #108]	; (800d64c <ssd1306DrawPixel+0xa4>)
 800d5de:	5cd3      	ldrb	r3, [r2, r3]
 800d5e0:	b25a      	sxtb	r2, r3
 800d5e2:	79bb      	ldrb	r3, [r7, #6]
 800d5e4:	f003 0307 	and.w	r3, r3, #7
 800d5e8:	2101      	movs	r1, #1
 800d5ea:	fa01 f303 	lsl.w	r3, r1, r3
 800d5ee:	b25b      	sxtb	r3, r3
 800d5f0:	4313      	orrs	r3, r2
 800d5f2:	b259      	sxtb	r1, r3
 800d5f4:	79fa      	ldrb	r2, [r7, #7]
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	01db      	lsls	r3, r3, #7
 800d5fa:	4413      	add	r3, r2
 800d5fc:	b2c9      	uxtb	r1, r1
 800d5fe:	4a13      	ldr	r2, [pc, #76]	; (800d64c <ssd1306DrawPixel+0xa4>)
 800d600:	54d1      	strb	r1, [r2, r3]
 800d602:	e01d      	b.n	800d640 <ssd1306DrawPixel+0x98>
  }
  else
  {
    ssd1306_buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800d604:	79fa      	ldrb	r2, [r7, #7]
 800d606:	79bb      	ldrb	r3, [r7, #6]
 800d608:	08db      	lsrs	r3, r3, #3
 800d60a:	b2d8      	uxtb	r0, r3
 800d60c:	4603      	mov	r3, r0
 800d60e:	01db      	lsls	r3, r3, #7
 800d610:	4413      	add	r3, r2
 800d612:	4a0e      	ldr	r2, [pc, #56]	; (800d64c <ssd1306DrawPixel+0xa4>)
 800d614:	5cd3      	ldrb	r3, [r2, r3]
 800d616:	b25a      	sxtb	r2, r3
 800d618:	79bb      	ldrb	r3, [r7, #6]
 800d61a:	f003 0307 	and.w	r3, r3, #7
 800d61e:	2101      	movs	r1, #1
 800d620:	fa01 f303 	lsl.w	r3, r1, r3
 800d624:	b25b      	sxtb	r3, r3
 800d626:	43db      	mvns	r3, r3
 800d628:	b25b      	sxtb	r3, r3
 800d62a:	4013      	ands	r3, r2
 800d62c:	b259      	sxtb	r1, r3
 800d62e:	79fa      	ldrb	r2, [r7, #7]
 800d630:	4603      	mov	r3, r0
 800d632:	01db      	lsls	r3, r3, #7
 800d634:	4413      	add	r3, r2
 800d636:	b2c9      	uxtb	r1, r1
 800d638:	4a04      	ldr	r2, [pc, #16]	; (800d64c <ssd1306DrawPixel+0xa4>)
 800d63a:	54d1      	strb	r1, [r2, r3]
 800d63c:	e000      	b.n	800d640 <ssd1306DrawPixel+0x98>
    return;
 800d63e:	bf00      	nop
  }
}
 800d640:	370c      	adds	r7, #12
 800d642:	46bd      	mov	sp, r7
 800d644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d648:	4770      	bx	lr
 800d64a:	bf00      	nop
 800d64c:	20001504 	.word	0x20001504

0800d650 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
 800d656:	60f8      	str	r0, [r7, #12]
 800d658:	60b9      	str	r1, [r7, #8]
 800d65a:	4613      	mov	r3, r2
 800d65c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d101      	bne.n	800d668 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d664:	2303      	movs	r3, #3
 800d666:	e01f      	b.n	800d6a8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2200      	movs	r2, #0
 800d66c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2200      	movs	r2, #0
 800d674:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2200      	movs	r2, #0
 800d67c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d003      	beq.n	800d68e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	68ba      	ldr	r2, [r7, #8]
 800d68a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2201      	movs	r2, #1
 800d692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	79fa      	ldrb	r2, [r7, #7]
 800d69a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d69c:	68f8      	ldr	r0, [r7, #12]
 800d69e:	f002 f801 	bl	800f6a4 <USBD_LL_Init>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d6a6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3718      	adds	r7, #24
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}

0800d6b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b084      	sub	sp, #16
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
 800d6b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d101      	bne.n	800d6c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	e016      	b.n	800d6f6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	683a      	ldr	r2, [r7, #0]
 800d6cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d00b      	beq.n	800d6f4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e4:	f107 020e 	add.w	r2, r7, #14
 800d6e8:	4610      	mov	r0, r2
 800d6ea:	4798      	blx	r3
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d6f4:	2300      	movs	r3, #0
}
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	3710      	adds	r7, #16
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b082      	sub	sp, #8
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f002 f82c 	bl	800f764 <USBD_LL_Start>
 800d70c:	4603      	mov	r3, r0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3708      	adds	r7, #8
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}

0800d716 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d716:	b480      	push	{r7}
 800d718:	b083      	sub	sp, #12
 800d71a:	af00      	add	r7, sp, #0
 800d71c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b084      	sub	sp, #16
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	460b      	mov	r3, r1
 800d736:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d738:	2303      	movs	r3, #3
 800d73a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d742:	2b00      	cmp	r3, #0
 800d744:	d009      	beq.n	800d75a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	78fa      	ldrb	r2, [r7, #3]
 800d750:	4611      	mov	r1, r2
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	4798      	blx	r3
 800d756:	4603      	mov	r3, r0
 800d758:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d75a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d75c:	4618      	mov	r0, r3
 800d75e:	3710      	adds	r7, #16
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}

0800d764 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d764:	b580      	push	{r7, lr}
 800d766:	b082      	sub	sp, #8
 800d768:	af00      	add	r7, sp, #0
 800d76a:	6078      	str	r0, [r7, #4]
 800d76c:	460b      	mov	r3, r1
 800d76e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d776:	2b00      	cmp	r3, #0
 800d778:	d007      	beq.n	800d78a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d780:	685b      	ldr	r3, [r3, #4]
 800d782:	78fa      	ldrb	r2, [r7, #3]
 800d784:	4611      	mov	r1, r2
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	4798      	blx	r3
  }

  return USBD_OK;
 800d78a:	2300      	movs	r3, #0
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3708      	adds	r7, #8
 800d790:	46bd      	mov	sp, r7
 800d792:	bd80      	pop	{r7, pc}

0800d794 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d7a4:	6839      	ldr	r1, [r7, #0]
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f000 ff25 	bl	800e5f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d7c8:	f003 031f 	and.w	r3, r3, #31
 800d7cc:	2b02      	cmp	r3, #2
 800d7ce:	d01a      	beq.n	800d806 <USBD_LL_SetupStage+0x72>
 800d7d0:	2b02      	cmp	r3, #2
 800d7d2:	d822      	bhi.n	800d81a <USBD_LL_SetupStage+0x86>
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d002      	beq.n	800d7de <USBD_LL_SetupStage+0x4a>
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d00a      	beq.n	800d7f2 <USBD_LL_SetupStage+0x5e>
 800d7dc:	e01d      	b.n	800d81a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	6878      	ldr	r0, [r7, #4]
 800d7e8:	f000 f9d6 	bl	800db98 <USBD_StdDevReq>
 800d7ec:	4603      	mov	r3, r0
 800d7ee:	73fb      	strb	r3, [r7, #15]
      break;
 800d7f0:	e020      	b.n	800d834 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d7f8:	4619      	mov	r1, r3
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f000 fa3a 	bl	800dc74 <USBD_StdItfReq>
 800d800:	4603      	mov	r3, r0
 800d802:	73fb      	strb	r3, [r7, #15]
      break;
 800d804:	e016      	b.n	800d834 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d80c:	4619      	mov	r1, r3
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 fa78 	bl	800dd04 <USBD_StdEPReq>
 800d814:	4603      	mov	r3, r0
 800d816:	73fb      	strb	r3, [r7, #15]
      break;
 800d818:	e00c      	b.n	800d834 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d820:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d824:	b2db      	uxtb	r3, r3
 800d826:	4619      	mov	r1, r3
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f001 fffb 	bl	800f824 <USBD_LL_StallEP>
 800d82e:	4603      	mov	r3, r0
 800d830:	73fb      	strb	r3, [r7, #15]
      break;
 800d832:	bf00      	nop
  }

  return ret;
 800d834:	7bfb      	ldrb	r3, [r7, #15]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3710      	adds	r7, #16
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}

0800d83e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d83e:	b580      	push	{r7, lr}
 800d840:	b086      	sub	sp, #24
 800d842:	af00      	add	r7, sp, #0
 800d844:	60f8      	str	r0, [r7, #12]
 800d846:	460b      	mov	r3, r1
 800d848:	607a      	str	r2, [r7, #4]
 800d84a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d84c:	7afb      	ldrb	r3, [r7, #11]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d137      	bne.n	800d8c2 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d858:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d860:	2b03      	cmp	r3, #3
 800d862:	d14a      	bne.n	800d8fa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d864:	693b      	ldr	r3, [r7, #16]
 800d866:	689a      	ldr	r2, [r3, #8]
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	68db      	ldr	r3, [r3, #12]
 800d86c:	429a      	cmp	r2, r3
 800d86e:	d913      	bls.n	800d898 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d870:	693b      	ldr	r3, [r7, #16]
 800d872:	689a      	ldr	r2, [r3, #8]
 800d874:	693b      	ldr	r3, [r7, #16]
 800d876:	68db      	ldr	r3, [r3, #12]
 800d878:	1ad2      	subs	r2, r2, r3
 800d87a:	693b      	ldr	r3, [r7, #16]
 800d87c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d87e:	693b      	ldr	r3, [r7, #16]
 800d880:	68da      	ldr	r2, [r3, #12]
 800d882:	693b      	ldr	r3, [r7, #16]
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	4293      	cmp	r3, r2
 800d888:	bf28      	it	cs
 800d88a:	4613      	movcs	r3, r2
 800d88c:	461a      	mov	r2, r3
 800d88e:	6879      	ldr	r1, [r7, #4]
 800d890:	68f8      	ldr	r0, [r7, #12]
 800d892:	f000 ffa4 	bl	800e7de <USBD_CtlContinueRx>
 800d896:	e030      	b.n	800d8fa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d89e:	691b      	ldr	r3, [r3, #16]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d00a      	beq.n	800d8ba <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800d8aa:	2b03      	cmp	r3, #3
 800d8ac:	d105      	bne.n	800d8ba <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8b4:	691b      	ldr	r3, [r3, #16]
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800d8ba:	68f8      	ldr	r0, [r7, #12]
 800d8bc:	f000 ffa0 	bl	800e800 <USBD_CtlSendStatus>
 800d8c0:	e01b      	b.n	800d8fa <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8c8:	699b      	ldr	r3, [r3, #24]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d013      	beq.n	800d8f6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800d8d4:	2b03      	cmp	r3, #3
 800d8d6:	d10e      	bne.n	800d8f6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8de:	699b      	ldr	r3, [r3, #24]
 800d8e0:	7afa      	ldrb	r2, [r7, #11]
 800d8e2:	4611      	mov	r1, r2
 800d8e4:	68f8      	ldr	r0, [r7, #12]
 800d8e6:	4798      	blx	r3
 800d8e8:	4603      	mov	r3, r0
 800d8ea:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800d8ec:	7dfb      	ldrb	r3, [r7, #23]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d003      	beq.n	800d8fa <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800d8f2:	7dfb      	ldrb	r3, [r7, #23]
 800d8f4:	e002      	b.n	800d8fc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	e000      	b.n	800d8fc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800d8fa:	2300      	movs	r3, #0
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3718      	adds	r7, #24
 800d900:	46bd      	mov	sp, r7
 800d902:	bd80      	pop	{r7, pc}

0800d904 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b086      	sub	sp, #24
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	460b      	mov	r3, r1
 800d90e:	607a      	str	r2, [r7, #4]
 800d910:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d912:	7afb      	ldrb	r3, [r7, #11]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d16a      	bne.n	800d9ee <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	3314      	adds	r3, #20
 800d91c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d924:	2b02      	cmp	r3, #2
 800d926:	d155      	bne.n	800d9d4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	689a      	ldr	r2, [r3, #8]
 800d92c:	693b      	ldr	r3, [r7, #16]
 800d92e:	68db      	ldr	r3, [r3, #12]
 800d930:	429a      	cmp	r2, r3
 800d932:	d914      	bls.n	800d95e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	689a      	ldr	r2, [r3, #8]
 800d938:	693b      	ldr	r3, [r7, #16]
 800d93a:	68db      	ldr	r3, [r3, #12]
 800d93c:	1ad2      	subs	r2, r2, r3
 800d93e:	693b      	ldr	r3, [r7, #16]
 800d940:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	461a      	mov	r2, r3
 800d948:	6879      	ldr	r1, [r7, #4]
 800d94a:	68f8      	ldr	r0, [r7, #12]
 800d94c:	f000 ff19 	bl	800e782 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d950:	2300      	movs	r3, #0
 800d952:	2200      	movs	r2, #0
 800d954:	2100      	movs	r1, #0
 800d956:	68f8      	ldr	r0, [r7, #12]
 800d958:	f002 f80e 	bl	800f978 <USBD_LL_PrepareReceive>
 800d95c:	e03a      	b.n	800d9d4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d95e:	693b      	ldr	r3, [r7, #16]
 800d960:	68da      	ldr	r2, [r3, #12]
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	689b      	ldr	r3, [r3, #8]
 800d966:	429a      	cmp	r2, r3
 800d968:	d11c      	bne.n	800d9a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d96a:	693b      	ldr	r3, [r7, #16]
 800d96c:	685a      	ldr	r2, [r3, #4]
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d972:	429a      	cmp	r2, r3
 800d974:	d316      	bcc.n	800d9a4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	685a      	ldr	r2, [r3, #4]
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d980:	429a      	cmp	r2, r3
 800d982:	d20f      	bcs.n	800d9a4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d984:	2200      	movs	r2, #0
 800d986:	2100      	movs	r1, #0
 800d988:	68f8      	ldr	r0, [r7, #12]
 800d98a:	f000 fefa 	bl	800e782 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	2200      	movs	r2, #0
 800d992:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d996:	2300      	movs	r3, #0
 800d998:	2200      	movs	r2, #0
 800d99a:	2100      	movs	r1, #0
 800d99c:	68f8      	ldr	r0, [r7, #12]
 800d99e:	f001 ffeb 	bl	800f978 <USBD_LL_PrepareReceive>
 800d9a2:	e017      	b.n	800d9d4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9aa:	68db      	ldr	r3, [r3, #12]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d00a      	beq.n	800d9c6 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800d9b6:	2b03      	cmp	r3, #3
 800d9b8:	d105      	bne.n	800d9c6 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9c0:	68db      	ldr	r3, [r3, #12]
 800d9c2:	68f8      	ldr	r0, [r7, #12]
 800d9c4:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9c6:	2180      	movs	r1, #128	; 0x80
 800d9c8:	68f8      	ldr	r0, [r7, #12]
 800d9ca:	f001 ff2b 	bl	800f824 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	f000 ff29 	bl	800e826 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d9da:	2b01      	cmp	r3, #1
 800d9dc:	d123      	bne.n	800da26 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d9de:	68f8      	ldr	r0, [r7, #12]
 800d9e0:	f7ff fe99 	bl	800d716 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d9ec:	e01b      	b.n	800da26 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9f4:	695b      	ldr	r3, [r3, #20]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d013      	beq.n	800da22 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800da00:	2b03      	cmp	r3, #3
 800da02:	d10e      	bne.n	800da22 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da0a:	695b      	ldr	r3, [r3, #20]
 800da0c:	7afa      	ldrb	r2, [r7, #11]
 800da0e:	4611      	mov	r1, r2
 800da10:	68f8      	ldr	r0, [r7, #12]
 800da12:	4798      	blx	r3
 800da14:	4603      	mov	r3, r0
 800da16:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800da18:	7dfb      	ldrb	r3, [r7, #23]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d003      	beq.n	800da26 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800da1e:	7dfb      	ldrb	r3, [r7, #23]
 800da20:	e002      	b.n	800da28 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800da22:	2303      	movs	r3, #3
 800da24:	e000      	b.n	800da28 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800da26:	2300      	movs	r3, #0
}
 800da28:	4618      	mov	r0, r3
 800da2a:	3718      	adds	r7, #24
 800da2c:	46bd      	mov	sp, r7
 800da2e:	bd80      	pop	{r7, pc}

0800da30 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b082      	sub	sp, #8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2201      	movs	r2, #1
 800da3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	2200      	movs	r2, #0
 800da44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	2200      	movs	r2, #0
 800da4c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	2200      	movs	r2, #0
 800da52:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d009      	beq.n	800da74 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da66:	685b      	ldr	r3, [r3, #4]
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	6852      	ldr	r2, [r2, #4]
 800da6c:	b2d2      	uxtb	r2, r2
 800da6e:	4611      	mov	r1, r2
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da74:	2340      	movs	r3, #64	; 0x40
 800da76:	2200      	movs	r2, #0
 800da78:	2100      	movs	r1, #0
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f001 fe8d 	bl	800f79a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2201      	movs	r2, #1
 800da84:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2240      	movs	r2, #64	; 0x40
 800da8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800da90:	2340      	movs	r3, #64	; 0x40
 800da92:	2200      	movs	r2, #0
 800da94:	2180      	movs	r1, #128	; 0x80
 800da96:	6878      	ldr	r0, [r7, #4]
 800da98:	f001 fe7f 	bl	800f79a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	2201      	movs	r2, #1
 800daa0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2240      	movs	r2, #64	; 0x40
 800daa6:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800daa8:	2300      	movs	r3, #0
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3708      	adds	r7, #8
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dab2:	b480      	push	{r7}
 800dab4:	b083      	sub	sp, #12
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
 800daba:	460b      	mov	r3, r1
 800dabc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	78fa      	ldrb	r2, [r7, #3]
 800dac2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	370c      	adds	r7, #12
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr

0800dad2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dad2:	b480      	push	{r7}
 800dad4:	b083      	sub	sp, #12
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	2204      	movs	r2, #4
 800daea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800daee:	2300      	movs	r3, #0
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	370c      	adds	r7, #12
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b083      	sub	sp, #12
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db0a:	2b04      	cmp	r3, #4
 800db0c:	d105      	bne.n	800db1a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800db1a:	2300      	movs	r3, #0
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	370c      	adds	r7, #12
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr

0800db28 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800db28:	b580      	push	{r7, lr}
 800db2a:	b082      	sub	sp, #8
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db36:	2b03      	cmp	r3, #3
 800db38:	d10b      	bne.n	800db52 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db40:	69db      	ldr	r3, [r3, #28]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d005      	beq.n	800db52 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db4c:	69db      	ldr	r3, [r3, #28]
 800db4e:	6878      	ldr	r0, [r7, #4]
 800db50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800db52:	2300      	movs	r3, #0
}
 800db54:	4618      	mov	r0, r3
 800db56:	3708      	adds	r7, #8
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}

0800db5c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800db5c:	b480      	push	{r7}
 800db5e:	b087      	sub	sp, #28
 800db60:	af00      	add	r7, sp, #0
 800db62:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800db6e:	697b      	ldr	r3, [r7, #20]
 800db70:	3301      	adds	r3, #1
 800db72:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800db74:	697b      	ldr	r3, [r7, #20]
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800db7a:	8a3b      	ldrh	r3, [r7, #16]
 800db7c:	021b      	lsls	r3, r3, #8
 800db7e:	b21a      	sxth	r2, r3
 800db80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800db84:	4313      	orrs	r3, r2
 800db86:	b21b      	sxth	r3, r3
 800db88:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800db8a:	89fb      	ldrh	r3, [r7, #14]
}
 800db8c:	4618      	mov	r0, r3
 800db8e:	371c      	adds	r7, #28
 800db90:	46bd      	mov	sp, r7
 800db92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db96:	4770      	bx	lr

0800db98 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
 800dba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dba2:	2300      	movs	r3, #0
 800dba4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dba6:	683b      	ldr	r3, [r7, #0]
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dbae:	2b40      	cmp	r3, #64	; 0x40
 800dbb0:	d005      	beq.n	800dbbe <USBD_StdDevReq+0x26>
 800dbb2:	2b40      	cmp	r3, #64	; 0x40
 800dbb4:	d853      	bhi.n	800dc5e <USBD_StdDevReq+0xc6>
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00b      	beq.n	800dbd2 <USBD_StdDevReq+0x3a>
 800dbba:	2b20      	cmp	r3, #32
 800dbbc:	d14f      	bne.n	800dc5e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbc4:	689b      	ldr	r3, [r3, #8]
 800dbc6:	6839      	ldr	r1, [r7, #0]
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	4798      	blx	r3
 800dbcc:	4603      	mov	r3, r0
 800dbce:	73fb      	strb	r3, [r7, #15]
    break;
 800dbd0:	e04a      	b.n	800dc68 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800dbd2:	683b      	ldr	r3, [r7, #0]
 800dbd4:	785b      	ldrb	r3, [r3, #1]
 800dbd6:	2b09      	cmp	r3, #9
 800dbd8:	d83b      	bhi.n	800dc52 <USBD_StdDevReq+0xba>
 800dbda:	a201      	add	r2, pc, #4	; (adr r2, 800dbe0 <USBD_StdDevReq+0x48>)
 800dbdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbe0:	0800dc35 	.word	0x0800dc35
 800dbe4:	0800dc49 	.word	0x0800dc49
 800dbe8:	0800dc53 	.word	0x0800dc53
 800dbec:	0800dc3f 	.word	0x0800dc3f
 800dbf0:	0800dc53 	.word	0x0800dc53
 800dbf4:	0800dc13 	.word	0x0800dc13
 800dbf8:	0800dc09 	.word	0x0800dc09
 800dbfc:	0800dc53 	.word	0x0800dc53
 800dc00:	0800dc2b 	.word	0x0800dc2b
 800dc04:	0800dc1d 	.word	0x0800dc1d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800dc08:	6839      	ldr	r1, [r7, #0]
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 f9da 	bl	800dfc4 <USBD_GetDescriptor>
      break;
 800dc10:	e024      	b.n	800dc5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800dc12:	6839      	ldr	r1, [r7, #0]
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 fb69 	bl	800e2ec <USBD_SetAddress>
      break;
 800dc1a:	e01f      	b.n	800dc5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800dc1c:	6839      	ldr	r1, [r7, #0]
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f000 fba8 	bl	800e374 <USBD_SetConfig>
 800dc24:	4603      	mov	r3, r0
 800dc26:	73fb      	strb	r3, [r7, #15]
      break;
 800dc28:	e018      	b.n	800dc5c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800dc2a:	6839      	ldr	r1, [r7, #0]
 800dc2c:	6878      	ldr	r0, [r7, #4]
 800dc2e:	f000 fc45 	bl	800e4bc <USBD_GetConfig>
      break;
 800dc32:	e013      	b.n	800dc5c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800dc34:	6839      	ldr	r1, [r7, #0]
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 fc75 	bl	800e526 <USBD_GetStatus>
      break;
 800dc3c:	e00e      	b.n	800dc5c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800dc3e:	6839      	ldr	r1, [r7, #0]
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 fca3 	bl	800e58c <USBD_SetFeature>
      break;
 800dc46:	e009      	b.n	800dc5c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800dc48:	6839      	ldr	r1, [r7, #0]
 800dc4a:	6878      	ldr	r0, [r7, #4]
 800dc4c:	f000 fcb2 	bl	800e5b4 <USBD_ClrFeature>
      break;
 800dc50:	e004      	b.n	800dc5c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800dc52:	6839      	ldr	r1, [r7, #0]
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f000 fd08 	bl	800e66a <USBD_CtlError>
      break;
 800dc5a:	bf00      	nop
    }
    break;
 800dc5c:	e004      	b.n	800dc68 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800dc5e:	6839      	ldr	r1, [r7, #0]
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 fd02 	bl	800e66a <USBD_CtlError>
    break;
 800dc66:	bf00      	nop
  }

  return ret;
 800dc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	3710      	adds	r7, #16
 800dc6e:	46bd      	mov	sp, r7
 800dc70:	bd80      	pop	{r7, pc}
 800dc72:	bf00      	nop

0800dc74 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc74:	b580      	push	{r7, lr}
 800dc76:	b084      	sub	sp, #16
 800dc78:	af00      	add	r7, sp, #0
 800dc7a:	6078      	str	r0, [r7, #4]
 800dc7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc7e:	2300      	movs	r3, #0
 800dc80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dc8a:	2b40      	cmp	r3, #64	; 0x40
 800dc8c:	d005      	beq.n	800dc9a <USBD_StdItfReq+0x26>
 800dc8e:	2b40      	cmp	r3, #64	; 0x40
 800dc90:	d82e      	bhi.n	800dcf0 <USBD_StdItfReq+0x7c>
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d001      	beq.n	800dc9a <USBD_StdItfReq+0x26>
 800dc96:	2b20      	cmp	r3, #32
 800dc98:	d12a      	bne.n	800dcf0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dca0:	3b01      	subs	r3, #1
 800dca2:	2b02      	cmp	r3, #2
 800dca4:	d81d      	bhi.n	800dce2 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	889b      	ldrh	r3, [r3, #4]
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	2b01      	cmp	r3, #1
 800dcae:	d813      	bhi.n	800dcd8 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcb6:	689b      	ldr	r3, [r3, #8]
 800dcb8:	6839      	ldr	r1, [r7, #0]
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	4798      	blx	r3
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	88db      	ldrh	r3, [r3, #6]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d110      	bne.n	800dcec <USBD_StdItfReq+0x78>
 800dcca:	7bfb      	ldrb	r3, [r7, #15]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d10d      	bne.n	800dcec <USBD_StdItfReq+0x78>
        {
          (void)USBD_CtlSendStatus(pdev);
 800dcd0:	6878      	ldr	r0, [r7, #4]
 800dcd2:	f000 fd95 	bl	800e800 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800dcd6:	e009      	b.n	800dcec <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800dcd8:	6839      	ldr	r1, [r7, #0]
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 fcc5 	bl	800e66a <USBD_CtlError>
      break;
 800dce0:	e004      	b.n	800dcec <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800dce2:	6839      	ldr	r1, [r7, #0]
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 fcc0 	bl	800e66a <USBD_CtlError>
      break;
 800dcea:	e000      	b.n	800dcee <USBD_StdItfReq+0x7a>
      break;
 800dcec:	bf00      	nop
    }
    break;
 800dcee:	e004      	b.n	800dcfa <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800dcf0:	6839      	ldr	r1, [r7, #0]
 800dcf2:	6878      	ldr	r0, [r7, #4]
 800dcf4:	f000 fcb9 	bl	800e66a <USBD_CtlError>
    break;
 800dcf8:	bf00      	nop
  }

  return ret;
 800dcfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	3710      	adds	r7, #16
 800dd00:	46bd      	mov	sp, r7
 800dd02:	bd80      	pop	{r7, pc}

0800dd04 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b084      	sub	sp, #16
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800dd0e:	2300      	movs	r3, #0
 800dd10:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	889b      	ldrh	r3, [r3, #4]
 800dd16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dd20:	2b40      	cmp	r3, #64	; 0x40
 800dd22:	d007      	beq.n	800dd34 <USBD_StdEPReq+0x30>
 800dd24:	2b40      	cmp	r3, #64	; 0x40
 800dd26:	f200 8142 	bhi.w	800dfae <USBD_StdEPReq+0x2aa>
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00c      	beq.n	800dd48 <USBD_StdEPReq+0x44>
 800dd2e:	2b20      	cmp	r3, #32
 800dd30:	f040 813d 	bne.w	800dfae <USBD_StdEPReq+0x2aa>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd3a:	689b      	ldr	r3, [r3, #8]
 800dd3c:	6839      	ldr	r1, [r7, #0]
 800dd3e:	6878      	ldr	r0, [r7, #4]
 800dd40:	4798      	blx	r3
 800dd42:	4603      	mov	r3, r0
 800dd44:	73fb      	strb	r3, [r7, #15]
    break;
 800dd46:	e137      	b.n	800dfb8 <USBD_StdEPReq+0x2b4>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	785b      	ldrb	r3, [r3, #1]
 800dd4c:	2b03      	cmp	r3, #3
 800dd4e:	d007      	beq.n	800dd60 <USBD_StdEPReq+0x5c>
 800dd50:	2b03      	cmp	r3, #3
 800dd52:	f300 8126 	bgt.w	800dfa2 <USBD_StdEPReq+0x29e>
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d07d      	beq.n	800de56 <USBD_StdEPReq+0x152>
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d03b      	beq.n	800ddd6 <USBD_StdEPReq+0xd2>
 800dd5e:	e120      	b.n	800dfa2 <USBD_StdEPReq+0x29e>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	d002      	beq.n	800dd70 <USBD_StdEPReq+0x6c>
 800dd6a:	2b03      	cmp	r3, #3
 800dd6c:	d016      	beq.n	800dd9c <USBD_StdEPReq+0x98>
 800dd6e:	e02c      	b.n	800ddca <USBD_StdEPReq+0xc6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dd70:	7bbb      	ldrb	r3, [r7, #14]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d00d      	beq.n	800dd92 <USBD_StdEPReq+0x8e>
 800dd76:	7bbb      	ldrb	r3, [r7, #14]
 800dd78:	2b80      	cmp	r3, #128	; 0x80
 800dd7a:	d00a      	beq.n	800dd92 <USBD_StdEPReq+0x8e>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800dd7c:	7bbb      	ldrb	r3, [r7, #14]
 800dd7e:	4619      	mov	r1, r3
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f001 fd4f 	bl	800f824 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd86:	2180      	movs	r1, #128	; 0x80
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f001 fd4b 	bl	800f824 <USBD_LL_StallEP>
 800dd8e:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800dd90:	e020      	b.n	800ddd4 <USBD_StdEPReq+0xd0>
          USBD_CtlError(pdev, req);
 800dd92:	6839      	ldr	r1, [r7, #0]
 800dd94:	6878      	ldr	r0, [r7, #4]
 800dd96:	f000 fc68 	bl	800e66a <USBD_CtlError>
        break;
 800dd9a:	e01b      	b.n	800ddd4 <USBD_StdEPReq+0xd0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	885b      	ldrh	r3, [r3, #2]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d10e      	bne.n	800ddc2 <USBD_StdEPReq+0xbe>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dda4:	7bbb      	ldrb	r3, [r7, #14]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d00b      	beq.n	800ddc2 <USBD_StdEPReq+0xbe>
 800ddaa:	7bbb      	ldrb	r3, [r7, #14]
 800ddac:	2b80      	cmp	r3, #128	; 0x80
 800ddae:	d008      	beq.n	800ddc2 <USBD_StdEPReq+0xbe>
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	88db      	ldrh	r3, [r3, #6]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d104      	bne.n	800ddc2 <USBD_StdEPReq+0xbe>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ddb8:	7bbb      	ldrb	r3, [r7, #14]
 800ddba:	4619      	mov	r1, r3
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f001 fd31 	bl	800f824 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ddc2:	6878      	ldr	r0, [r7, #4]
 800ddc4:	f000 fd1c 	bl	800e800 <USBD_CtlSendStatus>

        break;
 800ddc8:	e004      	b.n	800ddd4 <USBD_StdEPReq+0xd0>

      default:
        USBD_CtlError(pdev, req);
 800ddca:	6839      	ldr	r1, [r7, #0]
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f000 fc4c 	bl	800e66a <USBD_CtlError>
        break;
 800ddd2:	bf00      	nop
      }
      break;
 800ddd4:	e0ea      	b.n	800dfac <USBD_StdEPReq+0x2a8>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dddc:	2b02      	cmp	r3, #2
 800ddde:	d002      	beq.n	800dde6 <USBD_StdEPReq+0xe2>
 800dde0:	2b03      	cmp	r3, #3
 800dde2:	d016      	beq.n	800de12 <USBD_StdEPReq+0x10e>
 800dde4:	e030      	b.n	800de48 <USBD_StdEPReq+0x144>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dde6:	7bbb      	ldrb	r3, [r7, #14]
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d00d      	beq.n	800de08 <USBD_StdEPReq+0x104>
 800ddec:	7bbb      	ldrb	r3, [r7, #14]
 800ddee:	2b80      	cmp	r3, #128	; 0x80
 800ddf0:	d00a      	beq.n	800de08 <USBD_StdEPReq+0x104>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ddf2:	7bbb      	ldrb	r3, [r7, #14]
 800ddf4:	4619      	mov	r1, r3
 800ddf6:	6878      	ldr	r0, [r7, #4]
 800ddf8:	f001 fd14 	bl	800f824 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ddfc:	2180      	movs	r1, #128	; 0x80
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f001 fd10 	bl	800f824 <USBD_LL_StallEP>
 800de04:	bf00      	nop
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800de06:	e025      	b.n	800de54 <USBD_StdEPReq+0x150>
          USBD_CtlError(pdev, req);
 800de08:	6839      	ldr	r1, [r7, #0]
 800de0a:	6878      	ldr	r0, [r7, #4]
 800de0c:	f000 fc2d 	bl	800e66a <USBD_CtlError>
        break;
 800de10:	e020      	b.n	800de54 <USBD_StdEPReq+0x150>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	885b      	ldrh	r3, [r3, #2]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d11b      	bne.n	800de52 <USBD_StdEPReq+0x14e>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800de1a:	7bbb      	ldrb	r3, [r7, #14]
 800de1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de20:	2b00      	cmp	r3, #0
 800de22:	d004      	beq.n	800de2e <USBD_StdEPReq+0x12a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800de24:	7bbb      	ldrb	r3, [r7, #14]
 800de26:	4619      	mov	r1, r3
 800de28:	6878      	ldr	r0, [r7, #4]
 800de2a:	f001 fd1a 	bl	800f862 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	f000 fce6 	bl	800e800 <USBD_CtlSendStatus>
          ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de3a:	689b      	ldr	r3, [r3, #8]
 800de3c:	6839      	ldr	r1, [r7, #0]
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	4798      	blx	r3
 800de42:	4603      	mov	r3, r0
 800de44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800de46:	e004      	b.n	800de52 <USBD_StdEPReq+0x14e>

      default:
        USBD_CtlError(pdev, req);
 800de48:	6839      	ldr	r1, [r7, #0]
 800de4a:	6878      	ldr	r0, [r7, #4]
 800de4c:	f000 fc0d 	bl	800e66a <USBD_CtlError>
        break;
 800de50:	e000      	b.n	800de54 <USBD_StdEPReq+0x150>
        break;
 800de52:	bf00      	nop
      }
      break;
 800de54:	e0aa      	b.n	800dfac <USBD_StdEPReq+0x2a8>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de5c:	2b02      	cmp	r3, #2
 800de5e:	d002      	beq.n	800de66 <USBD_StdEPReq+0x162>
 800de60:	2b03      	cmp	r3, #3
 800de62:	d032      	beq.n	800deca <USBD_StdEPReq+0x1c6>
 800de64:	e097      	b.n	800df96 <USBD_StdEPReq+0x292>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de66:	7bbb      	ldrb	r3, [r7, #14]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d007      	beq.n	800de7c <USBD_StdEPReq+0x178>
 800de6c:	7bbb      	ldrb	r3, [r7, #14]
 800de6e:	2b80      	cmp	r3, #128	; 0x80
 800de70:	d004      	beq.n	800de7c <USBD_StdEPReq+0x178>
        {
          USBD_CtlError(pdev, req);
 800de72:	6839      	ldr	r1, [r7, #0]
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	f000 fbf8 	bl	800e66a <USBD_CtlError>
          break;
 800de7a:	e091      	b.n	800dfa0 <USBD_StdEPReq+0x29c>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800de7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800de80:	2b00      	cmp	r3, #0
 800de82:	da0b      	bge.n	800de9c <USBD_StdEPReq+0x198>
 800de84:	7bbb      	ldrb	r3, [r7, #14]
 800de86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800de8a:	4613      	mov	r3, r2
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	4413      	add	r3, r2
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	3310      	adds	r3, #16
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	4413      	add	r3, r2
 800de98:	3304      	adds	r3, #4
 800de9a:	e00b      	b.n	800deb4 <USBD_StdEPReq+0x1b0>
              &pdev->ep_out[ep_addr & 0x7FU];
 800de9c:	7bbb      	ldrb	r3, [r7, #14]
 800de9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dea2:	4613      	mov	r3, r2
 800dea4:	009b      	lsls	r3, r3, #2
 800dea6:	4413      	add	r3, r2
 800dea8:	009b      	lsls	r3, r3, #2
 800deaa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	4413      	add	r3, r2
 800deb2:	3304      	adds	r3, #4
 800deb4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800deb6:	68bb      	ldr	r3, [r7, #8]
 800deb8:	2200      	movs	r2, #0
 800deba:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800debc:	68bb      	ldr	r3, [r7, #8]
 800debe:	2202      	movs	r2, #2
 800dec0:	4619      	mov	r1, r3
 800dec2:	6878      	ldr	r0, [r7, #4]
 800dec4:	f000 fc42 	bl	800e74c <USBD_CtlSendData>
        break;
 800dec8:	e06a      	b.n	800dfa0 <USBD_StdEPReq+0x29c>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800deca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	da11      	bge.n	800def6 <USBD_StdEPReq+0x1f2>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ded2:	7bbb      	ldrb	r3, [r7, #14]
 800ded4:	f003 020f 	and.w	r2, r3, #15
 800ded8:	6879      	ldr	r1, [r7, #4]
 800deda:	4613      	mov	r3, r2
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	4413      	add	r3, r2
 800dee0:	009b      	lsls	r3, r3, #2
 800dee2:	440b      	add	r3, r1
 800dee4:	3324      	adds	r3, #36	; 0x24
 800dee6:	881b      	ldrh	r3, [r3, #0]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d117      	bne.n	800df1c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800deec:	6839      	ldr	r1, [r7, #0]
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 fbbb 	bl	800e66a <USBD_CtlError>
            break;
 800def4:	e054      	b.n	800dfa0 <USBD_StdEPReq+0x29c>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800def6:	7bbb      	ldrb	r3, [r7, #14]
 800def8:	f003 020f 	and.w	r2, r3, #15
 800defc:	6879      	ldr	r1, [r7, #4]
 800defe:	4613      	mov	r3, r2
 800df00:	009b      	lsls	r3, r3, #2
 800df02:	4413      	add	r3, r2
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	440b      	add	r3, r1
 800df08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800df0c:	881b      	ldrh	r3, [r3, #0]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d104      	bne.n	800df1c <USBD_StdEPReq+0x218>
          {
            USBD_CtlError(pdev, req);
 800df12:	6839      	ldr	r1, [r7, #0]
 800df14:	6878      	ldr	r0, [r7, #4]
 800df16:	f000 fba8 	bl	800e66a <USBD_CtlError>
            break;
 800df1a:	e041      	b.n	800dfa0 <USBD_StdEPReq+0x29c>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df20:	2b00      	cmp	r3, #0
 800df22:	da0b      	bge.n	800df3c <USBD_StdEPReq+0x238>
 800df24:	7bbb      	ldrb	r3, [r7, #14]
 800df26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800df2a:	4613      	mov	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4413      	add	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	3310      	adds	r3, #16
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	4413      	add	r3, r2
 800df38:	3304      	adds	r3, #4
 800df3a:	e00b      	b.n	800df54 <USBD_StdEPReq+0x250>
              &pdev->ep_out[ep_addr & 0x7FU];
 800df3c:	7bbb      	ldrb	r3, [r7, #14]
 800df3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df42:	4613      	mov	r3, r2
 800df44:	009b      	lsls	r3, r3, #2
 800df46:	4413      	add	r3, r2
 800df48:	009b      	lsls	r3, r3, #2
 800df4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800df4e:	687a      	ldr	r2, [r7, #4]
 800df50:	4413      	add	r3, r2
 800df52:	3304      	adds	r3, #4
 800df54:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800df56:	7bbb      	ldrb	r3, [r7, #14]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d002      	beq.n	800df62 <USBD_StdEPReq+0x25e>
 800df5c:	7bbb      	ldrb	r3, [r7, #14]
 800df5e:	2b80      	cmp	r3, #128	; 0x80
 800df60:	d103      	bne.n	800df6a <USBD_StdEPReq+0x266>
          {
            pep->status = 0x0000U;
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	2200      	movs	r2, #0
 800df66:	601a      	str	r2, [r3, #0]
 800df68:	e00e      	b.n	800df88 <USBD_StdEPReq+0x284>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800df6a:	7bbb      	ldrb	r3, [r7, #14]
 800df6c:	4619      	mov	r1, r3
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f001 fc96 	bl	800f8a0 <USBD_LL_IsStallEP>
 800df74:	4603      	mov	r3, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d003      	beq.n	800df82 <USBD_StdEPReq+0x27e>
          {
            pep->status = 0x0001U;
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	2201      	movs	r2, #1
 800df7e:	601a      	str	r2, [r3, #0]
 800df80:	e002      	b.n	800df88 <USBD_StdEPReq+0x284>
          }
          else
          {
            pep->status = 0x0000U;
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	2200      	movs	r2, #0
 800df86:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	2202      	movs	r2, #2
 800df8c:	4619      	mov	r1, r3
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 fbdc 	bl	800e74c <USBD_CtlSendData>
          break;
 800df94:	e004      	b.n	800dfa0 <USBD_StdEPReq+0x29c>

      default:
        USBD_CtlError(pdev, req);
 800df96:	6839      	ldr	r1, [r7, #0]
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f000 fb66 	bl	800e66a <USBD_CtlError>
        break;
 800df9e:	bf00      	nop
      }
      break;
 800dfa0:	e004      	b.n	800dfac <USBD_StdEPReq+0x2a8>

    default:
      USBD_CtlError(pdev, req);
 800dfa2:	6839      	ldr	r1, [r7, #0]
 800dfa4:	6878      	ldr	r0, [r7, #4]
 800dfa6:	f000 fb60 	bl	800e66a <USBD_CtlError>
      break;
 800dfaa:	bf00      	nop
    }
    break;
 800dfac:	e004      	b.n	800dfb8 <USBD_StdEPReq+0x2b4>

  default:
    USBD_CtlError(pdev, req);
 800dfae:	6839      	ldr	r1, [r7, #0]
 800dfb0:	6878      	ldr	r0, [r7, #4]
 800dfb2:	f000 fb5a 	bl	800e66a <USBD_CtlError>
    break;
 800dfb6:	bf00      	nop
  }

  return ret;
 800dfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
	...

0800dfc4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	885b      	ldrh	r3, [r3, #2]
 800dfde:	0a1b      	lsrs	r3, r3, #8
 800dfe0:	b29b      	uxth	r3, r3
 800dfe2:	3b01      	subs	r3, #1
 800dfe4:	2b0e      	cmp	r3, #14
 800dfe6:	f200 8152 	bhi.w	800e28e <USBD_GetDescriptor+0x2ca>
 800dfea:	a201      	add	r2, pc, #4	; (adr r2, 800dff0 <USBD_GetDescriptor+0x2c>)
 800dfec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dff0:	0800e061 	.word	0x0800e061
 800dff4:	0800e079 	.word	0x0800e079
 800dff8:	0800e0b9 	.word	0x0800e0b9
 800dffc:	0800e28f 	.word	0x0800e28f
 800e000:	0800e28f 	.word	0x0800e28f
 800e004:	0800e22f 	.word	0x0800e22f
 800e008:	0800e25b 	.word	0x0800e25b
 800e00c:	0800e28f 	.word	0x0800e28f
 800e010:	0800e28f 	.word	0x0800e28f
 800e014:	0800e28f 	.word	0x0800e28f
 800e018:	0800e28f 	.word	0x0800e28f
 800e01c:	0800e28f 	.word	0x0800e28f
 800e020:	0800e28f 	.word	0x0800e28f
 800e024:	0800e28f 	.word	0x0800e28f
 800e028:	0800e02d 	.word	0x0800e02d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e032:	69db      	ldr	r3, [r3, #28]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00b      	beq.n	800e050 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e03e:	69db      	ldr	r3, [r3, #28]
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	7c12      	ldrb	r2, [r2, #16]
 800e044:	f107 0108 	add.w	r1, r7, #8
 800e048:	4610      	mov	r0, r2
 800e04a:	4798      	blx	r3
 800e04c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e04e:	e126      	b.n	800e29e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e050:	6839      	ldr	r1, [r7, #0]
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f000 fb09 	bl	800e66a <USBD_CtlError>
      err++;
 800e058:	7afb      	ldrb	r3, [r7, #11]
 800e05a:	3301      	adds	r3, #1
 800e05c:	72fb      	strb	r3, [r7, #11]
    break;
 800e05e:	e11e      	b.n	800e29e <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	687a      	ldr	r2, [r7, #4]
 800e06a:	7c12      	ldrb	r2, [r2, #16]
 800e06c:	f107 0108 	add.w	r1, r7, #8
 800e070:	4610      	mov	r0, r2
 800e072:	4798      	blx	r3
 800e074:	60f8      	str	r0, [r7, #12]
    break;
 800e076:	e112      	b.n	800e29e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	7c1b      	ldrb	r3, [r3, #16]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d10d      	bne.n	800e09c <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e088:	f107 0208 	add.w	r2, r7, #8
 800e08c:	4610      	mov	r0, r2
 800e08e:	4798      	blx	r3
 800e090:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	3301      	adds	r3, #1
 800e096:	2202      	movs	r2, #2
 800e098:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800e09a:	e100      	b.n	800e29e <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0a4:	f107 0208 	add.w	r2, r7, #8
 800e0a8:	4610      	mov	r0, r2
 800e0aa:	4798      	blx	r3
 800e0ac:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	3301      	adds	r3, #1
 800e0b2:	2202      	movs	r2, #2
 800e0b4:	701a      	strb	r2, [r3, #0]
    break;
 800e0b6:	e0f2      	b.n	800e29e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	885b      	ldrh	r3, [r3, #2]
 800e0bc:	b2db      	uxtb	r3, r3
 800e0be:	2b05      	cmp	r3, #5
 800e0c0:	f200 80ac 	bhi.w	800e21c <USBD_GetDescriptor+0x258>
 800e0c4:	a201      	add	r2, pc, #4	; (adr r2, 800e0cc <USBD_GetDescriptor+0x108>)
 800e0c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0ca:	bf00      	nop
 800e0cc:	0800e0e5 	.word	0x0800e0e5
 800e0d0:	0800e119 	.word	0x0800e119
 800e0d4:	0800e14d 	.word	0x0800e14d
 800e0d8:	0800e181 	.word	0x0800e181
 800e0dc:	0800e1b5 	.word	0x0800e1b5
 800e0e0:	0800e1e9 	.word	0x0800e1e9
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d00b      	beq.n	800e108 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e0f6:	685b      	ldr	r3, [r3, #4]
 800e0f8:	687a      	ldr	r2, [r7, #4]
 800e0fa:	7c12      	ldrb	r2, [r2, #16]
 800e0fc:	f107 0108 	add.w	r1, r7, #8
 800e100:	4610      	mov	r0, r2
 800e102:	4798      	blx	r3
 800e104:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e106:	e091      	b.n	800e22c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e108:	6839      	ldr	r1, [r7, #0]
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 faad 	bl	800e66a <USBD_CtlError>
        err++;
 800e110:	7afb      	ldrb	r3, [r7, #11]
 800e112:	3301      	adds	r3, #1
 800e114:	72fb      	strb	r3, [r7, #11]
      break;
 800e116:	e089      	b.n	800e22c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e11e:	689b      	ldr	r3, [r3, #8]
 800e120:	2b00      	cmp	r3, #0
 800e122:	d00b      	beq.n	800e13c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	687a      	ldr	r2, [r7, #4]
 800e12e:	7c12      	ldrb	r2, [r2, #16]
 800e130:	f107 0108 	add.w	r1, r7, #8
 800e134:	4610      	mov	r0, r2
 800e136:	4798      	blx	r3
 800e138:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e13a:	e077      	b.n	800e22c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e13c:	6839      	ldr	r1, [r7, #0]
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f000 fa93 	bl	800e66a <USBD_CtlError>
        err++;
 800e144:	7afb      	ldrb	r3, [r7, #11]
 800e146:	3301      	adds	r3, #1
 800e148:	72fb      	strb	r3, [r7, #11]
      break;
 800e14a:	e06f      	b.n	800e22c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e152:	68db      	ldr	r3, [r3, #12]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d00b      	beq.n	800e170 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e15e:	68db      	ldr	r3, [r3, #12]
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	7c12      	ldrb	r2, [r2, #16]
 800e164:	f107 0108 	add.w	r1, r7, #8
 800e168:	4610      	mov	r0, r2
 800e16a:	4798      	blx	r3
 800e16c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e16e:	e05d      	b.n	800e22c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e170:	6839      	ldr	r1, [r7, #0]
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f000 fa79 	bl	800e66a <USBD_CtlError>
        err++;
 800e178:	7afb      	ldrb	r3, [r7, #11]
 800e17a:	3301      	adds	r3, #1
 800e17c:	72fb      	strb	r3, [r7, #11]
      break;
 800e17e:	e055      	b.n	800e22c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e186:	691b      	ldr	r3, [r3, #16]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00b      	beq.n	800e1a4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e192:	691b      	ldr	r3, [r3, #16]
 800e194:	687a      	ldr	r2, [r7, #4]
 800e196:	7c12      	ldrb	r2, [r2, #16]
 800e198:	f107 0108 	add.w	r1, r7, #8
 800e19c:	4610      	mov	r0, r2
 800e19e:	4798      	blx	r3
 800e1a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1a2:	e043      	b.n	800e22c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e1a4:	6839      	ldr	r1, [r7, #0]
 800e1a6:	6878      	ldr	r0, [r7, #4]
 800e1a8:	f000 fa5f 	bl	800e66a <USBD_CtlError>
        err++;
 800e1ac:	7afb      	ldrb	r3, [r7, #11]
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	72fb      	strb	r3, [r7, #11]
      break;
 800e1b2:	e03b      	b.n	800e22c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ba:	695b      	ldr	r3, [r3, #20]
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d00b      	beq.n	800e1d8 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1c6:	695b      	ldr	r3, [r3, #20]
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	7c12      	ldrb	r2, [r2, #16]
 800e1cc:	f107 0108 	add.w	r1, r7, #8
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	4798      	blx	r3
 800e1d4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e1d6:	e029      	b.n	800e22c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e1d8:	6839      	ldr	r1, [r7, #0]
 800e1da:	6878      	ldr	r0, [r7, #4]
 800e1dc:	f000 fa45 	bl	800e66a <USBD_CtlError>
        err++;
 800e1e0:	7afb      	ldrb	r3, [r7, #11]
 800e1e2:	3301      	adds	r3, #1
 800e1e4:	72fb      	strb	r3, [r7, #11]
      break;
 800e1e6:	e021      	b.n	800e22c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1ee:	699b      	ldr	r3, [r3, #24]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d00b      	beq.n	800e20c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e1fa:	699b      	ldr	r3, [r3, #24]
 800e1fc:	687a      	ldr	r2, [r7, #4]
 800e1fe:	7c12      	ldrb	r2, [r2, #16]
 800e200:	f107 0108 	add.w	r1, r7, #8
 800e204:	4610      	mov	r0, r2
 800e206:	4798      	blx	r3
 800e208:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e20a:	e00f      	b.n	800e22c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 800e20c:	6839      	ldr	r1, [r7, #0]
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 fa2b 	bl	800e66a <USBD_CtlError>
        err++;
 800e214:	7afb      	ldrb	r3, [r7, #11]
 800e216:	3301      	adds	r3, #1
 800e218:	72fb      	strb	r3, [r7, #11]
      break;
 800e21a:	e007      	b.n	800e22c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800e21c:	6839      	ldr	r1, [r7, #0]
 800e21e:	6878      	ldr	r0, [r7, #4]
 800e220:	f000 fa23 	bl	800e66a <USBD_CtlError>
      err++;
 800e224:	7afb      	ldrb	r3, [r7, #11]
 800e226:	3301      	adds	r3, #1
 800e228:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800e22a:	bf00      	nop
    }
    break;
 800e22c:	e037      	b.n	800e29e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	7c1b      	ldrb	r3, [r3, #16]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d109      	bne.n	800e24a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e23e:	f107 0208 	add.w	r2, r7, #8
 800e242:	4610      	mov	r0, r2
 800e244:	4798      	blx	r3
 800e246:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e248:	e029      	b.n	800e29e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e24a:	6839      	ldr	r1, [r7, #0]
 800e24c:	6878      	ldr	r0, [r7, #4]
 800e24e:	f000 fa0c 	bl	800e66a <USBD_CtlError>
      err++;
 800e252:	7afb      	ldrb	r3, [r7, #11]
 800e254:	3301      	adds	r3, #1
 800e256:	72fb      	strb	r3, [r7, #11]
    break;
 800e258:	e021      	b.n	800e29e <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	7c1b      	ldrb	r3, [r3, #16]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d10d      	bne.n	800e27e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e26a:	f107 0208 	add.w	r2, r7, #8
 800e26e:	4610      	mov	r0, r2
 800e270:	4798      	blx	r3
 800e272:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	3301      	adds	r3, #1
 800e278:	2207      	movs	r2, #7
 800e27a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800e27c:	e00f      	b.n	800e29e <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 800e27e:	6839      	ldr	r1, [r7, #0]
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 f9f2 	bl	800e66a <USBD_CtlError>
      err++;
 800e286:	7afb      	ldrb	r3, [r7, #11]
 800e288:	3301      	adds	r3, #1
 800e28a:	72fb      	strb	r3, [r7, #11]
    break;
 800e28c:	e007      	b.n	800e29e <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 800e28e:	6839      	ldr	r1, [r7, #0]
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f000 f9ea 	bl	800e66a <USBD_CtlError>
    err++;
 800e296:	7afb      	ldrb	r3, [r7, #11]
 800e298:	3301      	adds	r3, #1
 800e29a:	72fb      	strb	r3, [r7, #11]
    break;
 800e29c:	bf00      	nop
  }

  if (err != 0U)
 800e29e:	7afb      	ldrb	r3, [r7, #11]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d11e      	bne.n	800e2e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	88db      	ldrh	r3, [r3, #6]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d016      	beq.n	800e2da <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 800e2ac:	893b      	ldrh	r3, [r7, #8]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d00e      	beq.n	800e2d0 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	88da      	ldrh	r2, [r3, #6]
 800e2b6:	893b      	ldrh	r3, [r7, #8]
 800e2b8:	4293      	cmp	r3, r2
 800e2ba:	bf28      	it	cs
 800e2bc:	4613      	movcs	r3, r2
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800e2c2:	893b      	ldrh	r3, [r7, #8]
 800e2c4:	461a      	mov	r2, r3
 800e2c6:	68f9      	ldr	r1, [r7, #12]
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 fa3f 	bl	800e74c <USBD_CtlSendData>
 800e2ce:	e009      	b.n	800e2e4 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800e2d0:	6839      	ldr	r1, [r7, #0]
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 f9c9 	bl	800e66a <USBD_CtlError>
 800e2d8:	e004      	b.n	800e2e4 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 fa90 	bl	800e800 <USBD_CtlSendStatus>
 800e2e0:	e000      	b.n	800e2e4 <USBD_GetDescriptor+0x320>
    return;
 800e2e2:	bf00      	nop
    }
  }
}
 800e2e4:	3710      	adds	r7, #16
 800e2e6:	46bd      	mov	sp, r7
 800e2e8:	bd80      	pop	{r7, pc}
 800e2ea:	bf00      	nop

0800e2ec <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b084      	sub	sp, #16
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	889b      	ldrh	r3, [r3, #4]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d130      	bne.n	800e360 <USBD_SetAddress+0x74>
 800e2fe:	683b      	ldr	r3, [r7, #0]
 800e300:	88db      	ldrh	r3, [r3, #6]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d12c      	bne.n	800e360 <USBD_SetAddress+0x74>
 800e306:	683b      	ldr	r3, [r7, #0]
 800e308:	885b      	ldrh	r3, [r3, #2]
 800e30a:	2b7f      	cmp	r3, #127	; 0x7f
 800e30c:	d828      	bhi.n	800e360 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e30e:	683b      	ldr	r3, [r7, #0]
 800e310:	885b      	ldrh	r3, [r3, #2]
 800e312:	b2db      	uxtb	r3, r3
 800e314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e318:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e320:	2b03      	cmp	r3, #3
 800e322:	d104      	bne.n	800e32e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800e324:	6839      	ldr	r1, [r7, #0]
 800e326:	6878      	ldr	r0, [r7, #4]
 800e328:	f000 f99f 	bl	800e66a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e32c:	e01d      	b.n	800e36a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	7bfa      	ldrb	r2, [r7, #15]
 800e332:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e336:	7bfb      	ldrb	r3, [r7, #15]
 800e338:	4619      	mov	r1, r3
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f001 fadc 	bl	800f8f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e340:	6878      	ldr	r0, [r7, #4]
 800e342:	f000 fa5d 	bl	800e800 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e346:	7bfb      	ldrb	r3, [r7, #15]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d004      	beq.n	800e356 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	2202      	movs	r2, #2
 800e350:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e354:	e009      	b.n	800e36a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2201      	movs	r2, #1
 800e35a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e35e:	e004      	b.n	800e36a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e360:	6839      	ldr	r1, [r7, #0]
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f000 f981 	bl	800e66a <USBD_CtlError>
  }
}
 800e368:	bf00      	nop
 800e36a:	bf00      	nop
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
	...

0800e374 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e37e:	2300      	movs	r3, #0
 800e380:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e382:	683b      	ldr	r3, [r7, #0]
 800e384:	885b      	ldrh	r3, [r3, #2]
 800e386:	b2da      	uxtb	r2, r3
 800e388:	4b4b      	ldr	r3, [pc, #300]	; (800e4b8 <USBD_SetConfig+0x144>)
 800e38a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e38c:	4b4a      	ldr	r3, [pc, #296]	; (800e4b8 <USBD_SetConfig+0x144>)
 800e38e:	781b      	ldrb	r3, [r3, #0]
 800e390:	2b01      	cmp	r3, #1
 800e392:	d905      	bls.n	800e3a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e394:	6839      	ldr	r1, [r7, #0]
 800e396:	6878      	ldr	r0, [r7, #4]
 800e398:	f000 f967 	bl	800e66a <USBD_CtlError>
    return USBD_FAIL;
 800e39c:	2303      	movs	r3, #3
 800e39e:	e087      	b.n	800e4b0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3a6:	2b02      	cmp	r3, #2
 800e3a8:	d002      	beq.n	800e3b0 <USBD_SetConfig+0x3c>
 800e3aa:	2b03      	cmp	r3, #3
 800e3ac:	d025      	beq.n	800e3fa <USBD_SetConfig+0x86>
 800e3ae:	e071      	b.n	800e494 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800e3b0:	4b41      	ldr	r3, [pc, #260]	; (800e4b8 <USBD_SetConfig+0x144>)
 800e3b2:	781b      	ldrb	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d01c      	beq.n	800e3f2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800e3b8:	4b3f      	ldr	r3, [pc, #252]	; (800e4b8 <USBD_SetConfig+0x144>)
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	461a      	mov	r2, r3
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e3c2:	4b3d      	ldr	r3, [pc, #244]	; (800e4b8 <USBD_SetConfig+0x144>)
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	4619      	mov	r1, r3
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f7ff f9af 	bl	800d72c <USBD_SetClassConfig>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800e3d2:	7bfb      	ldrb	r3, [r7, #15]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d004      	beq.n	800e3e2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800e3d8:	6839      	ldr	r1, [r7, #0]
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 f945 	bl	800e66a <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e3e0:	e065      	b.n	800e4ae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e3e2:	6878      	ldr	r0, [r7, #4]
 800e3e4:	f000 fa0c 	bl	800e800 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2203      	movs	r2, #3
 800e3ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800e3f0:	e05d      	b.n	800e4ae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e3f2:	6878      	ldr	r0, [r7, #4]
 800e3f4:	f000 fa04 	bl	800e800 <USBD_CtlSendStatus>
    break;
 800e3f8:	e059      	b.n	800e4ae <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800e3fa:	4b2f      	ldr	r3, [pc, #188]	; (800e4b8 <USBD_SetConfig+0x144>)
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d112      	bne.n	800e428 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	2202      	movs	r2, #2
 800e406:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800e40a:	4b2b      	ldr	r3, [pc, #172]	; (800e4b8 <USBD_SetConfig+0x144>)
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	461a      	mov	r2, r3
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e414:	4b28      	ldr	r3, [pc, #160]	; (800e4b8 <USBD_SetConfig+0x144>)
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	4619      	mov	r1, r3
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7ff f9a2 	bl	800d764 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 f9ed 	bl	800e800 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800e426:	e042      	b.n	800e4ae <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800e428:	4b23      	ldr	r3, [pc, #140]	; (800e4b8 <USBD_SetConfig+0x144>)
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	461a      	mov	r2, r3
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	685b      	ldr	r3, [r3, #4]
 800e432:	429a      	cmp	r2, r3
 800e434:	d02a      	beq.n	800e48c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	685b      	ldr	r3, [r3, #4]
 800e43a:	b2db      	uxtb	r3, r3
 800e43c:	4619      	mov	r1, r3
 800e43e:	6878      	ldr	r0, [r7, #4]
 800e440:	f7ff f990 	bl	800d764 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800e444:	4b1c      	ldr	r3, [pc, #112]	; (800e4b8 <USBD_SetConfig+0x144>)
 800e446:	781b      	ldrb	r3, [r3, #0]
 800e448:	461a      	mov	r2, r3
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800e44e:	4b1a      	ldr	r3, [pc, #104]	; (800e4b8 <USBD_SetConfig+0x144>)
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	4619      	mov	r1, r3
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f7ff f969 	bl	800d72c <USBD_SetClassConfig>
 800e45a:	4603      	mov	r3, r0
 800e45c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800e45e:	7bfb      	ldrb	r3, [r7, #15]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00f      	beq.n	800e484 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800e464:	6839      	ldr	r1, [r7, #0]
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 f8ff 	bl	800e66a <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	b2db      	uxtb	r3, r3
 800e472:	4619      	mov	r1, r3
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f7ff f975 	bl	800d764 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2202      	movs	r2, #2
 800e47e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800e482:	e014      	b.n	800e4ae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f000 f9bb 	bl	800e800 <USBD_CtlSendStatus>
    break;
 800e48a:	e010      	b.n	800e4ae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 f9b7 	bl	800e800 <USBD_CtlSendStatus>
    break;
 800e492:	e00c      	b.n	800e4ae <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800e494:	6839      	ldr	r1, [r7, #0]
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 f8e7 	bl	800e66a <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e49c:	4b06      	ldr	r3, [pc, #24]	; (800e4b8 <USBD_SetConfig+0x144>)
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f7ff f95e 	bl	800d764 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800e4a8:	2303      	movs	r3, #3
 800e4aa:	73fb      	strb	r3, [r7, #15]
    break;
 800e4ac:	bf00      	nop
  }

  return ret;
 800e4ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4b0:	4618      	mov	r0, r3
 800e4b2:	3710      	adds	r7, #16
 800e4b4:	46bd      	mov	sp, r7
 800e4b6:	bd80      	pop	{r7, pc}
 800e4b8:	20001904 	.word	0x20001904

0800e4bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b082      	sub	sp, #8
 800e4c0:	af00      	add	r7, sp, #0
 800e4c2:	6078      	str	r0, [r7, #4]
 800e4c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	88db      	ldrh	r3, [r3, #6]
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d004      	beq.n	800e4d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e4ce:	6839      	ldr	r1, [r7, #0]
 800e4d0:	6878      	ldr	r0, [r7, #4]
 800e4d2:	f000 f8ca 	bl	800e66a <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800e4d6:	e022      	b.n	800e51e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e4de:	2b02      	cmp	r3, #2
 800e4e0:	dc02      	bgt.n	800e4e8 <USBD_GetConfig+0x2c>
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	dc03      	bgt.n	800e4ee <USBD_GetConfig+0x32>
 800e4e6:	e015      	b.n	800e514 <USBD_GetConfig+0x58>
 800e4e8:	2b03      	cmp	r3, #3
 800e4ea:	d00b      	beq.n	800e504 <USBD_GetConfig+0x48>
 800e4ec:	e012      	b.n	800e514 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	3308      	adds	r3, #8
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	4619      	mov	r1, r3
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 f925 	bl	800e74c <USBD_CtlSendData>
      break;
 800e502:	e00c      	b.n	800e51e <USBD_GetConfig+0x62>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	3304      	adds	r3, #4
 800e508:	2201      	movs	r2, #1
 800e50a:	4619      	mov	r1, r3
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f000 f91d 	bl	800e74c <USBD_CtlSendData>
      break;
 800e512:	e004      	b.n	800e51e <USBD_GetConfig+0x62>
      USBD_CtlError(pdev, req);
 800e514:	6839      	ldr	r1, [r7, #0]
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f000 f8a7 	bl	800e66a <USBD_CtlError>
      break;
 800e51c:	bf00      	nop
}
 800e51e:	bf00      	nop
 800e520:	3708      	adds	r7, #8
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}

0800e526 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e526:	b580      	push	{r7, lr}
 800e528:	b082      	sub	sp, #8
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	6078      	str	r0, [r7, #4]
 800e52e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e536:	3b01      	subs	r3, #1
 800e538:	2b02      	cmp	r3, #2
 800e53a:	d81e      	bhi.n	800e57a <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800e53c:	683b      	ldr	r3, [r7, #0]
 800e53e:	88db      	ldrh	r3, [r3, #6]
 800e540:	2b02      	cmp	r3, #2
 800e542:	d004      	beq.n	800e54e <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800e544:	6839      	ldr	r1, [r7, #0]
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f000 f88f 	bl	800e66a <USBD_CtlError>
      break;
 800e54c:	e01a      	b.n	800e584 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2201      	movs	r2, #1
 800e552:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d005      	beq.n	800e56a <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	68db      	ldr	r3, [r3, #12]
 800e562:	f043 0202 	orr.w	r2, r3, #2
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	330c      	adds	r3, #12
 800e56e:	2202      	movs	r2, #2
 800e570:	4619      	mov	r1, r3
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f000 f8ea 	bl	800e74c <USBD_CtlSendData>
    break;
 800e578:	e004      	b.n	800e584 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800e57a:	6839      	ldr	r1, [r7, #0]
 800e57c:	6878      	ldr	r0, [r7, #4]
 800e57e:	f000 f874 	bl	800e66a <USBD_CtlError>
    break;
 800e582:	bf00      	nop
  }
}
 800e584:	bf00      	nop
 800e586:	3708      	adds	r7, #8
 800e588:	46bd      	mov	sp, r7
 800e58a:	bd80      	pop	{r7, pc}

0800e58c <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b082      	sub	sp, #8
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	885b      	ldrh	r3, [r3, #2]
 800e59a:	2b01      	cmp	r3, #1
 800e59c:	d106      	bne.n	800e5ac <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	2201      	movs	r2, #1
 800e5a2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e5a6:	6878      	ldr	r0, [r7, #4]
 800e5a8:	f000 f92a 	bl	800e800 <USBD_CtlSendStatus>
  }
}
 800e5ac:	bf00      	nop
 800e5ae:	3708      	adds	r7, #8
 800e5b0:	46bd      	mov	sp, r7
 800e5b2:	bd80      	pop	{r7, pc}

0800e5b4 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b082      	sub	sp, #8
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
 800e5bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5c4:	3b01      	subs	r3, #1
 800e5c6:	2b02      	cmp	r3, #2
 800e5c8:	d80b      	bhi.n	800e5e2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e5ca:	683b      	ldr	r3, [r7, #0]
 800e5cc:	885b      	ldrh	r3, [r3, #2]
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d10c      	bne.n	800e5ec <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	2200      	movs	r2, #0
 800e5d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e5da:	6878      	ldr	r0, [r7, #4]
 800e5dc:	f000 f910 	bl	800e800 <USBD_CtlSendStatus>
      }
      break;
 800e5e0:	e004      	b.n	800e5ec <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800e5e2:	6839      	ldr	r1, [r7, #0]
 800e5e4:	6878      	ldr	r0, [r7, #4]
 800e5e6:	f000 f840 	bl	800e66a <USBD_CtlError>
      break;
 800e5ea:	e000      	b.n	800e5ee <USBD_ClrFeature+0x3a>
      break;
 800e5ec:	bf00      	nop
  }
}
 800e5ee:	bf00      	nop
 800e5f0:	3708      	adds	r7, #8
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b084      	sub	sp, #16
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
 800e5fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e600:	683b      	ldr	r3, [r7, #0]
 800e602:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	781a      	ldrb	r2, [r3, #0]
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	3301      	adds	r3, #1
 800e610:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	781a      	ldrb	r2, [r3, #0]
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	3301      	adds	r3, #1
 800e61e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e620:	68f8      	ldr	r0, [r7, #12]
 800e622:	f7ff fa9b 	bl	800db5c <SWAPBYTE>
 800e626:	4603      	mov	r3, r0
 800e628:	461a      	mov	r2, r3
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	3301      	adds	r3, #1
 800e632:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	3301      	adds	r3, #1
 800e638:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f7ff fa8e 	bl	800db5c <SWAPBYTE>
 800e640:	4603      	mov	r3, r0
 800e642:	461a      	mov	r2, r3
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	3301      	adds	r3, #1
 800e64c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	3301      	adds	r3, #1
 800e652:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e654:	68f8      	ldr	r0, [r7, #12]
 800e656:	f7ff fa81 	bl	800db5c <SWAPBYTE>
 800e65a:	4603      	mov	r3, r0
 800e65c:	461a      	mov	r2, r3
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	80da      	strh	r2, [r3, #6]
}
 800e662:	bf00      	nop
 800e664:	3710      	adds	r7, #16
 800e666:	46bd      	mov	sp, r7
 800e668:	bd80      	pop	{r7, pc}

0800e66a <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e66a:	b580      	push	{r7, lr}
 800e66c:	b082      	sub	sp, #8
 800e66e:	af00      	add	r7, sp, #0
 800e670:	6078      	str	r0, [r7, #4]
 800e672:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e674:	2180      	movs	r1, #128	; 0x80
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f001 f8d4 	bl	800f824 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e67c:	2100      	movs	r1, #0
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f001 f8d0 	bl	800f824 <USBD_LL_StallEP>
}
 800e684:	bf00      	nop
 800e686:	3708      	adds	r7, #8
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b086      	sub	sp, #24
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	60b9      	str	r1, [r7, #8]
 800e696:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e698:	2300      	movs	r3, #0
 800e69a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d036      	beq.n	800e710 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e6a6:	6938      	ldr	r0, [r7, #16]
 800e6a8:	f000 f836 	bl	800e718 <USBD_GetLen>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	b29b      	uxth	r3, r3
 800e6b2:	005b      	lsls	r3, r3, #1
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e6ba:	7dfb      	ldrb	r3, [r7, #23]
 800e6bc:	68ba      	ldr	r2, [r7, #8]
 800e6be:	4413      	add	r3, r2
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	7812      	ldrb	r2, [r2, #0]
 800e6c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e6c6:	7dfb      	ldrb	r3, [r7, #23]
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e6cc:	7dfb      	ldrb	r3, [r7, #23]
 800e6ce:	68ba      	ldr	r2, [r7, #8]
 800e6d0:	4413      	add	r3, r2
 800e6d2:	2203      	movs	r2, #3
 800e6d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800e6d6:	7dfb      	ldrb	r3, [r7, #23]
 800e6d8:	3301      	adds	r3, #1
 800e6da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e6dc:	e013      	b.n	800e706 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e6de:	7dfb      	ldrb	r3, [r7, #23]
 800e6e0:	68ba      	ldr	r2, [r7, #8]
 800e6e2:	4413      	add	r3, r2
 800e6e4:	693a      	ldr	r2, [r7, #16]
 800e6e6:	7812      	ldrb	r2, [r2, #0]
 800e6e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	3301      	adds	r3, #1
 800e6ee:	613b      	str	r3, [r7, #16]
    idx++;
 800e6f0:	7dfb      	ldrb	r3, [r7, #23]
 800e6f2:	3301      	adds	r3, #1
 800e6f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e6f6:	7dfb      	ldrb	r3, [r7, #23]
 800e6f8:	68ba      	ldr	r2, [r7, #8]
 800e6fa:	4413      	add	r3, r2
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	701a      	strb	r2, [r3, #0]
    idx++;
 800e700:	7dfb      	ldrb	r3, [r7, #23]
 800e702:	3301      	adds	r3, #1
 800e704:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e706:	693b      	ldr	r3, [r7, #16]
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d1e7      	bne.n	800e6de <USBD_GetString+0x52>
 800e70e:	e000      	b.n	800e712 <USBD_GetString+0x86>
    return;
 800e710:	bf00      	nop
  }
}
 800e712:	3718      	adds	r7, #24
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e718:	b480      	push	{r7}
 800e71a:	b085      	sub	sp, #20
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e720:	2300      	movs	r3, #0
 800e722:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e728:	e005      	b.n	800e736 <USBD_GetLen+0x1e>
  {
    len++;
 800e72a:	7bfb      	ldrb	r3, [r7, #15]
 800e72c:	3301      	adds	r3, #1
 800e72e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e730:	68bb      	ldr	r3, [r7, #8]
 800e732:	3301      	adds	r3, #1
 800e734:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	781b      	ldrb	r3, [r3, #0]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d1f5      	bne.n	800e72a <USBD_GetLen+0x12>
  }

  return len;
 800e73e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e740:	4618      	mov	r0, r3
 800e742:	3714      	adds	r7, #20
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr

0800e74c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	60f8      	str	r0, [r7, #12]
 800e754:	60b9      	str	r1, [r7, #8]
 800e756:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e758:	68fb      	ldr	r3, [r7, #12]
 800e75a:	2202      	movs	r2, #2
 800e75c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	687a      	ldr	r2, [r7, #4]
 800e764:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	687a      	ldr	r2, [r7, #4]
 800e76a:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	68ba      	ldr	r2, [r7, #8]
 800e770:	2100      	movs	r1, #0
 800e772:	68f8      	ldr	r0, [r7, #12]
 800e774:	f001 f8df 	bl	800f936 <USBD_LL_Transmit>

  return USBD_OK;
 800e778:	2300      	movs	r3, #0
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3710      	adds	r7, #16
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}

0800e782 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e782:	b580      	push	{r7, lr}
 800e784:	b084      	sub	sp, #16
 800e786:	af00      	add	r7, sp, #0
 800e788:	60f8      	str	r0, [r7, #12]
 800e78a:	60b9      	str	r1, [r7, #8]
 800e78c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	68ba      	ldr	r2, [r7, #8]
 800e792:	2100      	movs	r1, #0
 800e794:	68f8      	ldr	r0, [r7, #12]
 800e796:	f001 f8ce 	bl	800f936 <USBD_LL_Transmit>

  return USBD_OK;
 800e79a:	2300      	movs	r3, #0
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	3710      	adds	r7, #16
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	60f8      	str	r0, [r7, #12]
 800e7ac:	60b9      	str	r1, [r7, #8]
 800e7ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2203      	movs	r2, #3
 800e7b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	687a      	ldr	r2, [r7, #4]
 800e7c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	68ba      	ldr	r2, [r7, #8]
 800e7cc:	2100      	movs	r1, #0
 800e7ce:	68f8      	ldr	r0, [r7, #12]
 800e7d0:	f001 f8d2 	bl	800f978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}

0800e7de <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e7de:	b580      	push	{r7, lr}
 800e7e0:	b084      	sub	sp, #16
 800e7e2:	af00      	add	r7, sp, #0
 800e7e4:	60f8      	str	r0, [r7, #12]
 800e7e6:	60b9      	str	r1, [r7, #8]
 800e7e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	68ba      	ldr	r2, [r7, #8]
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	68f8      	ldr	r0, [r7, #12]
 800e7f2:	f001 f8c1 	bl	800f978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e7f6:	2300      	movs	r3, #0
}
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	3710      	adds	r7, #16
 800e7fc:	46bd      	mov	sp, r7
 800e7fe:	bd80      	pop	{r7, pc}

0800e800 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	2204      	movs	r2, #4
 800e80c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e810:	2300      	movs	r3, #0
 800e812:	2200      	movs	r2, #0
 800e814:	2100      	movs	r1, #0
 800e816:	6878      	ldr	r0, [r7, #4]
 800e818:	f001 f88d 	bl	800f936 <USBD_LL_Transmit>

  return USBD_OK;
 800e81c:	2300      	movs	r3, #0
}
 800e81e:	4618      	mov	r0, r3
 800e820:	3708      	adds	r7, #8
 800e822:	46bd      	mov	sp, r7
 800e824:	bd80      	pop	{r7, pc}

0800e826 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e826:	b580      	push	{r7, lr}
 800e828:	b082      	sub	sp, #8
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2205      	movs	r2, #5
 800e832:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e836:	2300      	movs	r3, #0
 800e838:	2200      	movs	r2, #0
 800e83a:	2100      	movs	r1, #0
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f001 f89b 	bl	800f978 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e842:	2300      	movs	r3, #0
}
 800e844:	4618      	mov	r0, r3
 800e846:	3708      	adds	r7, #8
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	460b      	mov	r3, r1
 800e856:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800e858:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800e85c:	f001 f8f6 	bl	800fa4c <USBD_static_malloc>
 800e860:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d105      	bne.n	800e874 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2200      	movs	r2, #0
 800e86c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800e870:	2302      	movs	r3, #2
 800e872:	e066      	b.n	800e942 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	68fa      	ldr	r2, [r7, #12]
 800e878:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	7c1b      	ldrb	r3, [r3, #16]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d119      	bne.n	800e8b8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e884:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e888:	2202      	movs	r2, #2
 800e88a:	2181      	movs	r1, #129	; 0x81
 800e88c:	6878      	ldr	r0, [r7, #4]
 800e88e:	f000 ff84 	bl	800f79a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2201      	movs	r2, #1
 800e896:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e898:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e89c:	2202      	movs	r2, #2
 800e89e:	2101      	movs	r1, #1
 800e8a0:	6878      	ldr	r0, [r7, #4]
 800e8a2:	f000 ff7a 	bl	800f79a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2201      	movs	r2, #1
 800e8aa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2210      	movs	r2, #16
 800e8b2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800e8b6:	e016      	b.n	800e8e6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800e8b8:	2340      	movs	r3, #64	; 0x40
 800e8ba:	2202      	movs	r2, #2
 800e8bc:	2181      	movs	r1, #129	; 0x81
 800e8be:	6878      	ldr	r0, [r7, #4]
 800e8c0:	f000 ff6b 	bl	800f79a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	2201      	movs	r2, #1
 800e8c8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800e8ca:	2340      	movs	r3, #64	; 0x40
 800e8cc:	2202      	movs	r2, #2
 800e8ce:	2101      	movs	r1, #1
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f000 ff62 	bl	800f79a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2201      	movs	r2, #1
 800e8da:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2210      	movs	r2, #16
 800e8e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800e8e6:	2308      	movs	r3, #8
 800e8e8:	2203      	movs	r2, #3
 800e8ea:	2182      	movs	r1, #130	; 0x82
 800e8ec:	6878      	ldr	r0, [r7, #4]
 800e8ee:	f000 ff54 	bl	800f79a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2200      	movs	r2, #0
 800e908:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	2200      	movs	r2, #0
 800e910:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	7c1b      	ldrb	r3, [r3, #16]
 800e918:	2b00      	cmp	r3, #0
 800e91a:	d109      	bne.n	800e930 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e922:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e926:	2101      	movs	r1, #1
 800e928:	6878      	ldr	r0, [r7, #4]
 800e92a:	f001 f825 	bl	800f978 <USBD_LL_PrepareReceive>
 800e92e:	e007      	b.n	800e940 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e936:	2340      	movs	r3, #64	; 0x40
 800e938:	2101      	movs	r1, #1
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f001 f81c 	bl	800f978 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e940:	2300      	movs	r3, #0
}
 800e942:	4618      	mov	r0, r3
 800e944:	3710      	adds	r7, #16
 800e946:	46bd      	mov	sp, r7
 800e948:	bd80      	pop	{r7, pc}

0800e94a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e94a:	b580      	push	{r7, lr}
 800e94c:	b082      	sub	sp, #8
 800e94e:	af00      	add	r7, sp, #0
 800e950:	6078      	str	r0, [r7, #4]
 800e952:	460b      	mov	r3, r1
 800e954:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800e956:	2181      	movs	r1, #129	; 0x81
 800e958:	6878      	ldr	r0, [r7, #4]
 800e95a:	f000 ff44 	bl	800f7e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	2200      	movs	r2, #0
 800e962:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800e964:	2101      	movs	r1, #1
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f000 ff3d 	bl	800f7e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2200      	movs	r2, #0
 800e970:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800e974:	2182      	movs	r1, #130	; 0x82
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 ff35 	bl	800f7e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	2200      	movs	r2, #0
 800e980:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	2200      	movs	r2, #0
 800e988:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e992:	2b00      	cmp	r3, #0
 800e994:	d00e      	beq.n	800e9b4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e99c:	685b      	ldr	r3, [r3, #4]
 800e99e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f001 f85e 	bl	800fa68 <USBD_static_free>
    pdev->pClassData = NULL;
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e9b4:	2300      	movs	r3, #0
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	3708      	adds	r7, #8
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
	...

0800e9c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b086      	sub	sp, #24
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e9d0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800e9da:	2300      	movs	r3, #0
 800e9dc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d03a      	beq.n	800ea60 <USBD_CDC_Setup+0xa0>
 800e9ea:	2b20      	cmp	r3, #32
 800e9ec:	f040 8097 	bne.w	800eb1e <USBD_CDC_Setup+0x15e>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	88db      	ldrh	r3, [r3, #6]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d029      	beq.n	800ea4c <USBD_CDC_Setup+0x8c>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	781b      	ldrb	r3, [r3, #0]
 800e9fc:	b25b      	sxtb	r3, r3
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	da11      	bge.n	800ea26 <USBD_CDC_Setup+0x66>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea08:	689b      	ldr	r3, [r3, #8]
 800ea0a:	683a      	ldr	r2, [r7, #0]
 800ea0c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ea0e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ea10:	683a      	ldr	r2, [r7, #0]
 800ea12:	88d2      	ldrh	r2, [r2, #6]
 800ea14:	4798      	blx	r3
                                                            req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ea16:	6939      	ldr	r1, [r7, #16]
 800ea18:	683b      	ldr	r3, [r7, #0]
 800ea1a:	88db      	ldrh	r3, [r3, #6]
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f7ff fe94 	bl	800e74c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ea24:	e082      	b.n	800eb2c <USBD_CDC_Setup+0x16c>
          hcdc->CmdOpCode = req->bRequest;
 800ea26:	683b      	ldr	r3, [r7, #0]
 800ea28:	785a      	ldrb	r2, [r3, #1]
 800ea2a:	693b      	ldr	r3, [r7, #16]
 800ea2c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800ea30:	683b      	ldr	r3, [r7, #0]
 800ea32:	88db      	ldrh	r3, [r3, #6]
 800ea34:	b2da      	uxtb	r2, r3
 800ea36:	693b      	ldr	r3, [r7, #16]
 800ea38:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800ea3c:	6939      	ldr	r1, [r7, #16]
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	88db      	ldrh	r3, [r3, #6]
 800ea42:	461a      	mov	r2, r3
 800ea44:	6878      	ldr	r0, [r7, #4]
 800ea46:	f7ff fead 	bl	800e7a4 <USBD_CtlPrepareRx>
      break;
 800ea4a:	e06f      	b.n	800eb2c <USBD_CDC_Setup+0x16c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	683a      	ldr	r2, [r7, #0]
 800ea56:	7850      	ldrb	r0, [r2, #1]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	6839      	ldr	r1, [r7, #0]
 800ea5c:	4798      	blx	r3
      break;
 800ea5e:	e065      	b.n	800eb2c <USBD_CDC_Setup+0x16c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	785b      	ldrb	r3, [r3, #1]
 800ea64:	2b0b      	cmp	r3, #11
 800ea66:	d84f      	bhi.n	800eb08 <USBD_CDC_Setup+0x148>
 800ea68:	a201      	add	r2, pc, #4	; (adr r2, 800ea70 <USBD_CDC_Setup+0xb0>)
 800ea6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea6e:	bf00      	nop
 800ea70:	0800eaa1 	.word	0x0800eaa1
 800ea74:	0800eb17 	.word	0x0800eb17
 800ea78:	0800eb09 	.word	0x0800eb09
 800ea7c:	0800eb09 	.word	0x0800eb09
 800ea80:	0800eb09 	.word	0x0800eb09
 800ea84:	0800eb09 	.word	0x0800eb09
 800ea88:	0800eb09 	.word	0x0800eb09
 800ea8c:	0800eb09 	.word	0x0800eb09
 800ea90:	0800eb09 	.word	0x0800eb09
 800ea94:	0800eb09 	.word	0x0800eb09
 800ea98:	0800eac9 	.word	0x0800eac9
 800ea9c:	0800eaf1 	.word	0x0800eaf1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaa6:	2b03      	cmp	r3, #3
 800eaa8:	d107      	bne.n	800eaba <USBD_CDC_Setup+0xfa>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800eaaa:	f107 030c 	add.w	r3, r7, #12
 800eaae:	2202      	movs	r2, #2
 800eab0:	4619      	mov	r1, r3
 800eab2:	6878      	ldr	r0, [r7, #4]
 800eab4:	f7ff fe4a 	bl	800e74c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eab8:	e030      	b.n	800eb1c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800eaba:	6839      	ldr	r1, [r7, #0]
 800eabc:	6878      	ldr	r0, [r7, #4]
 800eabe:	f7ff fdd4 	bl	800e66a <USBD_CtlError>
            ret = USBD_FAIL;
 800eac2:	2303      	movs	r3, #3
 800eac4:	75fb      	strb	r3, [r7, #23]
          break;
 800eac6:	e029      	b.n	800eb1c <USBD_CDC_Setup+0x15c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eace:	2b03      	cmp	r3, #3
 800ead0:	d107      	bne.n	800eae2 <USBD_CDC_Setup+0x122>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ead2:	f107 030f 	add.w	r3, r7, #15
 800ead6:	2201      	movs	r2, #1
 800ead8:	4619      	mov	r1, r3
 800eada:	6878      	ldr	r0, [r7, #4]
 800eadc:	f7ff fe36 	bl	800e74c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800eae0:	e01c      	b.n	800eb1c <USBD_CDC_Setup+0x15c>
            USBD_CtlError(pdev, req);
 800eae2:	6839      	ldr	r1, [r7, #0]
 800eae4:	6878      	ldr	r0, [r7, #4]
 800eae6:	f7ff fdc0 	bl	800e66a <USBD_CtlError>
            ret = USBD_FAIL;
 800eaea:	2303      	movs	r3, #3
 800eaec:	75fb      	strb	r3, [r7, #23]
          break;
 800eaee:	e015      	b.n	800eb1c <USBD_CDC_Setup+0x15c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eaf6:	2b03      	cmp	r3, #3
 800eaf8:	d00f      	beq.n	800eb1a <USBD_CDC_Setup+0x15a>
          {
            USBD_CtlError(pdev, req);
 800eafa:	6839      	ldr	r1, [r7, #0]
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7ff fdb4 	bl	800e66a <USBD_CtlError>
            ret = USBD_FAIL;
 800eb02:	2303      	movs	r3, #3
 800eb04:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800eb06:	e008      	b.n	800eb1a <USBD_CDC_Setup+0x15a>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800eb08:	6839      	ldr	r1, [r7, #0]
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f7ff fdad 	bl	800e66a <USBD_CtlError>
          ret = USBD_FAIL;
 800eb10:	2303      	movs	r3, #3
 800eb12:	75fb      	strb	r3, [r7, #23]
          break;
 800eb14:	e002      	b.n	800eb1c <USBD_CDC_Setup+0x15c>
          break;
 800eb16:	bf00      	nop
 800eb18:	e008      	b.n	800eb2c <USBD_CDC_Setup+0x16c>
          break;
 800eb1a:	bf00      	nop
      }
      break;
 800eb1c:	e006      	b.n	800eb2c <USBD_CDC_Setup+0x16c>

    default:
      USBD_CtlError(pdev, req);
 800eb1e:	6839      	ldr	r1, [r7, #0]
 800eb20:	6878      	ldr	r0, [r7, #4]
 800eb22:	f7ff fda2 	bl	800e66a <USBD_CtlError>
      ret = USBD_FAIL;
 800eb26:	2303      	movs	r3, #3
 800eb28:	75fb      	strb	r3, [r7, #23]
      break;
 800eb2a:	bf00      	nop
  }

  return (uint8_t)ret;
 800eb2c:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb2e:	4618      	mov	r0, r3
 800eb30:	3718      	adds	r7, #24
 800eb32:	46bd      	mov	sp, r7
 800eb34:	bd80      	pop	{r7, pc}
 800eb36:	bf00      	nop

0800eb38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800eb38:	b580      	push	{r7, lr}
 800eb3a:	b084      	sub	sp, #16
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	6078      	str	r0, [r7, #4]
 800eb40:	460b      	mov	r3, r1
 800eb42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800eb4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d101      	bne.n	800eb5a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800eb56:	2303      	movs	r3, #3
 800eb58:	e04f      	b.n	800ebfa <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb60:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800eb62:	78fa      	ldrb	r2, [r7, #3]
 800eb64:	6879      	ldr	r1, [r7, #4]
 800eb66:	4613      	mov	r3, r2
 800eb68:	009b      	lsls	r3, r3, #2
 800eb6a:	4413      	add	r3, r2
 800eb6c:	009b      	lsls	r3, r3, #2
 800eb6e:	440b      	add	r3, r1
 800eb70:	3318      	adds	r3, #24
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d029      	beq.n	800ebcc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800eb78:	78fa      	ldrb	r2, [r7, #3]
 800eb7a:	6879      	ldr	r1, [r7, #4]
 800eb7c:	4613      	mov	r3, r2
 800eb7e:	009b      	lsls	r3, r3, #2
 800eb80:	4413      	add	r3, r2
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	440b      	add	r3, r1
 800eb86:	3318      	adds	r3, #24
 800eb88:	681a      	ldr	r2, [r3, #0]
 800eb8a:	78f9      	ldrb	r1, [r7, #3]
 800eb8c:	68f8      	ldr	r0, [r7, #12]
 800eb8e:	460b      	mov	r3, r1
 800eb90:	009b      	lsls	r3, r3, #2
 800eb92:	440b      	add	r3, r1
 800eb94:	00db      	lsls	r3, r3, #3
 800eb96:	4403      	add	r3, r0
 800eb98:	3320      	adds	r3, #32
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	fbb2 f1f3 	udiv	r1, r2, r3
 800eba0:	fb01 f303 	mul.w	r3, r1, r3
 800eba4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d110      	bne.n	800ebcc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ebaa:	78fa      	ldrb	r2, [r7, #3]
 800ebac:	6879      	ldr	r1, [r7, #4]
 800ebae:	4613      	mov	r3, r2
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	4413      	add	r3, r2
 800ebb4:	009b      	lsls	r3, r3, #2
 800ebb6:	440b      	add	r3, r1
 800ebb8:	3318      	adds	r3, #24
 800ebba:	2200      	movs	r2, #0
 800ebbc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ebbe:	78f9      	ldrb	r1, [r7, #3]
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	2200      	movs	r2, #0
 800ebc4:	6878      	ldr	r0, [r7, #4]
 800ebc6:	f000 feb6 	bl	800f936 <USBD_LL_Transmit>
 800ebca:	e015      	b.n	800ebf8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800ebcc:	68bb      	ldr	r3, [r7, #8]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebda:	691b      	ldr	r3, [r3, #16]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d00b      	beq.n	800ebf8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ebe6:	691b      	ldr	r3, [r3, #16]
 800ebe8:	68ba      	ldr	r2, [r7, #8]
 800ebea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ebee:	68ba      	ldr	r2, [r7, #8]
 800ebf0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ebf4:	78fa      	ldrb	r2, [r7, #3]
 800ebf6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ebf8:	2300      	movs	r3, #0
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3710      	adds	r7, #16
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}

0800ec02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ec02:	b580      	push	{r7, lr}
 800ec04:	b084      	sub	sp, #16
 800ec06:	af00      	add	r7, sp, #0
 800ec08:	6078      	str	r0, [r7, #4]
 800ec0a:	460b      	mov	r3, r1
 800ec0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec14:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d101      	bne.n	800ec24 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ec20:	2303      	movs	r3, #3
 800ec22:	e015      	b.n	800ec50 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ec24:	78fb      	ldrb	r3, [r7, #3]
 800ec26:	4619      	mov	r1, r3
 800ec28:	6878      	ldr	r0, [r7, #4]
 800ec2a:	f000 fec6 	bl	800f9ba <USBD_LL_GetRxDataSize>
 800ec2e:	4602      	mov	r2, r0
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec3c:	68db      	ldr	r3, [r3, #12]
 800ec3e:	68fa      	ldr	r2, [r7, #12]
 800ec40:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ec44:	68fa      	ldr	r2, [r7, #12]
 800ec46:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ec4a:	4611      	mov	r1, r2
 800ec4c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ec4e:	2300      	movs	r3, #0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3710      	adds	r7, #16
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b084      	sub	sp, #16
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec66:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d015      	beq.n	800ec9e <USBD_CDC_EP0_RxReady+0x46>
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800ec78:	2bff      	cmp	r3, #255	; 0xff
 800ec7a:	d010      	beq.n	800ec9e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ec82:	689b      	ldr	r3, [r3, #8]
 800ec84:	68fa      	ldr	r2, [r7, #12]
 800ec86:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800ec8a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800ec8c:	68fa      	ldr	r2, [r7, #12]
 800ec8e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800ec92:	b292      	uxth	r2, r2
 800ec94:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	22ff      	movs	r2, #255	; 0xff
 800ec9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800ec9e:	2300      	movs	r3, #0
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800eca8:	b480      	push	{r7}
 800ecaa:	b083      	sub	sp, #12
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2243      	movs	r2, #67	; 0x43
 800ecb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800ecb6:	4b03      	ldr	r3, [pc, #12]	; (800ecc4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800ecb8:	4618      	mov	r0, r3
 800ecba:	370c      	adds	r7, #12
 800ecbc:	46bd      	mov	sp, r7
 800ecbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc2:	4770      	bx	lr
 800ecc4:	200000c4 	.word	0x200000c4

0800ecc8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b083      	sub	sp, #12
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2243      	movs	r2, #67	; 0x43
 800ecd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800ecd6:	4b03      	ldr	r3, [pc, #12]	; (800ece4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	370c      	adds	r7, #12
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr
 800ece4:	20000080 	.word	0x20000080

0800ece8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2243      	movs	r2, #67	; 0x43
 800ecf4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800ecf6:	4b03      	ldr	r3, [pc, #12]	; (800ed04 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	370c      	adds	r7, #12
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr
 800ed04:	20000108 	.word	0x20000108

0800ed08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ed08:	b480      	push	{r7}
 800ed0a:	b083      	sub	sp, #12
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	220a      	movs	r2, #10
 800ed14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ed16:	4b03      	ldr	r3, [pc, #12]	; (800ed24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	370c      	adds	r7, #12
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed22:	4770      	bx	lr
 800ed24:	2000003c 	.word	0x2000003c

0800ed28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ed28:	b480      	push	{r7}
 800ed2a:	b083      	sub	sp, #12
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d101      	bne.n	800ed3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ed38:	2303      	movs	r3, #3
 800ed3a:	e004      	b.n	800ed46 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	683a      	ldr	r2, [r7, #0]
 800ed40:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800ed44:	2300      	movs	r3, #0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	370c      	adds	r7, #12
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr

0800ed52 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ed52:	b480      	push	{r7}
 800ed54:	b087      	sub	sp, #28
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	60f8      	str	r0, [r7, #12]
 800ed5a:	60b9      	str	r1, [r7, #8]
 800ed5c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed64:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ed76:	2300      	movs	r3, #0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	371c      	adds	r7, #28
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr

0800ed84 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ed84:	b480      	push	{r7}
 800ed86:	b085      	sub	sp, #20
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ed94:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	683a      	ldr	r2, [r7, #0]
 800ed9a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ed9e:	2300      	movs	r3, #0
}
 800eda0:	4618      	mov	r0, r3
 800eda2:	3714      	adds	r7, #20
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr

0800edac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800edba:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800edbc:	2301      	movs	r3, #1
 800edbe:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800edca:	2303      	movs	r3, #3
 800edcc:	e01a      	b.n	800ee04 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d114      	bne.n	800ee02 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800edd8:	68bb      	ldr	r3, [r7, #8]
 800edda:	2201      	movs	r2, #1
 800eddc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ede0:	68bb      	ldr	r3, [r7, #8]
 800ede2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800edf0:	68bb      	ldr	r3, [r7, #8]
 800edf2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800edf6:	2181      	movs	r1, #129	; 0x81
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f000 fd9c 	bl	800f936 <USBD_LL_Transmit>

    ret = USBD_OK;
 800edfe:	2300      	movs	r3, #0
 800ee00:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ee02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3710      	adds	r7, #16
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b084      	sub	sp, #16
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d101      	bne.n	800ee2a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800ee26:	2303      	movs	r3, #3
 800ee28:	e016      	b.n	800ee58 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	7c1b      	ldrb	r3, [r3, #16]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d109      	bne.n	800ee46 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ee38:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ee3c:	2101      	movs	r1, #1
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 fd9a 	bl	800f978 <USBD_LL_PrepareReceive>
 800ee44:	e007      	b.n	800ee56 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ee4c:	2340      	movs	r3, #64	; 0x40
 800ee4e:	2101      	movs	r1, #1
 800ee50:	6878      	ldr	r0, [r7, #4]
 800ee52:	f000 fd91 	bl	800f978 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ee56:	2300      	movs	r3, #0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3710      	adds	r7, #16
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <cdcIfInit>:
static bool is_opened = false;
static bool is_rx_full = false;


bool cdcIfInit(void)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	af00      	add	r7, sp, #0
  is_opened = false;
 800ee64:	4b08      	ldr	r3, [pc, #32]	; (800ee88 <cdcIfInit+0x28>)
 800ee66:	2200      	movs	r2, #0
 800ee68:	701a      	strb	r2, [r3, #0]
  qbufferCreate(&q_rx, q_rx_buf, 1024);
 800ee6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ee6e:	4907      	ldr	r1, [pc, #28]	; (800ee8c <cdcIfInit+0x2c>)
 800ee70:	4807      	ldr	r0, [pc, #28]	; (800ee90 <cdcIfInit+0x30>)
 800ee72:	f7fd fe01 	bl	800ca78 <qbufferCreate>
  qbufferCreate(&q_tx, q_tx_buf, 1024);
 800ee76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ee7a:	4906      	ldr	r1, [pc, #24]	; (800ee94 <cdcIfInit+0x34>)
 800ee7c:	4806      	ldr	r0, [pc, #24]	; (800ee98 <cdcIfInit+0x38>)
 800ee7e:	f7fd fdfb 	bl	800ca78 <qbufferCreate>

  return true;
 800ee82:	2301      	movs	r3, #1
}
 800ee84:	4618      	mov	r0, r3
 800ee86:	bd80      	pop	{r7, pc}
 800ee88:	20002900 	.word	0x20002900
 800ee8c:	20002100 	.word	0x20002100
 800ee90:	200020d8 	.word	0x200020d8
 800ee94:	20002500 	.word	0x20002500
 800ee98:	200020ec 	.word	0x200020ec

0800ee9c <cdcIfAvailable>:

uint32_t cdcIfAvailable(void)
{
 800ee9c:	b580      	push	{r7, lr}
 800ee9e:	af00      	add	r7, sp, #0
  return qbufferAvailable(&q_rx);
 800eea0:	4802      	ldr	r0, [pc, #8]	; (800eeac <cdcIfAvailable+0x10>)
 800eea2:	f7fd feed 	bl	800cc80 <qbufferAvailable>
 800eea6:	4603      	mov	r3, r0
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	200020d8 	.word	0x200020d8

0800eeb0 <cdcIfRead>:

uint8_t cdcIfRead(void)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b082      	sub	sp, #8
 800eeb4:	af00      	add	r7, sp, #0
  uint8_t ret = 0;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	71fb      	strb	r3, [r7, #7]

  qbufferRead(&q_rx, &ret, 1);
 800eeba:	1dfb      	adds	r3, r7, #7
 800eebc:	2201      	movs	r2, #1
 800eebe:	4619      	mov	r1, r3
 800eec0:	4803      	ldr	r0, [pc, #12]	; (800eed0 <cdcIfRead+0x20>)
 800eec2:	f7fd fe72 	bl	800cbaa <qbufferRead>

  return ret;
 800eec6:	79fb      	ldrb	r3, [r7, #7]
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3708      	adds	r7, #8
 800eecc:	46bd      	mov	sp, r7
 800eece:	bd80      	pop	{r7, pc}
 800eed0:	200020d8 	.word	0x200020d8

0800eed4 <cdcIfWrite>:

uint32_t cdcIfWrite(uint8_t *p_data, uint32_t length)
{
 800eed4:	b590      	push	{r4, r7, lr}
 800eed6:	b087      	sub	sp, #28
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
  uint32_t tx_len;
  uint32_t buf_len;
  uint32_t sent_len;


  if (cdcIfIsConnected() != true) return 0;
 800eede:	f000 f84d 	bl	800ef7c <cdcIfIsConnected>
 800eee2:	4603      	mov	r3, r0
 800eee4:	f083 0301 	eor.w	r3, r3, #1
 800eee8:	b2db      	uxtb	r3, r3
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d001      	beq.n	800eef2 <cdcIfWrite+0x1e>
 800eeee:	2300      	movs	r3, #0
 800eef0:	e03e      	b.n	800ef70 <cdcIfWrite+0x9c>


  sent_len = 0;
 800eef2:	2300      	movs	r3, #0
 800eef4:	613b      	str	r3, [r7, #16]

  pre_time = millis();
 800eef6:	f7fc faee 	bl	800b4d6 <millis>
 800eefa:	60f8      	str	r0, [r7, #12]
  while(sent_len < length)
 800eefc:	e02f      	b.n	800ef5e <cdcIfWrite+0x8a>
  {
    buf_len = (q_tx.len - qbufferAvailable(&q_tx)) - 1;
 800eefe:	4b1e      	ldr	r3, [pc, #120]	; (800ef78 <cdcIfWrite+0xa4>)
 800ef00:	689c      	ldr	r4, [r3, #8]
 800ef02:	481d      	ldr	r0, [pc, #116]	; (800ef78 <cdcIfWrite+0xa4>)
 800ef04:	f7fd febc 	bl	800cc80 <qbufferAvailable>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	1ae3      	subs	r3, r4, r3
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	60bb      	str	r3, [r7, #8]
    tx_len = length;
 800ef10:	683b      	ldr	r3, [r7, #0]
 800ef12:	617b      	str	r3, [r7, #20]

    if (tx_len > buf_len)
 800ef14:	697a      	ldr	r2, [r7, #20]
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	429a      	cmp	r2, r3
 800ef1a:	d901      	bls.n	800ef20 <cdcIfWrite+0x4c>
    {
      tx_len = buf_len;
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	617b      	str	r3, [r7, #20]
    }

    if (tx_len > 0)
 800ef20:	697b      	ldr	r3, [r7, #20]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d00c      	beq.n	800ef40 <cdcIfWrite+0x6c>
    {
      qbufferWrite(&q_tx, p_data, tx_len);
 800ef26:	697a      	ldr	r2, [r7, #20]
 800ef28:	6879      	ldr	r1, [r7, #4]
 800ef2a:	4813      	ldr	r0, [pc, #76]	; (800ef78 <cdcIfWrite+0xa4>)
 800ef2c:	f7fd fde1 	bl	800caf2 <qbufferWrite>
      p_data += tx_len;
 800ef30:	687a      	ldr	r2, [r7, #4]
 800ef32:	697b      	ldr	r3, [r7, #20]
 800ef34:	4413      	add	r3, r2
 800ef36:	607b      	str	r3, [r7, #4]
      sent_len += tx_len;
 800ef38:	693a      	ldr	r2, [r7, #16]
 800ef3a:	697b      	ldr	r3, [r7, #20]
 800ef3c:	4413      	add	r3, r2
 800ef3e:	613b      	str	r3, [r7, #16]
    }

    if (cdcIfIsConnected() != true)
 800ef40:	f000 f81c 	bl	800ef7c <cdcIfIsConnected>
 800ef44:	4603      	mov	r3, r0
 800ef46:	f083 0301 	eor.w	r3, r3, #1
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d10b      	bne.n	800ef68 <cdcIfWrite+0x94>
    {
      break;
    }

    if (millis()-pre_time >= 100)
 800ef50:	f7fc fac1 	bl	800b4d6 <millis>
 800ef54:	4602      	mov	r2, r0
 800ef56:	68fb      	ldr	r3, [r7, #12]
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	2b63      	cmp	r3, #99	; 0x63
 800ef5c:	d806      	bhi.n	800ef6c <cdcIfWrite+0x98>
  while(sent_len < length)
 800ef5e:	693a      	ldr	r2, [r7, #16]
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	429a      	cmp	r2, r3
 800ef64:	d3cb      	bcc.n	800eefe <cdcIfWrite+0x2a>
 800ef66:	e002      	b.n	800ef6e <cdcIfWrite+0x9a>
      break;
 800ef68:	bf00      	nop
 800ef6a:	e000      	b.n	800ef6e <cdcIfWrite+0x9a>
    {
      break;
 800ef6c:	bf00      	nop
    }
  }

  return sent_len;
 800ef6e:	693b      	ldr	r3, [r7, #16]
}
 800ef70:	4618      	mov	r0, r3
 800ef72:	371c      	adds	r7, #28
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd90      	pop	{r4, r7, pc}
 800ef78:	200020ec 	.word	0x200020ec

0800ef7c <cdcIfIsConnected>:
{
  return LineCoding.bitrate;
}

bool cdcIfIsConnected(void)
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData == NULL)
 800ef80:	4b11      	ldr	r3, [pc, #68]	; (800efc8 <cdcIfIsConnected+0x4c>)
 800ef82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d101      	bne.n	800ef8e <cdcIfIsConnected+0x12>
  {
    return false;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	e016      	b.n	800efbc <cdcIfIsConnected+0x40>
  }
  if (is_opened == false)
 800ef8e:	4b0f      	ldr	r3, [pc, #60]	; (800efcc <cdcIfIsConnected+0x50>)
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	f083 0301 	eor.w	r3, r3, #1
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d001      	beq.n	800efa0 <cdcIfIsConnected+0x24>
  {
    return false;
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	e00d      	b.n	800efbc <cdcIfIsConnected+0x40>
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 800efa0:	4b09      	ldr	r3, [pc, #36]	; (800efc8 <cdcIfIsConnected+0x4c>)
 800efa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800efa6:	2b03      	cmp	r3, #3
 800efa8:	d001      	beq.n	800efae <cdcIfIsConnected+0x32>
  {
    return false;
 800efaa:	2300      	movs	r3, #0
 800efac:	e006      	b.n	800efbc <cdcIfIsConnected+0x40>
  }
  if (hUsbDeviceFS.dev_config == 0)
 800efae:	4b06      	ldr	r3, [pc, #24]	; (800efc8 <cdcIfIsConnected+0x4c>)
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d101      	bne.n	800efba <cdcIfIsConnected+0x3e>
  {
    return false;
 800efb6:	2300      	movs	r3, #0
 800efb8:	e000      	b.n	800efbc <cdcIfIsConnected+0x40>
  }

  return true;
 800efba:	2301      	movs	r3, #1
}
 800efbc:	4618      	mov	r0, r3
 800efbe:	46bd      	mov	sp, r7
 800efc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop
 800efc8:	200085f0 	.word	0x200085f0
 800efcc:	20002900 	.word	0x20002900

0800efd0 <CDC_SoF_ISR>:


uint8_t CDC_SoF_ISR(struct _USBD_HandleTypeDef *pdev)
{
 800efd0:	b590      	push	{r4, r7, lr}
 800efd2:	b087      	sub	sp, #28
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]

  //-- RX
  //
  if (is_rx_full)
 800efd8:	4b23      	ldr	r3, [pc, #140]	; (800f068 <CDC_SoF_ISR+0x98>)
 800efda:	781b      	ldrb	r3, [r3, #0]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d015      	beq.n	800f00c <CDC_SoF_ISR+0x3c>
  {
    uint32_t buf_len;

    buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 800efe0:	4b22      	ldr	r3, [pc, #136]	; (800f06c <CDC_SoF_ISR+0x9c>)
 800efe2:	689c      	ldr	r4, [r3, #8]
 800efe4:	4821      	ldr	r0, [pc, #132]	; (800f06c <CDC_SoF_ISR+0x9c>)
 800efe6:	f7fd fe4b 	bl	800cc80 <qbufferAvailable>
 800efea:	4603      	mov	r3, r0
 800efec:	1ae3      	subs	r3, r4, r3
 800efee:	3b01      	subs	r3, #1
 800eff0:	613b      	str	r3, [r7, #16]

    if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	2b3f      	cmp	r3, #63	; 0x3f
 800eff6:	d909      	bls.n	800f00c <CDC_SoF_ISR+0x3c>
    {
      USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 800eff8:	491d      	ldr	r1, [pc, #116]	; (800f070 <CDC_SoF_ISR+0xa0>)
 800effa:	481e      	ldr	r0, [pc, #120]	; (800f074 <CDC_SoF_ISR+0xa4>)
 800effc:	f7ff fec2 	bl	800ed84 <USBD_CDC_SetRxBuffer>
      USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f000:	481c      	ldr	r0, [pc, #112]	; (800f074 <CDC_SoF_ISR+0xa4>)
 800f002:	f7ff ff03 	bl	800ee0c <USBD_CDC_ReceivePacket>
      is_rx_full = false;
 800f006:	4b18      	ldr	r3, [pc, #96]	; (800f068 <CDC_SoF_ISR+0x98>)
 800f008:	2200      	movs	r2, #0
 800f00a:	701a      	strb	r2, [r3, #0]


  //-- TX
  //
  uint32_t tx_len;
  tx_len = qbufferAvailable(&q_tx);
 800f00c:	481a      	ldr	r0, [pc, #104]	; (800f078 <CDC_SoF_ISR+0xa8>)
 800f00e:	f7fd fe37 	bl	800cc80 <qbufferAvailable>
 800f012:	6178      	str	r0, [r7, #20]

  if (tx_len%CDC_DATA_FS_MAX_PACKET_SIZE == 0)
 800f014:	697b      	ldr	r3, [r7, #20]
 800f016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d105      	bne.n	800f02a <CDC_SoF_ISR+0x5a>
  {
    if (tx_len > 0)
 800f01e:	697b      	ldr	r3, [r7, #20]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d002      	beq.n	800f02a <CDC_SoF_ISR+0x5a>
    {
      tx_len = tx_len - 1;
 800f024:	697b      	ldr	r3, [r7, #20]
 800f026:	3b01      	subs	r3, #1
 800f028:	617b      	str	r3, [r7, #20]
    }
  }

  if (tx_len > 0)
 800f02a:	697b      	ldr	r3, [r7, #20]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d015      	beq.n	800f05c <CDC_SoF_ISR+0x8c>
  {
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f030:	4b10      	ldr	r3, [pc, #64]	; (800f074 <CDC_SoF_ISR+0xa4>)
 800f032:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f036:	60fb      	str	r3, [r7, #12]
    if (hcdc->TxState == 0)
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d10c      	bne.n	800f05c <CDC_SoF_ISR+0x8c>
    {
      qbufferRead(&q_tx, UserTxBufferFS, tx_len);
 800f042:	697a      	ldr	r2, [r7, #20]
 800f044:	490d      	ldr	r1, [pc, #52]	; (800f07c <CDC_SoF_ISR+0xac>)
 800f046:	480c      	ldr	r0, [pc, #48]	; (800f078 <CDC_SoF_ISR+0xa8>)
 800f048:	f7fd fdaf 	bl	800cbaa <qbufferRead>

      USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, tx_len);
 800f04c:	697a      	ldr	r2, [r7, #20]
 800f04e:	490b      	ldr	r1, [pc, #44]	; (800f07c <CDC_SoF_ISR+0xac>)
 800f050:	4808      	ldr	r0, [pc, #32]	; (800f074 <CDC_SoF_ISR+0xa4>)
 800f052:	f7ff fe7e 	bl	800ed52 <USBD_CDC_SetTxBuffer>
      USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f056:	4807      	ldr	r0, [pc, #28]	; (800f074 <CDC_SoF_ISR+0xa4>)
 800f058:	f7ff fea8 	bl	800edac <USBD_CDC_TransmitPacket>
    }
  }

  return 0;
 800f05c:	2300      	movs	r3, #0
}
 800f05e:	4618      	mov	r0, r3
 800f060:	371c      	adds	r7, #28
 800f062:	46bd      	mov	sp, r7
 800f064:	bd90      	pop	{r4, r7, pc}
 800f066:	bf00      	nop
 800f068:	20002901 	.word	0x20002901
 800f06c:	200020d8 	.word	0x200020d8
 800f070:	20001908 	.word	0x20001908
 800f074:	200085f0 	.word	0x200085f0
 800f078:	200020ec 	.word	0x200020ec
 800f07c:	20001cf0 	.word	0x20001cf0

0800f080 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	af00      	add	r7, sp, #0
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f084:	2200      	movs	r2, #0
 800f086:	4907      	ldr	r1, [pc, #28]	; (800f0a4 <CDC_Init_FS+0x24>)
 800f088:	4807      	ldr	r0, [pc, #28]	; (800f0a8 <CDC_Init_FS+0x28>)
 800f08a:	f7ff fe62 	bl	800ed52 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f08e:	4907      	ldr	r1, [pc, #28]	; (800f0ac <CDC_Init_FS+0x2c>)
 800f090:	4805      	ldr	r0, [pc, #20]	; (800f0a8 <CDC_Init_FS+0x28>)
 800f092:	f7ff fe77 	bl	800ed84 <USBD_CDC_SetRxBuffer>

  is_opened = false;
 800f096:	4b06      	ldr	r3, [pc, #24]	; (800f0b0 <CDC_Init_FS+0x30>)
 800f098:	2200      	movs	r2, #0
 800f09a:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800f09c:	2300      	movs	r3, #0
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	bd80      	pop	{r7, pc}
 800f0a2:	bf00      	nop
 800f0a4:	20001cf0 	.word	0x20001cf0
 800f0a8:	200085f0 	.word	0x200085f0
 800f0ac:	20001908 	.word	0x20001908
 800f0b0:	20002900 	.word	0x20002900

0800f0b4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f0b4:	b480      	push	{r7}
 800f0b6:	af00      	add	r7, sp, #0

  is_opened = false;
 800f0b8:	4b04      	ldr	r3, [pc, #16]	; (800f0cc <CDC_DeInit_FS+0x18>)
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	701a      	strb	r2, [r3, #0]

  return (USBD_OK);
 800f0be:	2300      	movs	r3, #0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c8:	4770      	bx	lr
 800f0ca:	bf00      	nop
 800f0cc:	20002900 	.word	0x20002900

0800f0d0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f0d0:	b480      	push	{r7}
 800f0d2:	b085      	sub	sp, #20
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	6039      	str	r1, [r7, #0]
 800f0da:	71fb      	strb	r3, [r7, #7]
 800f0dc:	4613      	mov	r3, r2
 800f0de:	80bb      	strh	r3, [r7, #4]
  USBD_SetupReqTypedef *req = (USBD_SetupReqTypedef *)pbuf;
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	60fb      	str	r3, [r7, #12]


  switch(cmd)
 800f0e4:	79fb      	ldrb	r3, [r7, #7]
 800f0e6:	2b23      	cmp	r3, #35	; 0x23
 800f0e8:	f200 80af 	bhi.w	800f24a <CDC_Control_FS+0x17a>
 800f0ec:	a201      	add	r2, pc, #4	; (adr r2, 800f0f4 <CDC_Control_FS+0x24>)
 800f0ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0f2:	bf00      	nop
 800f0f4:	0800f24b 	.word	0x0800f24b
 800f0f8:	0800f24b 	.word	0x0800f24b
 800f0fc:	0800f24b 	.word	0x0800f24b
 800f100:	0800f24b 	.word	0x0800f24b
 800f104:	0800f24b 	.word	0x0800f24b
 800f108:	0800f24b 	.word	0x0800f24b
 800f10c:	0800f24b 	.word	0x0800f24b
 800f110:	0800f24b 	.word	0x0800f24b
 800f114:	0800f24b 	.word	0x0800f24b
 800f118:	0800f24b 	.word	0x0800f24b
 800f11c:	0800f24b 	.word	0x0800f24b
 800f120:	0800f24b 	.word	0x0800f24b
 800f124:	0800f24b 	.word	0x0800f24b
 800f128:	0800f24b 	.word	0x0800f24b
 800f12c:	0800f24b 	.word	0x0800f24b
 800f130:	0800f24b 	.word	0x0800f24b
 800f134:	0800f24b 	.word	0x0800f24b
 800f138:	0800f24b 	.word	0x0800f24b
 800f13c:	0800f24b 	.word	0x0800f24b
 800f140:	0800f24b 	.word	0x0800f24b
 800f144:	0800f24b 	.word	0x0800f24b
 800f148:	0800f24b 	.word	0x0800f24b
 800f14c:	0800f24b 	.word	0x0800f24b
 800f150:	0800f24b 	.word	0x0800f24b
 800f154:	0800f24b 	.word	0x0800f24b
 800f158:	0800f24b 	.word	0x0800f24b
 800f15c:	0800f24b 	.word	0x0800f24b
 800f160:	0800f24b 	.word	0x0800f24b
 800f164:	0800f24b 	.word	0x0800f24b
 800f168:	0800f24b 	.word	0x0800f24b
 800f16c:	0800f24b 	.word	0x0800f24b
 800f170:	0800f24b 	.word	0x0800f24b
 800f174:	0800f185 	.word	0x0800f185
 800f178:	0800f1df 	.word	0x0800f1df
 800f17c:	0800f233 	.word	0x0800f233
 800f180:	0800f24b 	.word	0x0800f24b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	461a      	mov	r2, r3
 800f18a:	4b34      	ldr	r3, [pc, #208]	; (800f25c <CDC_Control_FS+0x18c>)
 800f18c:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 800f18e:	4b33      	ldr	r3, [pc, #204]	; (800f25c <CDC_Control_FS+0x18c>)
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	683a      	ldr	r2, [r7, #0]
 800f194:	3201      	adds	r2, #1
 800f196:	7812      	ldrb	r2, [r2, #0]
 800f198:	0212      	lsls	r2, r2, #8
 800f19a:	4313      	orrs	r3, r2
 800f19c:	4a2f      	ldr	r2, [pc, #188]	; (800f25c <CDC_Control_FS+0x18c>)
 800f19e:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 800f1a0:	4b2e      	ldr	r3, [pc, #184]	; (800f25c <CDC_Control_FS+0x18c>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	683a      	ldr	r2, [r7, #0]
 800f1a6:	3202      	adds	r2, #2
 800f1a8:	7812      	ldrb	r2, [r2, #0]
 800f1aa:	0412      	lsls	r2, r2, #16
 800f1ac:	4313      	orrs	r3, r2
 800f1ae:	4a2b      	ldr	r2, [pc, #172]	; (800f25c <CDC_Control_FS+0x18c>)
 800f1b0:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 800f1b2:	4b2a      	ldr	r3, [pc, #168]	; (800f25c <CDC_Control_FS+0x18c>)
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	683a      	ldr	r2, [r7, #0]
 800f1b8:	3203      	adds	r2, #3
 800f1ba:	7812      	ldrb	r2, [r2, #0]
 800f1bc:	0612      	lsls	r2, r2, #24
 800f1be:	4313      	orrs	r3, r2
 800f1c0:	4a26      	ldr	r2, [pc, #152]	; (800f25c <CDC_Control_FS+0x18c>)
 800f1c2:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 800f1c4:	683b      	ldr	r3, [r7, #0]
 800f1c6:	791a      	ldrb	r2, [r3, #4]
 800f1c8:	4b24      	ldr	r3, [pc, #144]	; (800f25c <CDC_Control_FS+0x18c>)
 800f1ca:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	795a      	ldrb	r2, [r3, #5]
 800f1d0:	4b22      	ldr	r3, [pc, #136]	; (800f25c <CDC_Control_FS+0x18c>)
 800f1d2:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	799a      	ldrb	r2, [r3, #6]
 800f1d8:	4b20      	ldr	r3, [pc, #128]	; (800f25c <CDC_Control_FS+0x18c>)
 800f1da:	719a      	strb	r2, [r3, #6]
    break;
 800f1dc:	e036      	b.n	800f24c <CDC_Control_FS+0x17c>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800f1de:	4b1f      	ldr	r3, [pc, #124]	; (800f25c <CDC_Control_FS+0x18c>)
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	b2da      	uxtb	r2, r3
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 800f1e8:	4b1c      	ldr	r3, [pc, #112]	; (800f25c <CDC_Control_FS+0x18c>)
 800f1ea:	681b      	ldr	r3, [r3, #0]
 800f1ec:	0a1a      	lsrs	r2, r3, #8
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	b2d2      	uxtb	r2, r2
 800f1f4:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 800f1f6:	4b19      	ldr	r3, [pc, #100]	; (800f25c <CDC_Control_FS+0x18c>)
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	0c1a      	lsrs	r2, r3, #16
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	3302      	adds	r3, #2
 800f200:	b2d2      	uxtb	r2, r2
 800f202:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 800f204:	4b15      	ldr	r3, [pc, #84]	; (800f25c <CDC_Control_FS+0x18c>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	0e1a      	lsrs	r2, r3, #24
 800f20a:	683b      	ldr	r3, [r7, #0]
 800f20c:	3303      	adds	r3, #3
 800f20e:	b2d2      	uxtb	r2, r2
 800f210:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	3304      	adds	r3, #4
 800f216:	4a11      	ldr	r2, [pc, #68]	; (800f25c <CDC_Control_FS+0x18c>)
 800f218:	7912      	ldrb	r2, [r2, #4]
 800f21a:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	3305      	adds	r3, #5
 800f220:	4a0e      	ldr	r2, [pc, #56]	; (800f25c <CDC_Control_FS+0x18c>)
 800f222:	7952      	ldrb	r2, [r2, #5]
 800f224:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800f226:	683b      	ldr	r3, [r7, #0]
 800f228:	3306      	adds	r3, #6
 800f22a:	4a0c      	ldr	r2, [pc, #48]	; (800f25c <CDC_Control_FS+0x18c>)
 800f22c:	7992      	ldrb	r2, [r2, #6]
 800f22e:	701a      	strb	r2, [r3, #0]
    break;
 800f230:	e00c      	b.n	800f24c <CDC_Control_FS+0x17c>

    case CDC_SET_CONTROL_LINE_STATE:
      is_opened = req->wValue & 0x01; // 0 bit:DTR, 1 bit:RTS
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	885b      	ldrh	r3, [r3, #2]
 800f236:	f003 0301 	and.w	r3, r3, #1
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	bf14      	ite	ne
 800f23e:	2301      	movne	r3, #1
 800f240:	2300      	moveq	r3, #0
 800f242:	b2da      	uxtb	r2, r3
 800f244:	4b06      	ldr	r3, [pc, #24]	; (800f260 <CDC_Control_FS+0x190>)
 800f246:	701a      	strb	r2, [r3, #0]
    break;
 800f248:	e000      	b.n	800f24c <CDC_Control_FS+0x17c>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f24a:	bf00      	nop
  }

  return (USBD_OK);
 800f24c:	2300      	movs	r3, #0
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3714      	adds	r7, #20
 800f252:	46bd      	mov	sp, r7
 800f254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f258:	4770      	bx	lr
 800f25a:	bf00      	nop
 800f25c:	20000160 	.word	0x20000160
 800f260:	20002900 	.word	0x20002900

0800f264 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f264:	b590      	push	{r4, r7, lr}
 800f266:	b085      	sub	sp, #20
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
  qbufferWrite(&q_rx, Buf, *Len);
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	681b      	ldr	r3, [r3, #0]
 800f272:	461a      	mov	r2, r3
 800f274:	6879      	ldr	r1, [r7, #4]
 800f276:	480f      	ldr	r0, [pc, #60]	; (800f2b4 <CDC_Receive_FS+0x50>)
 800f278:	f7fd fc3b 	bl	800caf2 <qbufferWrite>


  uint32_t buf_len;

  buf_len = (q_rx.len - qbufferAvailable(&q_rx)) - 1;
 800f27c:	4b0d      	ldr	r3, [pc, #52]	; (800f2b4 <CDC_Receive_FS+0x50>)
 800f27e:	689c      	ldr	r4, [r3, #8]
 800f280:	480c      	ldr	r0, [pc, #48]	; (800f2b4 <CDC_Receive_FS+0x50>)
 800f282:	f7fd fcfd 	bl	800cc80 <qbufferAvailable>
 800f286:	4603      	mov	r3, r0
 800f288:	1ae3      	subs	r3, r4, r3
 800f28a:	3b01      	subs	r3, #1
 800f28c:	60fb      	str	r3, [r7, #12]

  if (buf_len >= CDC_DATA_FS_MAX_PACKET_SIZE)
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	2b3f      	cmp	r3, #63	; 0x3f
 800f292:	d907      	bls.n	800f2a4 <CDC_Receive_FS+0x40>
  {
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f294:	6879      	ldr	r1, [r7, #4]
 800f296:	4808      	ldr	r0, [pc, #32]	; (800f2b8 <CDC_Receive_FS+0x54>)
 800f298:	f7ff fd74 	bl	800ed84 <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f29c:	4806      	ldr	r0, [pc, #24]	; (800f2b8 <CDC_Receive_FS+0x54>)
 800f29e:	f7ff fdb5 	bl	800ee0c <USBD_CDC_ReceivePacket>
 800f2a2:	e002      	b.n	800f2aa <CDC_Receive_FS+0x46>
  }
  else
  {
    is_rx_full = true;
 800f2a4:	4b05      	ldr	r3, [pc, #20]	; (800f2bc <CDC_Receive_FS+0x58>)
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	701a      	strb	r2, [r3, #0]
  }

  return (USBD_OK);
 800f2aa:	2300      	movs	r3, #0
}
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	3714      	adds	r7, #20
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd90      	pop	{r4, r7, pc}
 800f2b4:	200020d8 	.word	0x200020d8
 800f2b8:	200085f0 	.word	0x200085f0
 800f2bc:	20002901 	.word	0x20002901

0800f2c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f2c0:	b480      	push	{r7}
 800f2c2:	b087      	sub	sp, #28
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	4613      	mov	r3, r2
 800f2cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	75fb      	strb	r3, [r7, #23]
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  return result;
 800f2d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	371c      	adds	r7, #28
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e0:	4770      	bx	lr
	...

0800f2e4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f2e4:	b480      	push	{r7}
 800f2e6:	b083      	sub	sp, #12
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	6039      	str	r1, [r7, #0]
 800f2ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	2212      	movs	r2, #18
 800f2f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800f2f6:	4b03      	ldr	r3, [pc, #12]	; (800f304 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800f2f8:	4618      	mov	r0, r3
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr
 800f304:	20000188 	.word	0x20000188

0800f308 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f308:	b480      	push	{r7}
 800f30a:	b083      	sub	sp, #12
 800f30c:	af00      	add	r7, sp, #0
 800f30e:	4603      	mov	r3, r0
 800f310:	6039      	str	r1, [r7, #0]
 800f312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	2204      	movs	r2, #4
 800f318:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f31a:	4b03      	ldr	r3, [pc, #12]	; (800f328 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr
 800f328:	2000019c 	.word	0x2000019c

0800f32c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b082      	sub	sp, #8
 800f330:	af00      	add	r7, sp, #0
 800f332:	4603      	mov	r3, r0
 800f334:	6039      	str	r1, [r7, #0]
 800f336:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f338:	79fb      	ldrb	r3, [r7, #7]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d105      	bne.n	800f34a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f33e:	683a      	ldr	r2, [r7, #0]
 800f340:	4907      	ldr	r1, [pc, #28]	; (800f360 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f342:	4808      	ldr	r0, [pc, #32]	; (800f364 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f344:	f7ff f9a2 	bl	800e68c <USBD_GetString>
 800f348:	e004      	b.n	800f354 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800f34a:	683a      	ldr	r2, [r7, #0]
 800f34c:	4904      	ldr	r1, [pc, #16]	; (800f360 <USBD_CDC_ProductStrDescriptor+0x34>)
 800f34e:	4805      	ldr	r0, [pc, #20]	; (800f364 <USBD_CDC_ProductStrDescriptor+0x38>)
 800f350:	f7ff f99c 	bl	800e68c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f354:	4b02      	ldr	r3, [pc, #8]	; (800f360 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800f356:	4618      	mov	r0, r3
 800f358:	3708      	adds	r7, #8
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}
 800f35e:	bf00      	nop
 800f360:	20002904 	.word	0x20002904
 800f364:	0801645c 	.word	0x0801645c

0800f368 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	4603      	mov	r3, r0
 800f370:	6039      	str	r1, [r7, #0]
 800f372:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f374:	683a      	ldr	r2, [r7, #0]
 800f376:	4904      	ldr	r1, [pc, #16]	; (800f388 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800f378:	4804      	ldr	r0, [pc, #16]	; (800f38c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800f37a:	f7ff f987 	bl	800e68c <USBD_GetString>
  return USBD_StrDesc;
 800f37e:	4b02      	ldr	r3, [pc, #8]	; (800f388 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800f380:	4618      	mov	r0, r3
 800f382:	3708      	adds	r7, #8
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}
 800f388:	20002904 	.word	0x20002904
 800f38c:	08016474 	.word	0x08016474

0800f390 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	4603      	mov	r3, r0
 800f398:	6039      	str	r1, [r7, #0]
 800f39a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	221a      	movs	r2, #26
 800f3a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f3a2:	f000 f843 	bl	800f42c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800f3a6:	4b02      	ldr	r3, [pc, #8]	; (800f3b0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}
 800f3b0:	200001a0 	.word	0x200001a0

0800f3b4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	6039      	str	r1, [r7, #0]
 800f3be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f3c0:	79fb      	ldrb	r3, [r7, #7]
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	d105      	bne.n	800f3d2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f3c6:	683a      	ldr	r2, [r7, #0]
 800f3c8:	4907      	ldr	r1, [pc, #28]	; (800f3e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f3ca:	4808      	ldr	r0, [pc, #32]	; (800f3ec <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f3cc:	f7ff f95e 	bl	800e68c <USBD_GetString>
 800f3d0:	e004      	b.n	800f3dc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800f3d2:	683a      	ldr	r2, [r7, #0]
 800f3d4:	4904      	ldr	r1, [pc, #16]	; (800f3e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800f3d6:	4805      	ldr	r0, [pc, #20]	; (800f3ec <USBD_CDC_ConfigStrDescriptor+0x38>)
 800f3d8:	f7ff f958 	bl	800e68c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f3dc:	4b02      	ldr	r3, [pc, #8]	; (800f3e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3708      	adds	r7, #8
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}
 800f3e6:	bf00      	nop
 800f3e8:	20002904 	.word	0x20002904
 800f3ec:	08016488 	.word	0x08016488

0800f3f0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	6039      	str	r1, [r7, #0]
 800f3fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f3fc:	79fb      	ldrb	r3, [r7, #7]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d105      	bne.n	800f40e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f402:	683a      	ldr	r2, [r7, #0]
 800f404:	4907      	ldr	r1, [pc, #28]	; (800f424 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f406:	4808      	ldr	r0, [pc, #32]	; (800f428 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f408:	f7ff f940 	bl	800e68c <USBD_GetString>
 800f40c:	e004      	b.n	800f418 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800f40e:	683a      	ldr	r2, [r7, #0]
 800f410:	4904      	ldr	r1, [pc, #16]	; (800f424 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800f412:	4805      	ldr	r0, [pc, #20]	; (800f428 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800f414:	f7ff f93a 	bl	800e68c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f418:	4b02      	ldr	r3, [pc, #8]	; (800f424 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3708      	adds	r7, #8
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}
 800f422:	bf00      	nop
 800f424:	20002904 	.word	0x20002904
 800f428:	08016494 	.word	0x08016494

0800f42c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f432:	4b0f      	ldr	r3, [pc, #60]	; (800f470 <Get_SerialNum+0x44>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f438:	4b0e      	ldr	r3, [pc, #56]	; (800f474 <Get_SerialNum+0x48>)
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f43e:	4b0e      	ldr	r3, [pc, #56]	; (800f478 <Get_SerialNum+0x4c>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f444:	68fa      	ldr	r2, [r7, #12]
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	4413      	add	r3, r2
 800f44a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d009      	beq.n	800f466 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f452:	2208      	movs	r2, #8
 800f454:	4909      	ldr	r1, [pc, #36]	; (800f47c <Get_SerialNum+0x50>)
 800f456:	68f8      	ldr	r0, [r7, #12]
 800f458:	f000 f814 	bl	800f484 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f45c:	2204      	movs	r2, #4
 800f45e:	4908      	ldr	r1, [pc, #32]	; (800f480 <Get_SerialNum+0x54>)
 800f460:	68b8      	ldr	r0, [r7, #8]
 800f462:	f000 f80f 	bl	800f484 <IntToUnicode>
  }
}
 800f466:	bf00      	nop
 800f468:	3710      	adds	r7, #16
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop
 800f470:	1fff7590 	.word	0x1fff7590
 800f474:	1fff7594 	.word	0x1fff7594
 800f478:	1fff7598 	.word	0x1fff7598
 800f47c:	200001a2 	.word	0x200001a2
 800f480:	200001b2 	.word	0x200001b2

0800f484 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f484:	b480      	push	{r7}
 800f486:	b087      	sub	sp, #28
 800f488:	af00      	add	r7, sp, #0
 800f48a:	60f8      	str	r0, [r7, #12]
 800f48c:	60b9      	str	r1, [r7, #8]
 800f48e:	4613      	mov	r3, r2
 800f490:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f492:	2300      	movs	r3, #0
 800f494:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f496:	2300      	movs	r3, #0
 800f498:	75fb      	strb	r3, [r7, #23]
 800f49a:	e027      	b.n	800f4ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	0f1b      	lsrs	r3, r3, #28
 800f4a0:	2b09      	cmp	r3, #9
 800f4a2:	d80b      	bhi.n	800f4bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	0f1b      	lsrs	r3, r3, #28
 800f4a8:	b2da      	uxtb	r2, r3
 800f4aa:	7dfb      	ldrb	r3, [r7, #23]
 800f4ac:	005b      	lsls	r3, r3, #1
 800f4ae:	4619      	mov	r1, r3
 800f4b0:	68bb      	ldr	r3, [r7, #8]
 800f4b2:	440b      	add	r3, r1
 800f4b4:	3230      	adds	r2, #48	; 0x30
 800f4b6:	b2d2      	uxtb	r2, r2
 800f4b8:	701a      	strb	r2, [r3, #0]
 800f4ba:	e00a      	b.n	800f4d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f4bc:	68fb      	ldr	r3, [r7, #12]
 800f4be:	0f1b      	lsrs	r3, r3, #28
 800f4c0:	b2da      	uxtb	r2, r3
 800f4c2:	7dfb      	ldrb	r3, [r7, #23]
 800f4c4:	005b      	lsls	r3, r3, #1
 800f4c6:	4619      	mov	r1, r3
 800f4c8:	68bb      	ldr	r3, [r7, #8]
 800f4ca:	440b      	add	r3, r1
 800f4cc:	3237      	adds	r2, #55	; 0x37
 800f4ce:	b2d2      	uxtb	r2, r2
 800f4d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	011b      	lsls	r3, r3, #4
 800f4d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f4d8:	7dfb      	ldrb	r3, [r7, #23]
 800f4da:	005b      	lsls	r3, r3, #1
 800f4dc:	3301      	adds	r3, #1
 800f4de:	68ba      	ldr	r2, [r7, #8]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f4e6:	7dfb      	ldrb	r3, [r7, #23]
 800f4e8:	3301      	adds	r3, #1
 800f4ea:	75fb      	strb	r3, [r7, #23]
 800f4ec:	7dfa      	ldrb	r2, [r7, #23]
 800f4ee:	79fb      	ldrb	r3, [r7, #7]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d3d3      	bcc.n	800f49c <IntToUnicode+0x18>
  }
}
 800f4f4:	bf00      	nop
 800f4f6:	bf00      	nop
 800f4f8:	371c      	adds	r7, #28
 800f4fa:	46bd      	mov	sp, r7
 800f4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f500:	4770      	bx	lr
	...

0800f504 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800f504:	b580      	push	{r7, lr}
 800f506:	b084      	sub	sp, #16
 800f508:	af00      	add	r7, sp, #0
 800f50a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	4a0d      	ldr	r2, [pc, #52]	; (800f548 <HAL_PCD_MspInit+0x44>)
 800f512:	4293      	cmp	r3, r2
 800f514:	d113      	bne.n	800f53e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800f516:	4b0d      	ldr	r3, [pc, #52]	; (800f54c <HAL_PCD_MspInit+0x48>)
 800f518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f51a:	4a0c      	ldr	r2, [pc, #48]	; (800f54c <HAL_PCD_MspInit+0x48>)
 800f51c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f520:	6593      	str	r3, [r2, #88]	; 0x58
 800f522:	4b0a      	ldr	r3, [pc, #40]	; (800f54c <HAL_PCD_MspInit+0x48>)
 800f524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f52a:	60fb      	str	r3, [r7, #12]
 800f52c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
 800f52e:	2200      	movs	r2, #0
 800f530:	2105      	movs	r1, #5
 800f532:	2014      	movs	r0, #20
 800f534:	f7f1 fed9 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800f538:	2014      	movs	r0, #20
 800f53a:	f7f1 fef0 	bl	800131e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800f53e:	bf00      	nop
 800f540:	3710      	adds	r7, #16
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
 800f546:	bf00      	nop
 800f548:	40005c00 	.word	0x40005c00
 800f54c:	40021000 	.word	0x40021000

0800f550 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b082      	sub	sp, #8
 800f554:	af00      	add	r7, sp, #0
 800f556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800f564:	4619      	mov	r1, r3
 800f566:	4610      	mov	r0, r2
 800f568:	f7fe f914 	bl	800d794 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800f56c:	bf00      	nop
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}

0800f574 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f574:	b580      	push	{r7, lr}
 800f576:	b082      	sub	sp, #8
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	460b      	mov	r3, r1
 800f57e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800f586:	78fa      	ldrb	r2, [r7, #3]
 800f588:	6879      	ldr	r1, [r7, #4]
 800f58a:	4613      	mov	r3, r2
 800f58c:	009b      	lsls	r3, r3, #2
 800f58e:	4413      	add	r3, r2
 800f590:	00db      	lsls	r3, r3, #3
 800f592:	440b      	add	r3, r1
 800f594:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f598:	681a      	ldr	r2, [r3, #0]
 800f59a:	78fb      	ldrb	r3, [r7, #3]
 800f59c:	4619      	mov	r1, r3
 800f59e:	f7fe f94e 	bl	800d83e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800f5a2:	bf00      	nop
 800f5a4:	3708      	adds	r7, #8
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}

0800f5aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5aa:	b580      	push	{r7, lr}
 800f5ac:	b082      	sub	sp, #8
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
 800f5b2:	460b      	mov	r3, r1
 800f5b4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800f5bc:	78fa      	ldrb	r2, [r7, #3]
 800f5be:	6879      	ldr	r1, [r7, #4]
 800f5c0:	4613      	mov	r3, r2
 800f5c2:	009b      	lsls	r3, r3, #2
 800f5c4:	4413      	add	r3, r2
 800f5c6:	00db      	lsls	r3, r3, #3
 800f5c8:	440b      	add	r3, r1
 800f5ca:	3324      	adds	r3, #36	; 0x24
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	78fb      	ldrb	r3, [r7, #3]
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	f7fe f997 	bl	800d904 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800f5d6:	bf00      	nop
 800f5d8:	3708      	adds	r7, #8
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}

0800f5de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5de:	b580      	push	{r7, lr}
 800f5e0:	b082      	sub	sp, #8
 800f5e2:	af00      	add	r7, sp, #0
 800f5e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f7fe fa9b 	bl	800db28 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800f5f2:	bf00      	nop
 800f5f4:	3708      	adds	r7, #8
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}

0800f5fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f5fa:	b580      	push	{r7, lr}
 800f5fc:	b084      	sub	sp, #16
 800f5fe:	af00      	add	r7, sp, #0
 800f600:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f602:	2301      	movs	r3, #1
 800f604:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	795b      	ldrb	r3, [r3, #5]
 800f60a:	2b02      	cmp	r3, #2
 800f60c:	d001      	beq.n	800f612 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f60e:	f003 fca7 	bl	8012f60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f618:	7bfa      	ldrb	r2, [r7, #15]
 800f61a:	4611      	mov	r1, r2
 800f61c:	4618      	mov	r0, r3
 800f61e:	f7fe fa48 	bl	800dab2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f628:	4618      	mov	r0, r3
 800f62a:	f7fe fa01 	bl	800da30 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800f62e:	bf00      	nop
 800f630:	3710      	adds	r7, #16
 800f632:	46bd      	mov	sp, r7
 800f634:	bd80      	pop	{r7, pc}
	...

0800f638 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b082      	sub	sp, #8
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f646:	4618      	mov	r0, r3
 800f648:	f7fe fa43 	bl	800dad2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	7a5b      	ldrb	r3, [r3, #9]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d005      	beq.n	800f660 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f654:	4b04      	ldr	r3, [pc, #16]	; (800f668 <HAL_PCD_SuspendCallback+0x30>)
 800f656:	691b      	ldr	r3, [r3, #16]
 800f658:	4a03      	ldr	r2, [pc, #12]	; (800f668 <HAL_PCD_SuspendCallback+0x30>)
 800f65a:	f043 0306 	orr.w	r3, r3, #6
 800f65e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800f660:	bf00      	nop
 800f662:	3708      	adds	r7, #8
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	e000ed00 	.word	0xe000ed00

0800f66c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b082      	sub	sp, #8
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	7a5b      	ldrb	r3, [r3, #9]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d007      	beq.n	800f68c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f67c:	4b08      	ldr	r3, [pc, #32]	; (800f6a0 <HAL_PCD_ResumeCallback+0x34>)
 800f67e:	691b      	ldr	r3, [r3, #16]
 800f680:	4a07      	ldr	r2, [pc, #28]	; (800f6a0 <HAL_PCD_ResumeCallback+0x34>)
 800f682:	f023 0306 	bic.w	r3, r3, #6
 800f686:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800f688:	f000 f9f8 	bl	800fa7c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800f692:	4618      	mov	r0, r3
 800f694:	f7fe fa32 	bl	800dafc <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800f698:	bf00      	nop
 800f69a:	3708      	adds	r7, #8
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}
 800f6a0:	e000ed00 	.word	0xe000ed00

0800f6a4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	b082      	sub	sp, #8
 800f6a8:	af00      	add	r7, sp, #0
 800f6aa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800f6ac:	4a2b      	ldr	r2, [pc, #172]	; (800f75c <USBD_LL_Init+0xb8>)
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	4a29      	ldr	r2, [pc, #164]	; (800f75c <USBD_LL_Init+0xb8>)
 800f6b8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800f6bc:	4b27      	ldr	r3, [pc, #156]	; (800f75c <USBD_LL_Init+0xb8>)
 800f6be:	4a28      	ldr	r2, [pc, #160]	; (800f760 <USBD_LL_Init+0xbc>)
 800f6c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800f6c2:	4b26      	ldr	r3, [pc, #152]	; (800f75c <USBD_LL_Init+0xb8>)
 800f6c4:	2208      	movs	r2, #8
 800f6c6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800f6c8:	4b24      	ldr	r3, [pc, #144]	; (800f75c <USBD_LL_Init+0xb8>)
 800f6ca:	2202      	movs	r2, #2
 800f6cc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f6ce:	4b23      	ldr	r3, [pc, #140]	; (800f75c <USBD_LL_Init+0xb8>)
 800f6d0:	2202      	movs	r2, #2
 800f6d2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = ENABLE;
 800f6d4:	4b21      	ldr	r3, [pc, #132]	; (800f75c <USBD_LL_Init+0xb8>)
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800f6da:	4b20      	ldr	r3, [pc, #128]	; (800f75c <USBD_LL_Init+0xb8>)
 800f6dc:	2200      	movs	r2, #0
 800f6de:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800f6e0:	4b1e      	ldr	r3, [pc, #120]	; (800f75c <USBD_LL_Init+0xb8>)
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800f6e6:	4b1d      	ldr	r3, [pc, #116]	; (800f75c <USBD_LL_Init+0xb8>)
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800f6ec:	481b      	ldr	r0, [pc, #108]	; (800f75c <USBD_LL_Init+0xb8>)
 800f6ee:	f7f5 f91a 	bl	8004926 <HAL_PCD_Init>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d001      	beq.n	800f6fc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800f6f8:	f003 fc32 	bl	8012f60 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f702:	2318      	movs	r3, #24
 800f704:	2200      	movs	r2, #0
 800f706:	2100      	movs	r1, #0
 800f708:	f7f6 fdd4 	bl	80062b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f712:	2358      	movs	r3, #88	; 0x58
 800f714:	2200      	movs	r2, #0
 800f716:	2180      	movs	r1, #128	; 0x80
 800f718:	f7f6 fdcc 	bl	80062b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f722:	23c0      	movs	r3, #192	; 0xc0
 800f724:	2200      	movs	r2, #0
 800f726:	2181      	movs	r1, #129	; 0x81
 800f728:	f7f6 fdc4 	bl	80062b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f732:	f44f 7388 	mov.w	r3, #272	; 0x110
 800f736:	2200      	movs	r2, #0
 800f738:	2101      	movs	r1, #1
 800f73a:	f7f6 fdbb 	bl	80062b4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f744:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f748:	2200      	movs	r2, #0
 800f74a:	2182      	movs	r1, #130	; 0x82
 800f74c:	f7f6 fdb2 	bl	80062b4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800f750:	2300      	movs	r3, #0
}
 800f752:	4618      	mov	r0, r3
 800f754:	3708      	adds	r7, #8
 800f756:	46bd      	mov	sp, r7
 800f758:	bd80      	pop	{r7, pc}
 800f75a:	bf00      	nop
 800f75c:	20002b04 	.word	0x20002b04
 800f760:	40005c00 	.word	0x40005c00

0800f764 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f764:	b580      	push	{r7, lr}
 800f766:	b084      	sub	sp, #16
 800f768:	af00      	add	r7, sp, #0
 800f76a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f76c:	2300      	movs	r3, #0
 800f76e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f770:	2300      	movs	r3, #0
 800f772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f77a:	4618      	mov	r0, r3
 800f77c:	f7f5 f9a1 	bl	8004ac2 <HAL_PCD_Start>
 800f780:	4603      	mov	r3, r0
 800f782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f784:	7bfb      	ldrb	r3, [r7, #15]
 800f786:	4618      	mov	r0, r3
 800f788:	f000 f97e 	bl	800fa88 <USBD_Get_USB_Status>
 800f78c:	4603      	mov	r3, r0
 800f78e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f790:	7bbb      	ldrb	r3, [r7, #14]
}
 800f792:	4618      	mov	r0, r3
 800f794:	3710      	adds	r7, #16
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}

0800f79a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f79a:	b580      	push	{r7, lr}
 800f79c:	b084      	sub	sp, #16
 800f79e:	af00      	add	r7, sp, #0
 800f7a0:	6078      	str	r0, [r7, #4]
 800f7a2:	4608      	mov	r0, r1
 800f7a4:	4611      	mov	r1, r2
 800f7a6:	461a      	mov	r2, r3
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	70fb      	strb	r3, [r7, #3]
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	70bb      	strb	r3, [r7, #2]
 800f7b0:	4613      	mov	r3, r2
 800f7b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f7c2:	78bb      	ldrb	r3, [r7, #2]
 800f7c4:	883a      	ldrh	r2, [r7, #0]
 800f7c6:	78f9      	ldrb	r1, [r7, #3]
 800f7c8:	f7f5 fae8 	bl	8004d9c <HAL_PCD_EP_Open>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7d0:	7bfb      	ldrb	r3, [r7, #15]
 800f7d2:	4618      	mov	r0, r3
 800f7d4:	f000 f958 	bl	800fa88 <USBD_Get_USB_Status>
 800f7d8:	4603      	mov	r3, r0
 800f7da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f7dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3710      	adds	r7, #16
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}

0800f7e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7e6:	b580      	push	{r7, lr}
 800f7e8:	b084      	sub	sp, #16
 800f7ea:	af00      	add	r7, sp, #0
 800f7ec:	6078      	str	r0, [r7, #4]
 800f7ee:	460b      	mov	r3, r1
 800f7f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f7f2:	2300      	movs	r3, #0
 800f7f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f800:	78fa      	ldrb	r2, [r7, #3]
 800f802:	4611      	mov	r1, r2
 800f804:	4618      	mov	r0, r3
 800f806:	f7f5 fb26 	bl	8004e56 <HAL_PCD_EP_Close>
 800f80a:	4603      	mov	r3, r0
 800f80c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f80e:	7bfb      	ldrb	r3, [r7, #15]
 800f810:	4618      	mov	r0, r3
 800f812:	f000 f939 	bl	800fa88 <USBD_Get_USB_Status>
 800f816:	4603      	mov	r3, r0
 800f818:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f81a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	3710      	adds	r7, #16
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}

0800f824 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b084      	sub	sp, #16
 800f828:	af00      	add	r7, sp, #0
 800f82a:	6078      	str	r0, [r7, #4]
 800f82c:	460b      	mov	r3, r1
 800f82e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f830:	2300      	movs	r3, #0
 800f832:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f834:	2300      	movs	r3, #0
 800f836:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f83e:	78fa      	ldrb	r2, [r7, #3]
 800f840:	4611      	mov	r1, r2
 800f842:	4618      	mov	r0, r3
 800f844:	f7f5 fbcf 	bl	8004fe6 <HAL_PCD_EP_SetStall>
 800f848:	4603      	mov	r3, r0
 800f84a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f84c:	7bfb      	ldrb	r3, [r7, #15]
 800f84e:	4618      	mov	r0, r3
 800f850:	f000 f91a 	bl	800fa88 <USBD_Get_USB_Status>
 800f854:	4603      	mov	r3, r0
 800f856:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f858:	7bbb      	ldrb	r3, [r7, #14]
}
 800f85a:	4618      	mov	r0, r3
 800f85c:	3710      	adds	r7, #16
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}

0800f862 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f862:	b580      	push	{r7, lr}
 800f864:	b084      	sub	sp, #16
 800f866:	af00      	add	r7, sp, #0
 800f868:	6078      	str	r0, [r7, #4]
 800f86a:	460b      	mov	r3, r1
 800f86c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f86e:	2300      	movs	r3, #0
 800f870:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f872:	2300      	movs	r3, #0
 800f874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f87c:	78fa      	ldrb	r2, [r7, #3]
 800f87e:	4611      	mov	r1, r2
 800f880:	4618      	mov	r0, r3
 800f882:	f7f5 fc02 	bl	800508a <HAL_PCD_EP_ClrStall>
 800f886:	4603      	mov	r3, r0
 800f888:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f88a:	7bfb      	ldrb	r3, [r7, #15]
 800f88c:	4618      	mov	r0, r3
 800f88e:	f000 f8fb 	bl	800fa88 <USBD_Get_USB_Status>
 800f892:	4603      	mov	r3, r0
 800f894:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f896:	7bbb      	ldrb	r3, [r7, #14]
}
 800f898:	4618      	mov	r0, r3
 800f89a:	3710      	adds	r7, #16
 800f89c:	46bd      	mov	sp, r7
 800f89e:	bd80      	pop	{r7, pc}

0800f8a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f8a0:	b480      	push	{r7}
 800f8a2:	b085      	sub	sp, #20
 800f8a4:	af00      	add	r7, sp, #0
 800f8a6:	6078      	str	r0, [r7, #4]
 800f8a8:	460b      	mov	r3, r1
 800f8aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f8b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f8b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	da0b      	bge.n	800f8d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f8bc:	78fb      	ldrb	r3, [r7, #3]
 800f8be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f8c2:	68f9      	ldr	r1, [r7, #12]
 800f8c4:	4613      	mov	r3, r2
 800f8c6:	009b      	lsls	r3, r3, #2
 800f8c8:	4413      	add	r3, r2
 800f8ca:	00db      	lsls	r3, r3, #3
 800f8cc:	440b      	add	r3, r1
 800f8ce:	3312      	adds	r3, #18
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	e00b      	b.n	800f8ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f8d4:	78fb      	ldrb	r3, [r7, #3]
 800f8d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f8da:	68f9      	ldr	r1, [r7, #12]
 800f8dc:	4613      	mov	r3, r2
 800f8de:	009b      	lsls	r3, r3, #2
 800f8e0:	4413      	add	r3, r2
 800f8e2:	00db      	lsls	r3, r3, #3
 800f8e4:	440b      	add	r3, r1
 800f8e6:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800f8ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3714      	adds	r7, #20
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	460b      	mov	r3, r1
 800f902:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f904:	2300      	movs	r3, #0
 800f906:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f908:	2300      	movs	r3, #0
 800f90a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f912:	78fa      	ldrb	r2, [r7, #3]
 800f914:	4611      	mov	r1, r2
 800f916:	4618      	mov	r0, r3
 800f918:	f7f5 fa1c 	bl	8004d54 <HAL_PCD_SetAddress>
 800f91c:	4603      	mov	r3, r0
 800f91e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f920:	7bfb      	ldrb	r3, [r7, #15]
 800f922:	4618      	mov	r0, r3
 800f924:	f000 f8b0 	bl	800fa88 <USBD_Get_USB_Status>
 800f928:	4603      	mov	r3, r0
 800f92a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f92c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3710      	adds	r7, #16
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f936:	b580      	push	{r7, lr}
 800f938:	b086      	sub	sp, #24
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	60f8      	str	r0, [r7, #12]
 800f93e:	607a      	str	r2, [r7, #4]
 800f940:	603b      	str	r3, [r7, #0]
 800f942:	460b      	mov	r3, r1
 800f944:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f946:	2300      	movs	r3, #0
 800f948:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f94a:	2300      	movs	r3, #0
 800f94c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f954:	7af9      	ldrb	r1, [r7, #11]
 800f956:	683b      	ldr	r3, [r7, #0]
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	f7f5 fb0d 	bl	8004f78 <HAL_PCD_EP_Transmit>
 800f95e:	4603      	mov	r3, r0
 800f960:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f962:	7dfb      	ldrb	r3, [r7, #23]
 800f964:	4618      	mov	r0, r3
 800f966:	f000 f88f 	bl	800fa88 <USBD_Get_USB_Status>
 800f96a:	4603      	mov	r3, r0
 800f96c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f96e:	7dbb      	ldrb	r3, [r7, #22]
}
 800f970:	4618      	mov	r0, r3
 800f972:	3718      	adds	r7, #24
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}

0800f978 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f978:	b580      	push	{r7, lr}
 800f97a:	b086      	sub	sp, #24
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	60f8      	str	r0, [r7, #12]
 800f980:	607a      	str	r2, [r7, #4]
 800f982:	603b      	str	r3, [r7, #0]
 800f984:	460b      	mov	r3, r1
 800f986:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f988:	2300      	movs	r3, #0
 800f98a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f98c:	2300      	movs	r3, #0
 800f98e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800f996:	7af9      	ldrb	r1, [r7, #11]
 800f998:	683b      	ldr	r3, [r7, #0]
 800f99a:	687a      	ldr	r2, [r7, #4]
 800f99c:	f7f5 faa3 	bl	8004ee6 <HAL_PCD_EP_Receive>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9a4:	7dfb      	ldrb	r3, [r7, #23]
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f000 f86e 	bl	800fa88 <USBD_Get_USB_Status>
 800f9ac:	4603      	mov	r3, r0
 800f9ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f9b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3718      	adds	r7, #24
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b082      	sub	sp, #8
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	6078      	str	r0, [r7, #4]
 800f9c2:	460b      	mov	r3, r1
 800f9c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800f9cc:	78fa      	ldrb	r2, [r7, #3]
 800f9ce:	4611      	mov	r1, r2
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7f5 fab9 	bl	8004f48 <HAL_PCD_EP_GetRxCount>
 800f9d6:	4603      	mov	r3, r0
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3708      	adds	r7, #8
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b082      	sub	sp, #8
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	460b      	mov	r3, r1
 800f9ea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800f9ec:	78fb      	ldrb	r3, [r7, #3]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d002      	beq.n	800f9f8 <HAL_PCDEx_LPM_Callback+0x18>
 800f9f2:	2b01      	cmp	r3, #1
 800f9f4:	d013      	beq.n	800fa1e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800f9f6:	e023      	b.n	800fa40 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	7a5b      	ldrb	r3, [r3, #9]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d007      	beq.n	800fa10 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800fa00:	f000 f83c 	bl	800fa7c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa04:	4b10      	ldr	r3, [pc, #64]	; (800fa48 <HAL_PCDEx_LPM_Callback+0x68>)
 800fa06:	691b      	ldr	r3, [r3, #16]
 800fa08:	4a0f      	ldr	r2, [pc, #60]	; (800fa48 <HAL_PCDEx_LPM_Callback+0x68>)
 800fa0a:	f023 0306 	bic.w	r3, r3, #6
 800fa0e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7fe f870 	bl	800dafc <USBD_LL_Resume>
    break;
 800fa1c:	e010      	b.n	800fa40 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800fa24:	4618      	mov	r0, r3
 800fa26:	f7fe f854 	bl	800dad2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	7a5b      	ldrb	r3, [r3, #9]
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d005      	beq.n	800fa3e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fa32:	4b05      	ldr	r3, [pc, #20]	; (800fa48 <HAL_PCDEx_LPM_Callback+0x68>)
 800fa34:	691b      	ldr	r3, [r3, #16]
 800fa36:	4a04      	ldr	r2, [pc, #16]	; (800fa48 <HAL_PCDEx_LPM_Callback+0x68>)
 800fa38:	f043 0306 	orr.w	r3, r3, #6
 800fa3c:	6113      	str	r3, [r2, #16]
    break;
 800fa3e:	bf00      	nop
}
 800fa40:	bf00      	nop
 800fa42:	3708      	adds	r7, #8
 800fa44:	46bd      	mov	sp, r7
 800fa46:	bd80      	pop	{r7, pc}
 800fa48:	e000ed00 	.word	0xe000ed00

0800fa4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b083      	sub	sp, #12
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fa54:	4b03      	ldr	r3, [pc, #12]	; (800fa64 <USBD_static_malloc+0x18>)
}
 800fa56:	4618      	mov	r0, r3
 800fa58:	370c      	adds	r7, #12
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop
 800fa64:	20002de0 	.word	0x20002de0

0800fa68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fa68:	b480      	push	{r7}
 800fa6a:	b083      	sub	sp, #12
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	6078      	str	r0, [r7, #4]

}
 800fa70:	bf00      	nop
 800fa72:	370c      	adds	r7, #12
 800fa74:	46bd      	mov	sp, r7
 800fa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa7a:	4770      	bx	lr

0800fa7c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800fa7c:	b580      	push	{r7, lr}
 800fa7e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800fa80:	f003 fa14 	bl	8012eac <SystemClock_Config>
}
 800fa84:	bf00      	nop
 800fa86:	bd80      	pop	{r7, pc}

0800fa88 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fa88:	b480      	push	{r7}
 800fa8a:	b085      	sub	sp, #20
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	4603      	mov	r3, r0
 800fa90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa92:	2300      	movs	r3, #0
 800fa94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fa96:	79fb      	ldrb	r3, [r7, #7]
 800fa98:	2b03      	cmp	r3, #3
 800fa9a:	d817      	bhi.n	800facc <USBD_Get_USB_Status+0x44>
 800fa9c:	a201      	add	r2, pc, #4	; (adr r2, 800faa4 <USBD_Get_USB_Status+0x1c>)
 800fa9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800faa2:	bf00      	nop
 800faa4:	0800fab5 	.word	0x0800fab5
 800faa8:	0800fabb 	.word	0x0800fabb
 800faac:	0800fac1 	.word	0x0800fac1
 800fab0:	0800fac7 	.word	0x0800fac7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fab4:	2300      	movs	r3, #0
 800fab6:	73fb      	strb	r3, [r7, #15]
    break;
 800fab8:	e00b      	b.n	800fad2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800faba:	2303      	movs	r3, #3
 800fabc:	73fb      	strb	r3, [r7, #15]
    break;
 800fabe:	e008      	b.n	800fad2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fac0:	2301      	movs	r3, #1
 800fac2:	73fb      	strb	r3, [r7, #15]
    break;
 800fac4:	e005      	b.n	800fad2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fac6:	2303      	movs	r3, #3
 800fac8:	73fb      	strb	r3, [r7, #15]
    break;
 800faca:	e002      	b.n	800fad2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800facc:	2303      	movs	r3, #3
 800face:	73fb      	strb	r3, [r7, #15]
    break;
 800fad0:	bf00      	nop
  }
  return usb_status;
 800fad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fad4:	4618      	mov	r0, r3
 800fad6:	3714      	adds	r7, #20
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr

0800fae0 <canInit>:
#endif

static void canErrUpdate(uint8_t ch);

bool canInit(void)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b082      	sub	sp, #8
 800fae4:	af00      	add	r7, sp, #0
  bool ret = true;
 800fae6:	2301      	movs	r3, #1
 800fae8:	71bb      	strb	r3, [r7, #6]

  uint8_t i;


  for(i = 0; i < CAN_MAX_CH; i++)
 800faea:	2300      	movs	r3, #0
 800faec:	71fb      	strb	r3, [r7, #7]
 800faee:	e070      	b.n	800fbd2 <canInit+0xf2>
  {
    can_tbl[i].is_init  = true;
 800faf0:	79fb      	ldrb	r3, [r7, #7]
 800faf2:	4a3e      	ldr	r2, [pc, #248]	; (800fbec <canInit+0x10c>)
 800faf4:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800faf8:	fb01 f303 	mul.w	r3, r1, r3
 800fafc:	4413      	add	r3, r2
 800fafe:	2201      	movs	r2, #1
 800fb00:	701a      	strb	r2, [r3, #0]
    can_tbl[i].is_open  = false;
 800fb02:	79fb      	ldrb	r3, [r7, #7]
 800fb04:	4a39      	ldr	r2, [pc, #228]	; (800fbec <canInit+0x10c>)
 800fb06:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fb0a:	fb01 f303 	mul.w	r3, r1, r3
 800fb0e:	4413      	add	r3, r2
 800fb10:	3301      	adds	r3, #1
 800fb12:	2200      	movs	r2, #0
 800fb14:	701a      	strb	r2, [r3, #0]
    can_tbl[i].err_code = CAN_ERR_NONE;
 800fb16:	79fb      	ldrb	r3, [r7, #7]
 800fb18:	4a34      	ldr	r2, [pc, #208]	; (800fbec <canInit+0x10c>)
 800fb1a:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fb1e:	fb01 f303 	mul.w	r3, r1, r3
 800fb22:	4413      	add	r3, r2
 800fb24:	3304      	adds	r3, #4
 800fb26:	2200      	movs	r2, #0
 800fb28:	601a      	str	r2, [r3, #0]
    can_tbl[i].state    = 0;
 800fb2a:	79fb      	ldrb	r3, [r7, #7]
 800fb2c:	4a2f      	ldr	r2, [pc, #188]	; (800fbec <canInit+0x10c>)
 800fb2e:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fb32:	fb01 f303 	mul.w	r3, r1, r3
 800fb36:	4413      	add	r3, r2
 800fb38:	3308      	adds	r3, #8
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	701a      	strb	r2, [r3, #0]
    can_tbl[i].recovery_cnt = 0;
 800fb3e:	79fb      	ldrb	r3, [r7, #7]
 800fb40:	4a2a      	ldr	r2, [pc, #168]	; (800fbec <canInit+0x10c>)
 800fb42:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fb46:	fb01 f303 	mul.w	r3, r1, r3
 800fb4a:	4413      	add	r3, r2
 800fb4c:	330c      	adds	r3, #12
 800fb4e:	2200      	movs	r2, #0
 800fb50:	601a      	str	r2, [r3, #0]

    can_tbl[i].q_rx_full_cnt = 0;
 800fb52:	79fb      	ldrb	r3, [r7, #7]
 800fb54:	4a25      	ldr	r2, [pc, #148]	; (800fbec <canInit+0x10c>)
 800fb56:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fb5a:	fb01 f303 	mul.w	r3, r1, r3
 800fb5e:	4413      	add	r3, r2
 800fb60:	3310      	adds	r3, #16
 800fb62:	2200      	movs	r2, #0
 800fb64:	601a      	str	r2, [r3, #0]
    can_tbl[i].q_tx_full_cnt = 0;
 800fb66:	79fb      	ldrb	r3, [r7, #7]
 800fb68:	4a20      	ldr	r2, [pc, #128]	; (800fbec <canInit+0x10c>)
 800fb6a:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fb6e:	fb01 f303 	mul.w	r3, r1, r3
 800fb72:	4413      	add	r3, r2
 800fb74:	3314      	adds	r3, #20
 800fb76:	2200      	movs	r2, #0
 800fb78:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_full_cnt = 0;
 800fb7a:	79fb      	ldrb	r3, [r7, #7]
 800fb7c:	4a1b      	ldr	r2, [pc, #108]	; (800fbec <canInit+0x10c>)
 800fb7e:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fb82:	fb01 f303 	mul.w	r3, r1, r3
 800fb86:	4413      	add	r3, r2
 800fb88:	3318      	adds	r3, #24
 800fb8a:	2200      	movs	r2, #0
 800fb8c:	601a      	str	r2, [r3, #0]
    can_tbl[i].fifo_lost_cnt = 0;
 800fb8e:	79fb      	ldrb	r3, [r7, #7]
 800fb90:	4a16      	ldr	r2, [pc, #88]	; (800fbec <canInit+0x10c>)
 800fb92:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fb96:	fb01 f303 	mul.w	r3, r1, r3
 800fb9a:	4413      	add	r3, r2
 800fb9c:	331c      	adds	r3, #28
 800fb9e:	2200      	movs	r2, #0
 800fba0:	601a      	str	r2, [r3, #0]

    qbufferCreateBySize(&can_tbl[i].q_msg, (uint8_t *)&can_tbl[i].can_msg[0], sizeof(can_msg_t), CAN_MSG_RX_BUF_MAX);
 800fba2:	79fb      	ldrb	r3, [r7, #7]
 800fba4:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800fba8:	fb02 f303 	mul.w	r3, r2, r3
 800fbac:	3390      	adds	r3, #144	; 0x90
 800fbae:	4a0f      	ldr	r2, [pc, #60]	; (800fbec <canInit+0x10c>)
 800fbb0:	4413      	add	r3, r2
 800fbb2:	1d18      	adds	r0, r3, #4
 800fbb4:	79fb      	ldrb	r3, [r7, #7]
 800fbb6:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800fbba:	fb02 f303 	mul.w	r3, r2, r3
 800fbbe:	33a8      	adds	r3, #168	; 0xa8
 800fbc0:	4a0a      	ldr	r2, [pc, #40]	; (800fbec <canInit+0x10c>)
 800fbc2:	1899      	adds	r1, r3, r2
 800fbc4:	2310      	movs	r3, #16
 800fbc6:	224c      	movs	r2, #76	; 0x4c
 800fbc8:	f7fc ff74 	bl	800cab4 <qbufferCreateBySize>
  for(i = 0; i < CAN_MAX_CH; i++)
 800fbcc:	79fb      	ldrb	r3, [r7, #7]
 800fbce:	3301      	adds	r3, #1
 800fbd0:	71fb      	strb	r3, [r7, #7]
 800fbd2:	79fb      	ldrb	r3, [r7, #7]
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d98b      	bls.n	800faf0 <canInit+0x10>
  }

#ifdef _USE_HW_CLI
  cliAdd("can", cliCan);
 800fbd8:	4905      	ldr	r1, [pc, #20]	; (800fbf0 <canInit+0x110>)
 800fbda:	4806      	ldr	r0, [pc, #24]	; (800fbf4 <canInit+0x114>)
 800fbdc:	f7fc fc80 	bl	800c4e0 <cliAdd>
#endif
  return ret;
 800fbe0:	79bb      	ldrb	r3, [r7, #6]
}
 800fbe2:	4618      	mov	r0, r3
 800fbe4:	3708      	adds	r7, #8
 800fbe6:	46bd      	mov	sp, r7
 800fbe8:	bd80      	pop	{r7, pc}
 800fbea:	bf00      	nop
 800fbec:	20003000 	.word	0x20003000
 800fbf0:	0801071d 	.word	0x0801071d
 800fbf4:	080164a4 	.word	0x080164a4

0800fbf8 <canOpen>:

bool canOpen(uint8_t ch, can_mode_t mode, can_frame_t frame, can_baud_t baud, can_baud_t baud_data)
{
 800fbf8:	b590      	push	{r4, r7, lr}
 800fbfa:	b089      	sub	sp, #36	; 0x24
 800fbfc:	af02      	add	r7, sp, #8
 800fbfe:	4604      	mov	r4, r0
 800fc00:	4608      	mov	r0, r1
 800fc02:	4611      	mov	r1, r2
 800fc04:	461a      	mov	r2, r3
 800fc06:	4623      	mov	r3, r4
 800fc08:	71fb      	strb	r3, [r7, #7]
 800fc0a:	4603      	mov	r3, r0
 800fc0c:	71bb      	strb	r3, [r7, #6]
 800fc0e:	460b      	mov	r3, r1
 800fc10:	717b      	strb	r3, [r7, #5]
 800fc12:	4613      	mov	r3, r2
 800fc14:	713b      	strb	r3, [r7, #4]
  bool ret = true;
 800fc16:	2301      	movs	r3, #1
 800fc18:	75fb      	strb	r3, [r7, #23]
  FDCAN_HandleTypeDef  *p_can;
  uint32_t tdc_offset;


  if (ch >= CAN_MAX_CH) return false;
 800fc1a:	79fb      	ldrb	r3, [r7, #7]
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d901      	bls.n	800fc24 <canOpen+0x2c>
 800fc20:	2300      	movs	r3, #0
 800fc22:	e121      	b.n	800fe68 <canOpen+0x270>


  p_can = &can_tbl[ch].hfdcan;
 800fc24:	79fb      	ldrb	r3, [r7, #7]
 800fc26:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800fc2a:	fb02 f303 	mul.w	r3, r2, r3
 800fc2e:	3328      	adds	r3, #40	; 0x28
 800fc30:	4a8f      	ldr	r2, [pc, #572]	; (800fe70 <canOpen+0x278>)
 800fc32:	4413      	add	r3, r2
 800fc34:	3304      	adds	r3, #4
 800fc36:	613b      	str	r3, [r7, #16]

  switch(ch)
 800fc38:	79fb      	ldrb	r3, [r7, #7]
 800fc3a:	2b01      	cmp	r3, #1
 800fc3c:	f040 80a8 	bne.w	800fd90 <canOpen+0x198>
  {
    case _DEF_CAN2:
      p_can->Instance                   = FDCAN2;
 800fc40:	693b      	ldr	r3, [r7, #16]
 800fc42:	4a8c      	ldr	r2, [pc, #560]	; (800fe74 <canOpen+0x27c>)
 800fc44:	601a      	str	r2, [r3, #0]
      p_can->Init.ClockDivider          = FDCAN_CLOCK_DIV1;
 800fc46:	693b      	ldr	r3, [r7, #16]
 800fc48:	2200      	movs	r2, #0
 800fc4a:	605a      	str	r2, [r3, #4]
      p_can->Init.FrameFormat           = frame_tbl[frame];
 800fc4c:	797b      	ldrb	r3, [r7, #5]
 800fc4e:	4a8a      	ldr	r2, [pc, #552]	; (800fe78 <canOpen+0x280>)
 800fc50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	609a      	str	r2, [r3, #8]
      p_can->Init.Mode                  = mode_tbl[mode];
 800fc58:	79bb      	ldrb	r3, [r7, #6]
 800fc5a:	4a88      	ldr	r2, [pc, #544]	; (800fe7c <canOpen+0x284>)
 800fc5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	60da      	str	r2, [r3, #12]
      p_can->Init.AutoRetransmission    = ENABLE;
 800fc64:	693b      	ldr	r3, [r7, #16]
 800fc66:	2201      	movs	r2, #1
 800fc68:	741a      	strb	r2, [r3, #16]
      p_can->Init.TransmitPause         = ENABLE;
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	2201      	movs	r2, #1
 800fc6e:	745a      	strb	r2, [r3, #17]
      p_can->Init.ProtocolException     = ENABLE;
 800fc70:	693b      	ldr	r3, [r7, #16]
 800fc72:	2201      	movs	r2, #1
 800fc74:	749a      	strb	r2, [r3, #18]
      p_can->Init.NominalPrescaler      = p_baud_normal[baud].prescaler;
 800fc76:	4b82      	ldr	r3, [pc, #520]	; (800fe80 <canOpen+0x288>)
 800fc78:	681a      	ldr	r2, [r3, #0]
 800fc7a:	793b      	ldrb	r3, [r7, #4]
 800fc7c:	011b      	lsls	r3, r3, #4
 800fc7e:	4413      	add	r3, r2
 800fc80:	681a      	ldr	r2, [r3, #0]
 800fc82:	693b      	ldr	r3, [r7, #16]
 800fc84:	615a      	str	r2, [r3, #20]
      p_can->Init.NominalSyncJumpWidth  = p_baud_normal[baud].sjw;
 800fc86:	4b7e      	ldr	r3, [pc, #504]	; (800fe80 <canOpen+0x288>)
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	793b      	ldrb	r3, [r7, #4]
 800fc8c:	011b      	lsls	r3, r3, #4
 800fc8e:	4413      	add	r3, r2
 800fc90:	685a      	ldr	r2, [r3, #4]
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	619a      	str	r2, [r3, #24]
      p_can->Init.NominalTimeSeg1       = p_baud_normal[baud].tseg1;
 800fc96:	4b7a      	ldr	r3, [pc, #488]	; (800fe80 <canOpen+0x288>)
 800fc98:	681a      	ldr	r2, [r3, #0]
 800fc9a:	793b      	ldrb	r3, [r7, #4]
 800fc9c:	011b      	lsls	r3, r3, #4
 800fc9e:	4413      	add	r3, r2
 800fca0:	689a      	ldr	r2, [r3, #8]
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	61da      	str	r2, [r3, #28]
      p_can->Init.NominalTimeSeg2       = p_baud_normal[baud].tseg2;
 800fca6:	4b76      	ldr	r3, [pc, #472]	; (800fe80 <canOpen+0x288>)
 800fca8:	681a      	ldr	r2, [r3, #0]
 800fcaa:	793b      	ldrb	r3, [r7, #4]
 800fcac:	011b      	lsls	r3, r3, #4
 800fcae:	4413      	add	r3, r2
 800fcb0:	68da      	ldr	r2, [r3, #12]
 800fcb2:	693b      	ldr	r3, [r7, #16]
 800fcb4:	621a      	str	r2, [r3, #32]
      p_can->Init.DataPrescaler         = p_baud_data[baud_data].prescaler;
 800fcb6:	4b73      	ldr	r3, [pc, #460]	; (800fe84 <canOpen+0x28c>)
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fcbe:	011b      	lsls	r3, r3, #4
 800fcc0:	4413      	add	r3, r2
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	625a      	str	r2, [r3, #36]	; 0x24
      p_can->Init.DataSyncJumpWidth     = p_baud_data[baud_data].sjw;
 800fcc8:	4b6e      	ldr	r3, [pc, #440]	; (800fe84 <canOpen+0x28c>)
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fcd0:	011b      	lsls	r3, r3, #4
 800fcd2:	4413      	add	r3, r2
 800fcd4:	685a      	ldr	r2, [r3, #4]
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	629a      	str	r2, [r3, #40]	; 0x28
      p_can->Init.DataTimeSeg1          = p_baud_data[baud_data].tseg1;
 800fcda:	4b6a      	ldr	r3, [pc, #424]	; (800fe84 <canOpen+0x28c>)
 800fcdc:	681a      	ldr	r2, [r3, #0]
 800fcde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fce2:	011b      	lsls	r3, r3, #4
 800fce4:	4413      	add	r3, r2
 800fce6:	689a      	ldr	r2, [r3, #8]
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	62da      	str	r2, [r3, #44]	; 0x2c
      p_can->Init.DataTimeSeg2          = p_baud_data[baud_data].tseg2;
 800fcec:	4b65      	ldr	r3, [pc, #404]	; (800fe84 <canOpen+0x28c>)
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fcf4:	011b      	lsls	r3, r3, #4
 800fcf6:	4413      	add	r3, r2
 800fcf8:	68da      	ldr	r2, [r3, #12]
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	631a      	str	r2, [r3, #48]	; 0x30
      p_can->Init.StdFiltersNbr         = 28;
 800fcfe:	693b      	ldr	r3, [r7, #16]
 800fd00:	221c      	movs	r2, #28
 800fd02:	635a      	str	r2, [r3, #52]	; 0x34
      p_can->Init.ExtFiltersNbr         = 8;
 800fd04:	693b      	ldr	r3, [r7, #16]
 800fd06:	2208      	movs	r2, #8
 800fd08:	639a      	str	r2, [r3, #56]	; 0x38
      p_can->Init.TxFifoQueueMode       = FDCAN_TX_FIFO_OPERATION;
 800fd0a:	693b      	ldr	r3, [r7, #16]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	63da      	str	r2, [r3, #60]	; 0x3c

      can_tbl[ch].mode                  = mode;
 800fd10:	79fb      	ldrb	r3, [r7, #7]
 800fd12:	4a57      	ldr	r2, [pc, #348]	; (800fe70 <canOpen+0x278>)
 800fd14:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fd18:	fb01 f303 	mul.w	r3, r1, r3
 800fd1c:	4413      	add	r3, r2
 800fd1e:	3328      	adds	r3, #40	; 0x28
 800fd20:	79ba      	ldrb	r2, [r7, #6]
 800fd22:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].frame                 = frame;
 800fd24:	79fb      	ldrb	r3, [r7, #7]
 800fd26:	4a52      	ldr	r2, [pc, #328]	; (800fe70 <canOpen+0x278>)
 800fd28:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fd2c:	fb01 f303 	mul.w	r3, r1, r3
 800fd30:	4413      	add	r3, r2
 800fd32:	3329      	adds	r3, #41	; 0x29
 800fd34:	797a      	ldrb	r2, [r7, #5]
 800fd36:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud                  = baud;
 800fd38:	79fb      	ldrb	r3, [r7, #7]
 800fd3a:	4a4d      	ldr	r2, [pc, #308]	; (800fe70 <canOpen+0x278>)
 800fd3c:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fd40:	fb01 f303 	mul.w	r3, r1, r3
 800fd44:	4413      	add	r3, r2
 800fd46:	332a      	adds	r3, #42	; 0x2a
 800fd48:	793a      	ldrb	r2, [r7, #4]
 800fd4a:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].baud_data             = baud_data;
 800fd4c:	79fb      	ldrb	r3, [r7, #7]
 800fd4e:	4a48      	ldr	r2, [pc, #288]	; (800fe70 <canOpen+0x278>)
 800fd50:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fd54:	fb01 f303 	mul.w	r3, r1, r3
 800fd58:	4413      	add	r3, r2
 800fd5a:	332b      	adds	r3, #43	; 0x2b
 800fd5c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fd60:	701a      	strb	r2, [r3, #0]
      can_tbl[ch].fifo_idx              = FDCAN_RX_FIFO0;
 800fd62:	79fb      	ldrb	r3, [r7, #7]
 800fd64:	4a42      	ldr	r2, [pc, #264]	; (800fe70 <canOpen+0x278>)
 800fd66:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fd6a:	fb01 f303 	mul.w	r3, r1, r3
 800fd6e:	4413      	add	r3, r2
 800fd70:	3320      	adds	r3, #32
 800fd72:	2240      	movs	r2, #64	; 0x40
 800fd74:	601a      	str	r2, [r3, #0]
      can_tbl[ch].enable_int            = FDCAN_IT_LIST_RX_FIFO0 |
 800fd76:	79fb      	ldrb	r3, [r7, #7]
 800fd78:	4a3d      	ldr	r2, [pc, #244]	; (800fe70 <canOpen+0x278>)
 800fd7a:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fd7e:	fb01 f303 	mul.w	r3, r1, r3
 800fd82:	4413      	add	r3, r2
 800fd84:	3324      	adds	r3, #36	; 0x24
 800fd86:	4a40      	ldr	r2, [pc, #256]	; (800fe88 <canOpen+0x290>)
 800fd88:	601a      	str	r2, [r3, #0]
                                          FDCAN_IT_BUS_OFF |
                                          FDCAN_IT_ERROR_WARNING |
                                          FDCAN_IT_ERROR_PASSIVE;
      ret = true;
 800fd8a:	2301      	movs	r3, #1
 800fd8c:	75fb      	strb	r3, [r7, #23]
      break;
 800fd8e:	bf00      	nop
  }

  if (ret != true)
 800fd90:	7dfb      	ldrb	r3, [r7, #23]
 800fd92:	f083 0301 	eor.w	r3, r3, #1
 800fd96:	b2db      	uxtb	r3, r3
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d001      	beq.n	800fda0 <canOpen+0x1a8>
  {
    return false;
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	e063      	b.n	800fe68 <canOpen+0x270>
  }

  if (HAL_FDCAN_Init(p_can) != HAL_OK)
 800fda0:	6938      	ldr	r0, [r7, #16]
 800fda2:	f7f1 fe1d 	bl	80019e0 <HAL_FDCAN_Init>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d001      	beq.n	800fdb0 <canOpen+0x1b8>
  {
    return false;
 800fdac:	2300      	movs	r3, #0
 800fdae:	e05b      	b.n	800fe68 <canOpen+0x270>
  }



  canConfigFilter(ch, 0, CAN_STD, 0x0000, 0x0000);
 800fdb0:	79f8      	ldrb	r0, [r7, #7]
 800fdb2:	2300      	movs	r3, #0
 800fdb4:	9300      	str	r3, [sp, #0]
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	2200      	movs	r2, #0
 800fdba:	2100      	movs	r1, #0
 800fdbc:	f000 f866 	bl	800fe8c <canConfigFilter>
  canConfigFilter(ch, 0, CAN_EXT, 0x0000, 0x0000);
 800fdc0:	79f8      	ldrb	r0, [r7, #7]
 800fdc2:	2300      	movs	r3, #0
 800fdc4:	9300      	str	r3, [sp, #0]
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	2201      	movs	r2, #1
 800fdca:	2100      	movs	r1, #0
 800fdcc:	f000 f85e 	bl	800fe8c <canConfigFilter>


  if (HAL_FDCAN_ConfigGlobalFilter(p_can, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	9300      	str	r3, [sp, #0]
 800fdd4:	2300      	movs	r3, #0
 800fdd6:	2202      	movs	r2, #2
 800fdd8:	2102      	movs	r1, #2
 800fdda:	6938      	ldr	r0, [r7, #16]
 800fddc:	f7f1 ffb4 	bl	8001d48 <HAL_FDCAN_ConfigGlobalFilter>
 800fde0:	4603      	mov	r3, r0
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d001      	beq.n	800fdea <canOpen+0x1f2>
  {
    return false;
 800fde6:	2300      	movs	r3, #0
 800fde8:	e03e      	b.n	800fe68 <canOpen+0x270>
  }
  if (HAL_FDCAN_ActivateNotification(p_can, can_tbl[ch].enable_int, 0) != HAL_OK)
 800fdea:	79fb      	ldrb	r3, [r7, #7]
 800fdec:	4a20      	ldr	r2, [pc, #128]	; (800fe70 <canOpen+0x278>)
 800fdee:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fdf2:	fb01 f303 	mul.w	r3, r1, r3
 800fdf6:	4413      	add	r3, r2
 800fdf8:	3324      	adds	r3, #36	; 0x24
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	2200      	movs	r2, #0
 800fdfe:	4619      	mov	r1, r3
 800fe00:	6938      	ldr	r0, [r7, #16]
 800fe02:	f7f2 fa80 	bl	8002306 <HAL_FDCAN_ActivateNotification>
 800fe06:	4603      	mov	r3, r0
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d001      	beq.n	800fe10 <canOpen+0x218>
  {
    return false;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	e02b      	b.n	800fe68 <canOpen+0x270>
  }


  tdc_offset = p_can->Init.DataPrescaler * p_can->Init.DataTimeSeg1;
 800fe10:	693b      	ldr	r3, [r7, #16]
 800fe12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe14:	693a      	ldr	r2, [r7, #16]
 800fe16:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800fe18:	fb02 f303 	mul.w	r3, r2, r3
 800fe1c:	60fb      	str	r3, [r7, #12]

  if (HAL_FDCAN_ConfigTxDelayCompensation(p_can, tdc_offset, 0) != HAL_OK) return false;
 800fe1e:	2200      	movs	r2, #0
 800fe20:	68f9      	ldr	r1, [r7, #12]
 800fe22:	6938      	ldr	r0, [r7, #16]
 800fe24:	f7f1 ffc1 	bl	8001daa <HAL_FDCAN_ConfigTxDelayCompensation>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	2b00      	cmp	r3, #0
 800fe2c:	d001      	beq.n	800fe32 <canOpen+0x23a>
 800fe2e:	2300      	movs	r3, #0
 800fe30:	e01a      	b.n	800fe68 <canOpen+0x270>
  if (HAL_FDCAN_EnableTxDelayCompensation(p_can) != HAL_OK)                return false;
 800fe32:	6938      	ldr	r0, [r7, #16]
 800fe34:	f7f1 ffdb 	bl	8001dee <HAL_FDCAN_EnableTxDelayCompensation>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d001      	beq.n	800fe42 <canOpen+0x24a>
 800fe3e:	2300      	movs	r3, #0
 800fe40:	e012      	b.n	800fe68 <canOpen+0x270>


  if (HAL_FDCAN_Start(p_can) != HAL_OK)
 800fe42:	6938      	ldr	r0, [r7, #16]
 800fe44:	f7f1 fff4 	bl	8001e30 <HAL_FDCAN_Start>
 800fe48:	4603      	mov	r3, r0
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d001      	beq.n	800fe52 <canOpen+0x25a>
  {
    return false;
 800fe4e:	2300      	movs	r3, #0
 800fe50:	e00a      	b.n	800fe68 <canOpen+0x270>
  }


  can_tbl[ch].is_open = true;
 800fe52:	79fb      	ldrb	r3, [r7, #7]
 800fe54:	4a06      	ldr	r2, [pc, #24]	; (800fe70 <canOpen+0x278>)
 800fe56:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800fe5a:	fb01 f303 	mul.w	r3, r1, r3
 800fe5e:	4413      	add	r3, r2
 800fe60:	3301      	adds	r3, #1
 800fe62:	2201      	movs	r2, #1
 800fe64:	701a      	strb	r2, [r3, #0]


  return ret;
 800fe66:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	371c      	adds	r7, #28
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd90      	pop	{r4, r7, pc}
 800fe70:	20003000 	.word	0x20003000
 800fe74:	40006800 	.word	0x40006800
 800fe78:	08022ba4 	.word	0x08022ba4
 800fe7c:	08022bb0 	.word	0x08022bb0
 800fe80:	200001bc 	.word	0x200001bc
 800fe84:	200001c0 	.word	0x200001c0
 800fe88:	000e0007 	.word	0x000e0007

0800fe8c <canConfigFilter>:
{

}

bool canConfigFilter(uint8_t ch, uint8_t index, can_id_type_t id_type, uint32_t id, uint32_t id_mask)
{
 800fe8c:	b580      	push	{r7, lr}
 800fe8e:	b08a      	sub	sp, #40	; 0x28
 800fe90:	af00      	add	r7, sp, #0
 800fe92:	603b      	str	r3, [r7, #0]
 800fe94:	4603      	mov	r3, r0
 800fe96:	71fb      	strb	r3, [r7, #7]
 800fe98:	460b      	mov	r3, r1
 800fe9a:	71bb      	strb	r3, [r7, #6]
 800fe9c:	4613      	mov	r3, r2
 800fe9e:	717b      	strb	r3, [r7, #5]
  bool ret = false;
 800fea0:	2300      	movs	r3, #0
 800fea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  FDCAN_FilterTypeDef sFilterConfig;


  if (ch >= CAN_MAX_CH) return false;
 800fea6:	79fb      	ldrb	r3, [r7, #7]
 800fea8:	2b01      	cmp	r3, #1
 800feaa:	d901      	bls.n	800feb0 <canConfigFilter+0x24>
 800feac:	2300      	movs	r3, #0
 800feae:	e037      	b.n	800ff20 <canConfigFilter+0x94>


  if (id_type == CAN_STD)
 800feb0:	797b      	ldrb	r3, [r7, #5]
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d102      	bne.n	800febc <canConfigFilter+0x30>
  {
    sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800feb6:	2300      	movs	r3, #0
 800feb8:	60fb      	str	r3, [r7, #12]
 800feba:	e002      	b.n	800fec2 <canConfigFilter+0x36>
  }
  else
  {
    sFilterConfig.IdType = FDCAN_EXTENDED_ID;
 800febc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800fec0:	60fb      	str	r3, [r7, #12]
  }

  if (can_tbl[ch].fifo_idx == FDCAN_RX_FIFO0)
 800fec2:	79fb      	ldrb	r3, [r7, #7]
 800fec4:	4a18      	ldr	r2, [pc, #96]	; (800ff28 <canConfigFilter+0x9c>)
 800fec6:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800feca:	fb01 f303 	mul.w	r3, r1, r3
 800fece:	4413      	add	r3, r2
 800fed0:	3320      	adds	r3, #32
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2b40      	cmp	r3, #64	; 0x40
 800fed6:	d102      	bne.n	800fede <canConfigFilter+0x52>
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO0;
 800fed8:	2301      	movs	r3, #1
 800feda:	61bb      	str	r3, [r7, #24]
 800fedc:	e001      	b.n	800fee2 <canConfigFilter+0x56>
  }
  else
  {
    sFilterConfig.FilterConfig  = FDCAN_FILTER_TO_RXFIFO1;
 800fede:	2302      	movs	r3, #2
 800fee0:	61bb      	str	r3, [r7, #24]
  }

  sFilterConfig.FilterIndex   = index;
 800fee2:	79bb      	ldrb	r3, [r7, #6]
 800fee4:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterType    = FDCAN_FILTER_MASK;
 800fee6:	2302      	movs	r3, #2
 800fee8:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterID1     = id;
 800feea:	683b      	ldr	r3, [r7, #0]
 800feec:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterID2     = id_mask;
 800feee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fef0:	623b      	str	r3, [r7, #32]

  if (HAL_FDCAN_ConfigFilter(&can_tbl[ch].hfdcan, &sFilterConfig) == HAL_OK)
 800fef2:	79fb      	ldrb	r3, [r7, #7]
 800fef4:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800fef8:	fb02 f303 	mul.w	r3, r2, r3
 800fefc:	3328      	adds	r3, #40	; 0x28
 800fefe:	4a0a      	ldr	r2, [pc, #40]	; (800ff28 <canConfigFilter+0x9c>)
 800ff00:	4413      	add	r3, r2
 800ff02:	3304      	adds	r3, #4
 800ff04:	f107 020c 	add.w	r2, r7, #12
 800ff08:	4611      	mov	r1, r2
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7f1 fec2 	bl	8001c94 <HAL_FDCAN_ConfigFilter>
 800ff10:	4603      	mov	r3, r0
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d102      	bne.n	800ff1c <canConfigFilter+0x90>
  {
    ret = true;
 800ff16:	2301      	movs	r3, #1
 800ff18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 800ff1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ff20:	4618      	mov	r0, r3
 800ff22:	3728      	adds	r7, #40	; 0x28
 800ff24:	46bd      	mov	sp, r7
 800ff26:	bd80      	pop	{r7, pc}
 800ff28:	20003000 	.word	0x20003000

0800ff2c <canMsgAvailable>:

uint32_t canMsgAvailable(uint8_t ch)
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b082      	sub	sp, #8
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	4603      	mov	r3, r0
 800ff34:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return 0;
 800ff36:	79fb      	ldrb	r3, [r7, #7]
 800ff38:	2b02      	cmp	r3, #2
 800ff3a:	d901      	bls.n	800ff40 <canMsgAvailable+0x14>
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	e00c      	b.n	800ff5a <canMsgAvailable+0x2e>

  return qbufferAvailable(&can_tbl[ch].q_msg);
 800ff40:	79fb      	ldrb	r3, [r7, #7]
 800ff42:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800ff46:	fb02 f303 	mul.w	r3, r2, r3
 800ff4a:	3390      	adds	r3, #144	; 0x90
 800ff4c:	4a05      	ldr	r2, [pc, #20]	; (800ff64 <canMsgAvailable+0x38>)
 800ff4e:	4413      	add	r3, r2
 800ff50:	3304      	adds	r3, #4
 800ff52:	4618      	mov	r0, r3
 800ff54:	f7fc fe94 	bl	800cc80 <qbufferAvailable>
 800ff58:	4603      	mov	r3, r0
}
 800ff5a:	4618      	mov	r0, r3
 800ff5c:	3708      	adds	r7, #8
 800ff5e:	46bd      	mov	sp, r7
 800ff60:	bd80      	pop	{r7, pc}
 800ff62:	bf00      	nop
 800ff64:	20003000 	.word	0x20003000

0800ff68 <canMsgWrite>:
  p_msg->length  = dlc_len_tbl[dlc];
  return true;
}

bool canMsgWrite(uint8_t ch, can_msg_t *p_msg, uint32_t timeout)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b090      	sub	sp, #64	; 0x40
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	4603      	mov	r3, r0
 800ff70:	60b9      	str	r1, [r7, #8]
 800ff72:	607a      	str	r2, [r7, #4]
 800ff74:	73fb      	strb	r3, [r7, #15]
  FDCAN_HandleTypeDef  *p_can;
  FDCAN_TxHeaderTypeDef tx_header;
  uint32_t pre_time;
  bool ret = true;
 800ff76:	2301      	movs	r3, #1
 800ff78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f


  if(ch > CAN_MAX_CH) return false;
 800ff7c:	7bfb      	ldrb	r3, [r7, #15]
 800ff7e:	2b02      	cmp	r3, #2
 800ff80:	d901      	bls.n	800ff86 <canMsgWrite+0x1e>
 800ff82:	2300      	movs	r3, #0
 800ff84:	e07f      	b.n	8010086 <canMsgWrite+0x11e>

  if (can_tbl[ch].err_code & CAN_ERR_BUS_OFF) return false;
 800ff86:	7bfb      	ldrb	r3, [r7, #15]
 800ff88:	4a41      	ldr	r2, [pc, #260]	; (8010090 <canMsgWrite+0x128>)
 800ff8a:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 800ff8e:	fb01 f303 	mul.w	r3, r1, r3
 800ff92:	4413      	add	r3, r2
 800ff94:	3304      	adds	r3, #4
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f003 0304 	and.w	r3, r3, #4
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d001      	beq.n	800ffa4 <canMsgWrite+0x3c>
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	e070      	b.n	8010086 <canMsgWrite+0x11e>


  p_can = &can_tbl[ch].hfdcan;
 800ffa4:	7bfb      	ldrb	r3, [r7, #15]
 800ffa6:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 800ffaa:	fb02 f303 	mul.w	r3, r2, r3
 800ffae:	3328      	adds	r3, #40	; 0x28
 800ffb0:	4a37      	ldr	r2, [pc, #220]	; (8010090 <canMsgWrite+0x128>)
 800ffb2:	4413      	add	r3, r2
 800ffb4:	3304      	adds	r3, #4
 800ffb6:	63bb      	str	r3, [r7, #56]	; 0x38

  switch(p_msg->id_type)
 800ffb8:	68bb      	ldr	r3, [r7, #8]
 800ffba:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d002      	beq.n	800ffc8 <canMsgWrite+0x60>
 800ffc2:	2b01      	cmp	r3, #1
 800ffc4:	d003      	beq.n	800ffce <canMsgWrite+0x66>
 800ffc6:	e006      	b.n	800ffd6 <canMsgWrite+0x6e>
  {
    case CAN_STD :
      tx_header.IdType = FDCAN_STANDARD_ID;
 800ffc8:	2300      	movs	r3, #0
 800ffca:	617b      	str	r3, [r7, #20]
      break;
 800ffcc:	e003      	b.n	800ffd6 <canMsgWrite+0x6e>

    case CAN_EXT :
      tx_header.IdType = FDCAN_EXTENDED_ID;
 800ffce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ffd2:	617b      	str	r3, [r7, #20]
      break;
 800ffd4:	bf00      	nop
  }

  switch(p_msg->frame)
 800ffd6:	68bb      	ldr	r3, [r7, #8]
 800ffd8:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800ffdc:	2b02      	cmp	r3, #2
 800ffde:	d011      	beq.n	8010004 <canMsgWrite+0x9c>
 800ffe0:	2b02      	cmp	r3, #2
 800ffe2:	dc16      	bgt.n	8010012 <canMsgWrite+0xaa>
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d002      	beq.n	800ffee <canMsgWrite+0x86>
 800ffe8:	2b01      	cmp	r3, #1
 800ffea:	d005      	beq.n	800fff8 <canMsgWrite+0x90>
 800ffec:	e011      	b.n	8010012 <canMsgWrite+0xaa>
  {
    case CAN_CLASSIC:
      tx_header.FDFormat      = FDCAN_CLASSIC_CAN;
 800ffee:	2300      	movs	r3, #0
 800fff0:	62bb      	str	r3, [r7, #40]	; 0x28
      tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800fff2:	2300      	movs	r3, #0
 800fff4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800fff6:	e00c      	b.n	8010012 <canMsgWrite+0xaa>

    case CAN_FD_NO_BRS:
      tx_header.FDFormat      = FDCAN_FD_CAN;
 800fff8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800fffc:	62bb      	str	r3, [r7, #40]	; 0x28
      tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 800fffe:	2300      	movs	r3, #0
 8010000:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8010002:	e006      	b.n	8010012 <canMsgWrite+0xaa>

    case CAN_FD_BRS:
      tx_header.FDFormat      = FDCAN_FD_CAN;
 8010004:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010008:	62bb      	str	r3, [r7, #40]	; 0x28
      tx_header.BitRateSwitch = FDCAN_BRS_ON;
 801000a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801000e:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8010010:	bf00      	nop
  }

  tx_header.Identifier          = p_msg->id;
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	613b      	str	r3, [r7, #16]
  tx_header.MessageMarker       = 0;
 8010018:	2300      	movs	r3, #0
 801001a:	633b      	str	r3, [r7, #48]	; 0x30
  tx_header.TxEventFifoControl  = FDCAN_NO_TX_EVENTS;
 801001c:	2300      	movs	r3, #0
 801001e:	62fb      	str	r3, [r7, #44]	; 0x2c
  tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8010020:	2300      	movs	r3, #0
 8010022:	623b      	str	r3, [r7, #32]
  tx_header.TxFrameType         = FDCAN_DATA_FRAME;
 8010024:	2300      	movs	r3, #0
 8010026:	61bb      	str	r3, [r7, #24]
  tx_header.DataLength          = dlc_tbl[p_msg->dlc];
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801002e:	461a      	mov	r2, r3
 8010030:	4b18      	ldr	r3, [pc, #96]	; (8010094 <canMsgWrite+0x12c>)
 8010032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010036:	61fb      	str	r3, [r7, #28]
//  {
//    return false;
//  }


  pre_time = millis();
 8010038:	f7fb fa4d 	bl	800b4d6 <millis>
 801003c:	6378      	str	r0, [r7, #52]	; 0x34
  if(HAL_FDCAN_AddMessageToTxFifoQ(p_can, &tx_header, p_msg->data) == HAL_OK)
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	1d9a      	adds	r2, r3, #6
 8010042:	f107 0310 	add.w	r3, r7, #16
 8010046:	4619      	mov	r1, r3
 8010048:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801004a:	f7f1 ff89 	bl	8001f60 <HAL_FDCAN_AddMessageToTxFifoQ>
 801004e:	4603      	mov	r3, r0
 8010050:	2b00      	cmp	r3, #0
 8010052:	d113      	bne.n	801007c <canMsgWrite+0x114>
  {
    /* Wait transmission complete */
    while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 8010054:	e00b      	b.n	801006e <canMsgWrite+0x106>
    {
      if (millis()-pre_time >= timeout)
 8010056:	f7fb fa3e 	bl	800b4d6 <millis>
 801005a:	4602      	mov	r2, r0
 801005c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801005e:	1ad3      	subs	r3, r2, r3
 8010060:	687a      	ldr	r2, [r7, #4]
 8010062:	429a      	cmp	r2, r3
 8010064:	d803      	bhi.n	801006e <canMsgWrite+0x106>
      {
        ret = false;
 8010066:	2300      	movs	r3, #0
 8010068:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 801006c:	e009      	b.n	8010082 <canMsgWrite+0x11a>
    while(HAL_FDCAN_GetTxFifoFreeLevel(p_can) == 0)
 801006e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010070:	f7f2 f937 	bl	80022e2 <HAL_FDCAN_GetTxFifoFreeLevel>
 8010074:	4603      	mov	r3, r0
 8010076:	2b00      	cmp	r3, #0
 8010078:	d0ed      	beq.n	8010056 <canMsgWrite+0xee>
 801007a:	e002      	b.n	8010082 <canMsgWrite+0x11a>
      }
    }
  }
  else
  {
    ret = false;
 801007c:	2300      	movs	r3, #0
 801007e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return ret;
 8010082:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8010086:	4618      	mov	r0, r3
 8010088:	3740      	adds	r7, #64	; 0x40
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	20003000 	.word	0x20003000
 8010094:	08022b64 	.word	0x08022b64

08010098 <canMsgRead>:

bool canMsgRead(uint8_t ch, can_msg_t *p_msg)
{
 8010098:	b580      	push	{r7, lr}
 801009a:	b084      	sub	sp, #16
 801009c:	af00      	add	r7, sp, #0
 801009e:	4603      	mov	r3, r0
 80100a0:	6039      	str	r1, [r7, #0]
 80100a2:	71fb      	strb	r3, [r7, #7]
  bool ret = true;
 80100a4:	2301      	movs	r3, #1
 80100a6:	73fb      	strb	r3, [r7, #15]


  if(ch > CAN_MAX_CH) return 0;
 80100a8:	79fb      	ldrb	r3, [r7, #7]
 80100aa:	2b02      	cmp	r3, #2
 80100ac:	d901      	bls.n	80100b2 <canMsgRead+0x1a>
 80100ae:	2300      	movs	r3, #0
 80100b0:	e010      	b.n	80100d4 <canMsgRead+0x3c>

  ret = qbufferRead(&can_tbl[ch].q_msg, (uint8_t *)p_msg, 1);
 80100b2:	79fb      	ldrb	r3, [r7, #7]
 80100b4:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 80100b8:	fb02 f303 	mul.w	r3, r2, r3
 80100bc:	3390      	adds	r3, #144	; 0x90
 80100be:	4a07      	ldr	r2, [pc, #28]	; (80100dc <canMsgRead+0x44>)
 80100c0:	4413      	add	r3, r2
 80100c2:	3304      	adds	r3, #4
 80100c4:	2201      	movs	r2, #1
 80100c6:	6839      	ldr	r1, [r7, #0]
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7fc fd6e 	bl	800cbaa <qbufferRead>
 80100ce:	4603      	mov	r3, r0
 80100d0:	73fb      	strb	r3, [r7, #15]

  return ret;
 80100d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80100d4:	4618      	mov	r0, r3
 80100d6:	3710      	adds	r7, #16
 80100d8:	46bd      	mov	sp, r7
 80100da:	bd80      	pop	{r7, pc}
 80100dc:	20003000 	.word	0x20003000

080100e0 <canGetRxErrCount>:

uint16_t canGetRxErrCount(uint8_t ch)
{
 80100e0:	b580      	push	{r7, lr}
 80100e2:	b088      	sub	sp, #32
 80100e4:	af00      	add	r7, sp, #0
 80100e6:	4603      	mov	r3, r0
 80100e8:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 80100ea:	2300      	movs	r3, #0
 80100ec:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 80100ee:	79fb      	ldrb	r3, [r7, #7]
 80100f0:	2b02      	cmp	r3, #2
 80100f2:	d901      	bls.n	80100f8 <canGetRxErrCount+0x18>
 80100f4:	2300      	movs	r3, #0
 80100f6:	e016      	b.n	8010126 <canGetRxErrCount+0x46>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 80100f8:	79fb      	ldrb	r3, [r7, #7]
 80100fa:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 80100fe:	fb02 f303 	mul.w	r3, r2, r3
 8010102:	3328      	adds	r3, #40	; 0x28
 8010104:	4a0a      	ldr	r2, [pc, #40]	; (8010130 <canGetRxErrCount+0x50>)
 8010106:	4413      	add	r3, r2
 8010108:	3304      	adds	r3, #4
 801010a:	f107 020c 	add.w	r2, r7, #12
 801010e:	4611      	mov	r1, r2
 8010110:	4618      	mov	r0, r3
 8010112:	f7f2 f8c1 	bl	8002298 <HAL_FDCAN_GetErrorCounters>
 8010116:	4603      	mov	r3, r0
 8010118:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 801011a:	7f7b      	ldrb	r3, [r7, #29]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d101      	bne.n	8010124 <canGetRxErrCount+0x44>
  {
    ret = error_counters.RxErrorCnt;
 8010120:	693b      	ldr	r3, [r7, #16]
 8010122:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 8010124:	8bfb      	ldrh	r3, [r7, #30]
}
 8010126:	4618      	mov	r0, r3
 8010128:	3720      	adds	r7, #32
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	20003000 	.word	0x20003000

08010134 <canGetTxErrCount>:

uint16_t canGetTxErrCount(uint8_t ch)
{
 8010134:	b580      	push	{r7, lr}
 8010136:	b088      	sub	sp, #32
 8010138:	af00      	add	r7, sp, #0
 801013a:	4603      	mov	r3, r0
 801013c:	71fb      	strb	r3, [r7, #7]
  uint16_t ret = 0;
 801013e:	2300      	movs	r3, #0
 8010140:	83fb      	strh	r3, [r7, #30]
  HAL_StatusTypeDef status;
  FDCAN_ErrorCountersTypeDef error_counters;

  if(ch > CAN_MAX_CH) return 0;
 8010142:	79fb      	ldrb	r3, [r7, #7]
 8010144:	2b02      	cmp	r3, #2
 8010146:	d901      	bls.n	801014c <canGetTxErrCount+0x18>
 8010148:	2300      	movs	r3, #0
 801014a:	e016      	b.n	801017a <canGetTxErrCount+0x46>

  status = HAL_FDCAN_GetErrorCounters(&can_tbl[ch].hfdcan, &error_counters);
 801014c:	79fb      	ldrb	r3, [r7, #7]
 801014e:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 8010152:	fb02 f303 	mul.w	r3, r2, r3
 8010156:	3328      	adds	r3, #40	; 0x28
 8010158:	4a0a      	ldr	r2, [pc, #40]	; (8010184 <canGetTxErrCount+0x50>)
 801015a:	4413      	add	r3, r2
 801015c:	3304      	adds	r3, #4
 801015e:	f107 020c 	add.w	r2, r7, #12
 8010162:	4611      	mov	r1, r2
 8010164:	4618      	mov	r0, r3
 8010166:	f7f2 f897 	bl	8002298 <HAL_FDCAN_GetErrorCounters>
 801016a:	4603      	mov	r3, r0
 801016c:	777b      	strb	r3, [r7, #29]
  if (status == HAL_OK)
 801016e:	7f7b      	ldrb	r3, [r7, #29]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d101      	bne.n	8010178 <canGetTxErrCount+0x44>
  {
    ret = error_counters.TxErrorCnt;
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	83fb      	strh	r3, [r7, #30]
  }

  return ret;
 8010178:	8bfb      	ldrh	r3, [r7, #30]
}
 801017a:	4618      	mov	r0, r3
 801017c:	3720      	adds	r7, #32
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
 8010182:	bf00      	nop
 8010184:	20003000 	.word	0x20003000

08010188 <canRecovery>:

  can_tbl[ch].handler = NULL;
}

void canRecovery(uint8_t ch)
{
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	4603      	mov	r3, r0
 8010190:	71fb      	strb	r3, [r7, #7]
  if(ch > CAN_MAX_CH) return;
 8010192:	79fb      	ldrb	r3, [r7, #7]
 8010194:	2b02      	cmp	r3, #2
 8010196:	d82a      	bhi.n	80101ee <canRecovery+0x66>

  HAL_FDCAN_Stop(&can_tbl[ch].hfdcan);
 8010198:	79fb      	ldrb	r3, [r7, #7]
 801019a:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 801019e:	fb02 f303 	mul.w	r3, r2, r3
 80101a2:	3328      	adds	r3, #40	; 0x28
 80101a4:	4a14      	ldr	r2, [pc, #80]	; (80101f8 <canRecovery+0x70>)
 80101a6:	4413      	add	r3, r2
 80101a8:	3304      	adds	r3, #4
 80101aa:	4618      	mov	r0, r3
 80101ac:	f7f1 fe68 	bl	8001e80 <HAL_FDCAN_Stop>
  HAL_FDCAN_Start(&can_tbl[ch].hfdcan);
 80101b0:	79fb      	ldrb	r3, [r7, #7]
 80101b2:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 80101b6:	fb02 f303 	mul.w	r3, r2, r3
 80101ba:	3328      	adds	r3, #40	; 0x28
 80101bc:	4a0e      	ldr	r2, [pc, #56]	; (80101f8 <canRecovery+0x70>)
 80101be:	4413      	add	r3, r2
 80101c0:	3304      	adds	r3, #4
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7f1 fe34 	bl	8001e30 <HAL_FDCAN_Start>

  can_tbl[ch].recovery_cnt++;
 80101c8:	79fb      	ldrb	r3, [r7, #7]
 80101ca:	490b      	ldr	r1, [pc, #44]	; (80101f8 <canRecovery+0x70>)
 80101cc:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 80101d0:	fb03 f202 	mul.w	r2, r3, r2
 80101d4:	440a      	add	r2, r1
 80101d6:	320c      	adds	r2, #12
 80101d8:	6812      	ldr	r2, [r2, #0]
 80101da:	3201      	adds	r2, #1
 80101dc:	4906      	ldr	r1, [pc, #24]	; (80101f8 <canRecovery+0x70>)
 80101de:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 80101e2:	fb00 f303 	mul.w	r3, r0, r3
 80101e6:	440b      	add	r3, r1
 80101e8:	330c      	adds	r3, #12
 80101ea:	601a      	str	r2, [r3, #0]
 80101ec:	e000      	b.n	80101f0 <canRecovery+0x68>
  if(ch > CAN_MAX_CH) return;
 80101ee:	bf00      	nop
}
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
 80101f6:	bf00      	nop
 80101f8:	20003000 	.word	0x20003000

080101fc <canUpdate>:

bool canUpdate(void)
{
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b084      	sub	sp, #16
 8010200:	af00      	add	r7, sp, #0
  bool ret = false;
 8010202:	2300      	movs	r3, #0
 8010204:	73fb      	strb	r3, [r7, #15]
  can_tbl_t *p_can;


  for (int i=0; i<CAN_MAX_CH; i++)
 8010206:	2300      	movs	r3, #0
 8010208:	60bb      	str	r3, [r7, #8]
 801020a:	e02f      	b.n	801026c <canUpdate+0x70>
  {
    p_can = &can_tbl[i];
 801020c:	68bb      	ldr	r3, [r7, #8]
 801020e:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 8010212:	fb02 f303 	mul.w	r3, r2, r3
 8010216:	4a19      	ldr	r2, [pc, #100]	; (801027c <canUpdate+0x80>)
 8010218:	4413      	add	r3, r2
 801021a:	607b      	str	r3, [r7, #4]


    switch(p_can->state)
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	7a1b      	ldrb	r3, [r3, #8]
 8010220:	2b00      	cmp	r3, #0
 8010222:	d002      	beq.n	801022a <canUpdate+0x2e>
 8010224:	2b01      	cmp	r3, #1
 8010226:	d011      	beq.n	801024c <canUpdate+0x50>
 8010228:	e01d      	b.n	8010266 <canUpdate+0x6a>
    {
      case 0:
        if (p_can->err_code & CAN_ERR_BUS_OFF)
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	685b      	ldr	r3, [r3, #4]
 801022e:	f003 0304 	and.w	r3, r3, #4
 8010232:	2b00      	cmp	r3, #0
 8010234:	d014      	beq.n	8010260 <canUpdate+0x64>
        {
          canRecovery(i);
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	b2db      	uxtb	r3, r3
 801023a:	4618      	mov	r0, r3
 801023c:	f7ff ffa4 	bl	8010188 <canRecovery>
          p_can->state = 1;
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2201      	movs	r2, #1
 8010244:	721a      	strb	r2, [r3, #8]
          ret = true;
 8010246:	2301      	movs	r3, #1
 8010248:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801024a:	e009      	b.n	8010260 <canUpdate+0x64>

      case 1:
        if ((p_can->err_code & CAN_ERR_BUS_OFF) == 0)
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	685b      	ldr	r3, [r3, #4]
 8010250:	f003 0304 	and.w	r3, r3, #4
 8010254:	2b00      	cmp	r3, #0
 8010256:	d105      	bne.n	8010264 <canUpdate+0x68>
        {
          p_can->state = 0;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	2200      	movs	r2, #0
 801025c:	721a      	strb	r2, [r3, #8]
        }
        break;
 801025e:	e001      	b.n	8010264 <canUpdate+0x68>
        break;
 8010260:	bf00      	nop
 8010262:	e000      	b.n	8010266 <canUpdate+0x6a>
        break;
 8010264:	bf00      	nop
  for (int i=0; i<CAN_MAX_CH; i++)
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	3301      	adds	r3, #1
 801026a:	60bb      	str	r3, [r7, #8]
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	2b01      	cmp	r3, #1
 8010270:	ddcc      	ble.n	801020c <canUpdate+0x10>
    }
  }

  return ret;
 8010272:	7bfb      	ldrb	r3, [r7, #15]
}
 8010274:	4618      	mov	r0, r3
 8010276:	3710      	adds	r7, #16
 8010278:	46bd      	mov	sp, r7
 801027a:	bd80      	pop	{r7, pc}
 801027c:	20003000 	.word	0x20003000

08010280 <canRxFifoCallback>:

void canRxFifoCallback(uint8_t ch, FDCAN_HandleTypeDef *hfdcan)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b08e      	sub	sp, #56	; 0x38
 8010284:	af00      	add	r7, sp, #0
 8010286:	4603      	mov	r3, r0
 8010288:	6039      	str	r1, [r7, #0]
 801028a:	71fb      	strb	r3, [r7, #7]
  can_msg_t *rx_buf;
  FDCAN_RxHeaderTypeDef rx_header;


  rx_buf  = (can_msg_t *)qbufferPeekWrite(&can_tbl[ch].q_msg);
 801028c:	79fb      	ldrb	r3, [r7, #7]
 801028e:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 8010292:	fb02 f303 	mul.w	r3, r2, r3
 8010296:	3390      	adds	r3, #144	; 0x90
 8010298:	4a4b      	ldr	r2, [pc, #300]	; (80103c8 <canRxFifoCallback+0x148>)
 801029a:	4413      	add	r3, r2
 801029c:	3304      	adds	r3, #4
 801029e:	4618      	mov	r0, r3
 80102a0:	f7fc fcdb 	bl	800cc5a <qbufferPeekWrite>
 80102a4:	6378      	str	r0, [r7, #52]	; 0x34

  if (HAL_FDCAN_GetRxMessage(hfdcan, can_tbl[ch].fifo_idx, &rx_header, rx_buf->data) == HAL_OK)
 80102a6:	79fb      	ldrb	r3, [r7, #7]
 80102a8:	4a47      	ldr	r2, [pc, #284]	; (80103c8 <canRxFifoCallback+0x148>)
 80102aa:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 80102ae:	fb01 f303 	mul.w	r3, r1, r3
 80102b2:	4413      	add	r3, r2
 80102b4:	3320      	adds	r3, #32
 80102b6:	6819      	ldr	r1, [r3, #0]
 80102b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ba:	3306      	adds	r3, #6
 80102bc:	f107 020c 	add.w	r2, r7, #12
 80102c0:	6838      	ldr	r0, [r7, #0]
 80102c2:	f7f1 fe91 	bl	8001fe8 <HAL_FDCAN_GetRxMessage>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d178      	bne.n	80103be <canRxFifoCallback+0x13e>
  {
    if(rx_header.IdType == FDCAN_STANDARD_ID)
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	d107      	bne.n	80102e2 <canRxFifoCallback+0x62>
    {
      rx_buf->id      = rx_header.Identifier;
 80102d2:	68fa      	ldr	r2, [r7, #12]
 80102d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102d6:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_STD;
 80102d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102da:	2200      	movs	r2, #0
 80102dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80102e0:	e006      	b.n	80102f0 <canRxFifoCallback+0x70>
    }
    else
    {
      rx_buf->id      = rx_header.Identifier;
 80102e2:	68fa      	ldr	r2, [r7, #12]
 80102e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e6:	601a      	str	r2, [r3, #0]
      rx_buf->id_type = CAN_EXT;
 80102e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102ea:	2201      	movs	r2, #1
 80102ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    }
    rx_buf->length = rx_header.DataLength;//dlc_len_tbl[(rx_header.DataLength >> 16) & 0x0F];
 80102f0:	69bb      	ldr	r3, [r7, #24]
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102f6:	809a      	strh	r2, [r3, #4]


    if (rx_header.FDFormat == FDCAN_FD_CAN)
 80102f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80102fe:	d10d      	bne.n	801031c <canRxFifoCallback+0x9c>
    {
      if (rx_header.BitRateSwitch == FDCAN_BRS_ON)
 8010300:	6a3b      	ldr	r3, [r7, #32]
 8010302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010306:	d104      	bne.n	8010312 <canRxFifoCallback+0x92>
      {
        rx_buf->frame = CAN_FD_BRS;
 8010308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801030a:	2202      	movs	r2, #2
 801030c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8010310:	e008      	b.n	8010324 <canRxFifoCallback+0xa4>
      }
      else
      {
        rx_buf->frame = CAN_FD_NO_BRS;
 8010312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010314:	2201      	movs	r2, #1
 8010316:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 801031a:	e003      	b.n	8010324 <canRxFifoCallback+0xa4>
      }
    }
    else
    {
      rx_buf->frame = CAN_CLASSIC;
 801031c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801031e:	2200      	movs	r2, #0
 8010320:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    }

    if (qbufferWrite(&can_tbl[ch].q_msg, NULL, 1) != true)
 8010324:	79fb      	ldrb	r3, [r7, #7]
 8010326:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 801032a:	fb02 f303 	mul.w	r3, r2, r3
 801032e:	3390      	adds	r3, #144	; 0x90
 8010330:	4a25      	ldr	r2, [pc, #148]	; (80103c8 <canRxFifoCallback+0x148>)
 8010332:	4413      	add	r3, r2
 8010334:	3304      	adds	r3, #4
 8010336:	2201      	movs	r2, #1
 8010338:	2100      	movs	r1, #0
 801033a:	4618      	mov	r0, r3
 801033c:	f7fc fbd9 	bl	800caf2 <qbufferWrite>
 8010340:	4603      	mov	r3, r0
 8010342:	f083 0301 	eor.w	r3, r3, #1
 8010346:	b2db      	uxtb	r3, r3
 8010348:	2b00      	cmp	r3, #0
 801034a:	d011      	beq.n	8010370 <canRxFifoCallback+0xf0>
    {
      can_tbl[ch].q_rx_full_cnt++;
 801034c:	79fb      	ldrb	r3, [r7, #7]
 801034e:	491e      	ldr	r1, [pc, #120]	; (80103c8 <canRxFifoCallback+0x148>)
 8010350:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 8010354:	fb03 f202 	mul.w	r2, r3, r2
 8010358:	440a      	add	r2, r1
 801035a:	3210      	adds	r2, #16
 801035c:	6812      	ldr	r2, [r2, #0]
 801035e:	3201      	adds	r2, #1
 8010360:	4919      	ldr	r1, [pc, #100]	; (80103c8 <canRxFifoCallback+0x148>)
 8010362:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 8010366:	fb00 f303 	mul.w	r3, r0, r3
 801036a:	440b      	add	r3, r1
 801036c:	3310      	adds	r3, #16
 801036e:	601a      	str	r2, [r3, #0]
    }

    if( can_tbl[ch].handler != NULL )
 8010370:	79fb      	ldrb	r3, [r7, #7]
 8010372:	4a15      	ldr	r2, [pc, #84]	; (80103c8 <canRxFifoCallback+0x148>)
 8010374:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 8010378:	fb01 f303 	mul.w	r3, r1, r3
 801037c:	4413      	add	r3, r2
 801037e:	3390      	adds	r3, #144	; 0x90
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	2b00      	cmp	r3, #0
 8010384:	d01b      	beq.n	80103be <canRxFifoCallback+0x13e>
    {
      if ((*can_tbl[ch].handler)((void *)rx_buf) == true)
 8010386:	79fb      	ldrb	r3, [r7, #7]
 8010388:	4a0f      	ldr	r2, [pc, #60]	; (80103c8 <canRxFifoCallback+0x148>)
 801038a:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 801038e:	fb01 f303 	mul.w	r3, r1, r3
 8010392:	4413      	add	r3, r2
 8010394:	3390      	adds	r3, #144	; 0x90
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801039a:	4798      	blx	r3
 801039c:	4603      	mov	r3, r0
 801039e:	2b00      	cmp	r3, #0
 80103a0:	d00d      	beq.n	80103be <canRxFifoCallback+0x13e>
      {
        qbufferRead(&can_tbl[ch].q_msg, NULL, 1);
 80103a2:	79fb      	ldrb	r3, [r7, #7]
 80103a4:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 80103a8:	fb02 f303 	mul.w	r3, r2, r3
 80103ac:	3390      	adds	r3, #144	; 0x90
 80103ae:	4a06      	ldr	r2, [pc, #24]	; (80103c8 <canRxFifoCallback+0x148>)
 80103b0:	4413      	add	r3, r2
 80103b2:	3304      	adds	r3, #4
 80103b4:	2201      	movs	r2, #1
 80103b6:	2100      	movs	r1, #0
 80103b8:	4618      	mov	r0, r3
 80103ba:	f7fc fbf6 	bl	800cbaa <qbufferRead>
      }
    }
  }
}
 80103be:	bf00      	nop
 80103c0:	3738      	adds	r7, #56	; 0x38
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}
 80103c6:	bf00      	nop
 80103c8:	20003000 	.word	0x20003000

080103cc <canErrPrint>:

  can_tbl[ch].err_code = CAN_ERR_NONE;
}

void canErrPrint(uint8_t ch)
{
 80103cc:	b580      	push	{r7, lr}
 80103ce:	b084      	sub	sp, #16
 80103d0:	af00      	add	r7, sp, #0
 80103d2:	4603      	mov	r3, r0
 80103d4:	71fb      	strb	r3, [r7, #7]
  uint32_t err_code;


  if(ch > CAN_MAX_CH) return;
 80103d6:	79fb      	ldrb	r3, [r7, #7]
 80103d8:	2b02      	cmp	r3, #2
 80103da:	d822      	bhi.n	8010422 <canErrPrint+0x56>

  err_code = can_tbl[ch].err_code;
 80103dc:	79fb      	ldrb	r3, [r7, #7]
 80103de:	4a13      	ldr	r2, [pc, #76]	; (801042c <canErrPrint+0x60>)
 80103e0:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 80103e4:	fb01 f303 	mul.w	r3, r1, r3
 80103e8:	4413      	add	r3, r2
 80103ea:	3304      	adds	r3, #4
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	60fb      	str	r3, [r7, #12]

  if (err_code & CAN_ERR_PASSIVE) logPrintf("  ERR : CAN_ERR_PASSIVE\n");
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	f003 0301 	and.w	r3, r3, #1
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d002      	beq.n	8010400 <canErrPrint+0x34>
 80103fa:	480d      	ldr	r0, [pc, #52]	; (8010430 <canErrPrint+0x64>)
 80103fc:	f7fc fa2e 	bl	800c85c <logPrintf>
  if (err_code & CAN_ERR_WARNING) logPrintf("  ERR : CAN_ERR_WARNING\n");
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	f003 0302 	and.w	r3, r3, #2
 8010406:	2b00      	cmp	r3, #0
 8010408:	d002      	beq.n	8010410 <canErrPrint+0x44>
 801040a:	480a      	ldr	r0, [pc, #40]	; (8010434 <canErrPrint+0x68>)
 801040c:	f7fc fa26 	bl	800c85c <logPrintf>
  if (err_code & CAN_ERR_BUS_OFF) logPrintf("  ERR : CAN_ERR_BUS_OFF\n");
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	f003 0304 	and.w	r3, r3, #4
 8010416:	2b00      	cmp	r3, #0
 8010418:	d004      	beq.n	8010424 <canErrPrint+0x58>
 801041a:	4807      	ldr	r0, [pc, #28]	; (8010438 <canErrPrint+0x6c>)
 801041c:	f7fc fa1e 	bl	800c85c <logPrintf>
 8010420:	e000      	b.n	8010424 <canErrPrint+0x58>
  if(ch > CAN_MAX_CH) return;
 8010422:	bf00      	nop
}
 8010424:	3710      	adds	r7, #16
 8010426:	46bd      	mov	sp, r7
 8010428:	bd80      	pop	{r7, pc}
 801042a:	bf00      	nop
 801042c:	20003000 	.word	0x20003000
 8010430:	080164a8 	.word	0x080164a8
 8010434:	080164c4 	.word	0x080164c4
 8010438:	080164e0 	.word	0x080164e0

0801043c <canErrUpdate>:

void canErrUpdate(uint8_t ch)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b08e      	sub	sp, #56	; 0x38
 8010440:	af00      	add	r7, sp, #0
 8010442:	4603      	mov	r3, r0
 8010444:	71fb      	strb	r3, [r7, #7]
  FDCAN_ProtocolStatusTypeDef protocol_status;

  HAL_FDCAN_GetProtocolStatus(&can_tbl[ch].hfdcan, &protocol_status);
 8010446:	79fb      	ldrb	r3, [r7, #7]
 8010448:	f44f 62ad 	mov.w	r2, #1384	; 0x568
 801044c:	fb02 f303 	mul.w	r3, r2, r3
 8010450:	3328      	adds	r3, #40	; 0x28
 8010452:	4a48      	ldr	r2, [pc, #288]	; (8010574 <canErrUpdate+0x138>)
 8010454:	4413      	add	r3, r2
 8010456:	3304      	adds	r3, #4
 8010458:	f107 020c 	add.w	r2, r7, #12
 801045c:	4611      	mov	r1, r2
 801045e:	4618      	mov	r0, r3
 8010460:	f7f1 feca 	bl	80021f8 <HAL_FDCAN_GetProtocolStatus>

  if (protocol_status.ErrorPassive)
 8010464:	69bb      	ldr	r3, [r7, #24]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d014      	beq.n	8010494 <canErrUpdate+0x58>
  {
    can_tbl[ch].err_code |= CAN_ERR_PASSIVE;
 801046a:	79fb      	ldrb	r3, [r7, #7]
 801046c:	4a41      	ldr	r2, [pc, #260]	; (8010574 <canErrUpdate+0x138>)
 801046e:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 8010472:	fb01 f303 	mul.w	r3, r1, r3
 8010476:	4413      	add	r3, r2
 8010478:	3304      	adds	r3, #4
 801047a:	681a      	ldr	r2, [r3, #0]
 801047c:	79fb      	ldrb	r3, [r7, #7]
 801047e:	f042 0201 	orr.w	r2, r2, #1
 8010482:	493c      	ldr	r1, [pc, #240]	; (8010574 <canErrUpdate+0x138>)
 8010484:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 8010488:	fb00 f303 	mul.w	r3, r0, r3
 801048c:	440b      	add	r3, r1
 801048e:	3304      	adds	r3, #4
 8010490:	601a      	str	r2, [r3, #0]
 8010492:	e013      	b.n	80104bc <canErrUpdate+0x80>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_PASSIVE;
 8010494:	79fb      	ldrb	r3, [r7, #7]
 8010496:	4a37      	ldr	r2, [pc, #220]	; (8010574 <canErrUpdate+0x138>)
 8010498:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 801049c:	fb01 f303 	mul.w	r3, r1, r3
 80104a0:	4413      	add	r3, r2
 80104a2:	3304      	adds	r3, #4
 80104a4:	681a      	ldr	r2, [r3, #0]
 80104a6:	79fb      	ldrb	r3, [r7, #7]
 80104a8:	f022 0201 	bic.w	r2, r2, #1
 80104ac:	4931      	ldr	r1, [pc, #196]	; (8010574 <canErrUpdate+0x138>)
 80104ae:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 80104b2:	fb00 f303 	mul.w	r3, r0, r3
 80104b6:	440b      	add	r3, r1
 80104b8:	3304      	adds	r3, #4
 80104ba:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.Warning)
 80104bc:	69fb      	ldr	r3, [r7, #28]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d014      	beq.n	80104ec <canErrUpdate+0xb0>
  {
    can_tbl[ch].err_code |= CAN_ERR_WARNING;
 80104c2:	79fb      	ldrb	r3, [r7, #7]
 80104c4:	4a2b      	ldr	r2, [pc, #172]	; (8010574 <canErrUpdate+0x138>)
 80104c6:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 80104ca:	fb01 f303 	mul.w	r3, r1, r3
 80104ce:	4413      	add	r3, r2
 80104d0:	3304      	adds	r3, #4
 80104d2:	681a      	ldr	r2, [r3, #0]
 80104d4:	79fb      	ldrb	r3, [r7, #7]
 80104d6:	f042 0202 	orr.w	r2, r2, #2
 80104da:	4926      	ldr	r1, [pc, #152]	; (8010574 <canErrUpdate+0x138>)
 80104dc:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 80104e0:	fb00 f303 	mul.w	r3, r0, r3
 80104e4:	440b      	add	r3, r1
 80104e6:	3304      	adds	r3, #4
 80104e8:	601a      	str	r2, [r3, #0]
 80104ea:	e013      	b.n	8010514 <canErrUpdate+0xd8>
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_WARNING;
 80104ec:	79fb      	ldrb	r3, [r7, #7]
 80104ee:	4a21      	ldr	r2, [pc, #132]	; (8010574 <canErrUpdate+0x138>)
 80104f0:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 80104f4:	fb01 f303 	mul.w	r3, r1, r3
 80104f8:	4413      	add	r3, r2
 80104fa:	3304      	adds	r3, #4
 80104fc:	681a      	ldr	r2, [r3, #0]
 80104fe:	79fb      	ldrb	r3, [r7, #7]
 8010500:	f022 0202 	bic.w	r2, r2, #2
 8010504:	491b      	ldr	r1, [pc, #108]	; (8010574 <canErrUpdate+0x138>)
 8010506:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 801050a:	fb00 f303 	mul.w	r3, r0, r3
 801050e:	440b      	add	r3, r1
 8010510:	3304      	adds	r3, #4
 8010512:	601a      	str	r2, [r3, #0]
  }

  if (protocol_status.BusOff)
 8010514:	6a3b      	ldr	r3, [r7, #32]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d014      	beq.n	8010544 <canErrUpdate+0x108>
  {
    can_tbl[ch].err_code |= CAN_ERR_BUS_OFF;
 801051a:	79fb      	ldrb	r3, [r7, #7]
 801051c:	4a15      	ldr	r2, [pc, #84]	; (8010574 <canErrUpdate+0x138>)
 801051e:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 8010522:	fb01 f303 	mul.w	r3, r1, r3
 8010526:	4413      	add	r3, r2
 8010528:	3304      	adds	r3, #4
 801052a:	681a      	ldr	r2, [r3, #0]
 801052c:	79fb      	ldrb	r3, [r7, #7]
 801052e:	f042 0204 	orr.w	r2, r2, #4
 8010532:	4910      	ldr	r1, [pc, #64]	; (8010574 <canErrUpdate+0x138>)
 8010534:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 8010538:	fb00 f303 	mul.w	r3, r0, r3
 801053c:	440b      	add	r3, r1
 801053e:	3304      	adds	r3, #4
 8010540:	601a      	str	r2, [r3, #0]
  }
  else
  {
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
  }
}
 8010542:	e013      	b.n	801056c <canErrUpdate+0x130>
    can_tbl[ch].err_code &= ~CAN_ERR_BUS_OFF;
 8010544:	79fb      	ldrb	r3, [r7, #7]
 8010546:	4a0b      	ldr	r2, [pc, #44]	; (8010574 <canErrUpdate+0x138>)
 8010548:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 801054c:	fb01 f303 	mul.w	r3, r1, r3
 8010550:	4413      	add	r3, r2
 8010552:	3304      	adds	r3, #4
 8010554:	681a      	ldr	r2, [r3, #0]
 8010556:	79fb      	ldrb	r3, [r7, #7]
 8010558:	f022 0204 	bic.w	r2, r2, #4
 801055c:	4905      	ldr	r1, [pc, #20]	; (8010574 <canErrUpdate+0x138>)
 801055e:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 8010562:	fb00 f303 	mul.w	r3, r0, r3
 8010566:	440b      	add	r3, r1
 8010568:	3304      	adds	r3, #4
 801056a:	601a      	str	r2, [r3, #0]
}
 801056c:	bf00      	nop
 801056e:	3738      	adds	r7, #56	; 0x38
 8010570:	46bd      	mov	sp, r7
 8010572:	bd80      	pop	{r7, pc}
 8010574:	20003000 	.word	0x20003000

08010578 <HAL_FDCAN_ErrorStatusCallback>:




void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b084      	sub	sp, #16
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
 8010580:	6039      	str	r1, [r7, #0]
  uint8_t ch = _DEF_CAN2;
 8010582:	2301      	movs	r3, #1
 8010584:	73fb      	strb	r3, [r7, #15]

  canErrUpdate(ch);
 8010586:	7bfb      	ldrb	r3, [r7, #15]
 8010588:	4618      	mov	r0, r3
 801058a:	f7ff ff57 	bl	801043c <canErrUpdate>
}
 801058e:	bf00      	nop
 8010590:	3710      	adds	r7, #16
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
	...

08010598 <HAL_FDCAN_ErrorCallback>:

void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8010598:	b480      	push	{r7}
 801059a:	b085      	sub	sp, #20
 801059c:	af00      	add	r7, sp, #0
 801059e:	6078      	str	r0, [r7, #4]
  uint8_t ch = _DEF_CAN2;
 80105a0:	2301      	movs	r3, #1
 80105a2:	73fb      	strb	r3, [r7, #15]

  err_int_cnt++;
 80105a4:	4b11      	ldr	r3, [pc, #68]	; (80105ec <HAL_FDCAN_ErrorCallback+0x54>)
 80105a6:	681b      	ldr	r3, [r3, #0]
 80105a8:	3301      	adds	r3, #1
 80105aa:	4a10      	ldr	r2, [pc, #64]	; (80105ec <HAL_FDCAN_ErrorCallback+0x54>)
 80105ac:	6013      	str	r3, [r2, #0]

  if (hfdcan->ErrorCode > 0)
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d013      	beq.n	80105de <HAL_FDCAN_ErrorCallback+0x46>
  {
    can_tbl[ch].err_code |= CAN_ERR_ETC;
 80105b6:	7bfb      	ldrb	r3, [r7, #15]
 80105b8:	4a0d      	ldr	r2, [pc, #52]	; (80105f0 <HAL_FDCAN_ErrorCallback+0x58>)
 80105ba:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 80105be:	fb01 f303 	mul.w	r3, r1, r3
 80105c2:	4413      	add	r3, r2
 80105c4:	3304      	adds	r3, #4
 80105c6:	681a      	ldr	r2, [r3, #0]
 80105c8:	7bfb      	ldrb	r3, [r7, #15]
 80105ca:	f042 0210 	orr.w	r2, r2, #16
 80105ce:	4908      	ldr	r1, [pc, #32]	; (80105f0 <HAL_FDCAN_ErrorCallback+0x58>)
 80105d0:	f44f 60ad 	mov.w	r0, #1384	; 0x568
 80105d4:	fb00 f303 	mul.w	r3, r0, r3
 80105d8:	440b      	add	r3, r1
 80105da:	3304      	adds	r3, #4
 80105dc:	601a      	str	r2, [r3, #0]
  }
}
 80105de:	bf00      	nop
 80105e0:	3714      	adds	r7, #20
 80105e2:	46bd      	mov	sp, r7
 80105e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e8:	4770      	bx	lr
 80105ea:	bf00      	nop
 80105ec:	20003ad0 	.word	0x20003ad0
 80105f0:	20003000 	.word	0x20003000

080105f4 <FDCAN2_IT0_IRQHandler>:

void FDCAN2_IT0_IRQHandler(void)
{
 80105f4:	b580      	push	{r7, lr}
 80105f6:	af00      	add	r7, sp, #0
  HAL_FDCAN_IRQHandler(&can_tbl[_DEF_CAN2].hfdcan);
 80105f8:	4802      	ldr	r0, [pc, #8]	; (8010604 <FDCAN2_IT0_IRQHandler+0x10>)
 80105fa:	f7f1 ff6a 	bl	80024d2 <HAL_FDCAN_IRQHandler>
}
 80105fe:	bf00      	nop
 8010600:	bd80      	pop	{r7, pc}
 8010602:	bf00      	nop
 8010604:	20003594 	.word	0x20003594

08010608 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	f003 0301 	and.w	r3, r3, #1
 8010618:	2b00      	cmp	r3, #0
 801061a:	d003      	beq.n	8010624 <HAL_FDCAN_RxFifo0Callback+0x1c>
  {
    canRxFifoCallback(_DEF_CAN2, hfdcan);
 801061c:	6879      	ldr	r1, [r7, #4]
 801061e:	2001      	movs	r0, #1
 8010620:	f7ff fe2e 	bl	8010280 <canRxFifoCallback>
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_FULL) != RESET)
 8010624:	683b      	ldr	r3, [r7, #0]
 8010626:	f003 0302 	and.w	r3, r3, #2
 801062a:	2b00      	cmp	r3, #0
 801062c:	d006      	beq.n	801063c <HAL_FDCAN_RxFifo0Callback+0x34>
  {
    can_tbl[_DEF_CAN2].fifo_full_cnt++;
 801062e:	4b0b      	ldr	r3, [pc, #44]	; (801065c <HAL_FDCAN_RxFifo0Callback+0x54>)
 8010630:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
 8010634:	3301      	adds	r3, #1
 8010636:	4a09      	ldr	r2, [pc, #36]	; (801065c <HAL_FDCAN_RxFifo0Callback+0x54>)
 8010638:	f8c2 3580 	str.w	r3, [r2, #1408]	; 0x580
  }

  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_MESSAGE_LOST) != RESET)
 801063c:	683b      	ldr	r3, [r7, #0]
 801063e:	f003 0304 	and.w	r3, r3, #4
 8010642:	2b00      	cmp	r3, #0
 8010644:	d006      	beq.n	8010654 <HAL_FDCAN_RxFifo0Callback+0x4c>
  {
    can_tbl[_DEF_CAN2].fifo_lost_cnt++;
 8010646:	4b05      	ldr	r3, [pc, #20]	; (801065c <HAL_FDCAN_RxFifo0Callback+0x54>)
 8010648:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 801064c:	3301      	adds	r3, #1
 801064e:	4a03      	ldr	r2, [pc, #12]	; (801065c <HAL_FDCAN_RxFifo0Callback+0x54>)
 8010650:	f8c2 3584 	str.w	r3, [r2, #1412]	; 0x584
  }
}
 8010654:	bf00      	nop
 8010656:	3708      	adds	r7, #8
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}
 801065c:	20003000 	.word	0x20003000

08010660 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b09e      	sub	sp, #120	; 0x78
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010668:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801066c:	2200      	movs	r2, #0
 801066e:	601a      	str	r2, [r3, #0]
 8010670:	605a      	str	r2, [r3, #4]
 8010672:	609a      	str	r2, [r3, #8]
 8010674:	60da      	str	r2, [r3, #12]
 8010676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8010678:	f107 0310 	add.w	r3, r7, #16
 801067c:	2254      	movs	r2, #84	; 0x54
 801067e:	2100      	movs	r1, #0
 8010680:	4618      	mov	r0, r3
 8010682:	f003 fcd5 	bl	8014030 <memset>
  if(fdcanHandle->Instance==FDCAN2)
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	4a21      	ldr	r2, [pc, #132]	; (8010710 <HAL_FDCAN_MspInit+0xb0>)
 801068c:	4293      	cmp	r3, r2
 801068e:	d13b      	bne.n	8010708 <HAL_FDCAN_MspInit+0xa8>
  {

    /** Initializes the peripherals clocks
    */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8010690:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010694:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8010696:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801069a:	64bb      	str	r3, [r7, #72]	; 0x48
  	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 801069c:	f107 0310 	add.w	r3, r7, #16
 80106a0:	4618      	mov	r0, r3
 80106a2:	f7f6 fc67 	bl	8006f74 <HAL_RCCEx_PeriphCLKConfig>
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80106a6:	4b1b      	ldr	r3, [pc, #108]	; (8010714 <HAL_FDCAN_MspInit+0xb4>)
 80106a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106aa:	4a1a      	ldr	r2, [pc, #104]	; (8010714 <HAL_FDCAN_MspInit+0xb4>)
 80106ac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80106b0:	6593      	str	r3, [r2, #88]	; 0x58
 80106b2:	4b18      	ldr	r3, [pc, #96]	; (8010714 <HAL_FDCAN_MspInit+0xb4>)
 80106b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80106b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80106ba:	60fb      	str	r3, [r7, #12]
 80106bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80106be:	4b15      	ldr	r3, [pc, #84]	; (8010714 <HAL_FDCAN_MspInit+0xb4>)
 80106c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106c2:	4a14      	ldr	r2, [pc, #80]	; (8010714 <HAL_FDCAN_MspInit+0xb4>)
 80106c4:	f043 0302 	orr.w	r3, r3, #2
 80106c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80106ca:	4b12      	ldr	r3, [pc, #72]	; (8010714 <HAL_FDCAN_MspInit+0xb4>)
 80106cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80106ce:	f003 0302 	and.w	r3, r3, #2
 80106d2:	60bb      	str	r3, [r7, #8]
 80106d4:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN2 GPIO Configuration
    PB12     ------> FDCAN2_RX
    PB6     ------> FDCAN2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 80106d6:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80106da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80106dc:	2302      	movs	r3, #2
 80106de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80106e0:	2300      	movs	r3, #0
 80106e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80106e4:	2300      	movs	r3, #0
 80106e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80106e8:	2309      	movs	r3, #9
 80106ea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80106ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80106f0:	4619      	mov	r1, r3
 80106f2:	4809      	ldr	r0, [pc, #36]	; (8010718 <HAL_FDCAN_MspInit+0xb8>)
 80106f4:	f7f2 f94e 	bl	8002994 <HAL_GPIO_Init>

    HAL_NVIC_SetPriority(FDCAN2_IT0_IRQn, 0, 0);
 80106f8:	2200      	movs	r2, #0
 80106fa:	2100      	movs	r1, #0
 80106fc:	2056      	movs	r0, #86	; 0x56
 80106fe:	f7f0 fdf4 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN2_IT0_IRQn);
 8010702:	2056      	movs	r0, #86	; 0x56
 8010704:	f7f0 fe0b 	bl	800131e <HAL_NVIC_EnableIRQ>
  }
}
 8010708:	bf00      	nop
 801070a:	3778      	adds	r7, #120	; 0x78
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}
 8010710:	40006800 	.word	0x40006800
 8010714:	40021000 	.word	0x40021000
 8010718:	48000400 	.word	0x48000400

0801071c <cliCan>:
}


#ifdef _USE_HW_CLI
void cliCan(cli_args_t *args)
{
 801071c:	b590      	push	{r4, r7, lr}
 801071e:	b09f      	sub	sp, #124	; 0x7c
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8010724:	2300      	movs	r3, #0
 8010726:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77



  if (args->argc == 1 && args->isStr(0, "info"))
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	881b      	ldrh	r3, [r3, #0]
 801072e:	2b01      	cmp	r3, #1
 8010730:	d159      	bne.n	80107e6 <cliCan+0xca>
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	695b      	ldr	r3, [r3, #20]
 8010736:	498d      	ldr	r1, [pc, #564]	; (801096c <cliCan+0x250>)
 8010738:	2000      	movs	r0, #0
 801073a:	4798      	blx	r3
 801073c:	4603      	mov	r3, r0
 801073e:	2b00      	cmp	r3, #0
 8010740:	d051      	beq.n	80107e6 <cliCan+0xca>
  {
    for (int i=0; i<CAN_MAX_CH; i++)
 8010742:	2300      	movs	r3, #0
 8010744:	673b      	str	r3, [r7, #112]	; 0x70
 8010746:	e048      	b.n	80107da <cliCan+0xbe>
    {
      cliPrintf("is_open       : %d\n", can_tbl[i].is_open);
 8010748:	4a89      	ldr	r2, [pc, #548]	; (8010970 <cliCan+0x254>)
 801074a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801074c:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 8010750:	fb01 f303 	mul.w	r3, r1, r3
 8010754:	4413      	add	r3, r2
 8010756:	3301      	adds	r3, #1
 8010758:	781b      	ldrb	r3, [r3, #0]
 801075a:	4619      	mov	r1, r3
 801075c:	4885      	ldr	r0, [pc, #532]	; (8010974 <cliCan+0x258>)
 801075e:	f7fb fdaf 	bl	800c2c0 <cliPrintf>

      cliPrintf("q_rx_full_cnt : %d\n", can_tbl[i].q_rx_full_cnt);
 8010762:	4a83      	ldr	r2, [pc, #524]	; (8010970 <cliCan+0x254>)
 8010764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010766:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 801076a:	fb01 f303 	mul.w	r3, r1, r3
 801076e:	4413      	add	r3, r2
 8010770:	3310      	adds	r3, #16
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	4619      	mov	r1, r3
 8010776:	4880      	ldr	r0, [pc, #512]	; (8010978 <cliCan+0x25c>)
 8010778:	f7fb fda2 	bl	800c2c0 <cliPrintf>
      cliPrintf("q_tx_full_cnt : %d\n", can_tbl[i].q_tx_full_cnt);
 801077c:	4a7c      	ldr	r2, [pc, #496]	; (8010970 <cliCan+0x254>)
 801077e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010780:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 8010784:	fb01 f303 	mul.w	r3, r1, r3
 8010788:	4413      	add	r3, r2
 801078a:	3314      	adds	r3, #20
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	4619      	mov	r1, r3
 8010790:	487a      	ldr	r0, [pc, #488]	; (801097c <cliCan+0x260>)
 8010792:	f7fb fd95 	bl	800c2c0 <cliPrintf>
      cliPrintf("fifo_full_cnt : %d\n", can_tbl[i].fifo_full_cnt);
 8010796:	4a76      	ldr	r2, [pc, #472]	; (8010970 <cliCan+0x254>)
 8010798:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801079a:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 801079e:	fb01 f303 	mul.w	r3, r1, r3
 80107a2:	4413      	add	r3, r2
 80107a4:	3318      	adds	r3, #24
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	4619      	mov	r1, r3
 80107aa:	4875      	ldr	r0, [pc, #468]	; (8010980 <cliCan+0x264>)
 80107ac:	f7fb fd88 	bl	800c2c0 <cliPrintf>
      cliPrintf("fifo_lost_cnt : %d\n", can_tbl[i].fifo_lost_cnt);
 80107b0:	4a6f      	ldr	r2, [pc, #444]	; (8010970 <cliCan+0x254>)
 80107b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107b4:	f44f 61ad 	mov.w	r1, #1384	; 0x568
 80107b8:	fb01 f303 	mul.w	r3, r1, r3
 80107bc:	4413      	add	r3, r2
 80107be:	331c      	adds	r3, #28
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	4619      	mov	r1, r3
 80107c4:	486f      	ldr	r0, [pc, #444]	; (8010984 <cliCan+0x268>)
 80107c6:	f7fb fd7b 	bl	800c2c0 <cliPrintf>
      canErrPrint(i);
 80107ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107cc:	b2db      	uxtb	r3, r3
 80107ce:	4618      	mov	r0, r3
 80107d0:	f7ff fdfc 	bl	80103cc <canErrPrint>
    for (int i=0; i<CAN_MAX_CH; i++)
 80107d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107d6:	3301      	adds	r3, #1
 80107d8:	673b      	str	r3, [r7, #112]	; 0x70
 80107da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80107dc:	2b01      	cmp	r3, #1
 80107de:	ddb3      	ble.n	8010748 <cliCan+0x2c>
    }
    ret = true;
 80107e0:	2301      	movs	r3, #1
 80107e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  }

  if (args->argc == 1 && args->isStr(0, "read"))
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	881b      	ldrh	r3, [r3, #0]
 80107ea:	2b01      	cmp	r3, #1
 80107ec:	d158      	bne.n	80108a0 <cliCan+0x184>
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	695b      	ldr	r3, [r3, #20]
 80107f2:	4965      	ldr	r1, [pc, #404]	; (8010988 <cliCan+0x26c>)
 80107f4:	2000      	movs	r0, #0
 80107f6:	4798      	blx	r3
 80107f8:	4603      	mov	r3, r0
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d050      	beq.n	80108a0 <cliCan+0x184>
  {
    uint32_t index = 0;
 80107fe:	2300      	movs	r3, #0
 8010800:	66fb      	str	r3, [r7, #108]	; 0x6c

    while(cliKeepLoop())
 8010802:	e045      	b.n	8010890 <cliCan+0x174>
    {
      if (canMsgAvailable(_DEF_CAN2))
 8010804:	2001      	movs	r0, #1
 8010806:	f7ff fb91 	bl	800ff2c <canMsgAvailable>
 801080a:	4603      	mov	r3, r0
 801080c:	2b00      	cmp	r3, #0
 801080e:	d03f      	beq.n	8010890 <cliCan+0x174>
      {
        can_msg_t msg;

        canMsgRead(_DEF_CAN2, &msg);
 8010810:	f107 0308 	add.w	r3, r7, #8
 8010814:	4619      	mov	r1, r3
 8010816:	2001      	movs	r0, #1
 8010818:	f7ff fc3e 	bl	8010098 <canMsgRead>

        index %= 1000;
 801081c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801081e:	4a5b      	ldr	r2, [pc, #364]	; (801098c <cliCan+0x270>)
 8010820:	fba2 1203 	umull	r1, r2, r2, r3
 8010824:	0992      	lsrs	r2, r2, #6
 8010826:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801082a:	fb01 f202 	mul.w	r2, r1, r2
 801082e:	1a9b      	subs	r3, r3, r2
 8010830:	66fb      	str	r3, [r7, #108]	; 0x6c
        cliPrintf("%03d(R) <- id ", index++);
 8010832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010834:	1c5a      	adds	r2, r3, #1
 8010836:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010838:	4619      	mov	r1, r3
 801083a:	4855      	ldr	r0, [pc, #340]	; (8010990 <cliCan+0x274>)
 801083c:	f7fb fd40 	bl	800c2c0 <cliPrintf>
        if (msg.id_type == CAN_STD)
 8010840:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010844:	2b00      	cmp	r3, #0
 8010846:	d103      	bne.n	8010850 <cliCan+0x134>
        {
          cliPrintf("std ");
 8010848:	4852      	ldr	r0, [pc, #328]	; (8010994 <cliCan+0x278>)
 801084a:	f7fb fd39 	bl	800c2c0 <cliPrintf>
 801084e:	e002      	b.n	8010856 <cliCan+0x13a>
        }
        else
        {
          cliPrintf("ext ");
 8010850:	4851      	ldr	r0, [pc, #324]	; (8010998 <cliCan+0x27c>)
 8010852:	f7fb fd35 	bl	800c2c0 <cliPrintf>
        }
        cliPrintf(": 0x%08X, L:%02d, ", msg.id, msg.length);
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	89ba      	ldrh	r2, [r7, #12]
 801085a:	4619      	mov	r1, r3
 801085c:	484f      	ldr	r0, [pc, #316]	; (801099c <cliCan+0x280>)
 801085e:	f7fb fd2f 	bl	800c2c0 <cliPrintf>
        for (int i=0; i<msg.length; i++)
 8010862:	2300      	movs	r3, #0
 8010864:	66bb      	str	r3, [r7, #104]	; 0x68
 8010866:	e00b      	b.n	8010880 <cliCan+0x164>
        {
          cliPrintf("0x%02X ", msg.data[i]);
 8010868:	f107 020e 	add.w	r2, r7, #14
 801086c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801086e:	4413      	add	r3, r2
 8010870:	781b      	ldrb	r3, [r3, #0]
 8010872:	4619      	mov	r1, r3
 8010874:	484a      	ldr	r0, [pc, #296]	; (80109a0 <cliCan+0x284>)
 8010876:	f7fb fd23 	bl	800c2c0 <cliPrintf>
        for (int i=0; i<msg.length; i++)
 801087a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801087c:	3301      	adds	r3, #1
 801087e:	66bb      	str	r3, [r7, #104]	; 0x68
 8010880:	89bb      	ldrh	r3, [r7, #12]
 8010882:	461a      	mov	r2, r3
 8010884:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010886:	4293      	cmp	r3, r2
 8010888:	dbee      	blt.n	8010868 <cliCan+0x14c>
        }
        cliPrintf("\n");
 801088a:	4846      	ldr	r0, [pc, #280]	; (80109a4 <cliCan+0x288>)
 801088c:	f7fb fd18 	bl	800c2c0 <cliPrintf>
    while(cliKeepLoop())
 8010890:	f7fb fe10 	bl	800c4b4 <cliKeepLoop>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d1b4      	bne.n	8010804 <cliCan+0xe8>
      }
    }
    ret = true;
 801089a:	2301      	movs	r3, #1
 801089c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  }

  if (args->argc == 1 && args->isStr(0, "send"))
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	881b      	ldrh	r3, [r3, #0]
 80108a4:	2b01      	cmp	r3, #1
 80108a6:	f040 8129 	bne.w	8010afc <cliCan+0x3e0>
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	695b      	ldr	r3, [r3, #20]
 80108ae:	493e      	ldr	r1, [pc, #248]	; (80109a8 <cliCan+0x28c>)
 80108b0:	2000      	movs	r0, #0
 80108b2:	4798      	blx	r3
 80108b4:	4603      	mov	r3, r0
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	f000 8120 	beq.w	8010afc <cliCan+0x3e0>
  {
    uint32_t pre_time;
    uint32_t index = 0;
 80108bc:	2300      	movs	r3, #0
 80108be:	663b      	str	r3, [r7, #96]	; 0x60
    uint32_t err_code;


    err_code = can_tbl[_DEF_CAN2].err_code;
 80108c0:	4b2b      	ldr	r3, [pc, #172]	; (8010970 <cliCan+0x254>)
 80108c2:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
 80108c6:	65fb      	str	r3, [r7, #92]	; 0x5c

    while(cliKeepLoop())
 80108c8:	e10f      	b.n	8010aea <cliCan+0x3ce>
    {
      can_msg_t msg;

      if (millis()-pre_time >= 1000)
 80108ca:	f7fa fe04 	bl	800b4d6 <millis>
 80108ce:	4602      	mov	r2, r0
 80108d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80108d2:	1ad3      	subs	r3, r2, r3
 80108d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80108d8:	f0c0 80a5 	bcc.w	8010a26 <cliCan+0x30a>
      {
        pre_time = millis();
 80108dc:	f7fa fdfb 	bl	800b4d6 <millis>
 80108e0:	6678      	str	r0, [r7, #100]	; 0x64

        msg.frame   = CAN_CLASSIC;
 80108e2:	2300      	movs	r3, #0
 80108e4:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
        msg.id_type = CAN_EXT;
 80108e8:	2301      	movs	r3, #1
 80108ea:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
        msg.dlc     = CAN_DLC_3;
 80108ee:	2303      	movs	r3, #3
 80108f0:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
        msg.id      = 0x314;
 80108f4:	f44f 7345 	mov.w	r3, #788	; 0x314
 80108f8:	60bb      	str	r3, [r7, #8]
        msg.length  = 3;
 80108fa:	2303      	movs	r3, #3
 80108fc:	81bb      	strh	r3, [r7, #12]
        msg.data[0] = 1;
 80108fe:	2301      	movs	r3, #1
 8010900:	73bb      	strb	r3, [r7, #14]
        msg.data[1] = 2;
 8010902:	2302      	movs	r3, #2
 8010904:	73fb      	strb	r3, [r7, #15]
        msg.data[2] = 3;
 8010906:	2303      	movs	r3, #3
 8010908:	743b      	strb	r3, [r7, #16]
        if (canMsgWrite(_DEF_CAN2, &msg, 10) > 0)
 801090a:	f107 0308 	add.w	r3, r7, #8
 801090e:	220a      	movs	r2, #10
 8010910:	4619      	mov	r1, r3
 8010912:	2001      	movs	r0, #1
 8010914:	f7ff fb28 	bl	800ff68 <canMsgWrite>
 8010918:	4603      	mov	r3, r0
 801091a:	2b00      	cmp	r3, #0
 801091c:	d05c      	beq.n	80109d8 <cliCan+0x2bc>
        {
          index %= 1000;
 801091e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010920:	4a1a      	ldr	r2, [pc, #104]	; (801098c <cliCan+0x270>)
 8010922:	fba2 1203 	umull	r1, r2, r2, r3
 8010926:	0992      	lsrs	r2, r2, #6
 8010928:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801092c:	fb01 f202 	mul.w	r2, r1, r2
 8010930:	1a9b      	subs	r3, r3, r2
 8010932:	663b      	str	r3, [r7, #96]	; 0x60
          cliPrintf("%03d(T) -> id ", index++);
 8010934:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010936:	1c5a      	adds	r2, r3, #1
 8010938:	663a      	str	r2, [r7, #96]	; 0x60
 801093a:	4619      	mov	r1, r3
 801093c:	481b      	ldr	r0, [pc, #108]	; (80109ac <cliCan+0x290>)
 801093e:	f7fb fcbf 	bl	800c2c0 <cliPrintf>
          if (msg.id_type == CAN_STD)
 8010942:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010946:	2b00      	cmp	r3, #0
 8010948:	d103      	bne.n	8010952 <cliCan+0x236>
          {
            cliPrintf("std ");
 801094a:	4812      	ldr	r0, [pc, #72]	; (8010994 <cliCan+0x278>)
 801094c:	f7fb fcb8 	bl	800c2c0 <cliPrintf>
 8010950:	e002      	b.n	8010958 <cliCan+0x23c>
          }
          else
          {
            cliPrintf("ext ");
 8010952:	4811      	ldr	r0, [pc, #68]	; (8010998 <cliCan+0x27c>)
 8010954:	f7fb fcb4 	bl	800c2c0 <cliPrintf>
          }
          cliPrintf(": 0x%08X, L:%02d, ", msg.id, msg.length);
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	89ba      	ldrh	r2, [r7, #12]
 801095c:	4619      	mov	r1, r3
 801095e:	480f      	ldr	r0, [pc, #60]	; (801099c <cliCan+0x280>)
 8010960:	f7fb fcae 	bl	800c2c0 <cliPrintf>
          for (int i=0; i<msg.length; i++)
 8010964:	2300      	movs	r3, #0
 8010966:	65bb      	str	r3, [r7, #88]	; 0x58
 8010968:	e02e      	b.n	80109c8 <cliCan+0x2ac>
 801096a:	bf00      	nop
 801096c:	080164fc 	.word	0x080164fc
 8010970:	20003000 	.word	0x20003000
 8010974:	08016504 	.word	0x08016504
 8010978:	08016518 	.word	0x08016518
 801097c:	0801652c 	.word	0x0801652c
 8010980:	08016540 	.word	0x08016540
 8010984:	08016554 	.word	0x08016554
 8010988:	08016568 	.word	0x08016568
 801098c:	10624dd3 	.word	0x10624dd3
 8010990:	08016570 	.word	0x08016570
 8010994:	08016580 	.word	0x08016580
 8010998:	08016588 	.word	0x08016588
 801099c:	08016590 	.word	0x08016590
 80109a0:	080165a4 	.word	0x080165a4
 80109a4:	080165ac 	.word	0x080165ac
 80109a8:	080165b0 	.word	0x080165b0
 80109ac:	080165b8 	.word	0x080165b8
          {
            cliPrintf("0x%02X ", msg.data[i]);
 80109b0:	f107 020e 	add.w	r2, r7, #14
 80109b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109b6:	4413      	add	r3, r2
 80109b8:	781b      	ldrb	r3, [r3, #0]
 80109ba:	4619      	mov	r1, r3
 80109bc:	4859      	ldr	r0, [pc, #356]	; (8010b24 <cliCan+0x408>)
 80109be:	f7fb fc7f 	bl	800c2c0 <cliPrintf>
          for (int i=0; i<msg.length; i++)
 80109c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109c4:	3301      	adds	r3, #1
 80109c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80109c8:	89bb      	ldrh	r3, [r7, #12]
 80109ca:	461a      	mov	r2, r3
 80109cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80109ce:	4293      	cmp	r3, r2
 80109d0:	dbee      	blt.n	80109b0 <cliCan+0x294>
          }
          cliPrintf("\n");
 80109d2:	4855      	ldr	r0, [pc, #340]	; (8010b28 <cliCan+0x40c>)
 80109d4:	f7fb fc74 	bl	800c2c0 <cliPrintf>
        }

        if (canGetRxErrCount(_DEF_CAN2) > 0 || canGetTxErrCount(_DEF_CAN2) > 0)
 80109d8:	2001      	movs	r0, #1
 80109da:	f7ff fb81 	bl	80100e0 <canGetRxErrCount>
 80109de:	4603      	mov	r3, r0
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d105      	bne.n	80109f0 <cliCan+0x2d4>
 80109e4:	2001      	movs	r0, #1
 80109e6:	f7ff fba5 	bl	8010134 <canGetTxErrCount>
 80109ea:	4603      	mov	r3, r0
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d00d      	beq.n	8010a0c <cliCan+0x2f0>
        {
          cliPrintf("ErrCnt : %d, %d\n", canGetRxErrCount(_DEF_CAN2), canGetTxErrCount(_DEF_CAN2));
 80109f0:	2001      	movs	r0, #1
 80109f2:	f7ff fb75 	bl	80100e0 <canGetRxErrCount>
 80109f6:	4603      	mov	r3, r0
 80109f8:	461c      	mov	r4, r3
 80109fa:	2001      	movs	r0, #1
 80109fc:	f7ff fb9a 	bl	8010134 <canGetTxErrCount>
 8010a00:	4603      	mov	r3, r0
 8010a02:	461a      	mov	r2, r3
 8010a04:	4621      	mov	r1, r4
 8010a06:	4849      	ldr	r0, [pc, #292]	; (8010b2c <cliCan+0x410>)
 8010a08:	f7fb fc5a 	bl	800c2c0 <cliPrintf>
        }

        if (err_int_cnt > 0)
 8010a0c:	4b48      	ldr	r3, [pc, #288]	; (8010b30 <cliCan+0x414>)
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d008      	beq.n	8010a26 <cliCan+0x30a>
        {
          cliPrintf("Cnt : %d\n",err_int_cnt);
 8010a14:	4b46      	ldr	r3, [pc, #280]	; (8010b30 <cliCan+0x414>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	4619      	mov	r1, r3
 8010a1a:	4846      	ldr	r0, [pc, #280]	; (8010b34 <cliCan+0x418>)
 8010a1c:	f7fb fc50 	bl	800c2c0 <cliPrintf>
          err_int_cnt = 0;
 8010a20:	4b43      	ldr	r3, [pc, #268]	; (8010b30 <cliCan+0x414>)
 8010a22:	2200      	movs	r2, #0
 8010a24:	601a      	str	r2, [r3, #0]
        }
      }

      if (can_tbl[_DEF_CAN2].err_code != err_code)
 8010a26:	4b44      	ldr	r3, [pc, #272]	; (8010b38 <cliCan+0x41c>)
 8010a28:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
 8010a2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010a2e:	429a      	cmp	r2, r3
 8010a30:	d00d      	beq.n	8010a4e <cliCan+0x332>
      {
        cliPrintf("ErrCode : 0x%X\n", can_tbl[_DEF_CAN2].err_code);
 8010a32:	4b41      	ldr	r3, [pc, #260]	; (8010b38 <cliCan+0x41c>)
 8010a34:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
 8010a38:	4619      	mov	r1, r3
 8010a3a:	4840      	ldr	r0, [pc, #256]	; (8010b3c <cliCan+0x420>)
 8010a3c:	f7fb fc40 	bl	800c2c0 <cliPrintf>
        canErrPrint(_DEF_CAN2);
 8010a40:	2001      	movs	r0, #1
 8010a42:	f7ff fcc3 	bl	80103cc <canErrPrint>
        err_code = can_tbl[_DEF_CAN2].err_code;
 8010a46:	4b3c      	ldr	r3, [pc, #240]	; (8010b38 <cliCan+0x41c>)
 8010a48:	f8d3 356c 	ldr.w	r3, [r3, #1388]	; 0x56c
 8010a4c:	65fb      	str	r3, [r7, #92]	; 0x5c
      }

      if (canUpdate())
 8010a4e:	f7ff fbd5 	bl	80101fc <canUpdate>
 8010a52:	4603      	mov	r3, r0
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d002      	beq.n	8010a5e <cliCan+0x342>
      {
        cliPrintf("BusOff Recovery\n");
 8010a58:	4839      	ldr	r0, [pc, #228]	; (8010b40 <cliCan+0x424>)
 8010a5a:	f7fb fc31 	bl	800c2c0 <cliPrintf>
      }


      if (canMsgAvailable(_DEF_CAN2))
 8010a5e:	2001      	movs	r0, #1
 8010a60:	f7ff fa64 	bl	800ff2c <canMsgAvailable>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d03f      	beq.n	8010aea <cliCan+0x3ce>
      {
        canMsgRead(_DEF_CAN2, &msg);
 8010a6a:	f107 0308 	add.w	r3, r7, #8
 8010a6e:	4619      	mov	r1, r3
 8010a70:	2001      	movs	r0, #1
 8010a72:	f7ff fb11 	bl	8010098 <canMsgRead>

        index %= 1000;
 8010a76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010a78:	4a32      	ldr	r2, [pc, #200]	; (8010b44 <cliCan+0x428>)
 8010a7a:	fba2 1203 	umull	r1, r2, r2, r3
 8010a7e:	0992      	lsrs	r2, r2, #6
 8010a80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010a84:	fb01 f202 	mul.w	r2, r1, r2
 8010a88:	1a9b      	subs	r3, r3, r2
 8010a8a:	663b      	str	r3, [r7, #96]	; 0x60
        cliPrintf("%03d(R) <- id ", index++);
 8010a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010a8e:	1c5a      	adds	r2, r3, #1
 8010a90:	663a      	str	r2, [r7, #96]	; 0x60
 8010a92:	4619      	mov	r1, r3
 8010a94:	482c      	ldr	r0, [pc, #176]	; (8010b48 <cliCan+0x42c>)
 8010a96:	f7fb fc13 	bl	800c2c0 <cliPrintf>
        if (msg.id_type == CAN_STD)
 8010a9a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d103      	bne.n	8010aaa <cliCan+0x38e>
        {
          cliPrintf("std ");
 8010aa2:	482a      	ldr	r0, [pc, #168]	; (8010b4c <cliCan+0x430>)
 8010aa4:	f7fb fc0c 	bl	800c2c0 <cliPrintf>
 8010aa8:	e002      	b.n	8010ab0 <cliCan+0x394>
        }
        else
        {
          cliPrintf("ext ");
 8010aaa:	4829      	ldr	r0, [pc, #164]	; (8010b50 <cliCan+0x434>)
 8010aac:	f7fb fc08 	bl	800c2c0 <cliPrintf>
        }
        cliPrintf(": 0x%08X, L:%02d, ", msg.id, msg.length);
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	89ba      	ldrh	r2, [r7, #12]
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	4827      	ldr	r0, [pc, #156]	; (8010b54 <cliCan+0x438>)
 8010ab8:	f7fb fc02 	bl	800c2c0 <cliPrintf>
        for (int i=0; i<msg.length; i++)
 8010abc:	2300      	movs	r3, #0
 8010abe:	657b      	str	r3, [r7, #84]	; 0x54
 8010ac0:	e00b      	b.n	8010ada <cliCan+0x3be>
        {
          cliPrintf("0x%02X ", msg.data[i]);
 8010ac2:	f107 020e 	add.w	r2, r7, #14
 8010ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ac8:	4413      	add	r3, r2
 8010aca:	781b      	ldrb	r3, [r3, #0]
 8010acc:	4619      	mov	r1, r3
 8010ace:	4815      	ldr	r0, [pc, #84]	; (8010b24 <cliCan+0x408>)
 8010ad0:	f7fb fbf6 	bl	800c2c0 <cliPrintf>
        for (int i=0; i<msg.length; i++)
 8010ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	657b      	str	r3, [r7, #84]	; 0x54
 8010ada:	89bb      	ldrh	r3, [r7, #12]
 8010adc:	461a      	mov	r2, r3
 8010ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010ae0:	4293      	cmp	r3, r2
 8010ae2:	dbee      	blt.n	8010ac2 <cliCan+0x3a6>
        }
        cliPrintf("\n");
 8010ae4:	4810      	ldr	r0, [pc, #64]	; (8010b28 <cliCan+0x40c>)
 8010ae6:	f7fb fbeb 	bl	800c2c0 <cliPrintf>
    while(cliKeepLoop())
 8010aea:	f7fb fce3 	bl	800c4b4 <cliKeepLoop>
 8010aee:	4603      	mov	r3, r0
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	f47f aeea 	bne.w	80108ca <cliCan+0x1ae>
      }
    }
    ret = true;
 8010af6:	2301      	movs	r3, #1
 8010af8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
  }

  if (ret == false)
 8010afc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8010b00:	f083 0301 	eor.w	r3, r3, #1
 8010b04:	b2db      	uxtb	r3, r3
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d008      	beq.n	8010b1c <cliCan+0x400>
  {
    cliPrintf("can info\n");
 8010b0a:	4813      	ldr	r0, [pc, #76]	; (8010b58 <cliCan+0x43c>)
 8010b0c:	f7fb fbd8 	bl	800c2c0 <cliPrintf>
    cliPrintf("can read\n");
 8010b10:	4812      	ldr	r0, [pc, #72]	; (8010b5c <cliCan+0x440>)
 8010b12:	f7fb fbd5 	bl	800c2c0 <cliPrintf>
    cliPrintf("can send\n");
 8010b16:	4812      	ldr	r0, [pc, #72]	; (8010b60 <cliCan+0x444>)
 8010b18:	f7fb fbd2 	bl	800c2c0 <cliPrintf>
  }
}
 8010b1c:	bf00      	nop
 8010b1e:	377c      	adds	r7, #124	; 0x7c
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd90      	pop	{r4, r7, pc}
 8010b24:	080165a4 	.word	0x080165a4
 8010b28:	080165ac 	.word	0x080165ac
 8010b2c:	080165c8 	.word	0x080165c8
 8010b30:	20003ad0 	.word	0x20003ad0
 8010b34:	080165dc 	.word	0x080165dc
 8010b38:	20003000 	.word	0x20003000
 8010b3c:	080165e8 	.word	0x080165e8
 8010b40:	080165f8 	.word	0x080165f8
 8010b44:	10624dd3 	.word	0x10624dd3
 8010b48:	08016570 	.word	0x08016570
 8010b4c:	08016580 	.word	0x08016580
 8010b50:	08016588 	.word	0x08016588
 8010b54:	08016590 	.word	0x08016590
 8010b58:	0801660c 	.word	0x0801660c
 8010b5c:	08016618 	.word	0x08016618
 8010b60:	08016624 	.word	0x08016624

08010b64 <cdcInit>:


static bool is_init = false;

bool cdcInit(void)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
  bool ret = true;
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	71fb      	strb	r3, [r7, #7]


  ret = cdcIfInit();
 8010b6e:	f7fe f977 	bl	800ee60 <cdcIfInit>
 8010b72:	4603      	mov	r3, r0
 8010b74:	71fb      	strb	r3, [r7, #7]

  is_init = ret;
 8010b76:	4a04      	ldr	r2, [pc, #16]	; (8010b88 <cdcInit+0x24>)
 8010b78:	79fb      	ldrb	r3, [r7, #7]
 8010b7a:	7013      	strb	r3, [r2, #0]

  return ret;
 8010b7c:	79fb      	ldrb	r3, [r7, #7]
}
 8010b7e:	4618      	mov	r0, r3
 8010b80:	3708      	adds	r7, #8
 8010b82:	46bd      	mov	sp, r7
 8010b84:	bd80      	pop	{r7, pc}
 8010b86:	bf00      	nop
 8010b88:	20003ad4 	.word	0x20003ad4

08010b8c <cdcIsConnect>:
{
  return is_init;
}

bool cdcIsConnect(void)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	af00      	add	r7, sp, #0
  return cdcIfIsConnected();
 8010b90:	f7fe f9f4 	bl	800ef7c <cdcIfIsConnected>
 8010b94:	4603      	mov	r3, r0
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	bd80      	pop	{r7, pc}

08010b9a <cdcAvailable>:

uint32_t cdcAvailable(void)
{
 8010b9a:	b580      	push	{r7, lr}
 8010b9c:	af00      	add	r7, sp, #0
  return cdcIfAvailable();
 8010b9e:	f7fe f97d 	bl	800ee9c <cdcIfAvailable>
 8010ba2:	4603      	mov	r3, r0
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	bd80      	pop	{r7, pc}

08010ba8 <cdcRead>:

uint8_t cdcRead(void)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	af00      	add	r7, sp, #0
  return cdcIfRead();
 8010bac:	f7fe f980 	bl	800eeb0 <cdcIfRead>
 8010bb0:	4603      	mov	r3, r0
}
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	bd80      	pop	{r7, pc}

08010bb6 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8010bb6:	b580      	push	{r7, lr}
 8010bb8:	b082      	sub	sp, #8
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
 8010bbe:	6039      	str	r1, [r7, #0]
  return cdcIfWrite(p_data, length);
 8010bc0:	6839      	ldr	r1, [r7, #0]
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f7fe f986 	bl	800eed4 <cdcIfWrite>
 8010bc8:	4603      	mov	r3, r0
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3708      	adds	r7, #8
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
	...

08010bd4 <gpioInit>:
#ifdef _USE_HW_CLI
static void cliGpio(cli_args_t *args);
#endif

bool gpioInit(void)
{
 8010bd4:	b580      	push	{r7, lr}
 8010bd6:	b086      	sub	sp, #24
 8010bd8:	af00      	add	r7, sp, #0
  bool ret = true;
 8010bda:	2301      	movs	r3, #1
 8010bdc:	74fb      	strb	r3, [r7, #19]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8010bde:	4b32      	ldr	r3, [pc, #200]	; (8010ca8 <gpioInit+0xd4>)
 8010be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010be2:	4a31      	ldr	r2, [pc, #196]	; (8010ca8 <gpioInit+0xd4>)
 8010be4:	f043 0304 	orr.w	r3, r3, #4
 8010be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010bea:	4b2f      	ldr	r3, [pc, #188]	; (8010ca8 <gpioInit+0xd4>)
 8010bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010bee:	f003 0304 	and.w	r3, r3, #4
 8010bf2:	60fb      	str	r3, [r7, #12]
 8010bf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8010bf6:	4b2c      	ldr	r3, [pc, #176]	; (8010ca8 <gpioInit+0xd4>)
 8010bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010bfa:	4a2b      	ldr	r2, [pc, #172]	; (8010ca8 <gpioInit+0xd4>)
 8010bfc:	f043 0308 	orr.w	r3, r3, #8
 8010c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010c02:	4b29      	ldr	r3, [pc, #164]	; (8010ca8 <gpioInit+0xd4>)
 8010c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c06:	f003 0308 	and.w	r3, r3, #8
 8010c0a:	60bb      	str	r3, [r7, #8]
 8010c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8010c0e:	4b26      	ldr	r3, [pc, #152]	; (8010ca8 <gpioInit+0xd4>)
 8010c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c12:	4a25      	ldr	r2, [pc, #148]	; (8010ca8 <gpioInit+0xd4>)
 8010c14:	f043 0301 	orr.w	r3, r3, #1
 8010c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010c1a:	4b23      	ldr	r3, [pc, #140]	; (8010ca8 <gpioInit+0xd4>)
 8010c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010c1e:	f003 0301 	and.w	r3, r3, #1
 8010c22:	607b      	str	r3, [r7, #4]
 8010c24:	687b      	ldr	r3, [r7, #4]


  for (int i=0; i<GPIO_MAX_CH; i++)
 8010c26:	2300      	movs	r3, #0
 8010c28:	617b      	str	r3, [r7, #20]
 8010c2a:	e01e      	b.n	8010c6a <gpioInit+0x96>
  {
    gpioPinMode(i, gpio_tbl[i].mode);
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	b2d8      	uxtb	r0, r3
 8010c30:	491e      	ldr	r1, [pc, #120]	; (8010cac <gpioInit+0xd8>)
 8010c32:	697a      	ldr	r2, [r7, #20]
 8010c34:	4613      	mov	r3, r2
 8010c36:	005b      	lsls	r3, r3, #1
 8010c38:	4413      	add	r3, r2
 8010c3a:	009b      	lsls	r3, r3, #2
 8010c3c:	440b      	add	r3, r1
 8010c3e:	3308      	adds	r3, #8
 8010c40:	781b      	ldrb	r3, [r3, #0]
 8010c42:	4619      	mov	r1, r3
 8010c44:	f000 f83e 	bl	8010cc4 <gpioPinMode>
    gpioPinWrite(i, gpio_tbl[i].init_value);
 8010c48:	697b      	ldr	r3, [r7, #20]
 8010c4a:	b2d8      	uxtb	r0, r3
 8010c4c:	4917      	ldr	r1, [pc, #92]	; (8010cac <gpioInit+0xd8>)
 8010c4e:	697a      	ldr	r2, [r7, #20]
 8010c50:	4613      	mov	r3, r2
 8010c52:	005b      	lsls	r3, r3, #1
 8010c54:	4413      	add	r3, r2
 8010c56:	009b      	lsls	r3, r3, #2
 8010c58:	440b      	add	r3, r1
 8010c5a:	330b      	adds	r3, #11
 8010c5c:	781b      	ldrb	r3, [r3, #0]
 8010c5e:	4619      	mov	r1, r3
 8010c60:	f000 f8b8 	bl	8010dd4 <gpioPinWrite>
  for (int i=0; i<GPIO_MAX_CH; i++)
 8010c64:	697b      	ldr	r3, [r7, #20]
 8010c66:	3301      	adds	r3, #1
 8010c68:	617b      	str	r3, [r7, #20]
 8010c6a:	697b      	ldr	r3, [r7, #20]
 8010c6c:	2b01      	cmp	r3, #1
 8010c6e:	dddd      	ble.n	8010c2c <gpioInit+0x58>
  }

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8010c70:	2200      	movs	r2, #0
 8010c72:	2100      	movs	r1, #0
 8010c74:	2028      	movs	r0, #40	; 0x28
 8010c76:	f7f0 fb38 	bl	80012ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8010c7a:	2028      	movs	r0, #40	; 0x28
 8010c7c:	f7f0 fb4f 	bl	800131e <HAL_NVIC_EnableIRQ>

#ifdef _USE_HW_CLI
  cliAdd("gpio", cliGpio);
 8010c80:	490b      	ldr	r1, [pc, #44]	; (8010cb0 <gpioInit+0xdc>)
 8010c82:	480c      	ldr	r0, [pc, #48]	; (8010cb4 <gpioInit+0xe0>)
 8010c84:	f7fb fc2c 	bl	800c4e0 <cliAdd>
#endif
#ifdef _USE_HW_LOG
  logPrintf("[%s] gpio_Init()\r\n", ret ? "OK":"NG");
 8010c88:	7cfb      	ldrb	r3, [r7, #19]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d001      	beq.n	8010c92 <gpioInit+0xbe>
 8010c8e:	4b0a      	ldr	r3, [pc, #40]	; (8010cb8 <gpioInit+0xe4>)
 8010c90:	e000      	b.n	8010c94 <gpioInit+0xc0>
 8010c92:	4b0a      	ldr	r3, [pc, #40]	; (8010cbc <gpioInit+0xe8>)
 8010c94:	4619      	mov	r1, r3
 8010c96:	480a      	ldr	r0, [pc, #40]	; (8010cc0 <gpioInit+0xec>)
 8010c98:	f7fb fde0 	bl	800c85c <logPrintf>
#endif
  return ret;
 8010c9c:	7cfb      	ldrb	r3, [r7, #19]
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3718      	adds	r7, #24
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	40021000 	.word	0x40021000
 8010cac:	08022bbc 	.word	0x08022bbc
 8010cb0:	08010f31 	.word	0x08010f31
 8010cb4:	08016630 	.word	0x08016630
 8010cb8:	08016638 	.word	0x08016638
 8010cbc:	0801663c 	.word	0x0801663c
 8010cc0:	08016640 	.word	0x08016640

08010cc4 <gpioPinMode>:

bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b088      	sub	sp, #32
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	4603      	mov	r3, r0
 8010ccc:	460a      	mov	r2, r1
 8010cce:	71fb      	strb	r3, [r7, #7]
 8010cd0:	4613      	mov	r3, r2
 8010cd2:	71bb      	strb	r3, [r7, #6]
  bool ret = true;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	77fb      	strb	r3, [r7, #31]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010cd8:	f107 0308 	add.w	r3, r7, #8
 8010cdc:	2200      	movs	r2, #0
 8010cde:	601a      	str	r2, [r3, #0]
 8010ce0:	605a      	str	r2, [r3, #4]
 8010ce2:	609a      	str	r2, [r3, #8]
 8010ce4:	60da      	str	r2, [r3, #12]
 8010ce6:	611a      	str	r2, [r3, #16]


  if (ch >= GPIO_MAX_CH)
 8010ce8:	79fb      	ldrb	r3, [r7, #7]
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d901      	bls.n	8010cf2 <gpioPinMode+0x2e>
  {
    return false;
 8010cee:	2300      	movs	r3, #0
 8010cf0:	e069      	b.n	8010dc6 <gpioPinMode+0x102>
  }

  switch(mode)
 8010cf2:	79bb      	ldrb	r3, [r7, #6]
 8010cf4:	2b08      	cmp	r3, #8
 8010cf6:	d84d      	bhi.n	8010d94 <gpioPinMode+0xd0>
 8010cf8:	a201      	add	r2, pc, #4	; (adr r2, 8010d00 <gpioPinMode+0x3c>)
 8010cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cfe:	bf00      	nop
 8010d00:	08010d25 	.word	0x08010d25
 8010d04:	08010d2f 	.word	0x08010d2f
 8010d08:	08010d3d 	.word	0x08010d3d
 8010d0c:	08010d47 	.word	0x08010d47
 8010d10:	08010d57 	.word	0x08010d57
 8010d14:	08010d65 	.word	0x08010d65
 8010d18:	08010d73 	.word	0x08010d73
 8010d1c:	08010d7d 	.word	0x08010d7d
 8010d20:	08010d8b 	.word	0x08010d8b
  {
    case _DEF_INPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010d24:	2300      	movs	r3, #0
 8010d26:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	613b      	str	r3, [r7, #16]
      break;
 8010d2c:	e032      	b.n	8010d94 <gpioPinMode+0xd0>

    case _DEF_INPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010d2e:	2300      	movs	r3, #0
 8010d30:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010d32:	2301      	movs	r3, #1
 8010d34:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010d36:	2302      	movs	r3, #2
 8010d38:	617b      	str	r3, [r7, #20]
      break;
 8010d3a:	e02b      	b.n	8010d94 <gpioPinMode+0xd0>

    case _DEF_INPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8010d40:	2302      	movs	r3, #2
 8010d42:	613b      	str	r3, [r7, #16]
      break;
 8010d44:	e026      	b.n	8010d94 <gpioPinMode+0xd0>

    case _DEF_INPUT_IT_RISING:
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8010d46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8010d4a:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010d50:	2302      	movs	r3, #2
 8010d52:	617b      	str	r3, [r7, #20]
      break;
 8010d54:	e01e      	b.n	8010d94 <gpioPinMode+0xd0>

    case _DEF_OUTPUT:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010d56:	2301      	movs	r3, #1
 8010d58:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010d5e:	2302      	movs	r3, #2
 8010d60:	617b      	str	r3, [r7, #20]
      break;
 8010d62:	e017      	b.n	8010d94 <gpioPinMode+0xd0>

    case _DEF_OUTPUT_PULLUP:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010d64:	2301      	movs	r3, #1
 8010d66:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8010d68:	2301      	movs	r3, #1
 8010d6a:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8010d6c:	2302      	movs	r3, #2
 8010d6e:	617b      	str	r3, [r7, #20]
      break;
 8010d70:	e010      	b.n	8010d94 <gpioPinMode+0xd0>

    case _DEF_OUTPUT_PULLDOWN:
      GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8010d72:	2301      	movs	r3, #1
 8010d74:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8010d76:	2302      	movs	r3, #2
 8010d78:	613b      	str	r3, [r7, #16]
      break;
 8010d7a:	e00b      	b.n	8010d94 <gpioPinMode+0xd0>

    case _DEF_INPUT_AF_PP:
      GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010d7c:	2302      	movs	r3, #2
 8010d7e:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d80:	2300      	movs	r3, #0
 8010d82:	613b      	str	r3, [r7, #16]
      GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8010d84:	2300      	movs	r3, #0
 8010d86:	617b      	str	r3, [r7, #20]
      break;
 8010d88:	e004      	b.n	8010d94 <gpioPinMode+0xd0>

    case _DEF_INPUT_ANALOG:
      GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8010d8a:	2303      	movs	r3, #3
 8010d8c:	60fb      	str	r3, [r7, #12]
      GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010d8e:	2300      	movs	r3, #0
 8010d90:	613b      	str	r3, [r7, #16]
      break;
 8010d92:	bf00      	nop
  }

  GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8010d94:	79fa      	ldrb	r2, [r7, #7]
 8010d96:	490e      	ldr	r1, [pc, #56]	; (8010dd0 <gpioPinMode+0x10c>)
 8010d98:	4613      	mov	r3, r2
 8010d9a:	005b      	lsls	r3, r3, #1
 8010d9c:	4413      	add	r3, r2
 8010d9e:	009b      	lsls	r3, r3, #2
 8010da0:	440b      	add	r3, r1
 8010da2:	3304      	adds	r3, #4
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8010da8:	79fa      	ldrb	r2, [r7, #7]
 8010daa:	4909      	ldr	r1, [pc, #36]	; (8010dd0 <gpioPinMode+0x10c>)
 8010dac:	4613      	mov	r3, r2
 8010dae:	005b      	lsls	r3, r3, #1
 8010db0:	4413      	add	r3, r2
 8010db2:	009b      	lsls	r3, r3, #2
 8010db4:	440b      	add	r3, r1
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	f107 0208 	add.w	r2, r7, #8
 8010dbc:	4611      	mov	r1, r2
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7f1 fde8 	bl	8002994 <HAL_GPIO_Init>

  return ret;
 8010dc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3720      	adds	r7, #32
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}
 8010dce:	bf00      	nop
 8010dd0:	08022bbc 	.word	0x08022bbc

08010dd4 <gpioPinWrite>:

void gpioPinWrite(uint8_t ch, bool value)
{
 8010dd4:	b590      	push	{r4, r7, lr}
 8010dd6:	b083      	sub	sp, #12
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	4603      	mov	r3, r0
 8010ddc:	460a      	mov	r2, r1
 8010dde:	71fb      	strb	r3, [r7, #7]
 8010de0:	4613      	mov	r3, r2
 8010de2:	71bb      	strb	r3, [r7, #6]
  if (ch >= GPIO_MAX_CH)
 8010de4:	79fb      	ldrb	r3, [r7, #7]
 8010de6:	2b01      	cmp	r3, #1
 8010de8:	d840      	bhi.n	8010e6c <gpioPinWrite+0x98>
  {
    return;
  }

  if (value)
 8010dea:	79bb      	ldrb	r3, [r7, #6]
 8010dec:	2b00      	cmp	r3, #0
 8010dee:	d01e      	beq.n	8010e2e <gpioPinWrite+0x5a>
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8010df0:	79fa      	ldrb	r2, [r7, #7]
 8010df2:	4920      	ldr	r1, [pc, #128]	; (8010e74 <gpioPinWrite+0xa0>)
 8010df4:	4613      	mov	r3, r2
 8010df6:	005b      	lsls	r3, r3, #1
 8010df8:	4413      	add	r3, r2
 8010dfa:	009b      	lsls	r3, r3, #2
 8010dfc:	440b      	add	r3, r1
 8010dfe:	6818      	ldr	r0, [r3, #0]
 8010e00:	79fa      	ldrb	r2, [r7, #7]
 8010e02:	491c      	ldr	r1, [pc, #112]	; (8010e74 <gpioPinWrite+0xa0>)
 8010e04:	4613      	mov	r3, r2
 8010e06:	005b      	lsls	r3, r3, #1
 8010e08:	4413      	add	r3, r2
 8010e0a:	009b      	lsls	r3, r3, #2
 8010e0c:	440b      	add	r3, r1
 8010e0e:	3304      	adds	r3, #4
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	b299      	uxth	r1, r3
 8010e14:	79fa      	ldrb	r2, [r7, #7]
 8010e16:	4c17      	ldr	r4, [pc, #92]	; (8010e74 <gpioPinWrite+0xa0>)
 8010e18:	4613      	mov	r3, r2
 8010e1a:	005b      	lsls	r3, r3, #1
 8010e1c:	4413      	add	r3, r2
 8010e1e:	009b      	lsls	r3, r3, #2
 8010e20:	4423      	add	r3, r4
 8010e22:	3309      	adds	r3, #9
 8010e24:	781b      	ldrb	r3, [r3, #0]
 8010e26:	461a      	mov	r2, r3
 8010e28:	f7f1 ff4e 	bl	8002cc8 <HAL_GPIO_WritePin>
 8010e2c:	e01f      	b.n	8010e6e <gpioPinWrite+0x9a>
  }
  else
  {
    HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8010e2e:	79fa      	ldrb	r2, [r7, #7]
 8010e30:	4910      	ldr	r1, [pc, #64]	; (8010e74 <gpioPinWrite+0xa0>)
 8010e32:	4613      	mov	r3, r2
 8010e34:	005b      	lsls	r3, r3, #1
 8010e36:	4413      	add	r3, r2
 8010e38:	009b      	lsls	r3, r3, #2
 8010e3a:	440b      	add	r3, r1
 8010e3c:	6818      	ldr	r0, [r3, #0]
 8010e3e:	79fa      	ldrb	r2, [r7, #7]
 8010e40:	490c      	ldr	r1, [pc, #48]	; (8010e74 <gpioPinWrite+0xa0>)
 8010e42:	4613      	mov	r3, r2
 8010e44:	005b      	lsls	r3, r3, #1
 8010e46:	4413      	add	r3, r2
 8010e48:	009b      	lsls	r3, r3, #2
 8010e4a:	440b      	add	r3, r1
 8010e4c:	3304      	adds	r3, #4
 8010e4e:	681b      	ldr	r3, [r3, #0]
 8010e50:	b299      	uxth	r1, r3
 8010e52:	79fa      	ldrb	r2, [r7, #7]
 8010e54:	4c07      	ldr	r4, [pc, #28]	; (8010e74 <gpioPinWrite+0xa0>)
 8010e56:	4613      	mov	r3, r2
 8010e58:	005b      	lsls	r3, r3, #1
 8010e5a:	4413      	add	r3, r2
 8010e5c:	009b      	lsls	r3, r3, #2
 8010e5e:	4423      	add	r3, r4
 8010e60:	330a      	adds	r3, #10
 8010e62:	781b      	ldrb	r3, [r3, #0]
 8010e64:	461a      	mov	r2, r3
 8010e66:	f7f1 ff2f 	bl	8002cc8 <HAL_GPIO_WritePin>
 8010e6a:	e000      	b.n	8010e6e <gpioPinWrite+0x9a>
    return;
 8010e6c:	bf00      	nop
  }
}
 8010e6e:	370c      	adds	r7, #12
 8010e70:	46bd      	mov	sp, r7
 8010e72:	bd90      	pop	{r4, r7, pc}
 8010e74:	08022bbc 	.word	0x08022bbc

08010e78 <gpioPinRead>:

bool gpioPinRead(uint8_t ch)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b084      	sub	sp, #16
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	4603      	mov	r3, r0
 8010e80:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8010e82:	2300      	movs	r3, #0
 8010e84:	73fb      	strb	r3, [r7, #15]

  if (ch >= GPIO_MAX_CH)
 8010e86:	79fb      	ldrb	r3, [r7, #7]
 8010e88:	2b01      	cmp	r3, #1
 8010e8a:	d901      	bls.n	8010e90 <gpioPinRead+0x18>
  {
    return false;
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	e024      	b.n	8010eda <gpioPinRead+0x62>
  }

  if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8010e90:	79fa      	ldrb	r2, [r7, #7]
 8010e92:	4914      	ldr	r1, [pc, #80]	; (8010ee4 <gpioPinRead+0x6c>)
 8010e94:	4613      	mov	r3, r2
 8010e96:	005b      	lsls	r3, r3, #1
 8010e98:	4413      	add	r3, r2
 8010e9a:	009b      	lsls	r3, r3, #2
 8010e9c:	440b      	add	r3, r1
 8010e9e:	6818      	ldr	r0, [r3, #0]
 8010ea0:	79fa      	ldrb	r2, [r7, #7]
 8010ea2:	4910      	ldr	r1, [pc, #64]	; (8010ee4 <gpioPinRead+0x6c>)
 8010ea4:	4613      	mov	r3, r2
 8010ea6:	005b      	lsls	r3, r3, #1
 8010ea8:	4413      	add	r3, r2
 8010eaa:	009b      	lsls	r3, r3, #2
 8010eac:	440b      	add	r3, r1
 8010eae:	3304      	adds	r3, #4
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	b29b      	uxth	r3, r3
 8010eb4:	4619      	mov	r1, r3
 8010eb6:	f7f1 feef 	bl	8002c98 <HAL_GPIO_ReadPin>
 8010eba:	4603      	mov	r3, r0
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	79fa      	ldrb	r2, [r7, #7]
 8010ec0:	4908      	ldr	r1, [pc, #32]	; (8010ee4 <gpioPinRead+0x6c>)
 8010ec2:	4613      	mov	r3, r2
 8010ec4:	005b      	lsls	r3, r3, #1
 8010ec6:	4413      	add	r3, r2
 8010ec8:	009b      	lsls	r3, r3, #2
 8010eca:	440b      	add	r3, r1
 8010ecc:	3309      	adds	r3, #9
 8010ece:	781b      	ldrb	r3, [r3, #0]
 8010ed0:	4298      	cmp	r0, r3
 8010ed2:	d101      	bne.n	8010ed8 <gpioPinRead+0x60>
  {
    ret = true;
 8010ed4:	2301      	movs	r3, #1
 8010ed6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eda:	4618      	mov	r0, r3
 8010edc:	3710      	adds	r7, #16
 8010ede:	46bd      	mov	sp, r7
 8010ee0:	bd80      	pop	{r7, pc}
 8010ee2:	bf00      	nop
 8010ee4:	08022bbc 	.word	0x08022bbc

08010ee8 <gpioPinToggle>:

void gpioPinToggle(uint8_t ch)
{
 8010ee8:	b580      	push	{r7, lr}
 8010eea:	b082      	sub	sp, #8
 8010eec:	af00      	add	r7, sp, #0
 8010eee:	4603      	mov	r3, r0
 8010ef0:	71fb      	strb	r3, [r7, #7]
  if (ch >= GPIO_MAX_CH)
 8010ef2:	79fb      	ldrb	r3, [r7, #7]
 8010ef4:	2b01      	cmp	r3, #1
 8010ef6:	d815      	bhi.n	8010f24 <gpioPinToggle+0x3c>
  {
    return;
  }

  HAL_GPIO_TogglePin(gpio_tbl[ch].port, gpio_tbl[ch].pin);
 8010ef8:	79fa      	ldrb	r2, [r7, #7]
 8010efa:	490c      	ldr	r1, [pc, #48]	; (8010f2c <gpioPinToggle+0x44>)
 8010efc:	4613      	mov	r3, r2
 8010efe:	005b      	lsls	r3, r3, #1
 8010f00:	4413      	add	r3, r2
 8010f02:	009b      	lsls	r3, r3, #2
 8010f04:	440b      	add	r3, r1
 8010f06:	6818      	ldr	r0, [r3, #0]
 8010f08:	79fa      	ldrb	r2, [r7, #7]
 8010f0a:	4908      	ldr	r1, [pc, #32]	; (8010f2c <gpioPinToggle+0x44>)
 8010f0c:	4613      	mov	r3, r2
 8010f0e:	005b      	lsls	r3, r3, #1
 8010f10:	4413      	add	r3, r2
 8010f12:	009b      	lsls	r3, r3, #2
 8010f14:	440b      	add	r3, r1
 8010f16:	3304      	adds	r3, #4
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	b29b      	uxth	r3, r3
 8010f1c:	4619      	mov	r1, r3
 8010f1e:	f7f1 feeb 	bl	8002cf8 <HAL_GPIO_TogglePin>
 8010f22:	e000      	b.n	8010f26 <gpioPinToggle+0x3e>
    return;
 8010f24:	bf00      	nop
}
 8010f26:	3708      	adds	r7, #8
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	bd80      	pop	{r7, pc}
 8010f2c:	08022bbc 	.word	0x08022bbc

08010f30 <cliGpio>:

#ifdef _USE_HW_CLI
void cliGpio(cli_args_t *args)
{
 8010f30:	b590      	push	{r4, r7, lr}
 8010f32:	b087      	sub	sp, #28
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 1 && args->isStr(0, "show") == true)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	881b      	ldrh	r3, [r3, #0]
 8010f40:	2b01      	cmp	r3, #1
 8010f42:	d128      	bne.n	8010f96 <cliGpio+0x66>
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	695b      	ldr	r3, [r3, #20]
 8010f48:	4947      	ldr	r1, [pc, #284]	; (8011068 <cliGpio+0x138>)
 8010f4a:	2000      	movs	r0, #0
 8010f4c:	4798      	blx	r3
 8010f4e:	4603      	mov	r3, r0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d020      	beq.n	8010f96 <cliGpio+0x66>
  {
    while(cliKeepLoop())
 8010f54:	e018      	b.n	8010f88 <cliGpio+0x58>
    {
      for (int i=0; i<GPIO_MAX_CH; i++)
 8010f56:	2300      	movs	r3, #0
 8010f58:	613b      	str	r3, [r7, #16]
 8010f5a:	e00c      	b.n	8010f76 <cliGpio+0x46>
      {
        cliPrintf("%d", gpioPinRead(i));
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7ff ff89 	bl	8010e78 <gpioPinRead>
 8010f66:	4603      	mov	r3, r0
 8010f68:	4619      	mov	r1, r3
 8010f6a:	4840      	ldr	r0, [pc, #256]	; (801106c <cliGpio+0x13c>)
 8010f6c:	f7fb f9a8 	bl	800c2c0 <cliPrintf>
      for (int i=0; i<GPIO_MAX_CH; i++)
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	3301      	adds	r3, #1
 8010f74:	613b      	str	r3, [r7, #16]
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	2b01      	cmp	r3, #1
 8010f7a:	ddef      	ble.n	8010f5c <cliGpio+0x2c>
      }
      cliPrintf("\r\n");
 8010f7c:	483c      	ldr	r0, [pc, #240]	; (8011070 <cliGpio+0x140>)
 8010f7e:	f7fb f99f 	bl	800c2c0 <cliPrintf>
      delay(100);
 8010f82:	2064      	movs	r0, #100	; 0x64
 8010f84:	f7fa fa94 	bl	800b4b0 <delay>
    while(cliKeepLoop())
 8010f88:	f7fb fa94 	bl	800c4b4 <cliKeepLoop>
 8010f8c:	4603      	mov	r3, r0
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d1e1      	bne.n	8010f56 <cliGpio+0x26>
    }
    ret = true;
 8010f92:	2301      	movs	r3, #1
 8010f94:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	881b      	ldrh	r3, [r3, #0]
 8010f9a:	2b02      	cmp	r3, #2
 8010f9c:	d123      	bne.n	8010fe6 <cliGpio+0xb6>
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	695b      	ldr	r3, [r3, #20]
 8010fa2:	4934      	ldr	r1, [pc, #208]	; (8011074 <cliGpio+0x144>)
 8010fa4:	2000      	movs	r0, #0
 8010fa6:	4798      	blx	r3
 8010fa8:	4603      	mov	r3, r0
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d01b      	beq.n	8010fe6 <cliGpio+0xb6>
  {
    uint8_t ch;

    ch = (uint8_t)args->getData(1);
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	689b      	ldr	r3, [r3, #8]
 8010fb2:	2001      	movs	r0, #1
 8010fb4:	4798      	blx	r3
 8010fb6:	4603      	mov	r3, r0
 8010fb8:	73fb      	strb	r3, [r7, #15]

    while(cliKeepLoop())
 8010fba:	e00d      	b.n	8010fd8 <cliGpio+0xa8>
    {
      cliPrintf("gpio read %d : %d\r\n", ch, gpioPinRead(ch));
 8010fbc:	7bfc      	ldrb	r4, [r7, #15]
 8010fbe:	7bfb      	ldrb	r3, [r7, #15]
 8010fc0:	4618      	mov	r0, r3
 8010fc2:	f7ff ff59 	bl	8010e78 <gpioPinRead>
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	461a      	mov	r2, r3
 8010fca:	4621      	mov	r1, r4
 8010fcc:	482a      	ldr	r0, [pc, #168]	; (8011078 <cliGpio+0x148>)
 8010fce:	f7fb f977 	bl	800c2c0 <cliPrintf>
      delay(100);
 8010fd2:	2064      	movs	r0, #100	; 0x64
 8010fd4:	f7fa fa6c 	bl	800b4b0 <delay>
    while(cliKeepLoop())
 8010fd8:	f7fb fa6c 	bl	800c4b4 <cliKeepLoop>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d1ec      	bne.n	8010fbc <cliGpio+0x8c>
    }

    ret = true;
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	75fb      	strb	r3, [r7, #23]
  }

  if (args->argc == 3 && args->isStr(0, "write") == true)
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	881b      	ldrh	r3, [r3, #0]
 8010fea:	2b03      	cmp	r3, #3
 8010fec:	d126      	bne.n	801103c <cliGpio+0x10c>
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	695b      	ldr	r3, [r3, #20]
 8010ff2:	4922      	ldr	r1, [pc, #136]	; (801107c <cliGpio+0x14c>)
 8010ff4:	2000      	movs	r0, #0
 8010ff6:	4798      	blx	r3
 8010ff8:	4603      	mov	r3, r0
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d01e      	beq.n	801103c <cliGpio+0x10c>
  {
    uint8_t ch;
    uint8_t data;

    ch   = (uint8_t)args->getData(1);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	689b      	ldr	r3, [r3, #8]
 8011002:	2001      	movs	r0, #1
 8011004:	4798      	blx	r3
 8011006:	4603      	mov	r3, r0
 8011008:	73bb      	strb	r3, [r7, #14]
    data = (uint8_t)args->getData(2);
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	689b      	ldr	r3, [r3, #8]
 801100e:	2002      	movs	r0, #2
 8011010:	4798      	blx	r3
 8011012:	4603      	mov	r3, r0
 8011014:	737b      	strb	r3, [r7, #13]

    gpioPinWrite(ch, data);
 8011016:	7b7b      	ldrb	r3, [r7, #13]
 8011018:	2b00      	cmp	r3, #0
 801101a:	bf14      	ite	ne
 801101c:	2301      	movne	r3, #1
 801101e:	2300      	moveq	r3, #0
 8011020:	b2da      	uxtb	r2, r3
 8011022:	7bbb      	ldrb	r3, [r7, #14]
 8011024:	4611      	mov	r1, r2
 8011026:	4618      	mov	r0, r3
 8011028:	f7ff fed4 	bl	8010dd4 <gpioPinWrite>

    cliPrintf("gpio write %d : %d\r\n", ch, data);
 801102c:	7bbb      	ldrb	r3, [r7, #14]
 801102e:	7b7a      	ldrb	r2, [r7, #13]
 8011030:	4619      	mov	r1, r3
 8011032:	4813      	ldr	r0, [pc, #76]	; (8011080 <cliGpio+0x150>)
 8011034:	f7fb f944 	bl	800c2c0 <cliPrintf>
    ret = true;
 8011038:	2301      	movs	r3, #1
 801103a:	75fb      	strb	r3, [r7, #23]
  }

  if (ret != true)
 801103c:	7dfb      	ldrb	r3, [r7, #23]
 801103e:	f083 0301 	eor.w	r3, r3, #1
 8011042:	b2db      	uxtb	r3, r3
 8011044:	2b00      	cmp	r3, #0
 8011046:	d00a      	beq.n	801105e <cliGpio+0x12e>
  {
    cliPrintf("gpio show\r\n");
 8011048:	480e      	ldr	r0, [pc, #56]	; (8011084 <cliGpio+0x154>)
 801104a:	f7fb f939 	bl	800c2c0 <cliPrintf>
    cliPrintf("gpio read ch[0~%d]\r\n", GPIO_MAX_CH-1);
 801104e:	2101      	movs	r1, #1
 8011050:	480d      	ldr	r0, [pc, #52]	; (8011088 <cliGpio+0x158>)
 8011052:	f7fb f935 	bl	800c2c0 <cliPrintf>
    cliPrintf("gpio write ch[0~%d] 0:1\r\n", GPIO_MAX_CH-1);
 8011056:	2101      	movs	r1, #1
 8011058:	480c      	ldr	r0, [pc, #48]	; (801108c <cliGpio+0x15c>)
 801105a:	f7fb f931 	bl	800c2c0 <cliPrintf>
  }
}
 801105e:	bf00      	nop
 8011060:	371c      	adds	r7, #28
 8011062:	46bd      	mov	sp, r7
 8011064:	bd90      	pop	{r4, r7, pc}
 8011066:	bf00      	nop
 8011068:	08016654 	.word	0x08016654
 801106c:	0801665c 	.word	0x0801665c
 8011070:	08016660 	.word	0x08016660
 8011074:	08016664 	.word	0x08016664
 8011078:	0801666c 	.word	0x0801666c
 801107c:	08016680 	.word	0x08016680
 8011080:	08016688 	.word	0x08016688
 8011084:	080166a0 	.word	0x080166a0
 8011088:	080166ac 	.word	0x080166ac
 801108c:	080166c4 	.word	0x080166c4

08011090 <constrain>:
int16_t qPercent(fix12_t q);
int16_t qMultiply(fix12_t q, int16_t input);
fix12_t qConstruct(int16_t num, int16_t den);

static inline int constrain(int amt, int low, int high)
{
 8011090:	b480      	push	{r7}
 8011092:	b085      	sub	sp, #20
 8011094:	af00      	add	r7, sp, #0
 8011096:	60f8      	str	r0, [r7, #12]
 8011098:	60b9      	str	r1, [r7, #8]
 801109a:	607a      	str	r2, [r7, #4]
    if (amt < low)
 801109c:	68fa      	ldr	r2, [r7, #12]
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	429a      	cmp	r2, r3
 80110a2:	da01      	bge.n	80110a8 <constrain+0x18>
        return low;
 80110a4:	68bb      	ldr	r3, [r7, #8]
 80110a6:	e006      	b.n	80110b6 <constrain+0x26>
    else if (amt > high)
 80110a8:	68fa      	ldr	r2, [r7, #12]
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	429a      	cmp	r2, r3
 80110ae:	dd01      	ble.n	80110b4 <constrain+0x24>
        return high;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	e000      	b.n	80110b6 <constrain+0x26>
    else
        return amt;
 80110b4:	68fb      	ldr	r3, [r7, #12]
}
 80110b6:	4618      	mov	r0, r3
 80110b8:	3714      	adds	r7, #20
 80110ba:	46bd      	mov	sp, r7
 80110bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c0:	4770      	bx	lr
	...

080110c4 <i2cInit>:
static void delayUs(uint32_t us);



bool i2cInit(void)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b082      	sub	sp, #8
 80110c8:	af00      	add	r7, sp, #0
  uint32_t i;


  for (i=0; i<I2C_MAX_CH; i++)
 80110ca:	2300      	movs	r3, #0
 80110cc:	607b      	str	r3, [r7, #4]
 80110ce:	e00c      	b.n	80110ea <i2cInit+0x26>
  {
    i2c_errcount[i] = 0;
 80110d0:	4a0d      	ldr	r2, [pc, #52]	; (8011108 <i2cInit+0x44>)
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	2100      	movs	r1, #0
 80110d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    is_open[i] = false;
 80110da:	4a0c      	ldr	r2, [pc, #48]	; (801110c <i2cInit+0x48>)
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	4413      	add	r3, r2
 80110e0:	2200      	movs	r2, #0
 80110e2:	701a      	strb	r2, [r3, #0]
  for (i=0; i<I2C_MAX_CH; i++)
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	3301      	adds	r3, #1
 80110e8:	607b      	str	r3, [r7, #4]
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2b01      	cmp	r3, #1
 80110ee:	d9ef      	bls.n	80110d0 <i2cInit+0xc>
    mutex_lock[i] = osMutexCreate(&mutex_lock_def[i]);
#endif
  }

#ifdef _USE_HW_CLI
  cliAdd("i2c", cliI2C);
 80110f0:	4907      	ldr	r1, [pc, #28]	; (8011110 <i2cInit+0x4c>)
 80110f2:	4808      	ldr	r0, [pc, #32]	; (8011114 <i2cInit+0x50>)
 80110f4:	f7fb f9f4 	bl	800c4e0 <cliAdd>
#endif

  is_init = true;
 80110f8:	4b07      	ldr	r3, [pc, #28]	; (8011118 <i2cInit+0x54>)
 80110fa:	2201      	movs	r2, #1
 80110fc:	701a      	strb	r2, [r3, #0]
  return true;
 80110fe:	2301      	movs	r3, #1
}
 8011100:	4618      	mov	r0, r3
 8011102:	3708      	adds	r7, #8
 8011104:	46bd      	mov	sp, r7
 8011106:	bd80      	pop	{r7, pc}
 8011108:	20003ad8 	.word	0x20003ad8
 801110c:	20003ae4 	.word	0x20003ae4
 8011110:	0801165d 	.word	0x0801165d
 8011114:	080166e0 	.word	0x080166e0
 8011118:	20003ae2 	.word	0x20003ae2

0801111c <i2cOpen>:
{
  return is_init;
}

bool i2cOpen(uint8_t ch, i2c_freq_t freq_khz)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b084      	sub	sp, #16
 8011120:	af00      	add	r7, sp, #0
 8011122:	4603      	mov	r3, r0
 8011124:	460a      	mov	r2, r1
 8011126:	71fb      	strb	r3, [r7, #7]
 8011128:	4613      	mov	r3, r2
 801112a:	71bb      	strb	r3, [r7, #6]
  bool ret = false;
 801112c:	2300      	movs	r3, #0
 801112e:	73fb      	strb	r3, [r7, #15]

  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8011130:	79fa      	ldrb	r2, [r7, #7]
 8011132:	4928      	ldr	r1, [pc, #160]	; (80111d4 <i2cOpen+0xb8>)
 8011134:	4613      	mov	r3, r2
 8011136:	009b      	lsls	r3, r3, #2
 8011138:	4413      	add	r3, r2
 801113a:	009b      	lsls	r3, r3, #2
 801113c:	440b      	add	r3, r1
 801113e:	681b      	ldr	r3, [r3, #0]
 8011140:	60bb      	str	r3, [r7, #8]

  if (ch >= I2C_MAX_CH)
 8011142:	79fb      	ldrb	r3, [r7, #7]
 8011144:	2b01      	cmp	r3, #1
 8011146:	d901      	bls.n	801114c <i2cOpen+0x30>
  {
    return false;
 8011148:	2300      	movs	r3, #0
 801114a:	e03e      	b.n	80111ca <i2cOpen+0xae>
  }


  switch(ch)
 801114c:	79fb      	ldrb	r3, [r7, #7]
 801114e:	2b01      	cmp	r3, #1
 8011150:	d13a      	bne.n	80111c8 <i2cOpen+0xac>
  {
    case _DEF_I2C2:
      i2c_freq[ch] = freq_khz;
 8011152:	79fb      	ldrb	r3, [r7, #7]
 8011154:	4920      	ldr	r1, [pc, #128]	; (80111d8 <i2cOpen+0xbc>)
 8011156:	79ba      	ldrb	r2, [r7, #6]
 8011158:	54ca      	strb	r2, [r1, r3]
      is_open[ch] = false;
 801115a:	79fb      	ldrb	r3, [r7, #7]
 801115c:	4a1f      	ldr	r2, [pc, #124]	; (80111dc <i2cOpen+0xc0>)
 801115e:	2100      	movs	r1, #0
 8011160:	54d1      	strb	r1, [r2, r3]

      p_handle->Instance             = I2C2;
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	4a1e      	ldr	r2, [pc, #120]	; (80111e0 <i2cOpen+0xc4>)
 8011166:	601a      	str	r2, [r3, #0]
      p_handle->Init.Timing          = i2c_freq_tbl[freq_khz];
 8011168:	79bb      	ldrb	r3, [r7, #6]
 801116a:	4a1e      	ldr	r2, [pc, #120]	; (80111e4 <i2cOpen+0xc8>)
 801116c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	605a      	str	r2, [r3, #4]
      p_handle->Init.OwnAddress1     = 0x00;
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	2200      	movs	r2, #0
 8011178:	609a      	str	r2, [r3, #8]
      p_handle->Init.AddressingMode  = I2C_ADDRESSINGMODE_7BIT;
 801117a:	68bb      	ldr	r3, [r7, #8]
 801117c:	2201      	movs	r2, #1
 801117e:	60da      	str	r2, [r3, #12]
      p_handle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	2200      	movs	r2, #0
 8011184:	611a      	str	r2, [r3, #16]
      p_handle->Init.OwnAddress2     = 0x00;
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	2200      	movs	r2, #0
 801118a:	615a      	str	r2, [r3, #20]
      p_handle->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	2200      	movs	r2, #0
 8011190:	619a      	str	r2, [r3, #24]
      p_handle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8011192:	68bb      	ldr	r3, [r7, #8]
 8011194:	2200      	movs	r2, #0
 8011196:	61da      	str	r2, [r3, #28]
      p_handle->Init.NoStretchMode   = I2C_NOSTRETCH_DISABLE;
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	2200      	movs	r2, #0
 801119c:	621a      	str	r2, [r3, #32]

      //i2cReset(ch);

      //HAL_I2C_DeInit(p_handle);
      if(HAL_I2C_Init(p_handle) == HAL_OK)
 801119e:	68b8      	ldr	r0, [r7, #8]
 80111a0:	f7f1 fde7 	bl	8002d72 <HAL_I2C_Init>
 80111a4:	4603      	mov	r3, r0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d10d      	bne.n	80111c6 <i2cOpen+0xaa>
      {
        /* Enable the Analog I2C Filter */
        HAL_I2CEx_ConfigAnalogFilter(p_handle,I2C_ANALOGFILTER_ENABLE);
 80111aa:	2100      	movs	r1, #0
 80111ac:	68b8      	ldr	r0, [r7, #8]
 80111ae:	f7f3 fb23 	bl	80047f8 <HAL_I2CEx_ConfigAnalogFilter>

        /* Configure Digital filter */
        HAL_I2CEx_ConfigDigitalFilter(p_handle, 0);
 80111b2:	2100      	movs	r1, #0
 80111b4:	68b8      	ldr	r0, [r7, #8]
 80111b6:	f7f3 fb6a 	bl	800488e <HAL_I2CEx_ConfigDigitalFilter>

        ret = true;
 80111ba:	2301      	movs	r3, #1
 80111bc:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 80111be:	79fb      	ldrb	r3, [r7, #7]
 80111c0:	4a06      	ldr	r2, [pc, #24]	; (80111dc <i2cOpen+0xc0>)
 80111c2:	2101      	movs	r1, #1
 80111c4:	54d1      	strb	r1, [r2, r3]
      }
      break;
 80111c6:	bf00      	nop
  }

  return ret;
 80111c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80111ca:	4618      	mov	r0, r3
 80111cc:	3710      	adds	r7, #16
 80111ce:	46bd      	mov	sp, r7
 80111d0:	bd80      	pop	{r7, pc}
 80111d2:	bf00      	nop
 80111d4:	200001c4 	.word	0x200001c4
 80111d8:	20003ae0 	.word	0x20003ae0
 80111dc:	20003ae4 	.word	0x20003ae4
 80111e0:	40005800 	.word	0x40005800
 80111e4:	08022bd4 	.word	0x08022bd4

080111e8 <i2cIsDeviceReady>:
  delayUs(5);
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_SET);
}

bool i2cIsDeviceReady(uint8_t ch, uint8_t dev_addr)
{
 80111e8:	b580      	push	{r7, lr}
 80111ea:	b084      	sub	sp, #16
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	4603      	mov	r3, r0
 80111f0:	460a      	mov	r2, r1
 80111f2:	71fb      	strb	r3, [r7, #7]
 80111f4:	4613      	mov	r3, r2
 80111f6:	71bb      	strb	r3, [r7, #6]
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 80111f8:	79fa      	ldrb	r2, [r7, #7]
 80111fa:	490d      	ldr	r1, [pc, #52]	; (8011230 <i2cIsDeviceReady+0x48>)
 80111fc:	4613      	mov	r3, r2
 80111fe:	009b      	lsls	r3, r3, #2
 8011200:	4413      	add	r3, r2
 8011202:	009b      	lsls	r3, r3, #2
 8011204:	440b      	add	r3, r1
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	60fb      	str	r3, [r7, #12]


  LOCK_BEGIN(ch);
  if (HAL_I2C_IsDeviceReady(p_handle, dev_addr << 1, 10, 10) == HAL_OK)
 801120a:	79bb      	ldrb	r3, [r7, #6]
 801120c:	b29b      	uxth	r3, r3
 801120e:	005b      	lsls	r3, r3, #1
 8011210:	b299      	uxth	r1, r3
 8011212:	230a      	movs	r3, #10
 8011214:	220a      	movs	r2, #10
 8011216:	68f8      	ldr	r0, [r7, #12]
 8011218:	f7f2 f98c 	bl	8003534 <HAL_I2C_IsDeviceReady>
 801121c:	4603      	mov	r3, r0
 801121e:	2b00      	cmp	r3, #0
 8011220:	d101      	bne.n	8011226 <i2cIsDeviceReady+0x3e>
  {
    return true;
 8011222:	2301      	movs	r3, #1
 8011224:	e000      	b.n	8011228 <i2cIsDeviceReady+0x40>
  }
  LOCK_END(ch);

  return false;
 8011226:	2300      	movs	r3, #0
}
 8011228:	4618      	mov	r0, r3
 801122a:	3710      	adds	r7, #16
 801122c:	46bd      	mov	sp, r7
 801122e:	bd80      	pop	{r7, pc}
 8011230:	200001c4 	.word	0x200001c4

08011234 <i2cReadByte>:

  return ret;
}

bool i2cReadByte (uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t timeout)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b086      	sub	sp, #24
 8011238:	af02      	add	r7, sp, #8
 801123a:	607b      	str	r3, [r7, #4]
 801123c:	4603      	mov	r3, r0
 801123e:	73fb      	strb	r3, [r7, #15]
 8011240:	460b      	mov	r3, r1
 8011242:	81bb      	strh	r3, [r7, #12]
 8011244:	4613      	mov	r3, r2
 8011246:	817b      	strh	r3, [r7, #10]
  return i2cReadBytes(ch, dev_addr, reg_addr, p_data, 1, timeout);
 8011248:	897a      	ldrh	r2, [r7, #10]
 801124a:	89b9      	ldrh	r1, [r7, #12]
 801124c:	7bf8      	ldrb	r0, [r7, #15]
 801124e:	69bb      	ldr	r3, [r7, #24]
 8011250:	9301      	str	r3, [sp, #4]
 8011252:	2301      	movs	r3, #1
 8011254:	9300      	str	r3, [sp, #0]
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	f000 f806 	bl	8011268 <i2cReadBytes>
 801125c:	4603      	mov	r3, r0
}
 801125e:	4618      	mov	r0, r3
 8011260:	3710      	adds	r7, #16
 8011262:	46bd      	mov	sp, r7
 8011264:	bd80      	pop	{r7, pc}
	...

08011268 <i2cReadBytes>:

bool i2cReadBytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b08c      	sub	sp, #48	; 0x30
 801126c:	af04      	add	r7, sp, #16
 801126e:	607b      	str	r3, [r7, #4]
 8011270:	4603      	mov	r3, r0
 8011272:	73fb      	strb	r3, [r7, #15]
 8011274:	460b      	mov	r3, r1
 8011276:	81bb      	strh	r3, [r7, #12]
 8011278:	4613      	mov	r3, r2
 801127a:	817b      	strh	r3, [r7, #10]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 801127c:	7bfa      	ldrb	r2, [r7, #15]
 801127e:	4916      	ldr	r1, [pc, #88]	; (80112d8 <i2cReadBytes+0x70>)
 8011280:	4613      	mov	r3, r2
 8011282:	009b      	lsls	r3, r3, #2
 8011284:	4413      	add	r3, r2
 8011286:	009b      	lsls	r3, r3, #2
 8011288:	440b      	add	r3, r1
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 801128e:	7bfb      	ldrb	r3, [r7, #15]
 8011290:	2b01      	cmp	r3, #1
 8011292:	d901      	bls.n	8011298 <i2cReadBytes+0x30>
  {
    return false;
 8011294:	2300      	movs	r3, #0
 8011296:	e01a      	b.n	80112ce <i2cReadBytes+0x66>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Mem_Read(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 8011298:	89bb      	ldrh	r3, [r7, #12]
 801129a:	005b      	lsls	r3, r3, #1
 801129c:	b299      	uxth	r1, r3
 801129e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112a0:	b29b      	uxth	r3, r3
 80112a2:	8978      	ldrh	r0, [r7, #10]
 80112a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80112a6:	9202      	str	r2, [sp, #8]
 80112a8:	9301      	str	r3, [sp, #4]
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	9300      	str	r3, [sp, #0]
 80112ae:	2301      	movs	r3, #1
 80112b0:	4602      	mov	r2, r0
 80112b2:	69b8      	ldr	r0, [r7, #24]
 80112b4:	f7f2 f824 	bl	8003300 <HAL_I2C_Mem_Read>
 80112b8:	4603      	mov	r3, r0
 80112ba:	75fb      	strb	r3, [r7, #23]

  if( i2c_ret == HAL_OK )
 80112bc:	7dfb      	ldrb	r3, [r7, #23]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	d102      	bne.n	80112c8 <i2cReadBytes+0x60>
  {
    ret = true;
 80112c2:	2301      	movs	r3, #1
 80112c4:	77fb      	strb	r3, [r7, #31]
 80112c6:	e001      	b.n	80112cc <i2cReadBytes+0x64>
  }
  else
  {
    ret = false;
 80112c8:	2300      	movs	r3, #0
 80112ca:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 80112cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80112ce:	4618      	mov	r0, r3
 80112d0:	3720      	adds	r7, #32
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}
 80112d6:	bf00      	nop
 80112d8:	200001c4 	.word	0x200001c4

080112dc <i2cRead16Byte>:

bool i2cRead16Byte (uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t timeout)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b086      	sub	sp, #24
 80112e0:	af02      	add	r7, sp, #8
 80112e2:	607b      	str	r3, [r7, #4]
 80112e4:	4603      	mov	r3, r0
 80112e6:	73fb      	strb	r3, [r7, #15]
 80112e8:	460b      	mov	r3, r1
 80112ea:	81bb      	strh	r3, [r7, #12]
 80112ec:	4613      	mov	r3, r2
 80112ee:	817b      	strh	r3, [r7, #10]
  return i2cRead16Bytes(ch, dev_addr, reg_addr, p_data, 1, timeout);
 80112f0:	897a      	ldrh	r2, [r7, #10]
 80112f2:	89b9      	ldrh	r1, [r7, #12]
 80112f4:	7bf8      	ldrb	r0, [r7, #15]
 80112f6:	69bb      	ldr	r3, [r7, #24]
 80112f8:	9301      	str	r3, [sp, #4]
 80112fa:	2301      	movs	r3, #1
 80112fc:	9300      	str	r3, [sp, #0]
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	f000 f806 	bl	8011310 <i2cRead16Bytes>
 8011304:	4603      	mov	r3, r0
}
 8011306:	4618      	mov	r0, r3
 8011308:	3710      	adds	r7, #16
 801130a:	46bd      	mov	sp, r7
 801130c:	bd80      	pop	{r7, pc}
	...

08011310 <i2cRead16Bytes>:

bool i2cRead16Bytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b08c      	sub	sp, #48	; 0x30
 8011314:	af04      	add	r7, sp, #16
 8011316:	607b      	str	r3, [r7, #4]
 8011318:	4603      	mov	r3, r0
 801131a:	73fb      	strb	r3, [r7, #15]
 801131c:	460b      	mov	r3, r1
 801131e:	81bb      	strh	r3, [r7, #12]
 8011320:	4613      	mov	r3, r2
 8011322:	817b      	strh	r3, [r7, #10]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8011324:	7bfa      	ldrb	r2, [r7, #15]
 8011326:	4916      	ldr	r1, [pc, #88]	; (8011380 <i2cRead16Bytes+0x70>)
 8011328:	4613      	mov	r3, r2
 801132a:	009b      	lsls	r3, r3, #2
 801132c:	4413      	add	r3, r2
 801132e:	009b      	lsls	r3, r3, #2
 8011330:	440b      	add	r3, r1
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 8011336:	7bfb      	ldrb	r3, [r7, #15]
 8011338:	2b01      	cmp	r3, #1
 801133a:	d901      	bls.n	8011340 <i2cRead16Bytes+0x30>
  {
    return false;
 801133c:	2300      	movs	r3, #0
 801133e:	e01a      	b.n	8011376 <i2cRead16Bytes+0x66>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Mem_Read(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_16BIT, p_data, length, timeout);
 8011340:	89bb      	ldrh	r3, [r7, #12]
 8011342:	005b      	lsls	r3, r3, #1
 8011344:	b299      	uxth	r1, r3
 8011346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011348:	b29b      	uxth	r3, r3
 801134a:	8978      	ldrh	r0, [r7, #10]
 801134c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801134e:	9202      	str	r2, [sp, #8]
 8011350:	9301      	str	r3, [sp, #4]
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	9300      	str	r3, [sp, #0]
 8011356:	2302      	movs	r3, #2
 8011358:	4602      	mov	r2, r0
 801135a:	69b8      	ldr	r0, [r7, #24]
 801135c:	f7f1 ffd0 	bl	8003300 <HAL_I2C_Mem_Read>
 8011360:	4603      	mov	r3, r0
 8011362:	75fb      	strb	r3, [r7, #23]

  if( i2c_ret == HAL_OK )
 8011364:	7dfb      	ldrb	r3, [r7, #23]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d102      	bne.n	8011370 <i2cRead16Bytes+0x60>
  {
    ret = true;
 801136a:	2301      	movs	r3, #1
 801136c:	77fb      	strb	r3, [r7, #31]
 801136e:	e001      	b.n	8011374 <i2cRead16Bytes+0x64>
  }
  else
  {
    ret = false;
 8011370:	2300      	movs	r3, #0
 8011372:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 8011374:	7ffb      	ldrb	r3, [r7, #31]
}
 8011376:	4618      	mov	r0, r3
 8011378:	3720      	adds	r7, #32
 801137a:	46bd      	mov	sp, r7
 801137c:	bd80      	pop	{r7, pc}
 801137e:	bf00      	nop
 8011380:	200001c4 	.word	0x200001c4

08011384 <i2cWriteByte>:

  return ret;
}

bool i2cWriteByte (uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t data, uint32_t timeout)
{
 8011384:	b590      	push	{r4, r7, lr}
 8011386:	b085      	sub	sp, #20
 8011388:	af02      	add	r7, sp, #8
 801138a:	4604      	mov	r4, r0
 801138c:	4608      	mov	r0, r1
 801138e:	4611      	mov	r1, r2
 8011390:	461a      	mov	r2, r3
 8011392:	4623      	mov	r3, r4
 8011394:	71fb      	strb	r3, [r7, #7]
 8011396:	4603      	mov	r3, r0
 8011398:	80bb      	strh	r3, [r7, #4]
 801139a:	460b      	mov	r3, r1
 801139c:	807b      	strh	r3, [r7, #2]
 801139e:	4613      	mov	r3, r2
 80113a0:	71bb      	strb	r3, [r7, #6]
  return i2cWriteBytes(ch, dev_addr, reg_addr, &data, 1, timeout);
 80113a2:	1dbc      	adds	r4, r7, #6
 80113a4:	887a      	ldrh	r2, [r7, #2]
 80113a6:	88b9      	ldrh	r1, [r7, #4]
 80113a8:	79f8      	ldrb	r0, [r7, #7]
 80113aa:	69bb      	ldr	r3, [r7, #24]
 80113ac:	9301      	str	r3, [sp, #4]
 80113ae:	2301      	movs	r3, #1
 80113b0:	9300      	str	r3, [sp, #0]
 80113b2:	4623      	mov	r3, r4
 80113b4:	f000 f806 	bl	80113c4 <i2cWriteBytes>
 80113b8:	4603      	mov	r3, r0
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	370c      	adds	r7, #12
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd90      	pop	{r4, r7, pc}
	...

080113c4 <i2cWriteBytes>:

bool i2cWriteBytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 80113c4:	b580      	push	{r7, lr}
 80113c6:	b08c      	sub	sp, #48	; 0x30
 80113c8:	af04      	add	r7, sp, #16
 80113ca:	607b      	str	r3, [r7, #4]
 80113cc:	4603      	mov	r3, r0
 80113ce:	73fb      	strb	r3, [r7, #15]
 80113d0:	460b      	mov	r3, r1
 80113d2:	81bb      	strh	r3, [r7, #12]
 80113d4:	4613      	mov	r3, r2
 80113d6:	817b      	strh	r3, [r7, #10]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 80113d8:	7bfa      	ldrb	r2, [r7, #15]
 80113da:	4916      	ldr	r1, [pc, #88]	; (8011434 <i2cWriteBytes+0x70>)
 80113dc:	4613      	mov	r3, r2
 80113de:	009b      	lsls	r3, r3, #2
 80113e0:	4413      	add	r3, r2
 80113e2:	009b      	lsls	r3, r3, #2
 80113e4:	440b      	add	r3, r1
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 80113ea:	7bfb      	ldrb	r3, [r7, #15]
 80113ec:	2b01      	cmp	r3, #1
 80113ee:	d901      	bls.n	80113f4 <i2cWriteBytes+0x30>
  {
    return false;
 80113f0:	2300      	movs	r3, #0
 80113f2:	e01a      	b.n	801142a <i2cWriteBytes+0x66>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Mem_Write(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 80113f4:	89bb      	ldrh	r3, [r7, #12]
 80113f6:	005b      	lsls	r3, r3, #1
 80113f8:	b299      	uxth	r1, r3
 80113fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113fc:	b29b      	uxth	r3, r3
 80113fe:	8978      	ldrh	r0, [r7, #10]
 8011400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011402:	9202      	str	r2, [sp, #8]
 8011404:	9301      	str	r3, [sp, #4]
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	9300      	str	r3, [sp, #0]
 801140a:	2301      	movs	r3, #1
 801140c:	4602      	mov	r2, r0
 801140e:	69b8      	ldr	r0, [r7, #24]
 8011410:	f7f1 fe62 	bl	80030d8 <HAL_I2C_Mem_Write>
 8011414:	4603      	mov	r3, r0
 8011416:	75fb      	strb	r3, [r7, #23]

  if(i2c_ret == HAL_OK)
 8011418:	7dfb      	ldrb	r3, [r7, #23]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d102      	bne.n	8011424 <i2cWriteBytes+0x60>
  {
    ret = true;
 801141e:	2301      	movs	r3, #1
 8011420:	77fb      	strb	r3, [r7, #31]
 8011422:	e001      	b.n	8011428 <i2cWriteBytes+0x64>
  }
  else
  {
    ret = false;
 8011424:	2300      	movs	r3, #0
 8011426:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 8011428:	7ffb      	ldrb	r3, [r7, #31]
}
 801142a:	4618      	mov	r0, r3
 801142c:	3720      	adds	r7, #32
 801142e:	46bd      	mov	sp, r7
 8011430:	bd80      	pop	{r7, pc}
 8011432:	bf00      	nop
 8011434:	200001c4 	.word	0x200001c4

08011438 <i2cWrite16Byte>:

bool i2cWrite16Byte (uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t data, uint32_t timeout)
{
 8011438:	b590      	push	{r4, r7, lr}
 801143a:	b085      	sub	sp, #20
 801143c:	af02      	add	r7, sp, #8
 801143e:	4604      	mov	r4, r0
 8011440:	4608      	mov	r0, r1
 8011442:	4611      	mov	r1, r2
 8011444:	461a      	mov	r2, r3
 8011446:	4623      	mov	r3, r4
 8011448:	71fb      	strb	r3, [r7, #7]
 801144a:	4603      	mov	r3, r0
 801144c:	80bb      	strh	r3, [r7, #4]
 801144e:	460b      	mov	r3, r1
 8011450:	807b      	strh	r3, [r7, #2]
 8011452:	4613      	mov	r3, r2
 8011454:	71bb      	strb	r3, [r7, #6]
  return i2cWrite16Bytes(ch, dev_addr, reg_addr, &data, 1, timeout);
 8011456:	1dbc      	adds	r4, r7, #6
 8011458:	887a      	ldrh	r2, [r7, #2]
 801145a:	88b9      	ldrh	r1, [r7, #4]
 801145c:	79f8      	ldrb	r0, [r7, #7]
 801145e:	69bb      	ldr	r3, [r7, #24]
 8011460:	9301      	str	r3, [sp, #4]
 8011462:	2301      	movs	r3, #1
 8011464:	9300      	str	r3, [sp, #0]
 8011466:	4623      	mov	r3, r4
 8011468:	f000 f806 	bl	8011478 <i2cWrite16Bytes>
 801146c:	4603      	mov	r3, r0
}
 801146e:	4618      	mov	r0, r3
 8011470:	370c      	adds	r7, #12
 8011472:	46bd      	mov	sp, r7
 8011474:	bd90      	pop	{r4, r7, pc}
	...

08011478 <i2cWrite16Bytes>:

bool i2cWrite16Bytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8011478:	b580      	push	{r7, lr}
 801147a:	b08c      	sub	sp, #48	; 0x30
 801147c:	af04      	add	r7, sp, #16
 801147e:	607b      	str	r3, [r7, #4]
 8011480:	4603      	mov	r3, r0
 8011482:	73fb      	strb	r3, [r7, #15]
 8011484:	460b      	mov	r3, r1
 8011486:	81bb      	strh	r3, [r7, #12]
 8011488:	4613      	mov	r3, r2
 801148a:	817b      	strh	r3, [r7, #10]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 801148c:	7bfa      	ldrb	r2, [r7, #15]
 801148e:	4916      	ldr	r1, [pc, #88]	; (80114e8 <i2cWrite16Bytes+0x70>)
 8011490:	4613      	mov	r3, r2
 8011492:	009b      	lsls	r3, r3, #2
 8011494:	4413      	add	r3, r2
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	440b      	add	r3, r1
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 801149e:	7bfb      	ldrb	r3, [r7, #15]
 80114a0:	2b01      	cmp	r3, #1
 80114a2:	d901      	bls.n	80114a8 <i2cWrite16Bytes+0x30>
  {
    return false;
 80114a4:	2300      	movs	r3, #0
 80114a6:	e01a      	b.n	80114de <i2cWrite16Bytes+0x66>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Mem_Write(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_16BIT, p_data, length, timeout);
 80114a8:	89bb      	ldrh	r3, [r7, #12]
 80114aa:	005b      	lsls	r3, r3, #1
 80114ac:	b299      	uxth	r1, r3
 80114ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b0:	b29b      	uxth	r3, r3
 80114b2:	8978      	ldrh	r0, [r7, #10]
 80114b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80114b6:	9202      	str	r2, [sp, #8]
 80114b8:	9301      	str	r3, [sp, #4]
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	9300      	str	r3, [sp, #0]
 80114be:	2302      	movs	r3, #2
 80114c0:	4602      	mov	r2, r0
 80114c2:	69b8      	ldr	r0, [r7, #24]
 80114c4:	f7f1 fe08 	bl	80030d8 <HAL_I2C_Mem_Write>
 80114c8:	4603      	mov	r3, r0
 80114ca:	75fb      	strb	r3, [r7, #23]

  if(i2c_ret == HAL_OK)
 80114cc:	7dfb      	ldrb	r3, [r7, #23]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d102      	bne.n	80114d8 <i2cWrite16Bytes+0x60>
  {
    ret = true;
 80114d2:	2301      	movs	r3, #1
 80114d4:	77fb      	strb	r3, [r7, #31]
 80114d6:	e001      	b.n	80114dc <i2cWrite16Bytes+0x64>
  }
  else
  {
    ret = false;
 80114d8:	2300      	movs	r3, #0
 80114da:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 80114dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80114de:	4618      	mov	r0, r3
 80114e0:	3720      	adds	r7, #32
 80114e2:	46bd      	mov	sp, r7
 80114e4:	bd80      	pop	{r7, pc}
 80114e6:	bf00      	nop
 80114e8:	200001c4 	.word	0x200001c4

080114ec <i2cWriteData>:

bool i2cWriteData(uint8_t ch, uint16_t dev_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b08a      	sub	sp, #40	; 0x28
 80114f0:	af02      	add	r7, sp, #8
 80114f2:	60ba      	str	r2, [r7, #8]
 80114f4:	607b      	str	r3, [r7, #4]
 80114f6:	4603      	mov	r3, r0
 80114f8:	73fb      	strb	r3, [r7, #15]
 80114fa:	460b      	mov	r3, r1
 80114fc:	81bb      	strh	r3, [r7, #12]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 80114fe:	7bfa      	ldrb	r2, [r7, #15]
 8011500:	4913      	ldr	r1, [pc, #76]	; (8011550 <i2cWriteData+0x64>)
 8011502:	4613      	mov	r3, r2
 8011504:	009b      	lsls	r3, r3, #2
 8011506:	4413      	add	r3, r2
 8011508:	009b      	lsls	r3, r3, #2
 801150a:	440b      	add	r3, r1
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 8011510:	7bfb      	ldrb	r3, [r7, #15]
 8011512:	2b01      	cmp	r3, #1
 8011514:	d901      	bls.n	801151a <i2cWriteData+0x2e>
  {
    return false;
 8011516:	2300      	movs	r3, #0
 8011518:	e016      	b.n	8011548 <i2cWriteData+0x5c>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Master_Transmit(p_handle, (uint16_t)(dev_addr << 1), p_data, length, timeout);
 801151a:	89bb      	ldrh	r3, [r7, #12]
 801151c:	005b      	lsls	r3, r3, #1
 801151e:	b299      	uxth	r1, r3
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	b29a      	uxth	r2, r3
 8011524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011526:	9300      	str	r3, [sp, #0]
 8011528:	4613      	mov	r3, r2
 801152a:	68ba      	ldr	r2, [r7, #8]
 801152c:	69b8      	ldr	r0, [r7, #24]
 801152e:	f7f1 fcbb 	bl	8002ea8 <HAL_I2C_Master_Transmit>
 8011532:	4603      	mov	r3, r0
 8011534:	75fb      	strb	r3, [r7, #23]

  if(i2c_ret == HAL_OK)
 8011536:	7dfb      	ldrb	r3, [r7, #23]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d102      	bne.n	8011542 <i2cWriteData+0x56>
  {
    ret = true;
 801153c:	2301      	movs	r3, #1
 801153e:	77fb      	strb	r3, [r7, #31]
 8011540:	e001      	b.n	8011546 <i2cWriteData+0x5a>
  }
  else
  {
    ret = false;
 8011542:	2300      	movs	r3, #0
 8011544:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 8011546:	7ffb      	ldrb	r3, [r7, #31]
}
 8011548:	4618      	mov	r0, r3
 801154a:	3720      	adds	r7, #32
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}
 8011550:	200001c4 	.word	0x200001c4

08011554 <HAL_I2C_ErrorCallback>:




void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8011554:	b480      	push	{r7}
 8011556:	b083      	sub	sp, #12
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  if (hi2c->Instance == i2c_tbl[_DEF_I2C1].p_hi2c->Instance)
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	681a      	ldr	r2, [r3, #0]
 8011560:	4b09      	ldr	r3, [pc, #36]	; (8011588 <HAL_I2C_ErrorCallback+0x34>)
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	429a      	cmp	r2, r3
 8011568:	d108      	bne.n	801157c <HAL_I2C_ErrorCallback+0x28>
  {
    if (hi2c->ErrorCode > 0)
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801156e:	2b00      	cmp	r3, #0
 8011570:	d004      	beq.n	801157c <HAL_I2C_ErrorCallback+0x28>
    {
      i2c_errcount[_DEF_I2C1]++;
 8011572:	4b06      	ldr	r3, [pc, #24]	; (801158c <HAL_I2C_ErrorCallback+0x38>)
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	3301      	adds	r3, #1
 8011578:	4a04      	ldr	r2, [pc, #16]	; (801158c <HAL_I2C_ErrorCallback+0x38>)
 801157a:	6013      	str	r3, [r2, #0]
    }
  }
}
 801157c:	bf00      	nop
 801157e:	370c      	adds	r7, #12
 8011580:	46bd      	mov	sp, r7
 8011582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011586:	4770      	bx	lr
 8011588:	200001c4 	.word	0x200001c4
 801158c:	20003ad8 	.word	0x20003ad8

08011590 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8011594:	4802      	ldr	r0, [pc, #8]	; (80115a0 <I2C1_ER_IRQHandler+0x10>)
 8011596:	f7f2 f8b9 	bl	800370c <HAL_I2C_ER_IRQHandler>
}
 801159a:	bf00      	nop
 801159c:	bd80      	pop	{r7, pc}
 801159e:	bf00      	nop
 80115a0:	20003ae8 	.word	0x20003ae8

080115a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80115a4:	b580      	push	{r7, lr}
 80115a6:	b09e      	sub	sp, #120	; 0x78
 80115a8:	af00      	add	r7, sp, #0
 80115aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80115ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80115b0:	2200      	movs	r2, #0
 80115b2:	601a      	str	r2, [r3, #0]
 80115b4:	605a      	str	r2, [r3, #4]
 80115b6:	609a      	str	r2, [r3, #8]
 80115b8:	60da      	str	r2, [r3, #12]
 80115ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80115bc:	f107 0310 	add.w	r3, r7, #16
 80115c0:	2254      	movs	r2, #84	; 0x54
 80115c2:	2100      	movs	r1, #0
 80115c4:	4618      	mov	r0, r3
 80115c6:	f002 fd33 	bl	8014030 <memset>
  if(i2cHandle->Instance==I2C2)
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	681b      	ldr	r3, [r3, #0]
 80115ce:	4a21      	ldr	r2, [pc, #132]	; (8011654 <HAL_I2C_MspInit+0xb0>)
 80115d0:	4293      	cmp	r3, r2
 80115d2:	d13a      	bne.n	801164a <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80115d4:	2380      	movs	r3, #128	; 0x80
 80115d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80115d8:	2300      	movs	r3, #0
 80115da:	633b      	str	r3, [r7, #48]	; 0x30
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80115dc:	f107 0310 	add.w	r3, r7, #16
 80115e0:	4618      	mov	r0, r3
 80115e2:	f7f5 fcc7 	bl	8006f74 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80115e6:	4b1c      	ldr	r3, [pc, #112]	; (8011658 <HAL_I2C_MspInit+0xb4>)
 80115e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115ea:	4a1b      	ldr	r2, [pc, #108]	; (8011658 <HAL_I2C_MspInit+0xb4>)
 80115ec:	f043 0301 	orr.w	r3, r3, #1
 80115f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80115f2:	4b19      	ldr	r3, [pc, #100]	; (8011658 <HAL_I2C_MspInit+0xb4>)
 80115f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80115f6:	f003 0301 	and.w	r3, r3, #1
 80115fa:	60fb      	str	r3, [r7, #12]
 80115fc:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PA8     ------> I2C2_SDA
    PA9     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80115fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011602:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8011604:	2312      	movs	r3, #18
 8011606:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011608:	2300      	movs	r3, #0
 801160a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801160c:	2300      	movs	r3, #0
 801160e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8011610:	2304      	movs	r3, #4
 8011612:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011614:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8011618:	4619      	mov	r1, r3
 801161a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 801161e:	f7f1 f9b9 	bl	8002994 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8011622:	4b0d      	ldr	r3, [pc, #52]	; (8011658 <HAL_I2C_MspInit+0xb4>)
 8011624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011626:	4a0c      	ldr	r2, [pc, #48]	; (8011658 <HAL_I2C_MspInit+0xb4>)
 8011628:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801162c:	6593      	str	r3, [r2, #88]	; 0x58
 801162e:	4b0a      	ldr	r3, [pc, #40]	; (8011658 <HAL_I2C_MspInit+0xb4>)
 8011630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011636:	60bb      	str	r3, [r7, #8]
 8011638:	68bb      	ldr	r3, [r7, #8]

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 0, 0);
 801163a:	2200      	movs	r2, #0
 801163c:	2100      	movs	r1, #0
 801163e:	2022      	movs	r0, #34	; 0x22
 8011640:	f7ef fe53 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8011644:	2022      	movs	r0, #34	; 0x22
 8011646:	f7ef fe6a 	bl	800131e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 801164a:	bf00      	nop
 801164c:	3778      	adds	r7, #120	; 0x78
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop
 8011654:	40005800 	.word	0x40005800
 8011658:	40021000 	.word	0x40021000

0801165c <cliI2C>:
}


#ifdef _USE_HW_CLI
void cliI2C(cli_args_t *args)
{
 801165c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801165e:	b0af      	sub	sp, #188	; 0xbc
 8011660:	af02      	add	r7, sp, #8
 8011662:	6078      	str	r0, [r7, #4]
  bool ret = true;
 8011664:	2301      	movs	r3, #1
 8011666:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
  uint32_t i;
  uint8_t i2c_data[128];
  uint32_t pre_time;


  if (args->argc == 2)
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	881b      	ldrh	r3, [r3, #0]
 801166e:	2b02      	cmp	r3, #2
 8011670:	d166      	bne.n	8011740 <cliI2C+0xe4>
  {
    print_ch = (uint16_t) args->getData(1);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	689b      	ldr	r3, [r3, #8]
 8011676:	2001      	movs	r0, #1
 8011678:	4798      	blx	r3
 801167a:	4603      	mov	r3, r0
 801167c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 8011680:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011684:	2202      	movs	r2, #2
 8011686:	2101      	movs	r1, #1
 8011688:	4618      	mov	r0, r3
 801168a:	f7ff fd01 	bl	8011090 <constrain>
 801168e:	4603      	mov	r3, r0
 8011690:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    print_ch -= 1;
 8011694:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011698:	3b01      	subs	r3, #1
 801169a:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    if(args->isStr(0, "scan") == true)
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	695b      	ldr	r3, [r3, #20]
 80116a2:	49bd      	ldr	r1, [pc, #756]	; (8011998 <cliI2C+0x33c>)
 80116a4:	2000      	movs	r0, #0
 80116a6:	4798      	blx	r3
 80116a8:	4603      	mov	r3, r0
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d022      	beq.n	80116f4 <cliI2C+0x98>
    {
      for (i=0x00; i<= 0x7F; i++)
 80116ae:	2300      	movs	r3, #0
 80116b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80116b4:	e019      	b.n	80116ea <cliI2C+0x8e>
      {
        if (i2cIsDeviceReady(print_ch, i) == true)
 80116b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80116ba:	b2da      	uxtb	r2, r3
 80116bc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80116c0:	4611      	mov	r1, r2
 80116c2:	4618      	mov	r0, r3
 80116c4:	f7ff fd90 	bl	80111e8 <i2cIsDeviceReady>
 80116c8:	4603      	mov	r3, r0
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d008      	beq.n	80116e0 <cliI2C+0x84>
        {
          cliPrintf("I2C CH%d Addr 0x%X : OK\n", print_ch+1, i);
 80116ce:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80116d2:	3301      	adds	r3, #1
 80116d4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80116d8:	4619      	mov	r1, r3
 80116da:	48b0      	ldr	r0, [pc, #704]	; (801199c <cliI2C+0x340>)
 80116dc:	f7fa fdf0 	bl	800c2c0 <cliPrintf>
      for (i=0x00; i<= 0x7F; i++)
 80116e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80116e4:	3301      	adds	r3, #1
 80116e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80116ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80116ee:	2b7f      	cmp	r3, #127	; 0x7f
 80116f0:	d9e1      	bls.n	80116b6 <cliI2C+0x5a>
 80116f2:	e1bf      	b.n	8011a74 <cliI2C+0x418>
        }
      }
    }
    else if(args->isStr(0, "open") == true)
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	695b      	ldr	r3, [r3, #20]
 80116f8:	49a9      	ldr	r1, [pc, #676]	; (80119a0 <cliI2C+0x344>)
 80116fa:	2000      	movs	r0, #0
 80116fc:	4798      	blx	r3
 80116fe:	4603      	mov	r3, r0
 8011700:	2b00      	cmp	r3, #0
 8011702:	f000 81b7 	beq.w	8011a74 <cliI2C+0x418>
    {
      i2c_ret = i2cOpen(print_ch, I2C_FREQ_400KHz);
 8011706:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801170a:	2101      	movs	r1, #1
 801170c:	4618      	mov	r0, r3
 801170e:	f7ff fd05 	bl	801111c <i2cOpen>
 8011712:	4603      	mov	r3, r0
 8011714:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      if (i2c_ret == true)
 8011718:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801171c:	2b00      	cmp	r3, #0
 801171e:	d007      	beq.n	8011730 <cliI2C+0xd4>
      {
        cliPrintf("I2C CH%d Open OK\n", print_ch + 1);
 8011720:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011724:	3301      	adds	r3, #1
 8011726:	4619      	mov	r1, r3
 8011728:	489e      	ldr	r0, [pc, #632]	; (80119a4 <cliI2C+0x348>)
 801172a:	f7fa fdc9 	bl	800c2c0 <cliPrintf>
 801172e:	e1a1      	b.n	8011a74 <cliI2C+0x418>
      }
      else
      {
        cliPrintf("I2C CH%d Open Fail\n", print_ch + 1);
 8011730:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011734:	3301      	adds	r3, #1
 8011736:	4619      	mov	r1, r3
 8011738:	489b      	ldr	r0, [pc, #620]	; (80119a8 <cliI2C+0x34c>)
 801173a:	f7fa fdc1 	bl	800c2c0 <cliPrintf>
 801173e:	e199      	b.n	8011a74 <cliI2C+0x418>
      }
    }
  }
  else if (args->argc == 5)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	881b      	ldrh	r3, [r3, #0]
 8011744:	2b05      	cmp	r3, #5
 8011746:	f040 8192 	bne.w	8011a6e <cliI2C+0x412>
  {
    print_ch = (uint16_t) args->getData(1);
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	689b      	ldr	r3, [r3, #8]
 801174e:	2001      	movs	r0, #1
 8011750:	4798      	blx	r3
 8011752:	4603      	mov	r3, r0
 8011754:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 8011758:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801175c:	2202      	movs	r2, #2
 801175e:	2101      	movs	r1, #1
 8011760:	4618      	mov	r0, r3
 8011762:	f7ff fc95 	bl	8011090 <constrain>
 8011766:	4603      	mov	r3, r0
 8011768:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    dev_addr = (uint16_t) args->getData(2);
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	689b      	ldr	r3, [r3, #8]
 8011770:	2002      	movs	r0, #2
 8011772:	4798      	blx	r3
 8011774:	4603      	mov	r3, r0
 8011776:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
    reg_addr = (uint16_t) args->getData(3);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	689b      	ldr	r3, [r3, #8]
 801177e:	2003      	movs	r0, #3
 8011780:	4798      	blx	r3
 8011782:	4603      	mov	r3, r0
 8011784:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    length   = (uint16_t) args->getData(4);
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	689b      	ldr	r3, [r3, #8]
 801178c:	2004      	movs	r0, #4
 801178e:	4798      	blx	r3
 8011790:	4603      	mov	r3, r0
 8011792:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    ch       = print_ch - 1;
 8011796:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801179a:	3b01      	subs	r3, #1
 801179c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

    if(args->isStr(0, "read") == true)
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	695b      	ldr	r3, [r3, #20]
 80117a4:	4981      	ldr	r1, [pc, #516]	; (80119ac <cliI2C+0x350>)
 80117a6:	2000      	movs	r0, #0
 80117a8:	4798      	blx	r3
 80117aa:	4603      	mov	r3, r0
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d03a      	beq.n	8011826 <cliI2C+0x1ca>
    {
      for (i=0; i<length; i++)
 80117b0:	2300      	movs	r3, #0
 80117b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80117b6:	e02f      	b.n	8011818 <cliI2C+0x1bc>
      {
        i2c_ret = i2cReadByte(ch, dev_addr, reg_addr+i, i2c_data, 100);
 80117b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80117bc:	b29a      	uxth	r2, r3
 80117be:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80117c2:	4413      	add	r3, r2
 80117c4:	b29a      	uxth	r2, r3
 80117c6:	f107 0314 	add.w	r3, r7, #20
 80117ca:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 80117ce:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 80117d2:	2464      	movs	r4, #100	; 0x64
 80117d4:	9400      	str	r4, [sp, #0]
 80117d6:	f7ff fd2d 	bl	8011234 <i2cReadByte>
 80117da:	4603      	mov	r3, r0
 80117dc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

        if (i2c_ret == true)
 80117e0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d00b      	beq.n	8011800 <cliI2C+0x1a4>
        {
          cliPrintf("%d I2C - 0x%02X : 0x%02X\n", print_ch, reg_addr+i, i2c_data[0]);
 80117e8:	f897 10a7 	ldrb.w	r1, [r7, #167]	; 0xa7
 80117ec:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 80117f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80117f4:	441a      	add	r2, r3
 80117f6:	7d3b      	ldrb	r3, [r7, #20]
 80117f8:	486d      	ldr	r0, [pc, #436]	; (80119b0 <cliI2C+0x354>)
 80117fa:	f7fa fd61 	bl	800c2c0 <cliPrintf>
 80117fe:	e006      	b.n	801180e <cliI2C+0x1b2>
        }
        else
        {
          cliPrintf("%d I2C - Fail \n", print_ch);
 8011800:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011804:	4619      	mov	r1, r3
 8011806:	486b      	ldr	r0, [pc, #428]	; (80119b4 <cliI2C+0x358>)
 8011808:	f7fa fd5a 	bl	800c2c0 <cliPrintf>
          break;
 801180c:	e132      	b.n	8011a74 <cliI2C+0x418>
      for (i=0; i<length; i++)
 801180e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011812:	3301      	adds	r3, #1
 8011814:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011818:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 801181c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011820:	429a      	cmp	r2, r3
 8011822:	d3c9      	bcc.n	80117b8 <cliI2C+0x15c>
 8011824:	e126      	b.n	8011a74 <cliI2C+0x418>
        }
      }
    }
    else if(args->isStr(0, "write") == true)
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	695b      	ldr	r3, [r3, #20]
 801182a:	4963      	ldr	r1, [pc, #396]	; (80119b8 <cliI2C+0x35c>)
 801182c:	2000      	movs	r0, #0
 801182e:	4798      	blx	r3
 8011830:	4603      	mov	r3, r0
 8011832:	2b00      	cmp	r3, #0
 8011834:	d032      	beq.n	801189c <cliI2C+0x240>
    {
      pre_time = millis();
 8011836:	f7f9 fe4e 	bl	800b4d6 <millis>
 801183a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
      i2c_ret = i2cWriteByte(ch, dev_addr, reg_addr, (uint8_t)length, 100);
 801183e:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8011842:	b2db      	uxtb	r3, r3
 8011844:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8011848:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 801184c:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8011850:	2464      	movs	r4, #100	; 0x64
 8011852:	9400      	str	r4, [sp, #0]
 8011854:	f7ff fd96 	bl	8011384 <i2cWriteByte>
 8011858:	4603      	mov	r3, r0
 801185a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

      if (i2c_ret == true)
 801185e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8011862:	2b00      	cmp	r3, #0
 8011864:	d013      	beq.n	801188e <cliI2C+0x232>
      {
        cliPrintf("%d I2C - 0x%02X : 0x%02X, %d ms\n", print_ch, reg_addr, length, millis()-pre_time);
 8011866:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 801186a:	f8b7 50a2 	ldrh.w	r5, [r7, #162]	; 0xa2
 801186e:	f8b7 60a0 	ldrh.w	r6, [r7, #160]	; 0xa0
 8011872:	f7f9 fe30 	bl	800b4d6 <millis>
 8011876:	4602      	mov	r2, r0
 8011878:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801187c:	1ad3      	subs	r3, r2, r3
 801187e:	9300      	str	r3, [sp, #0]
 8011880:	4633      	mov	r3, r6
 8011882:	462a      	mov	r2, r5
 8011884:	4621      	mov	r1, r4
 8011886:	484d      	ldr	r0, [pc, #308]	; (80119bc <cliI2C+0x360>)
 8011888:	f7fa fd1a 	bl	800c2c0 <cliPrintf>
 801188c:	e0f2      	b.n	8011a74 <cliI2C+0x418>
      }
      else
      {
        cliPrintf("%d I2C - Fail \n", print_ch);
 801188e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011892:	4619      	mov	r1, r3
 8011894:	4847      	ldr	r0, [pc, #284]	; (80119b4 <cliI2C+0x358>)
 8011896:	f7fa fd13 	bl	800c2c0 <cliPrintf>
 801189a:	e0eb      	b.n	8011a74 <cliI2C+0x418>
      }
    }
    else if(args->isStr(0, "read16") == true)
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	695b      	ldr	r3, [r3, #20]
 80118a0:	4947      	ldr	r1, [pc, #284]	; (80119c0 <cliI2C+0x364>)
 80118a2:	2000      	movs	r0, #0
 80118a4:	4798      	blx	r3
 80118a6:	4603      	mov	r3, r0
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d03a      	beq.n	8011922 <cliI2C+0x2c6>
    {
      for (i=0; i<length; i++)
 80118ac:	2300      	movs	r3, #0
 80118ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80118b2:	e02f      	b.n	8011914 <cliI2C+0x2b8>
      {
       i2c_ret = i2cRead16Byte(ch, dev_addr, reg_addr+i, i2c_data, 100);
 80118b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80118b8:	b29a      	uxth	r2, r3
 80118ba:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80118be:	4413      	add	r3, r2
 80118c0:	b29a      	uxth	r2, r3
 80118c2:	f107 0314 	add.w	r3, r7, #20
 80118c6:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 80118ca:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 80118ce:	2464      	movs	r4, #100	; 0x64
 80118d0:	9400      	str	r4, [sp, #0]
 80118d2:	f7ff fd03 	bl	80112dc <i2cRead16Byte>
 80118d6:	4603      	mov	r3, r0
 80118d8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

       if (i2c_ret == true)
 80118dc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d00b      	beq.n	80118fc <cliI2C+0x2a0>
       {
         cliPrintf("%d I2C - 0x%02X : 0x%02X\n", print_ch, reg_addr+i, i2c_data[0]);
 80118e4:	f897 10a7 	ldrb.w	r1, [r7, #167]	; 0xa7
 80118e8:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 80118ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80118f0:	441a      	add	r2, r3
 80118f2:	7d3b      	ldrb	r3, [r7, #20]
 80118f4:	482e      	ldr	r0, [pc, #184]	; (80119b0 <cliI2C+0x354>)
 80118f6:	f7fa fce3 	bl	800c2c0 <cliPrintf>
 80118fa:	e006      	b.n	801190a <cliI2C+0x2ae>
       }
       else
       {
         cliPrintf("%d I2C - Fail \n", print_ch);
 80118fc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011900:	4619      	mov	r1, r3
 8011902:	482c      	ldr	r0, [pc, #176]	; (80119b4 <cliI2C+0x358>)
 8011904:	f7fa fcdc 	bl	800c2c0 <cliPrintf>
         break;
 8011908:	e0b4      	b.n	8011a74 <cliI2C+0x418>
      for (i=0; i<length; i++)
 801190a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801190e:	3301      	adds	r3, #1
 8011910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011914:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8011918:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801191c:	429a      	cmp	r2, r3
 801191e:	d3c9      	bcc.n	80118b4 <cliI2C+0x258>
 8011920:	e0a8      	b.n	8011a74 <cliI2C+0x418>
       }
      }
    }
    else if(args->isStr(0, "write16") == true)
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	695b      	ldr	r3, [r3, #20]
 8011926:	4927      	ldr	r1, [pc, #156]	; (80119c4 <cliI2C+0x368>)
 8011928:	2000      	movs	r0, #0
 801192a:	4798      	blx	r3
 801192c:	4603      	mov	r3, r0
 801192e:	2b00      	cmp	r3, #0
 8011930:	d04c      	beq.n	80119cc <cliI2C+0x370>
    {
      pre_time = millis();
 8011932:	f7f9 fdd0 	bl	800b4d6 <millis>
 8011936:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
      i2c_ret = i2cWrite16Byte(ch, dev_addr, reg_addr, (uint8_t)length, 100);
 801193a:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 801193e:	b2db      	uxtb	r3, r3
 8011940:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8011944:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8011948:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 801194c:	2464      	movs	r4, #100	; 0x64
 801194e:	9400      	str	r4, [sp, #0]
 8011950:	f7ff fd72 	bl	8011438 <i2cWrite16Byte>
 8011954:	4603      	mov	r3, r0
 8011956:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

      if (i2c_ret == true)
 801195a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 801195e:	2b00      	cmp	r3, #0
 8011960:	d013      	beq.n	801198a <cliI2C+0x32e>
      {
        cliPrintf("%d I2C - 0x%02X : 0x%02X, %d us\n", print_ch, reg_addr, length, millis()-pre_time);
 8011962:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8011966:	f8b7 50a2 	ldrh.w	r5, [r7, #162]	; 0xa2
 801196a:	f8b7 60a0 	ldrh.w	r6, [r7, #160]	; 0xa0
 801196e:	f7f9 fdb2 	bl	800b4d6 <millis>
 8011972:	4602      	mov	r2, r0
 8011974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011978:	1ad3      	subs	r3, r2, r3
 801197a:	9300      	str	r3, [sp, #0]
 801197c:	4633      	mov	r3, r6
 801197e:	462a      	mov	r2, r5
 8011980:	4621      	mov	r1, r4
 8011982:	4811      	ldr	r0, [pc, #68]	; (80119c8 <cliI2C+0x36c>)
 8011984:	f7fa fc9c 	bl	800c2c0 <cliPrintf>
 8011988:	e074      	b.n	8011a74 <cliI2C+0x418>
      }
      else
      {
        cliPrintf("%d I2C - Fail \n", print_ch);
 801198a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 801198e:	4619      	mov	r1, r3
 8011990:	4808      	ldr	r0, [pc, #32]	; (80119b4 <cliI2C+0x358>)
 8011992:	f7fa fc95 	bl	800c2c0 <cliPrintf>
 8011996:	e06d      	b.n	8011a74 <cliI2C+0x418>
 8011998:	080166e4 	.word	0x080166e4
 801199c:	080166ec 	.word	0x080166ec
 80119a0:	08016708 	.word	0x08016708
 80119a4:	08016710 	.word	0x08016710
 80119a8:	08016724 	.word	0x08016724
 80119ac:	08016738 	.word	0x08016738
 80119b0:	08016740 	.word	0x08016740
 80119b4:	0801675c 	.word	0x0801675c
 80119b8:	0801676c 	.word	0x0801676c
 80119bc:	08016774 	.word	0x08016774
 80119c0:	08016798 	.word	0x08016798
 80119c4:	080167a0 	.word	0x080167a0
 80119c8:	080167a8 	.word	0x080167a8
      }
    }
    else if(args->isStr(0, "writeData") == true)
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	695b      	ldr	r3, [r3, #20]
 80119d0:	4939      	ldr	r1, [pc, #228]	; (8011ab8 <cliI2C+0x45c>)
 80119d2:	2000      	movs	r0, #0
 80119d4:	4798      	blx	r3
 80119d6:	4603      	mov	r3, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	d044      	beq.n	8011a66 <cliI2C+0x40a>
    {
      pre_time = millis();
 80119dc:	f7f9 fd7b 	bl	800b4d6 <millis>
 80119e0:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
      uint8_t tx_buf[5];


      tx_buf[0] = reg_addr >> 8;
 80119e4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80119e8:	0a1b      	lsrs	r3, r3, #8
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	b2db      	uxtb	r3, r3
 80119ee:	733b      	strb	r3, [r7, #12]
      tx_buf[1] = reg_addr >> 0;
 80119f0:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 80119f4:	b2db      	uxtb	r3, r3
 80119f6:	737b      	strb	r3, [r7, #13]
      tx_buf[2] = (uint8_t)length;
 80119f8:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 80119fc:	b2db      	uxtb	r3, r3
 80119fe:	73bb      	strb	r3, [r7, #14]
      tx_buf[3] = 0 - ((uint8_t)length);
 8011a00:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8011a04:	b2db      	uxtb	r3, r3
 8011a06:	425b      	negs	r3, r3
 8011a08:	b2db      	uxtb	r3, r3
 8011a0a:	73fb      	strb	r3, [r7, #15]

      i2c_ret = i2cWriteData(ch, dev_addr, tx_buf, 3, 100);
 8011a0c:	f107 020c 	add.w	r2, r7, #12
 8011a10:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8011a14:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8011a18:	2364      	movs	r3, #100	; 0x64
 8011a1a:	9300      	str	r3, [sp, #0]
 8011a1c:	2303      	movs	r3, #3
 8011a1e:	f7ff fd65 	bl	80114ec <i2cWriteData>
 8011a22:	4603      	mov	r3, r0
 8011a24:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

      if (i2c_ret == true)
 8011a28:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d013      	beq.n	8011a58 <cliI2C+0x3fc>
      {
        cliPrintf("%d I2C - 0x%02X : 0x%02X, %d us\n", print_ch, reg_addr, length, millis()-pre_time);
 8011a30:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8011a34:	f8b7 50a2 	ldrh.w	r5, [r7, #162]	; 0xa2
 8011a38:	f8b7 60a0 	ldrh.w	r6, [r7, #160]	; 0xa0
 8011a3c:	f7f9 fd4b 	bl	800b4d6 <millis>
 8011a40:	4602      	mov	r2, r0
 8011a42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011a46:	1ad3      	subs	r3, r2, r3
 8011a48:	9300      	str	r3, [sp, #0]
 8011a4a:	4633      	mov	r3, r6
 8011a4c:	462a      	mov	r2, r5
 8011a4e:	4621      	mov	r1, r4
 8011a50:	481a      	ldr	r0, [pc, #104]	; (8011abc <cliI2C+0x460>)
 8011a52:	f7fa fc35 	bl	800c2c0 <cliPrintf>
 8011a56:	e00d      	b.n	8011a74 <cliI2C+0x418>
      }
      else
      {
        cliPrintf("%d I2C - Fail \n", print_ch);
 8011a58:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8011a5c:	4619      	mov	r1, r3
 8011a5e:	4818      	ldr	r0, [pc, #96]	; (8011ac0 <cliI2C+0x464>)
 8011a60:	f7fa fc2e 	bl	800c2c0 <cliPrintf>
 8011a64:	e006      	b.n	8011a74 <cliI2C+0x418>
      }
    }
    else
    {
      ret = false;
 8011a66:	2300      	movs	r3, #0
 8011a68:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8011a6c:	e002      	b.n	8011a74 <cliI2C+0x418>
    }
  }
  else
  {
    ret = false;
 8011a6e:	2300      	movs	r3, #0
 8011a70:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
  }

  if (ret == false)
 8011a74:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8011a78:	f083 0301 	eor.w	r3, r3, #1
 8011a7c:	b2db      	uxtb	r3, r3
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d016      	beq.n	8011ab0 <cliI2C+0x454>
  {
    cliPrintf( "i2c scan channel[1~%d]\n", I2C_MAX_CH);
 8011a82:	2102      	movs	r1, #2
 8011a84:	480f      	ldr	r0, [pc, #60]	; (8011ac4 <cliI2C+0x468>)
 8011a86:	f7fa fc1b 	bl	800c2c0 <cliPrintf>
    cliPrintf( "i2c open channel[1~%d]\n", I2C_MAX_CH);
 8011a8a:	2102      	movs	r1, #2
 8011a8c:	480e      	ldr	r0, [pc, #56]	; (8011ac8 <cliI2C+0x46c>)
 8011a8e:	f7fa fc17 	bl	800c2c0 <cliPrintf>
    cliPrintf( "i2c read channel dev_addr reg_addr length\n");
 8011a92:	480e      	ldr	r0, [pc, #56]	; (8011acc <cliI2C+0x470>)
 8011a94:	f7fa fc14 	bl	800c2c0 <cliPrintf>
    cliPrintf( "i2c write channel dev_addr reg_addr data\n");
 8011a98:	480d      	ldr	r0, [pc, #52]	; (8011ad0 <cliI2C+0x474>)
 8011a9a:	f7fa fc11 	bl	800c2c0 <cliPrintf>
    cliPrintf( "i2c read16 channel dev_addr reg_addr length\n");
 8011a9e:	480d      	ldr	r0, [pc, #52]	; (8011ad4 <cliI2C+0x478>)
 8011aa0:	f7fa fc0e 	bl	800c2c0 <cliPrintf>
    cliPrintf( "i2c write16 channel dev_addr reg_addr data\n");
 8011aa4:	480c      	ldr	r0, [pc, #48]	; (8011ad8 <cliI2C+0x47c>)
 8011aa6:	f7fa fc0b 	bl	800c2c0 <cliPrintf>
    cliPrintf( "i2c writeData channel dev_addr reg_addr data\n");
 8011aaa:	480c      	ldr	r0, [pc, #48]	; (8011adc <cliI2C+0x480>)
 8011aac:	f7fa fc08 	bl	800c2c0 <cliPrintf>
  }
}
 8011ab0:	bf00      	nop
 8011ab2:	37b4      	adds	r7, #180	; 0xb4
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ab8:	080167cc 	.word	0x080167cc
 8011abc:	080167a8 	.word	0x080167a8
 8011ac0:	0801675c 	.word	0x0801675c
 8011ac4:	080167d8 	.word	0x080167d8
 8011ac8:	080167f0 	.word	0x080167f0
 8011acc:	08016808 	.word	0x08016808
 8011ad0:	08016834 	.word	0x08016834
 8011ad4:	08016860 	.word	0x08016860
 8011ad8:	08016890 	.word	0x08016890
 8011adc:	080168bc 	.word	0x080168bc

08011ae0 <constrain>:
{
 8011ae0:	b480      	push	{r7}
 8011ae2:	b085      	sub	sp, #20
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	60f8      	str	r0, [r7, #12]
 8011ae8:	60b9      	str	r1, [r7, #8]
 8011aea:	607a      	str	r2, [r7, #4]
    if (amt < low)
 8011aec:	68fa      	ldr	r2, [r7, #12]
 8011aee:	68bb      	ldr	r3, [r7, #8]
 8011af0:	429a      	cmp	r2, r3
 8011af2:	da01      	bge.n	8011af8 <constrain+0x18>
        return low;
 8011af4:	68bb      	ldr	r3, [r7, #8]
 8011af6:	e006      	b.n	8011b06 <constrain+0x26>
    else if (amt > high)
 8011af8:	68fa      	ldr	r2, [r7, #12]
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	dd01      	ble.n	8011b04 <constrain+0x24>
        return high;
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	e000      	b.n	8011b06 <constrain+0x26>
        return amt;
 8011b04:	68fb      	ldr	r3, [r7, #12]
}
 8011b06:	4618      	mov	r0, r3
 8011b08:	3714      	adds	r7, #20
 8011b0a:	46bd      	mov	sp, r7
 8011b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b10:	4770      	bx	lr
 8011b12:	bf00      	nop

08011b14 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 8011b18:	f7f9 fcdd 	bl	800b4d6 <millis>
 8011b1c:	4602      	mov	r2, r0
 8011b1e:	4b0d      	ldr	r3, [pc, #52]	; (8011b54 <TransferDoneISR+0x40>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	1ad3      	subs	r3, r2, r3
 8011b24:	4a0c      	ldr	r2, [pc, #48]	; (8011b58 <TransferDoneISR+0x44>)
 8011b26:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 8011b28:	f7f9 fcd5 	bl	800b4d6 <millis>
 8011b2c:	4603      	mov	r3, r0
 8011b2e:	4a09      	ldr	r2, [pc, #36]	; (8011b54 <TransferDoneISR+0x40>)
 8011b30:	6013      	str	r3, [r2, #0]

  if (fps_time > 0)
 8011b32:	4b09      	ldr	r3, [pc, #36]	; (8011b58 <TransferDoneISR+0x44>)
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d007      	beq.n	8011b4a <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 8011b3a:	4b07      	ldr	r3, [pc, #28]	; (8011b58 <TransferDoneISR+0x44>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8011b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b46:	4a05      	ldr	r2, [pc, #20]	; (8011b5c <TransferDoneISR+0x48>)
 8011b48:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 8011b4a:	4b05      	ldr	r3, [pc, #20]	; (8011b60 <TransferDoneISR+0x4c>)
 8011b4c:	2200      	movs	r2, #0
 8011b4e:	701a      	strb	r2, [r3, #0]
}
 8011b50:	bf00      	nop
 8011b52:	bd80      	pop	{r7, pc}
 8011b54:	20003b5c 	.word	0x20003b5c
 8011b58:	20003b60 	.word	0x20003b60
 8011b5c:	20003b64 	.word	0x20003b64
 8011b60:	20003b5a 	.word	0x20003b5a

08011b64 <lcdInit>:


bool lcdInit(void)
{
 8011b64:	b580      	push	{r7, lr}
 8011b66:	b084      	sub	sp, #16
 8011b68:	af02      	add	r7, sp, #8
  backlight_value = 100;
 8011b6a:	4b25      	ldr	r3, [pc, #148]	; (8011c00 <lcdInit+0x9c>)
 8011b6c:	2264      	movs	r2, #100	; 0x64
 8011b6e:	701a      	strb	r2, [r3, #0]
#ifdef _USE_HW_ST7735
  is_init = st7735Init();
  st7735InitDriver(&lcd);
#endif
#ifdef _USE_HW_SSD1306
  is_init = ssd1306Init();
 8011b70:	f7fb fb78 	bl	800d264 <ssd1306Init>
 8011b74:	4603      	mov	r3, r0
 8011b76:	461a      	mov	r2, r3
 8011b78:	4b22      	ldr	r3, [pc, #136]	; (8011c04 <lcdInit+0xa0>)
 8011b7a:	701a      	strb	r2, [r3, #0]
  ssd1306InitDriver(&lcd);
 8011b7c:	4822      	ldr	r0, [pc, #136]	; (8011c08 <lcdInit+0xa4>)
 8011b7e:	f7fb fb7d 	bl	800d27c <ssd1306InitDriver>
#endif

  lcd.setCallBack(TransferDoneISR);
 8011b82:	4b21      	ldr	r3, [pc, #132]	; (8011c08 <lcdInit+0xa4>)
 8011b84:	695b      	ldr	r3, [r3, #20]
 8011b86:	4821      	ldr	r0, [pc, #132]	; (8011c0c <lcdInit+0xa8>)
 8011b88:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	607b      	str	r3, [r7, #4]
 8011b8e:	e007      	b.n	8011ba0 <lcdInit+0x3c>
  {
    frame_buffer[0][i] = black;
 8011b90:	4a1f      	ldr	r2, [pc, #124]	; (8011c10 <lcdInit+0xac>)
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	2100      	movs	r1, #0
 8011b96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	3301      	adds	r3, #1
 8011b9e:	607b      	str	r3, [r7, #4]
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ba6:	dbf3      	blt.n	8011b90 <lcdInit+0x2c>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 8011ba8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8011bac:	2100      	movs	r1, #0
 8011bae:	4818      	ldr	r0, [pc, #96]	; (8011c10 <lcdInit+0xac>)
 8011bb0:	f002 fa3e 	bl	8014030 <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 8011bb4:	4b17      	ldr	r3, [pc, #92]	; (8011c14 <lcdInit+0xb0>)
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	039b      	lsls	r3, r3, #14
 8011bba:	4a15      	ldr	r2, [pc, #84]	; (8011c10 <lcdInit+0xac>)
 8011bbc:	4413      	add	r3, r2
 8011bbe:	4a16      	ldr	r2, [pc, #88]	; (8011c18 <lcdInit+0xb4>)
 8011bc0:	6013      	str	r3, [r2, #0]


  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	9300      	str	r3, [sp, #0]
 8011bc6:	2340      	movs	r3, #64	; 0x40
 8011bc8:	2280      	movs	r2, #128	; 0x80
 8011bca:	2100      	movs	r1, #0
 8011bcc:	2000      	movs	r0, #0
 8011bce:	f000 f9df 	bl	8011f90 <lcdDrawFillRect>
  lcdUpdateDraw();
 8011bd2:	f000 f8c9 	bl	8011d68 <lcdUpdateDraw>

  lcdSetBackLight(100);
 8011bd6:	2064      	movs	r0, #100	; 0x64
 8011bd8:	f000 f824 	bl	8011c24 <lcdSetBackLight>


  if (is_init != true)
 8011bdc:	4b09      	ldr	r3, [pc, #36]	; (8011c04 <lcdInit+0xa0>)
 8011bde:	781b      	ldrb	r3, [r3, #0]
 8011be0:	f083 0301 	eor.w	r3, r3, #1
 8011be4:	b2db      	uxtb	r3, r3
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d001      	beq.n	8011bee <lcdInit+0x8a>
  {
    return false;
 8011bea:	2300      	movs	r3, #0
 8011bec:	e004      	b.n	8011bf8 <lcdInit+0x94>
  }

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 8011bee:	490b      	ldr	r1, [pc, #44]	; (8011c1c <lcdInit+0xb8>)
 8011bf0:	480b      	ldr	r0, [pc, #44]	; (8011c20 <lcdInit+0xbc>)
 8011bf2:	f7fa fc75 	bl	800c4e0 <cliAdd>
#endif

  return true;
 8011bf6:	2301      	movs	r3, #1
}
 8011bf8:	4618      	mov	r0, r3
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}
 8011c00:	200001ec 	.word	0x200001ec
 8011c04:	20003b58 	.word	0x20003b58
 8011c08:	20003b3c 	.word	0x20003b3c
 8011c0c:	08011b15 	.word	0x08011b15
 8011c10:	20003b80 	.word	0x20003b80
 8011c14:	20003b59 	.word	0x20003b59
 8011c18:	20003b68 	.word	0x20003b68
 8011c1c:	080123b1 	.word	0x080123b1
 8011c20:	08022bdc 	.word	0x08022bdc

08011c24 <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b082      	sub	sp, #8
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	4603      	mov	r3, r0
 8011c2c:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 8011c2e:	79fb      	ldrb	r3, [r7, #7]
 8011c30:	2264      	movs	r2, #100	; 0x64
 8011c32:	2100      	movs	r1, #0
 8011c34:	4618      	mov	r0, r3
 8011c36:	f7ff ff53 	bl	8011ae0 <constrain>
 8011c3a:	4603      	mov	r3, r0
 8011c3c:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 8011c3e:	4b0c      	ldr	r3, [pc, #48]	; (8011c70 <lcdSetBackLight+0x4c>)
 8011c40:	781b      	ldrb	r3, [r3, #0]
 8011c42:	79fa      	ldrb	r2, [r7, #7]
 8011c44:	429a      	cmp	r2, r3
 8011c46:	d002      	beq.n	8011c4e <lcdSetBackLight+0x2a>
  {
    backlight_value = value;
 8011c48:	4a09      	ldr	r2, [pc, #36]	; (8011c70 <lcdSetBackLight+0x4c>)
 8011c4a:	79fb      	ldrb	r3, [r7, #7]
 8011c4c:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 8011c4e:	4b08      	ldr	r3, [pc, #32]	; (8011c70 <lcdSetBackLight+0x4c>)
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d004      	beq.n	8011c60 <lcdSetBackLight+0x3c>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 8011c56:	2101      	movs	r1, #1
 8011c58:	2001      	movs	r0, #1
 8011c5a:	f7ff f8bb 	bl	8010dd4 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 8011c5e:	e003      	b.n	8011c68 <lcdSetBackLight+0x44>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 8011c60:	2100      	movs	r1, #0
 8011c62:	2001      	movs	r0, #1
 8011c64:	f7ff f8b6 	bl	8010dd4 <gpioPinWrite>
}
 8011c68:	bf00      	nop
 8011c6a:	3708      	adds	r7, #8
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	200001ec 	.word	0x200001ec

08011c74 <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 8011c74:	4b03      	ldr	r3, [pc, #12]	; (8011c84 <lcdDrawPixel+0x10>)
 8011c76:	eb00 11c1 	add.w	r1, r0, r1, lsl #7
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8011c80:	4770      	bx	lr
 8011c82:	bf00      	nop
 8011c84:	20003b68 	.word	0x20003b68

08011c88 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8011c88:	b510      	push	{r4, lr}
 8011c8a:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 8011c8c:	f000 f898 	bl	8011dc0 <lcdGetFrameBuffer>
 8011c90:	f500 517f 	add.w	r1, r0, #16320	; 0x3fc0

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8011c94:	b2a2      	uxth	r2, r4
 8011c96:	1e83      	subs	r3, r0, #2
 8011c98:	313e      	adds	r1, #62	; 0x3e
 8011c9a:	f823 2f02 	strh.w	r2, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 8011c9e:	428b      	cmp	r3, r1
 8011ca0:	d1fb      	bne.n	8011c9a <lcdClearBuffer+0x12>
  }
}
 8011ca2:	bd10      	pop	{r4, pc}

08011ca4 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 8011ca4:	b480      	push	{r7}
 8011ca6:	af00      	add	r7, sp, #0
  return fps_count;
 8011ca8:	4b03      	ldr	r3, [pc, #12]	; (8011cb8 <lcdGetFps+0x14>)
 8011caa:	681b      	ldr	r3, [r3, #0]
}
 8011cac:	4618      	mov	r0, r3
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb4:	4770      	bx	lr
 8011cb6:	bf00      	nop
 8011cb8:	20003b64 	.word	0x20003b64

08011cbc <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 8011cbc:	b480      	push	{r7}
 8011cbe:	af00      	add	r7, sp, #0
  return fps_time;
 8011cc0:	4b03      	ldr	r3, [pc, #12]	; (8011cd0 <lcdGetFpsTime+0x14>)
 8011cc2:	681b      	ldr	r3, [r3, #0]
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	46bd      	mov	sp, r7
 8011cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ccc:	4770      	bx	lr
 8011cce:	bf00      	nop
 8011cd0:	20003b60 	.word	0x20003b60

08011cd4 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 8011cd4:	b480      	push	{r7}
 8011cd6:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 8011cd8:	4b08      	ldr	r3, [pc, #32]	; (8011cfc <lcdDrawAvailable+0x28>)
 8011cda:	781b      	ldrb	r3, [r3, #0]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	bf14      	ite	ne
 8011ce0:	2301      	movne	r3, #1
 8011ce2:	2300      	moveq	r3, #0
 8011ce4:	b2db      	uxtb	r3, r3
 8011ce6:	f083 0301 	eor.w	r3, r3, #1
 8011cea:	b2db      	uxtb	r3, r3
 8011cec:	f003 0301 	and.w	r3, r3, #1
 8011cf0:	b2db      	uxtb	r3, r3
}
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	46bd      	mov	sp, r7
 8011cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfa:	4770      	bx	lr
 8011cfc:	20003b5a 	.word	0x20003b5a

08011d00 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 8011d00:	b598      	push	{r3, r4, r7, lr}
 8011d02:	af00      	add	r7, sp, #0
  if (is_init != true)
 8011d04:	4b13      	ldr	r3, [pc, #76]	; (8011d54 <lcdRequestDraw+0x54>)
 8011d06:	781b      	ldrb	r3, [r3, #0]
 8011d08:	f083 0301 	eor.w	r3, r3, #1
 8011d0c:	b2db      	uxtb	r3, r3
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d001      	beq.n	8011d16 <lcdRequestDraw+0x16>
  {
    return false;
 8011d12:	2300      	movs	r3, #0
 8011d14:	e01b      	b.n	8011d4e <lcdRequestDraw+0x4e>
  }
  if (lcd_request_draw == true)
 8011d16:	4b10      	ldr	r3, [pc, #64]	; (8011d58 <lcdRequestDraw+0x58>)
 8011d18:	781b      	ldrb	r3, [r3, #0]
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d001      	beq.n	8011d22 <lcdRequestDraw+0x22>
  {
    return false;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	e015      	b.n	8011d4e <lcdRequestDraw+0x4e>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 8011d22:	4b0e      	ldr	r3, [pc, #56]	; (8011d5c <lcdRequestDraw+0x5c>)
 8011d24:	689c      	ldr	r4, [r3, #8]
 8011d26:	233f      	movs	r3, #63	; 0x3f
 8011d28:	227f      	movs	r2, #127	; 0x7f
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	2000      	movs	r0, #0
 8011d2e:	47a0      	blx	r4

  lcd_request_draw = true;
 8011d30:	4b09      	ldr	r3, [pc, #36]	; (8011d58 <lcdRequestDraw+0x58>)
 8011d32:	2201      	movs	r2, #1
 8011d34:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 8011d36:	4b09      	ldr	r3, [pc, #36]	; (8011d5c <lcdRequestDraw+0x5c>)
 8011d38:	699b      	ldr	r3, [r3, #24]
 8011d3a:	4a09      	ldr	r2, [pc, #36]	; (8011d60 <lcdRequestDraw+0x60>)
 8011d3c:	7812      	ldrb	r2, [r2, #0]
 8011d3e:	0392      	lsls	r2, r2, #14
 8011d40:	4908      	ldr	r1, [pc, #32]	; (8011d64 <lcdRequestDraw+0x64>)
 8011d42:	1850      	adds	r0, r2, r1
 8011d44:	2200      	movs	r2, #0
 8011d46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011d4a:	4798      	blx	r3

  return true;
 8011d4c:	2301      	movs	r3, #1
}
 8011d4e:	4618      	mov	r0, r3
 8011d50:	bd98      	pop	{r3, r4, r7, pc}
 8011d52:	bf00      	nop
 8011d54:	20003b58 	.word	0x20003b58
 8011d58:	20003b5a 	.word	0x20003b5a
 8011d5c:	20003b3c 	.word	0x20003b3c
 8011d60:	20003b59 	.word	0x20003b59
 8011d64:	20003b80 	.word	0x20003b80

08011d68 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 8011d68:	b580      	push	{r7, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  if (is_init != true)
 8011d6e:	4b13      	ldr	r3, [pc, #76]	; (8011dbc <lcdUpdateDraw+0x54>)
 8011d70:	781b      	ldrb	r3, [r3, #0]
 8011d72:	f083 0301 	eor.w	r3, r3, #1
 8011d76:	b2db      	uxtb	r3, r3
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d118      	bne.n	8011dae <lcdUpdateDraw+0x46>
  {
    return;
  }

  lcdRequestDraw();
 8011d7c:	f7ff ffc0 	bl	8011d00 <lcdRequestDraw>

  pre_time = millis();
 8011d80:	f7f9 fba9 	bl	800b4d6 <millis>
 8011d84:	6078      	str	r0, [r7, #4]
  while(lcdDrawAvailable() != true)
 8011d86:	e009      	b.n	8011d9c <lcdUpdateDraw+0x34>
  {
    delay(1);
 8011d88:	2001      	movs	r0, #1
 8011d8a:	f7f9 fb91 	bl	800b4b0 <delay>
    if (millis()-pre_time >= 100)
 8011d8e:	f7f9 fba2 	bl	800b4d6 <millis>
 8011d92:	4602      	mov	r2, r0
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	1ad3      	subs	r3, r2, r3
 8011d98:	2b63      	cmp	r3, #99	; 0x63
 8011d9a:	d80a      	bhi.n	8011db2 <lcdUpdateDraw+0x4a>
  while(lcdDrawAvailable() != true)
 8011d9c:	f7ff ff9a 	bl	8011cd4 <lcdDrawAvailable>
 8011da0:	4603      	mov	r3, r0
 8011da2:	f083 0301 	eor.w	r3, r3, #1
 8011da6:	b2db      	uxtb	r3, r3
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d1ed      	bne.n	8011d88 <lcdUpdateDraw+0x20>
 8011dac:	e002      	b.n	8011db4 <lcdUpdateDraw+0x4c>
    return;
 8011dae:	bf00      	nop
 8011db0:	e000      	b.n	8011db4 <lcdUpdateDraw+0x4c>
    {
      break;
 8011db2:	bf00      	nop
    }
  }
}
 8011db4:	3708      	adds	r7, #8
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	20003b58 	.word	0x20003b58

08011dc0 <lcdGetFrameBuffer>:

  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 8011dc0:	b480      	push	{r7}
 8011dc2:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 8011dc4:	4b03      	ldr	r3, [pc, #12]	; (8011dd4 <lcdGetFrameBuffer+0x14>)
 8011dc6:	681b      	ldr	r3, [r3, #0]
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	46bd      	mov	sp, r7
 8011dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dd0:	4770      	bx	lr
 8011dd2:	bf00      	nop
 8011dd4:	20003b68 	.word	0x20003b68

08011dd8 <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8011dd8:	b590      	push	{r4, r7, lr}
 8011dda:	b089      	sub	sp, #36	; 0x24
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	4604      	mov	r4, r0
 8011de0:	4608      	mov	r0, r1
 8011de2:	4611      	mov	r1, r2
 8011de4:	461a      	mov	r2, r3
 8011de6:	4623      	mov	r3, r4
 8011de8:	80fb      	strh	r3, [r7, #6]
 8011dea:	4603      	mov	r3, r0
 8011dec:	80bb      	strh	r3, [r7, #4]
 8011dee:	460b      	mov	r3, r1
 8011df0:	807b      	strh	r3, [r7, #2]
 8011df2:	4613      	mov	r3, r2
 8011df4:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8011df6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011dfa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011dfe:	1ad3      	subs	r3, r2, r3
 8011e00:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011e04:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8011e08:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8011e0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e10:	1acb      	subs	r3, r1, r3
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	bfb8      	it	lt
 8011e16:	425b      	neglt	r3, r3
 8011e18:	429a      	cmp	r2, r3
 8011e1a:	bfcc      	ite	gt
 8011e1c:	2301      	movgt	r3, #1
 8011e1e:	2300      	movle	r3, #0
 8011e20:	b2db      	uxtb	r3, r3
 8011e22:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 8011e24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	da01      	bge.n	8011e30 <lcdDrawLine+0x58>
 8011e2c:	2300      	movs	r3, #0
 8011e2e:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 8011e30:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	da01      	bge.n	8011e3c <lcdDrawLine+0x64>
 8011e38:	2300      	movs	r3, #0
 8011e3a:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 8011e3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	da01      	bge.n	8011e48 <lcdDrawLine+0x70>
 8011e44:	2300      	movs	r3, #0
 8011e46:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 8011e48:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	da01      	bge.n	8011e54 <lcdDrawLine+0x7c>
 8011e50:	2300      	movs	r3, #0
 8011e52:	803b      	strh	r3, [r7, #0]


  if (steep)
 8011e54:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d00b      	beq.n	8011e74 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 8011e5c:	88fb      	ldrh	r3, [r7, #6]
 8011e5e:	833b      	strh	r3, [r7, #24]
 8011e60:	88bb      	ldrh	r3, [r7, #4]
 8011e62:	80fb      	strh	r3, [r7, #6]
 8011e64:	8b3b      	ldrh	r3, [r7, #24]
 8011e66:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8011e68:	887b      	ldrh	r3, [r7, #2]
 8011e6a:	82fb      	strh	r3, [r7, #22]
 8011e6c:	883b      	ldrh	r3, [r7, #0]
 8011e6e:	807b      	strh	r3, [r7, #2]
 8011e70:	8afb      	ldrh	r3, [r7, #22]
 8011e72:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8011e74:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011e78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011e7c:	429a      	cmp	r2, r3
 8011e7e:	dd0b      	ble.n	8011e98 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 8011e80:	88fb      	ldrh	r3, [r7, #6]
 8011e82:	82bb      	strh	r3, [r7, #20]
 8011e84:	887b      	ldrh	r3, [r7, #2]
 8011e86:	80fb      	strh	r3, [r7, #6]
 8011e88:	8abb      	ldrh	r3, [r7, #20]
 8011e8a:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8011e8c:	88bb      	ldrh	r3, [r7, #4]
 8011e8e:	827b      	strh	r3, [r7, #18]
 8011e90:	883b      	ldrh	r3, [r7, #0]
 8011e92:	80bb      	strh	r3, [r7, #4]
 8011e94:	8a7b      	ldrh	r3, [r7, #18]
 8011e96:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8011e98:	887a      	ldrh	r2, [r7, #2]
 8011e9a:	88fb      	ldrh	r3, [r7, #6]
 8011e9c:	1ad3      	subs	r3, r2, r3
 8011e9e:	b29b      	uxth	r3, r3
 8011ea0:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8011ea2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011ea6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8011eaa:	1ad3      	subs	r3, r2, r3
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	bfb8      	it	lt
 8011eb0:	425b      	neglt	r3, r3
 8011eb2:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8011eb4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8011eb8:	0fda      	lsrs	r2, r3, #31
 8011eba:	4413      	add	r3, r2
 8011ebc:	105b      	asrs	r3, r3, #1
 8011ebe:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 8011ec0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8011ec4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	da02      	bge.n	8011ed2 <lcdDrawLine+0xfa>
  {
    ystep = 1;
 8011ecc:	2301      	movs	r3, #1
 8011ece:	83bb      	strh	r3, [r7, #28]
 8011ed0:	e02d      	b.n	8011f2e <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 8011ed2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ed6:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8011ed8:	e029      	b.n	8011f2e <lcdDrawLine+0x156>
  {
    if (steep)
 8011eda:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d006      	beq.n	8011ef0 <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 8011ee2:	88bb      	ldrh	r3, [r7, #4]
 8011ee4:	88f9      	ldrh	r1, [r7, #6]
 8011ee6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f7ff fec3 	bl	8011c74 <lcdDrawPixel>
 8011eee:	e005      	b.n	8011efc <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 8011ef0:	88fb      	ldrh	r3, [r7, #6]
 8011ef2:	88b9      	ldrh	r1, [r7, #4]
 8011ef4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	f7ff febc 	bl	8011c74 <lcdDrawPixel>
    }
    err -= dy;
 8011efc:	8bfa      	ldrh	r2, [r7, #30]
 8011efe:	89fb      	ldrh	r3, [r7, #14]
 8011f00:	1ad3      	subs	r3, r2, r3
 8011f02:	b29b      	uxth	r3, r3
 8011f04:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 8011f06:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	da09      	bge.n	8011f22 <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 8011f0e:	88ba      	ldrh	r2, [r7, #4]
 8011f10:	8bbb      	ldrh	r3, [r7, #28]
 8011f12:	4413      	add	r3, r2
 8011f14:	b29b      	uxth	r3, r3
 8011f16:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8011f18:	8bfa      	ldrh	r2, [r7, #30]
 8011f1a:	8a3b      	ldrh	r3, [r7, #16]
 8011f1c:	4413      	add	r3, r2
 8011f1e:	b29b      	uxth	r3, r3
 8011f20:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 8011f22:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011f26:	b29b      	uxth	r3, r3
 8011f28:	3301      	adds	r3, #1
 8011f2a:	b29b      	uxth	r3, r3
 8011f2c:	80fb      	strh	r3, [r7, #6]
 8011f2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011f32:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011f36:	429a      	cmp	r2, r3
 8011f38:	ddcf      	ble.n	8011eda <lcdDrawLine+0x102>
    }
  }
}
 8011f3a:	bf00      	nop
 8011f3c:	bf00      	nop
 8011f3e:	3724      	adds	r7, #36	; 0x24
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd90      	pop	{r4, r7, pc}

08011f44 <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8011f44:	b590      	push	{r4, r7, lr}
 8011f46:	b085      	sub	sp, #20
 8011f48:	af02      	add	r7, sp, #8
 8011f4a:	4604      	mov	r4, r0
 8011f4c:	4608      	mov	r0, r1
 8011f4e:	4611      	mov	r1, r2
 8011f50:	461a      	mov	r2, r3
 8011f52:	4623      	mov	r3, r4
 8011f54:	80fb      	strh	r3, [r7, #6]
 8011f56:	4603      	mov	r3, r0
 8011f58:	80bb      	strh	r3, [r7, #4]
 8011f5a:	460b      	mov	r3, r1
 8011f5c:	807b      	strh	r3, [r7, #2]
 8011f5e:	4613      	mov	r3, r2
 8011f60:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 8011f62:	88ba      	ldrh	r2, [r7, #4]
 8011f64:	887b      	ldrh	r3, [r7, #2]
 8011f66:	4413      	add	r3, r2
 8011f68:	b29b      	uxth	r3, r3
 8011f6a:	3b01      	subs	r3, #1
 8011f6c:	b29b      	uxth	r3, r3
 8011f6e:	b21c      	sxth	r4, r3
 8011f70:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011f74:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011f78:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8011f7c:	883b      	ldrh	r3, [r7, #0]
 8011f7e:	9300      	str	r3, [sp, #0]
 8011f80:	4623      	mov	r3, r4
 8011f82:	f7ff ff29 	bl	8011dd8 <lcdDrawLine>
}
 8011f86:	bf00      	nop
 8011f88:	370c      	adds	r7, #12
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd90      	pop	{r4, r7, pc}
 8011f8e:	bf00      	nop

08011f90 <lcdDrawFillRect>:
{
  lcdDrawLine(x, y, x+w-1, y, color);
}

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8011f90:	b590      	push	{r4, r7, lr}
 8011f92:	b085      	sub	sp, #20
 8011f94:	af00      	add	r7, sp, #0
 8011f96:	4604      	mov	r4, r0
 8011f98:	4608      	mov	r0, r1
 8011f9a:	4611      	mov	r1, r2
 8011f9c:	461a      	mov	r2, r3
 8011f9e:	4623      	mov	r3, r4
 8011fa0:	80fb      	strh	r3, [r7, #6]
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	80bb      	strh	r3, [r7, #4]
 8011fa6:	460b      	mov	r3, r1
 8011fa8:	807b      	strh	r3, [r7, #2]
 8011faa:	4613      	mov	r3, r2
 8011fac:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 8011fae:	88fb      	ldrh	r3, [r7, #6]
 8011fb0:	81fb      	strh	r3, [r7, #14]
 8011fb2:	e00e      	b.n	8011fd2 <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 8011fb4:	8c3b      	ldrh	r3, [r7, #32]
 8011fb6:	f9b7 2000 	ldrsh.w	r2, [r7]
 8011fba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8011fbe:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8011fc2:	f7ff ffbf 	bl	8011f44 <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 8011fc6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8011fca:	b29b      	uxth	r3, r3
 8011fcc:	3301      	adds	r3, #1
 8011fce:	b29b      	uxth	r3, r3
 8011fd0:	81fb      	strh	r3, [r7, #14]
 8011fd2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8011fd6:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8011fda:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011fde:	440b      	add	r3, r1
 8011fe0:	429a      	cmp	r2, r3
 8011fe2:	dbe7      	blt.n	8011fb4 <lcdDrawFillRect+0x24>
  }
}
 8011fe4:	bf00      	nop
 8011fe6:	bf00      	nop
 8011fe8:	3714      	adds	r7, #20
 8011fea:	46bd      	mov	sp, r7
 8011fec:	bd90      	pop	{r4, r7, pc}
 8011fee:	bf00      	nop

08011ff0 <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 8011ff0:	b408      	push	{r3}
 8011ff2:	b590      	push	{r4, r7, lr}
 8011ff4:	b0d8      	sub	sp, #352	; 0x160
 8011ff6:	af02      	add	r7, sp, #8
 8011ff8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8011ffc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8012000:	6018      	str	r0, [r3, #0]
 8012002:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012006:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 801200a:	6019      	str	r1, [r3, #0]
 801200c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012010:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8012014:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 8012016:	f507 73b4 	add.w	r3, r7, #360	; 0x168
 801201a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 801201e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012022:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8012026:	681b      	ldr	r3, [r3, #0]
 8012028:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  han_font_t FontBuf;
  uint8_t font_width;
  uint8_t font_height;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 801202c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8012030:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8012034:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8012038:	21ff      	movs	r1, #255	; 0xff
 801203a:	f001 ffeb 	bl	8014014 <vsniprintf>
 801203e:	f8c7 0148 	str.w	r0, [r7, #328]	; 0x148
  va_end (arg);

  if (font_tbl[lcd_font]->data != NULL)
 8012042:	4b80      	ldr	r3, [pc, #512]	; (8012244 <lcdPrintf+0x254>)
 8012044:	781b      	ldrb	r3, [r3, #0]
 8012046:	461a      	mov	r2, r3
 8012048:	4b7f      	ldr	r3, [pc, #508]	; (8012248 <lcdPrintf+0x258>)
 801204a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801204e:	685b      	ldr	r3, [r3, #4]
 8012050:	2b00      	cmp	r3, #0
 8012052:	d072      	beq.n	801213a <lcdPrintf+0x14a>
  {
    for( i=0; i<len; i+=Size_Char )
 8012054:	2300      	movs	r3, #0
 8012056:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801205a:	e067      	b.n	801212c <lcdPrintf+0x13c>
    {
      disEngFont(x, y, print_buffer[i], font_tbl[lcd_font], color);
 801205c:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012060:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 8012064:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8012068:	4413      	add	r3, r2
 801206a:	781a      	ldrb	r2, [r3, #0]
 801206c:	4b75      	ldr	r3, [pc, #468]	; (8012244 <lcdPrintf+0x254>)
 801206e:	781b      	ldrb	r3, [r3, #0]
 8012070:	4619      	mov	r1, r3
 8012072:	4b75      	ldr	r3, [pc, #468]	; (8012248 <lcdPrintf+0x258>)
 8012074:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
 8012078:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801207c:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 8012080:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012084:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 8012088:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801208c:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8012090:	881b      	ldrh	r3, [r3, #0]
 8012092:	9300      	str	r3, [sp, #0]
 8012094:	4623      	mov	r3, r4
 8012096:	6809      	ldr	r1, [r1, #0]
 8012098:	6800      	ldr	r0, [r0, #0]
 801209a:	f000 f92d 	bl	80122f8 <disEngFont>

      Size_Char = 1;
 801209e:	2301      	movs	r3, #1
 80120a0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      font_width = font_tbl[lcd_font]->width;
 80120a4:	4b67      	ldr	r3, [pc, #412]	; (8012244 <lcdPrintf+0x254>)
 80120a6:	781b      	ldrb	r3, [r3, #0]
 80120a8:	461a      	mov	r2, r3
 80120aa:	4b67      	ldr	r3, [pc, #412]	; (8012248 <lcdPrintf+0x258>)
 80120ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
      font_height = font_tbl[lcd_font]->height;
 80120b6:	4b63      	ldr	r3, [pc, #396]	; (8012244 <lcdPrintf+0x254>)
 80120b8:	781b      	ldrb	r3, [r3, #0]
 80120ba:	461a      	mov	r2, r3
 80120bc:	4b62      	ldr	r3, [pc, #392]	; (8012248 <lcdPrintf+0x258>)
 80120be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120c2:	785b      	ldrb	r3, [r3, #1]
 80120c4:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
      x += font_width;
 80120c8:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80120cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80120d0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80120d4:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 80120d8:	f5a1 71a6 	sub.w	r1, r1, #332	; 0x14c
 80120dc:	6809      	ldr	r1, [r1, #0]
 80120de:	440a      	add	r2, r1
 80120e0:	601a      	str	r2, [r3, #0]

      if ((x+font_width) > HW_LCD_WIDTH)
 80120e2:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80120e6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80120ea:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	4413      	add	r3, r2
 80120f2:	2b80      	cmp	r3, #128	; 0x80
 80120f4:	dd13      	ble.n	801211e <lcdPrintf+0x12e>
      {
        x  = x_Pre;
 80120f6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80120fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80120fe:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8012102:	601a      	str	r2, [r3, #0]
        y += font_height;
 8012104:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 8012108:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801210c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8012110:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 8012114:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 8012118:	6809      	ldr	r1, [r1, #0]
 801211a:	440a      	add	r2, r1
 801211c:	601a      	str	r2, [r3, #0]
    for( i=0; i<len; i+=Size_Char )
 801211e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8012122:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8012126:	4413      	add	r3, r2
 8012128:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 801212c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8012130:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8012134:	429a      	cmp	r2, r3
 8012136:	db91      	blt.n	801205c <lcdPrintf+0x6c>
      }

      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
    }
  }
}
 8012138:	e07b      	b.n	8012232 <lcdPrintf+0x242>
    for( i=0; i<len; i+=Size_Char )
 801213a:	2300      	movs	r3, #0
 801213c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8012140:	e06f      	b.n	8012222 <lcdPrintf+0x232>
      hanFontLoad( &print_buffer[i], &FontBuf );
 8012142:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8012146:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801214a:	4413      	add	r3, r2
 801214c:	f107 0214 	add.w	r2, r7, #20
 8012150:	4611      	mov	r1, r2
 8012152:	4618      	mov	r0, r3
 8012154:	f7fa fdb0 	bl	800ccb8 <hanFontLoad>
      disHanFont( x, y, &FontBuf, color);
 8012158:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801215c:	f5a3 73a9 	sub.w	r3, r3, #338	; 0x152
 8012160:	881b      	ldrh	r3, [r3, #0]
 8012162:	f107 0214 	add.w	r2, r7, #20
 8012166:	f507 71ac 	add.w	r1, r7, #344	; 0x158
 801216a:	f5a1 71a8 	sub.w	r1, r1, #336	; 0x150
 801216e:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8012172:	f5a0 70a6 	sub.w	r0, r0, #332	; 0x14c
 8012176:	6809      	ldr	r1, [r1, #0]
 8012178:	6800      	ldr	r0, [r0, #0]
 801217a:	f000 f867 	bl	801224c <disHanFont>
      Size_Char = FontBuf.Size_Char;
 801217e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8012182:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8012186:	885b      	ldrh	r3, [r3, #2]
 8012188:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
      if (Size_Char >= 2)
 801218c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8012190:	2b01      	cmp	r3, #1
 8012192:	dd0e      	ble.n	80121b2 <lcdPrintf+0x1c2>
        font_width = 16;
 8012194:	2310      	movs	r3, #16
 8012196:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 2*8;
 801219a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801219e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80121a2:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80121a6:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80121aa:	6812      	ldr	r2, [r2, #0]
 80121ac:	3210      	adds	r2, #16
 80121ae:	601a      	str	r2, [r3, #0]
 80121b0:	e00d      	b.n	80121ce <lcdPrintf+0x1de>
        font_width = 8;
 80121b2:	2308      	movs	r3, #8
 80121b4:	f887 3153 	strb.w	r3, [r7, #339]	; 0x153
        x += 1*8;
 80121b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80121bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80121c0:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80121c4:	f5a2 72a6 	sub.w	r2, r2, #332	; 0x14c
 80121c8:	6812      	ldr	r2, [r2, #0]
 80121ca:	3208      	adds	r2, #8
 80121cc:	601a      	str	r2, [r3, #0]
      if ((x+font_width) > HW_LCD_WIDTH)
 80121ce:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
 80121d2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80121d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	4413      	add	r3, r2
 80121de:	2b80      	cmp	r3, #128	; 0x80
 80121e0:	dd11      	ble.n	8012206 <lcdPrintf+0x216>
        x  = x_Pre;
 80121e2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80121e6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80121ea:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80121ee:	601a      	str	r2, [r3, #0]
        y += 16;
 80121f0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80121f4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80121f8:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 80121fc:	f5a2 72a8 	sub.w	r2, r2, #336	; 0x150
 8012200:	6812      	ldr	r2, [r2, #0]
 8012202:	3210      	adds	r2, #16
 8012204:	601a      	str	r2, [r3, #0]
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8012206:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 801220a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 801220e:	889b      	ldrh	r3, [r3, #4]
 8012210:	2b04      	cmp	r3, #4
 8012212:	d00d      	beq.n	8012230 <lcdPrintf+0x240>
    for( i=0; i<len; i+=Size_Char )
 8012214:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8012218:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801221c:	4413      	add	r3, r2
 801221e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8012222:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8012226:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801222a:	429a      	cmp	r2, r3
 801222c:	db89      	blt.n	8012142 <lcdPrintf+0x152>
}
 801222e:	e000      	b.n	8012232 <lcdPrintf+0x242>
      if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8012230:	bf00      	nop
}
 8012232:	bf00      	nop
 8012234:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8012238:	46bd      	mov	sp, r7
 801223a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 801223e:	b001      	add	sp, #4
 8012240:	4770      	bx	lr
 8012242:	bf00      	nop
 8012244:	200001ed 	.word	0x200001ed
 8012248:	200001f0 	.word	0x200001f0

0801224c <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 801224c:	b580      	push	{r7, lr}
 801224e:	b088      	sub	sp, #32
 8012250:	af00      	add	r7, sp, #0
 8012252:	60f8      	str	r0, [r7, #12]
 8012254:	60b9      	str	r1, [r7, #8]
 8012256:	607a      	str	r2, [r7, #4]
 8012258:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	885b      	ldrh	r3, [r3, #2]
 801225e:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 8012260:	8b3b      	ldrh	r3, [r7, #24]
 8012262:	2b02      	cmp	r3, #2
 8012264:	d901      	bls.n	801226a <disHanFont+0x1e>
  {
    FontSize = 2;
 8012266:	2302      	movs	r3, #2
 8012268:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 801226a:	2300      	movs	r3, #0
 801226c:	83fb      	strh	r3, [r7, #30]
 801226e:	e03a      	b.n	80122e6 <disHanFont+0x9a>
  {
    index_x = 0;
 8012270:	2300      	movs	r3, #0
 8012272:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8012274:	2300      	movs	r3, #0
 8012276:	83bb      	strh	r3, [r7, #28]
 8012278:	e02e      	b.n	80122d8 <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 801227a:	8bfb      	ldrh	r3, [r7, #30]
 801227c:	8b3a      	ldrh	r2, [r7, #24]
 801227e:	fb03 f202 	mul.w	r2, r3, r2
 8012282:	8bbb      	ldrh	r3, [r7, #28]
 8012284:	4413      	add	r3, r2
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	4413      	add	r3, r2
 801228a:	799b      	ldrb	r3, [r3, #6]
 801228c:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 801228e:	2300      	movs	r3, #0
 8012290:	837b      	strh	r3, [r7, #26]
 8012292:	e01b      	b.n	80122cc <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 8012294:	7d7a      	ldrb	r2, [r7, #21]
 8012296:	8b7b      	ldrh	r3, [r7, #26]
 8012298:	fa02 f303 	lsl.w	r3, r2, r3
 801229c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d00d      	beq.n	80122c0 <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	b29a      	uxth	r2, r3
 80122a8:	8afb      	ldrh	r3, [r7, #22]
 80122aa:	4413      	add	r3, r2
 80122ac:	b298      	uxth	r0, r3
 80122ae:	68bb      	ldr	r3, [r7, #8]
 80122b0:	b29a      	uxth	r2, r3
 80122b2:	8bfb      	ldrh	r3, [r7, #30]
 80122b4:	4413      	add	r3, r2
 80122b6:	b29b      	uxth	r3, r3
 80122b8:	887a      	ldrh	r2, [r7, #2]
 80122ba:	4619      	mov	r1, r3
 80122bc:	f7ff fcda 	bl	8011c74 <lcdDrawPixel>
        }
        index_x++;
 80122c0:	8afb      	ldrh	r3, [r7, #22]
 80122c2:	3301      	adds	r3, #1
 80122c4:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 80122c6:	8b7b      	ldrh	r3, [r7, #26]
 80122c8:	3301      	adds	r3, #1
 80122ca:	837b      	strh	r3, [r7, #26]
 80122cc:	8b7b      	ldrh	r3, [r7, #26]
 80122ce:	2b07      	cmp	r3, #7
 80122d0:	d9e0      	bls.n	8012294 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 80122d2:	8bbb      	ldrh	r3, [r7, #28]
 80122d4:	3301      	adds	r3, #1
 80122d6:	83bb      	strh	r3, [r7, #28]
 80122d8:	8bba      	ldrh	r2, [r7, #28]
 80122da:	8b3b      	ldrh	r3, [r7, #24]
 80122dc:	429a      	cmp	r2, r3
 80122de:	d3cc      	bcc.n	801227a <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 80122e0:	8bfb      	ldrh	r3, [r7, #30]
 80122e2:	3301      	adds	r3, #1
 80122e4:	83fb      	strh	r3, [r7, #30]
 80122e6:	8bfb      	ldrh	r3, [r7, #30]
 80122e8:	2b0f      	cmp	r3, #15
 80122ea:	d9c1      	bls.n	8012270 <disHanFont+0x24>
      }
    }
  }
}
 80122ec:	bf00      	nop
 80122ee:	bf00      	nop
 80122f0:	3720      	adds	r7, #32
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}
 80122f6:	bf00      	nop

080122f8 <disEngFont>:

void disEngFont(int x, int y, char ch, lcd_font_t *font, uint16_t textcolor)
{
 80122f8:	b580      	push	{r7, lr}
 80122fa:	b088      	sub	sp, #32
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	60f8      	str	r0, [r7, #12]
 8012300:	60b9      	str	r1, [r7, #8]
 8012302:	603b      	str	r3, [r7, #0]
 8012304:	4613      	mov	r3, r2
 8012306:	71fb      	strb	r3, [r7, #7]
  uint32_t i, b, j;


  // We gaan door het font
  for (i = 0; i < font->height; i++)
 8012308:	2300      	movs	r3, #0
 801230a:	61fb      	str	r3, [r7, #28]
 801230c:	e035      	b.n	801237a <disEngFont+0x82>
  {
    b = font->data[(ch - 32) * font->height + i];
 801230e:	683b      	ldr	r3, [r7, #0]
 8012310:	685a      	ldr	r2, [r3, #4]
 8012312:	79fb      	ldrb	r3, [r7, #7]
 8012314:	3b20      	subs	r3, #32
 8012316:	6839      	ldr	r1, [r7, #0]
 8012318:	7849      	ldrb	r1, [r1, #1]
 801231a:	fb01 f303 	mul.w	r3, r1, r3
 801231e:	4619      	mov	r1, r3
 8012320:	69fb      	ldr	r3, [r7, #28]
 8012322:	440b      	add	r3, r1
 8012324:	005b      	lsls	r3, r3, #1
 8012326:	4413      	add	r3, r2
 8012328:	881b      	ldrh	r3, [r3, #0]
 801232a:	617b      	str	r3, [r7, #20]
    for (j = 0; j < font->width; j++)
 801232c:	2300      	movs	r3, #0
 801232e:	61bb      	str	r3, [r7, #24]
 8012330:	e01a      	b.n	8012368 <disEngFont+0x70>
    {
      if ((b << j) & 0x8000)
 8012332:	697a      	ldr	r2, [r7, #20]
 8012334:	69bb      	ldr	r3, [r7, #24]
 8012336:	fa02 f303 	lsl.w	r3, r2, r3
 801233a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801233e:	2b00      	cmp	r3, #0
 8012340:	d00f      	beq.n	8012362 <disEngFont+0x6a>
      {
        lcdDrawPixel(x + j, (y + i), textcolor);
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	b29a      	uxth	r2, r3
 8012346:	69bb      	ldr	r3, [r7, #24]
 8012348:	b29b      	uxth	r3, r3
 801234a:	4413      	add	r3, r2
 801234c:	b298      	uxth	r0, r3
 801234e:	68bb      	ldr	r3, [r7, #8]
 8012350:	b29a      	uxth	r2, r3
 8012352:	69fb      	ldr	r3, [r7, #28]
 8012354:	b29b      	uxth	r3, r3
 8012356:	4413      	add	r3, r2
 8012358:	b29b      	uxth	r3, r3
 801235a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801235c:	4619      	mov	r1, r3
 801235e:	f7ff fc89 	bl	8011c74 <lcdDrawPixel>
    for (j = 0; j < font->width; j++)
 8012362:	69bb      	ldr	r3, [r7, #24]
 8012364:	3301      	adds	r3, #1
 8012366:	61bb      	str	r3, [r7, #24]
 8012368:	683b      	ldr	r3, [r7, #0]
 801236a:	781b      	ldrb	r3, [r3, #0]
 801236c:	461a      	mov	r2, r3
 801236e:	69bb      	ldr	r3, [r7, #24]
 8012370:	4293      	cmp	r3, r2
 8012372:	d3de      	bcc.n	8012332 <disEngFont+0x3a>
  for (i = 0; i < font->height; i++)
 8012374:	69fb      	ldr	r3, [r7, #28]
 8012376:	3301      	adds	r3, #1
 8012378:	61fb      	str	r3, [r7, #28]
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	785b      	ldrb	r3, [r3, #1]
 801237e:	461a      	mov	r2, r3
 8012380:	69fb      	ldr	r3, [r7, #28]
 8012382:	4293      	cmp	r3, r2
 8012384:	d3c3      	bcc.n	801230e <disEngFont+0x16>
      }
    }
  }
}
 8012386:	bf00      	nop
 8012388:	bf00      	nop
 801238a:	3720      	adds	r7, #32
 801238c:	46bd      	mov	sp, r7
 801238e:	bd80      	pop	{r7, pc}

08012390 <lcdSetFont>:

void lcdSetFont(LcdFont font)
{
 8012390:	b480      	push	{r7}
 8012392:	b083      	sub	sp, #12
 8012394:	af00      	add	r7, sp, #0
 8012396:	4603      	mov	r3, r0
 8012398:	71fb      	strb	r3, [r7, #7]
  lcd_font = font;
 801239a:	4a04      	ldr	r2, [pc, #16]	; (80123ac <lcdSetFont+0x1c>)
 801239c:	79fb      	ldrb	r3, [r7, #7]
 801239e:	7013      	strb	r3, [r2, #0]
}
 80123a0:	bf00      	nop
 80123a2:	370c      	adds	r7, #12
 80123a4:	46bd      	mov	sp, r7
 80123a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123aa:	4770      	bx	lr
 80123ac:	200001ed 	.word	0x200001ed

080123b0 <cliLcd>:
  return lcd_font;
}

#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 80123b0:	b580      	push	{r7, lr}
 80123b2:	b086      	sub	sp, #24
 80123b4:	af02      	add	r7, sp, #8
 80123b6:	6078      	str	r0, [r7, #4]
  bool ret = false;
 80123b8:	2300      	movs	r3, #0
 80123ba:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	881b      	ldrh	r3, [r3, #0]
 80123c0:	2b01      	cmp	r3, #1
 80123c2:	d163      	bne.n	801248c <cliLcd+0xdc>
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	695b      	ldr	r3, [r3, #20]
 80123c8:	4947      	ldr	r1, [pc, #284]	; (80124e8 <cliLcd+0x138>)
 80123ca:	2000      	movs	r0, #0
 80123cc:	4798      	blx	r3
 80123ce:	4603      	mov	r3, r0
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d05b      	beq.n	801248c <cliLcd+0xdc>
  {
    lcdSetFont(LCD_FONT_HAN);
 80123d4:	2003      	movs	r0, #3
 80123d6:	f7ff ffdb 	bl	8012390 <lcdSetFont>

    while(cliKeepLoop())
 80123da:	e04b      	b.n	8012474 <cliLcd+0xc4>
    {
      if (lcdDrawAvailable() == true)
 80123dc:	f7ff fc7a 	bl	8011cd4 <lcdDrawAvailable>
 80123e0:	4603      	mov	r3, r0
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d046      	beq.n	8012474 <cliLcd+0xc4>
      {
        lcdClearBuffer(black);
 80123e6:	2000      	movs	r0, #0
 80123e8:	f7ff fc4e 	bl	8011c88 <lcdClearBuffer>

        lcdPrintf(25,16*0, green, "[LCD 테스트]");
 80123ec:	4b3f      	ldr	r3, [pc, #252]	; (80124ec <cliLcd+0x13c>)
 80123ee:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80123f2:	2100      	movs	r1, #0
 80123f4:	2019      	movs	r0, #25
 80123f6:	f7ff fdfb 	bl	8011ff0 <lcdPrintf>

        lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 80123fa:	f7ff fc53 	bl	8011ca4 <lcdGetFps>
 80123fe:	4603      	mov	r3, r0
 8012400:	9300      	str	r3, [sp, #0]
 8012402:	4b3b      	ldr	r3, [pc, #236]	; (80124f0 <cliLcd+0x140>)
 8012404:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012408:	2110      	movs	r1, #16
 801240a:	2000      	movs	r0, #0
 801240c:	f7ff fdf0 	bl	8011ff0 <lcdPrintf>
        lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 8012410:	f7ff fc54 	bl	8011cbc <lcdGetFpsTime>
 8012414:	4603      	mov	r3, r0
 8012416:	9300      	str	r3, [sp, #0]
 8012418:	4b36      	ldr	r3, [pc, #216]	; (80124f4 <cliLcd+0x144>)
 801241a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801241e:	2120      	movs	r1, #32
 8012420:	2000      	movs	r0, #0
 8012422:	f7ff fde5 	bl	8011ff0 <lcdPrintf>
        lcdPrintf(0,16*3, white, "%d ms" , millis());
 8012426:	f7f9 f856 	bl	800b4d6 <millis>
 801242a:	4603      	mov	r3, r0
 801242c:	9300      	str	r3, [sp, #0]
 801242e:	4b31      	ldr	r3, [pc, #196]	; (80124f4 <cliLcd+0x144>)
 8012430:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012434:	2130      	movs	r1, #48	; 0x30
 8012436:	2000      	movs	r0, #0
 8012438:	f7ff fdda 	bl	8011ff0 <lcdPrintf>

        lcdDrawFillRect( 0, 70, 10, 10, red);
 801243c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8012440:	9300      	str	r3, [sp, #0]
 8012442:	230a      	movs	r3, #10
 8012444:	220a      	movs	r2, #10
 8012446:	2146      	movs	r1, #70	; 0x46
 8012448:	2000      	movs	r0, #0
 801244a:	f7ff fda1 	bl	8011f90 <lcdDrawFillRect>
        lcdDrawFillRect(10, 70, 10, 10, green);
 801244e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8012452:	9300      	str	r3, [sp, #0]
 8012454:	230a      	movs	r3, #10
 8012456:	220a      	movs	r2, #10
 8012458:	2146      	movs	r1, #70	; 0x46
 801245a:	200a      	movs	r0, #10
 801245c:	f7ff fd98 	bl	8011f90 <lcdDrawFillRect>
        lcdDrawFillRect(20, 70, 10, 10, blue);
 8012460:	231f      	movs	r3, #31
 8012462:	9300      	str	r3, [sp, #0]
 8012464:	230a      	movs	r3, #10
 8012466:	220a      	movs	r2, #10
 8012468:	2146      	movs	r1, #70	; 0x46
 801246a:	2014      	movs	r0, #20
 801246c:	f7ff fd90 	bl	8011f90 <lcdDrawFillRect>

        lcdRequestDraw();
 8012470:	f7ff fc46 	bl	8011d00 <lcdRequestDraw>
    while(cliKeepLoop())
 8012474:	f7fa f81e 	bl	800c4b4 <cliKeepLoop>
 8012478:	4603      	mov	r3, r0
 801247a:	2b00      	cmp	r3, #0
 801247c:	d1ae      	bne.n	80123dc <cliLcd+0x2c>
      }
    }

    lcdClearBuffer(black);
 801247e:	2000      	movs	r0, #0
 8012480:	f7ff fc02 	bl	8011c88 <lcdClearBuffer>
    lcdUpdateDraw();
 8012484:	f7ff fc70 	bl	8011d68 <lcdUpdateDraw>

    ret = true;
 8012488:	2301      	movs	r3, #1
 801248a:	73fb      	strb	r3, [r7, #15]
  }

  if (args->argc == 1 && args->isStr(0, "image") == true)
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	881b      	ldrh	r3, [r3, #0]
 8012490:	2b01      	cmp	r3, #1
 8012492:	d119      	bne.n	80124c8 <cliLcd+0x118>
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	695b      	ldr	r3, [r3, #20]
 8012498:	4917      	ldr	r1, [pc, #92]	; (80124f8 <cliLcd+0x148>)
 801249a:	2000      	movs	r0, #0
 801249c:	4798      	blx	r3
 801249e:	4603      	mov	r3, r0
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d011      	beq.n	80124c8 <cliLcd+0x118>
  {
	  lcdClearBuffer(black);
 80124a4:	2000      	movs	r0, #0
 80124a6:	f7ff fbef 	bl	8011c88 <lcdClearBuffer>
	  lcdUpdateDraw();
 80124aa:	f7ff fc5d 	bl	8011d68 <lcdUpdateDraw>
	  while(cliKeepLoop())
 80124ae:	bf00      	nop
 80124b0:	f7fa f800 	bl	800c4b4 <cliKeepLoop>
 80124b4:	4603      	mov	r3, r0
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d1fa      	bne.n	80124b0 <cliLcd+0x100>
	  {
		  static bool blink = 0;
		  //blink = get_blink();
		  //draw_fan_status(0, 0, blink);
	  }
	  lcdClearBuffer(black);
 80124ba:	2000      	movs	r0, #0
 80124bc:	f7ff fbe4 	bl	8011c88 <lcdClearBuffer>
	  lcdUpdateDraw();
 80124c0:	f7ff fc52 	bl	8011d68 <lcdUpdateDraw>

	  ret = true;
 80124c4:	2301      	movs	r3, #1
 80124c6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 80124c8:	7bfb      	ldrb	r3, [r7, #15]
 80124ca:	f083 0301 	eor.w	r3, r3, #1
 80124ce:	b2db      	uxtb	r3, r3
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d005      	beq.n	80124e0 <cliLcd+0x130>
  {
    cliPrintf("lcd test\n");
 80124d4:	4809      	ldr	r0, [pc, #36]	; (80124fc <cliLcd+0x14c>)
 80124d6:	f7f9 fef3 	bl	800c2c0 <cliPrintf>
    cliPrintf("lcd image\n");
 80124da:	4809      	ldr	r0, [pc, #36]	; (8012500 <cliLcd+0x150>)
 80124dc:	f7f9 fef0 	bl	800c2c0 <cliPrintf>
  }
}
 80124e0:	bf00      	nop
 80124e2:	3710      	adds	r7, #16
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}
 80124e8:	08022be0 	.word	0x08022be0
 80124ec:	08022be8 	.word	0x08022be8
 80124f0:	08022bf8 	.word	0x08022bf8
 80124f4:	08022c00 	.word	0x08022c00
 80124f8:	08022c08 	.word	0x08022c08
 80124fc:	08022c10 	.word	0x08022c10
 8012500:	08022c1c 	.word	0x08022c1c

08012504 <uartInit>:


static uart_tbl_t uart_tbl[UART_MAX_CH];

bool uartInit(void)
{
 8012504:	b480      	push	{r7}
 8012506:	b083      	sub	sp, #12
 8012508:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 801250a:	2300      	movs	r3, #0
 801250c:	607b      	str	r3, [r7, #4]
 801250e:	e016      	b.n	801253e <uartInit+0x3a>
  {
    uart_tbl[i].is_open = false;
 8012510:	4a10      	ldr	r2, [pc, #64]	; (8012554 <uartInit+0x50>)
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8012518:	fb01 f303 	mul.w	r3, r1, r3
 801251c:	4413      	add	r3, r2
 801251e:	2200      	movs	r2, #0
 8012520:	701a      	strb	r2, [r3, #0]
    uart_tbl[i].baud = 57600;
 8012522:	4a0c      	ldr	r2, [pc, #48]	; (8012554 <uartInit+0x50>)
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	f44f 6185 	mov.w	r1, #1064	; 0x428
 801252a:	fb01 f303 	mul.w	r3, r1, r3
 801252e:	4413      	add	r3, r2
 8012530:	3304      	adds	r3, #4
 8012532:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8012536:	601a      	str	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	3301      	adds	r3, #1
 801253c:	607b      	str	r3, [r7, #4]
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2b01      	cmp	r3, #1
 8012542:	dde5      	ble.n	8012510 <uartInit+0xc>
  }

  return true;
 8012544:	2301      	movs	r3, #1
}
 8012546:	4618      	mov	r0, r3
 8012548:	370c      	adds	r7, #12
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr
 8012552:	bf00      	nop
 8012554:	20007d9c 	.word	0x20007d9c

08012558 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8012558:	b580      	push	{r7, lr}
 801255a:	b086      	sub	sp, #24
 801255c:	af00      	add	r7, sp, #0
 801255e:	4603      	mov	r3, r0
 8012560:	6039      	str	r1, [r7, #0]
 8012562:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8012564:	2300      	movs	r3, #0
 8012566:	75fb      	strb	r3, [r7, #23]


  switch(ch)
 8012568:	79fb      	ldrb	r3, [r7, #7]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d002      	beq.n	8012574 <uartOpen+0x1c>
 801256e:	2b02      	cmp	r3, #2
 8012570:	d020      	beq.n	80125b4 <uartOpen+0x5c>
 8012572:	e12c      	b.n	80127ce <uartOpen+0x276>
  {
    case _DEF_USB:
      uart_tbl[ch].type    = UART_HW_TYPE_USB;
 8012574:	79fb      	ldrb	r3, [r7, #7]
 8012576:	4a9a      	ldr	r2, [pc, #616]	; (80127e0 <uartOpen+0x288>)
 8012578:	f44f 6185 	mov.w	r1, #1064	; 0x428
 801257c:	fb01 f303 	mul.w	r3, r1, r3
 8012580:	4413      	add	r3, r2
 8012582:	3308      	adds	r3, #8
 8012584:	2201      	movs	r2, #1
 8012586:	701a      	strb	r2, [r3, #0]
      uart_tbl[ch].baud    = baud;
 8012588:	79fb      	ldrb	r3, [r7, #7]
 801258a:	4a95      	ldr	r2, [pc, #596]	; (80127e0 <uartOpen+0x288>)
 801258c:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8012590:	fb01 f303 	mul.w	r3, r1, r3
 8012594:	4413      	add	r3, r2
 8012596:	3304      	adds	r3, #4
 8012598:	683a      	ldr	r2, [r7, #0]
 801259a:	601a      	str	r2, [r3, #0]
      uart_tbl[ch].is_open = true;
 801259c:	79fb      	ldrb	r3, [r7, #7]
 801259e:	4a90      	ldr	r2, [pc, #576]	; (80127e0 <uartOpen+0x288>)
 80125a0:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80125a4:	fb01 f303 	mul.w	r3, r1, r3
 80125a8:	4413      	add	r3, r2
 80125aa:	2201      	movs	r2, #1
 80125ac:	701a      	strb	r2, [r3, #0]

      ret = true;
 80125ae:	2301      	movs	r3, #1
 80125b0:	75fb      	strb	r3, [r7, #23]
      break;
 80125b2:	e10f      	b.n	80127d4 <uartOpen+0x27c>

    case _DEF_UART2:
    	uart_tbl[ch].p_huart = &huart2;
 80125b4:	79fb      	ldrb	r3, [r7, #7]
 80125b6:	4a8a      	ldr	r2, [pc, #552]	; (80127e0 <uartOpen+0x288>)
 80125b8:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80125bc:	fb01 f303 	mul.w	r3, r1, r3
 80125c0:	4413      	add	r3, r2
 80125c2:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80125c6:	4a87      	ldr	r2, [pc, #540]	; (80127e4 <uartOpen+0x28c>)
 80125c8:	601a      	str	r2, [r3, #0]
    	uart_tbl[ch].p_huart->Instance = USART2;
 80125ca:	79fb      	ldrb	r3, [r7, #7]
 80125cc:	4a84      	ldr	r2, [pc, #528]	; (80127e0 <uartOpen+0x288>)
 80125ce:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80125d2:	fb01 f303 	mul.w	r3, r1, r3
 80125d6:	4413      	add	r3, r2
 80125d8:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80125dc:	681b      	ldr	r3, [r3, #0]
 80125de:	4a82      	ldr	r2, [pc, #520]	; (80127e8 <uartOpen+0x290>)
 80125e0:	601a      	str	r2, [r3, #0]
    	uart_tbl[ch].p_huart->Init.BaudRate = baud;
 80125e2:	79fb      	ldrb	r3, [r7, #7]
 80125e4:	4a7e      	ldr	r2, [pc, #504]	; (80127e0 <uartOpen+0x288>)
 80125e6:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80125ea:	fb01 f303 	mul.w	r3, r1, r3
 80125ee:	4413      	add	r3, r2
 80125f0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	683a      	ldr	r2, [r7, #0]
 80125f8:	605a      	str	r2, [r3, #4]
    	uart_tbl[ch].p_huart->Init.WordLength = UART_WORDLENGTH_8B;
 80125fa:	79fb      	ldrb	r3, [r7, #7]
 80125fc:	4a78      	ldr	r2, [pc, #480]	; (80127e0 <uartOpen+0x288>)
 80125fe:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8012602:	fb01 f303 	mul.w	r3, r1, r3
 8012606:	4413      	add	r3, r2
 8012608:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 801260c:	681b      	ldr	r3, [r3, #0]
 801260e:	2200      	movs	r2, #0
 8012610:	609a      	str	r2, [r3, #8]
    	uart_tbl[ch].p_huart->Init.StopBits = UART_STOPBITS_1;
 8012612:	79fb      	ldrb	r3, [r7, #7]
 8012614:	4a72      	ldr	r2, [pc, #456]	; (80127e0 <uartOpen+0x288>)
 8012616:	f44f 6185 	mov.w	r1, #1064	; 0x428
 801261a:	fb01 f303 	mul.w	r3, r1, r3
 801261e:	4413      	add	r3, r2
 8012620:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	2200      	movs	r2, #0
 8012628:	60da      	str	r2, [r3, #12]
    	uart_tbl[ch].p_huart->Init.Parity = UART_PARITY_NONE;
 801262a:	79fb      	ldrb	r3, [r7, #7]
 801262c:	4a6c      	ldr	r2, [pc, #432]	; (80127e0 <uartOpen+0x288>)
 801262e:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8012632:	fb01 f303 	mul.w	r3, r1, r3
 8012636:	4413      	add	r3, r2
 8012638:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	2200      	movs	r2, #0
 8012640:	611a      	str	r2, [r3, #16]
    	uart_tbl[ch].p_huart->Init.Mode = UART_MODE_TX_RX;
 8012642:	79fb      	ldrb	r3, [r7, #7]
 8012644:	4a66      	ldr	r2, [pc, #408]	; (80127e0 <uartOpen+0x288>)
 8012646:	f44f 6185 	mov.w	r1, #1064	; 0x428
 801264a:	fb01 f303 	mul.w	r3, r1, r3
 801264e:	4413      	add	r3, r2
 8012650:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	220c      	movs	r2, #12
 8012658:	615a      	str	r2, [r3, #20]
    	uart_tbl[ch].p_huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801265a:	79fb      	ldrb	r3, [r7, #7]
 801265c:	4a60      	ldr	r2, [pc, #384]	; (80127e0 <uartOpen+0x288>)
 801265e:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8012662:	fb01 f303 	mul.w	r3, r1, r3
 8012666:	4413      	add	r3, r2
 8012668:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	2200      	movs	r2, #0
 8012670:	619a      	str	r2, [r3, #24]
    	uart_tbl[ch].p_huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8012672:	79fb      	ldrb	r3, [r7, #7]
 8012674:	4a5a      	ldr	r2, [pc, #360]	; (80127e0 <uartOpen+0x288>)
 8012676:	f44f 6185 	mov.w	r1, #1064	; 0x428
 801267a:	fb01 f303 	mul.w	r3, r1, r3
 801267e:	4413      	add	r3, r2
 8012680:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	2200      	movs	r2, #0
 8012688:	61da      	str	r2, [r3, #28]
    	uart_tbl[ch].p_huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801268a:	79fb      	ldrb	r3, [r7, #7]
 801268c:	4a54      	ldr	r2, [pc, #336]	; (80127e0 <uartOpen+0x288>)
 801268e:	f44f 6185 	mov.w	r1, #1064	; 0x428
 8012692:	fb01 f303 	mul.w	r3, r1, r3
 8012696:	4413      	add	r3, r2
 8012698:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	2200      	movs	r2, #0
 80126a0:	621a      	str	r2, [r3, #32]
    	uart_tbl[ch].p_huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80126a2:	79fb      	ldrb	r3, [r7, #7]
 80126a4:	4a4e      	ldr	r2, [pc, #312]	; (80127e0 <uartOpen+0x288>)
 80126a6:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80126aa:	fb01 f303 	mul.w	r3, r1, r3
 80126ae:	4413      	add	r3, r2
 80126b0:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	2200      	movs	r2, #0
 80126b8:	625a      	str	r2, [r3, #36]	; 0x24
    	uart_tbl[ch].p_huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80126ba:	79fb      	ldrb	r3, [r7, #7]
 80126bc:	4a48      	ldr	r2, [pc, #288]	; (80127e0 <uartOpen+0x288>)
 80126be:	f44f 6185 	mov.w	r1, #1064	; 0x428
 80126c2:	fb01 f303 	mul.w	r3, r1, r3
 80126c6:	4413      	add	r3, r2
 80126c8:	f503 6384 	add.w	r3, r3, #1056	; 0x420
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	2200      	movs	r2, #0
 80126d0:	629a      	str	r2, [r3, #40]	; 0x28

      qbufferCreate(&qbuffer[ch], (uint8_t *)&rx_buf[0], 256);
 80126d2:	79fa      	ldrb	r2, [r7, #7]
 80126d4:	4613      	mov	r3, r2
 80126d6:	009b      	lsls	r3, r3, #2
 80126d8:	4413      	add	r3, r2
 80126da:	009b      	lsls	r3, r3, #2
 80126dc:	4a43      	ldr	r2, [pc, #268]	; (80127ec <uartOpen+0x294>)
 80126de:	4413      	add	r3, r2
 80126e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80126e4:	4942      	ldr	r1, [pc, #264]	; (80127f0 <uartOpen+0x298>)
 80126e6:	4618      	mov	r0, r3
 80126e8:	f7fa f9c6 	bl	800ca78 <qbufferCreate>

      __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80126ec:	4b41      	ldr	r3, [pc, #260]	; (80127f4 <uartOpen+0x29c>)
 80126ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80126f0:	4a40      	ldr	r2, [pc, #256]	; (80127f4 <uartOpen+0x29c>)
 80126f2:	f043 0304 	orr.w	r3, r3, #4
 80126f6:	6493      	str	r3, [r2, #72]	; 0x48
 80126f8:	4b3e      	ldr	r3, [pc, #248]	; (80127f4 <uartOpen+0x29c>)
 80126fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80126fc:	f003 0304 	and.w	r3, r3, #4
 8012700:	613b      	str	r3, [r7, #16]
 8012702:	693b      	ldr	r3, [r7, #16]
      __HAL_RCC_DMA1_CLK_ENABLE();
 8012704:	4b3b      	ldr	r3, [pc, #236]	; (80127f4 <uartOpen+0x29c>)
 8012706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012708:	4a3a      	ldr	r2, [pc, #232]	; (80127f4 <uartOpen+0x29c>)
 801270a:	f043 0301 	orr.w	r3, r3, #1
 801270e:	6493      	str	r3, [r2, #72]	; 0x48
 8012710:	4b38      	ldr	r3, [pc, #224]	; (80127f4 <uartOpen+0x29c>)
 8012712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012714:	f003 0301 	and.w	r3, r3, #1
 8012718:	60fb      	str	r3, [r7, #12]
 801271a:	68fb      	ldr	r3, [r7, #12]
      HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 801271c:	2200      	movs	r2, #0
 801271e:	2100      	movs	r1, #0
 8012720:	200b      	movs	r0, #11
 8012722:	f7ee fde2 	bl	80012ea <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8012726:	200b      	movs	r0, #11
 8012728:	f7ee fdf9 	bl	800131e <HAL_NVIC_EnableIRQ>

      if (HAL_UART_Init(&huart2) != HAL_OK)
 801272c:	482d      	ldr	r0, [pc, #180]	; (80127e4 <uartOpen+0x28c>)
 801272e:	f7f4 fe6f 	bl	8007410 <HAL_UART_Init>
 8012732:	4603      	mov	r3, r0
 8012734:	2b00      	cmp	r3, #0
 8012736:	d002      	beq.n	801273e <uartOpen+0x1e6>
      {
        ret = false;
 8012738:	2300      	movs	r3, #0
 801273a:	75fb      	strb	r3, [r7, #23]
 801273c:	e03b      	b.n	80127b6 <uartOpen+0x25e>
      }else
      {
        ret = true;
 801273e:	2301      	movs	r3, #1
 8012740:	75fb      	strb	r3, [r7, #23]
        uart_tbl[ch].is_open = true;
 8012742:	79fb      	ldrb	r3, [r7, #7]
 8012744:	4a26      	ldr	r2, [pc, #152]	; (80127e0 <uartOpen+0x288>)
 8012746:	f44f 6185 	mov.w	r1, #1064	; 0x428
 801274a:	fb01 f303 	mul.w	r3, r1, r3
 801274e:	4413      	add	r3, r2
 8012750:	2201      	movs	r2, #1
 8012752:	701a      	strb	r2, [r3, #0]

        if(HAL_UART_Receive_DMA(&huart2, (uint8_t *)&rx_buf[0], 256) != HAL_OK)
 8012754:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012758:	4925      	ldr	r1, [pc, #148]	; (80127f0 <uartOpen+0x298>)
 801275a:	4822      	ldr	r0, [pc, #136]	; (80127e4 <uartOpen+0x28c>)
 801275c:	f7f4 ff36 	bl	80075cc <HAL_UART_Receive_DMA>
 8012760:	4603      	mov	r3, r0
 8012762:	2b00      	cmp	r3, #0
 8012764:	d001      	beq.n	801276a <uartOpen+0x212>
        {
          ret = false;
 8012766:	2300      	movs	r3, #0
 8012768:	75fb      	strb	r3, [r7, #23]
        }
        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR;
 801276a:	79fa      	ldrb	r2, [r7, #7]
 801276c:	491f      	ldr	r1, [pc, #124]	; (80127ec <uartOpen+0x294>)
 801276e:	4613      	mov	r3, r2
 8012770:	009b      	lsls	r3, r3, #2
 8012772:	4413      	add	r3, r2
 8012774:	009b      	lsls	r3, r3, #2
 8012776:	440b      	add	r3, r1
 8012778:	3308      	adds	r3, #8
 801277a:	6819      	ldr	r1, [r3, #0]
 801277c:	4b1e      	ldr	r3, [pc, #120]	; (80127f8 <uartOpen+0x2a0>)
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	685b      	ldr	r3, [r3, #4]
 8012782:	79fa      	ldrb	r2, [r7, #7]
 8012784:	1ac9      	subs	r1, r1, r3
 8012786:	4819      	ldr	r0, [pc, #100]	; (80127ec <uartOpen+0x294>)
 8012788:	4613      	mov	r3, r2
 801278a:	009b      	lsls	r3, r3, #2
 801278c:	4413      	add	r3, r2
 801278e:	009b      	lsls	r3, r3, #2
 8012790:	4403      	add	r3, r0
 8012792:	6019      	str	r1, [r3, #0]
        qbuffer[ch].out = qbuffer[ch].in;
 8012794:	79f9      	ldrb	r1, [r7, #7]
 8012796:	79fa      	ldrb	r2, [r7, #7]
 8012798:	4814      	ldr	r0, [pc, #80]	; (80127ec <uartOpen+0x294>)
 801279a:	460b      	mov	r3, r1
 801279c:	009b      	lsls	r3, r3, #2
 801279e:	440b      	add	r3, r1
 80127a0:	009b      	lsls	r3, r3, #2
 80127a2:	4403      	add	r3, r0
 80127a4:	6819      	ldr	r1, [r3, #0]
 80127a6:	4811      	ldr	r0, [pc, #68]	; (80127ec <uartOpen+0x294>)
 80127a8:	4613      	mov	r3, r2
 80127aa:	009b      	lsls	r3, r3, #2
 80127ac:	4413      	add	r3, r2
 80127ae:	009b      	lsls	r3, r3, #2
 80127b0:	4403      	add	r3, r0
 80127b2:	3304      	adds	r3, #4
 80127b4:	6019      	str	r1, [r3, #0]
      }
      HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8);
 80127b6:	2100      	movs	r1, #0
 80127b8:	480a      	ldr	r0, [pc, #40]	; (80127e4 <uartOpen+0x28c>)
 80127ba:	f7f6 fa27 	bl	8008c0c <HAL_UARTEx_SetTxFifoThreshold>
      HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8);
 80127be:	2100      	movs	r1, #0
 80127c0:	4808      	ldr	r0, [pc, #32]	; (80127e4 <uartOpen+0x28c>)
 80127c2:	f7f6 fa61 	bl	8008c88 <HAL_UARTEx_SetRxFifoThreshold>
      HAL_UARTEx_DisableFifoMode(&huart2);
 80127c6:	4807      	ldr	r0, [pc, #28]	; (80127e4 <uartOpen+0x28c>)
 80127c8:	f7f6 f9e7 	bl	8008b9a <HAL_UARTEx_DisableFifoMode>
      break;
 80127cc:	e002      	b.n	80127d4 <uartOpen+0x27c>

    default:
      ret = false;
 80127ce:	2300      	movs	r3, #0
 80127d0:	75fb      	strb	r3, [r7, #23]
      break;
 80127d2:	bf00      	nop
  }

  return ret;
 80127d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80127d6:	4618      	mov	r0, r3
 80127d8:	3718      	adds	r7, #24
 80127da:	46bd      	mov	sp, r7
 80127dc:	bd80      	pop	{r7, pc}
 80127de:	bf00      	nop
 80127e0:	20007d9c 	.word	0x20007d9c
 80127e4:	20007b80 	.word	0x20007b80
 80127e8:	40004400 	.word	0x40004400
 80127ec:	20007c74 	.word	0x20007c74
 80127f0:	20007c9c 	.word	0x20007c9c
 80127f4:	40021000 	.word	0x40021000
 80127f8:	20007c14 	.word	0x20007c14

080127fc <uartAvailable>:
{
  return true;
}

uint32_t uartAvailable(uint8_t ch)
{
 80127fc:	b580      	push	{r7, lr}
 80127fe:	b084      	sub	sp, #16
 8012800:	af00      	add	r7, sp, #0
 8012802:	4603      	mov	r3, r0
 8012804:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8012806:	2300      	movs	r3, #0
 8012808:	60fb      	str	r3, [r7, #12]

  switch(ch)
 801280a:	79fb      	ldrb	r3, [r7, #7]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d002      	beq.n	8012816 <uartAvailable+0x1a>
 8012810:	2b02      	cmp	r3, #2
 8012812:	d004      	beq.n	801281e <uartAvailable+0x22>
 8012814:	e024      	b.n	8012860 <uartAvailable+0x64>
  {
    case _DEF_USB:
      ret = cdcAvailable();
 8012816:	f7fe f9c0 	bl	8010b9a <cdcAvailable>
 801281a:	60f8      	str	r0, [r7, #12]
      break;
 801281c:	e020      	b.n	8012860 <uartAvailable+0x64>

    case _DEF_UART2:
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart2_rx.Instance->CNDTR);
 801281e:	79fa      	ldrb	r2, [r7, #7]
 8012820:	4912      	ldr	r1, [pc, #72]	; (801286c <uartAvailable+0x70>)
 8012822:	4613      	mov	r3, r2
 8012824:	009b      	lsls	r3, r3, #2
 8012826:	4413      	add	r3, r2
 8012828:	009b      	lsls	r3, r3, #2
 801282a:	440b      	add	r3, r1
 801282c:	3308      	adds	r3, #8
 801282e:	6819      	ldr	r1, [r3, #0]
 8012830:	4b0f      	ldr	r3, [pc, #60]	; (8012870 <uartAvailable+0x74>)
 8012832:	681b      	ldr	r3, [r3, #0]
 8012834:	685b      	ldr	r3, [r3, #4]
 8012836:	79fa      	ldrb	r2, [r7, #7]
 8012838:	1ac9      	subs	r1, r1, r3
 801283a:	480c      	ldr	r0, [pc, #48]	; (801286c <uartAvailable+0x70>)
 801283c:	4613      	mov	r3, r2
 801283e:	009b      	lsls	r3, r3, #2
 8012840:	4413      	add	r3, r2
 8012842:	009b      	lsls	r3, r3, #2
 8012844:	4403      	add	r3, r0
 8012846:	6019      	str	r1, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 8012848:	79fa      	ldrb	r2, [r7, #7]
 801284a:	4613      	mov	r3, r2
 801284c:	009b      	lsls	r3, r3, #2
 801284e:	4413      	add	r3, r2
 8012850:	009b      	lsls	r3, r3, #2
 8012852:	4a06      	ldr	r2, [pc, #24]	; (801286c <uartAvailable+0x70>)
 8012854:	4413      	add	r3, r2
 8012856:	4618      	mov	r0, r3
 8012858:	f7fa fa12 	bl	800cc80 <qbufferAvailable>
 801285c:	60f8      	str	r0, [r7, #12]
      break;
 801285e:	bf00      	nop
  }

  return ret;
 8012860:	68fb      	ldr	r3, [r7, #12]
}
 8012862:	4618      	mov	r0, r3
 8012864:	3710      	adds	r7, #16
 8012866:	46bd      	mov	sp, r7
 8012868:	bd80      	pop	{r7, pc}
 801286a:	bf00      	nop
 801286c:	20007c74 	.word	0x20007c74
 8012870:	20007c14 	.word	0x20007c14

08012874 <uartRead>:

  return true;
}

uint8_t uartRead(uint8_t ch)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b084      	sub	sp, #16
 8012878:	af00      	add	r7, sp, #0
 801287a:	4603      	mov	r3, r0
 801287c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 801287e:	2300      	movs	r3, #0
 8012880:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8012882:	79fb      	ldrb	r3, [r7, #7]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d002      	beq.n	801288e <uartRead+0x1a>
 8012888:	2b02      	cmp	r3, #2
 801288a:	d005      	beq.n	8012898 <uartRead+0x24>
 801288c:	e00c      	b.n	80128a8 <uartRead+0x34>
  {
    case _DEF_USB:
      ret = cdcRead();
 801288e:	f7fe f98b 	bl	8010ba8 <cdcRead>
 8012892:	4603      	mov	r3, r0
 8012894:	73fb      	strb	r3, [r7, #15]
      break;
 8012896:	e007      	b.n	80128a8 <uartRead+0x34>

    case _DEF_UART2:
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
 8012898:	f107 030f 	add.w	r3, r7, #15
 801289c:	2201      	movs	r2, #1
 801289e:	4619      	mov	r1, r3
 80128a0:	4804      	ldr	r0, [pc, #16]	; (80128b4 <uartRead+0x40>)
 80128a2:	f7fa f982 	bl	800cbaa <qbufferRead>
      break;
 80128a6:	bf00      	nop
  }

  return ret;
 80128a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80128aa:	4618      	mov	r0, r3
 80128ac:	3710      	adds	r7, #16
 80128ae:	46bd      	mov	sp, r7
 80128b0:	bd80      	pop	{r7, pc}
 80128b2:	bf00      	nop
 80128b4:	20007c9c 	.word	0x20007c9c

080128b8 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b086      	sub	sp, #24
 80128bc:	af00      	add	r7, sp, #0
 80128be:	4603      	mov	r3, r0
 80128c0:	60b9      	str	r1, [r7, #8]
 80128c2:	607a      	str	r2, [r7, #4]
 80128c4:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80128c6:	2300      	movs	r3, #0
 80128c8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;


  switch(ch)
 80128ca:	7bfb      	ldrb	r3, [r7, #15]
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d002      	beq.n	80128d6 <uartWrite+0x1e>
 80128d0:	2b02      	cmp	r3, #2
 80128d2:	d006      	beq.n	80128e2 <uartWrite+0x2a>
 80128d4:	e014      	b.n	8012900 <uartWrite+0x48>
  {
    case _DEF_USB:
      ret = cdcWrite(p_data, length);
 80128d6:	6879      	ldr	r1, [r7, #4]
 80128d8:	68b8      	ldr	r0, [r7, #8]
 80128da:	f7fe f96c 	bl	8010bb6 <cdcWrite>
 80128de:	6178      	str	r0, [r7, #20]
      break;
 80128e0:	e00e      	b.n	8012900 <uartWrite+0x48>

    case _DEF_UART2:
      status = HAL_UART_Transmit(&huart2, p_data, length, 100);
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	b29a      	uxth	r2, r3
 80128e6:	2364      	movs	r3, #100	; 0x64
 80128e8:	68b9      	ldr	r1, [r7, #8]
 80128ea:	4808      	ldr	r0, [pc, #32]	; (801290c <uartWrite+0x54>)
 80128ec:	f7f4 fde0 	bl	80074b0 <HAL_UART_Transmit>
 80128f0:	4603      	mov	r3, r0
 80128f2:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 80128f4:	7cfb      	ldrb	r3, [r7, #19]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d101      	bne.n	80128fe <uartWrite+0x46>
      {
        ret = length;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	617b      	str	r3, [r7, #20]
      }
      break;
 80128fe:	bf00      	nop
  }

  return ret;
 8012900:	697b      	ldr	r3, [r7, #20]
}
 8012902:	4618      	mov	r0, r3
 8012904:	3718      	adds	r7, #24
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
 801290a:	bf00      	nop
 801290c:	20007b80 	.word	0x20007b80

08012910 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8012910:	b40e      	push	{r1, r2, r3}
 8012912:	b580      	push	{r7, lr}
 8012914:	b0c7      	sub	sp, #284	; 0x11c
 8012916:	af00      	add	r7, sp, #0
 8012918:	4602      	mov	r2, r0
 801291a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801291e:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8012922:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8012924:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8012928:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801292c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8012930:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8012932:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8012936:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 801293a:	f107 0010 	add.w	r0, r7, #16
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8012944:	f44f 7180 	mov.w	r1, #256	; 0x100
 8012948:	f001 fb64 	bl	8014014 <vsniprintf>
 801294c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8012950:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8012954:	f107 0110 	add.w	r1, r7, #16
 8012958:	f507 738c 	add.w	r3, r7, #280	; 0x118
 801295c:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	4618      	mov	r0, r3
 8012964:	f7ff ffa8 	bl	80128b8 <uartWrite>
 8012968:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 801296c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8012970:	4618      	mov	r0, r3
 8012972:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8012976:	46bd      	mov	sp, r7
 8012978:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801297c:	b003      	add	sp, #12
 801297e:	4770      	bx	lr

08012980 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8012980:	b480      	push	{r7}
 8012982:	b083      	sub	sp, #12
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
  {
  }
}
 8012988:	bf00      	nop
 801298a:	370c      	adds	r7, #12
 801298c:	46bd      	mov	sp, r7
 801298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012992:	4770      	bx	lr

08012994 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8012994:	b480      	push	{r7}
 8012996:	b083      	sub	sp, #12
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]
    qbufferWrite(&qbuffer[_DEF_UART1], &rx_buf, 1);

    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rx_buf, 1);
  }
#endif
}
 801299c:	bf00      	nop
 801299e:	370c      	adds	r7, #12
 80129a0:	46bd      	mov	sp, r7
 80129a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a6:	4770      	bx	lr

080129a8 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b09e      	sub	sp, #120	; 0x78
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80129b0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80129b4:	2200      	movs	r2, #0
 80129b6:	601a      	str	r2, [r3, #0]
 80129b8:	605a      	str	r2, [r3, #4]
 80129ba:	609a      	str	r2, [r3, #8]
 80129bc:	60da      	str	r2, [r3, #12]
 80129be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80129c0:	f107 0310 	add.w	r3, r7, #16
 80129c4:	2254      	movs	r2, #84	; 0x54
 80129c6:	2100      	movs	r1, #0
 80129c8:	4618      	mov	r0, r3
 80129ca:	f001 fb31 	bl	8014030 <memset>
  if(uartHandle->Instance==USART2)
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	4a33      	ldr	r2, [pc, #204]	; (8012aa0 <HAL_UART_MspInit+0xf8>)
 80129d4:	4293      	cmp	r3, r2
 80129d6:	d15e      	bne.n	8012a96 <HAL_UART_MspInit+0xee>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80129d8:	2302      	movs	r3, #2
 80129da:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80129dc:	2300      	movs	r3, #0
 80129de:	61bb      	str	r3, [r7, #24]
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 80129e0:	f107 0310 	add.w	r3, r7, #16
 80129e4:	4618      	mov	r0, r3
 80129e6:	f7f4 fac5 	bl	8006f74 <HAL_RCCEx_PeriphCLKConfig>

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80129ea:	4b2e      	ldr	r3, [pc, #184]	; (8012aa4 <HAL_UART_MspInit+0xfc>)
 80129ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129ee:	4a2d      	ldr	r2, [pc, #180]	; (8012aa4 <HAL_UART_MspInit+0xfc>)
 80129f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80129f4:	6593      	str	r3, [r2, #88]	; 0x58
 80129f6:	4b2b      	ldr	r3, [pc, #172]	; (8012aa4 <HAL_UART_MspInit+0xfc>)
 80129f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80129fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80129fe:	60fb      	str	r3, [r7, #12]
 8012a00:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012a02:	4b28      	ldr	r3, [pc, #160]	; (8012aa4 <HAL_UART_MspInit+0xfc>)
 8012a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a06:	4a27      	ldr	r2, [pc, #156]	; (8012aa4 <HAL_UART_MspInit+0xfc>)
 8012a08:	f043 0301 	orr.w	r3, r3, #1
 8012a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8012a0e:	4b25      	ldr	r3, [pc, #148]	; (8012aa4 <HAL_UART_MspInit+0xfc>)
 8012a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a12:	f003 0301 	and.w	r3, r3, #1
 8012a16:	60bb      	str	r3, [r7, #8]
 8012a18:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8012a1a:	230c      	movs	r3, #12
 8012a1c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a1e:	2302      	movs	r3, #2
 8012a20:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a22:	2300      	movs	r3, #0
 8012a24:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012a26:	2300      	movs	r3, #0
 8012a28:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8012a2a:	2307      	movs	r3, #7
 8012a2c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012a2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8012a32:	4619      	mov	r1, r3
 8012a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8012a38:	f7ef ffac 	bl	8002994 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8012a3c:	4b1a      	ldr	r3, [pc, #104]	; (8012aa8 <HAL_UART_MspInit+0x100>)
 8012a3e:	4a1b      	ldr	r2, [pc, #108]	; (8012aac <HAL_UART_MspInit+0x104>)
 8012a40:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8012a42:	4b19      	ldr	r3, [pc, #100]	; (8012aa8 <HAL_UART_MspInit+0x100>)
 8012a44:	221a      	movs	r2, #26
 8012a46:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8012a48:	4b17      	ldr	r3, [pc, #92]	; (8012aa8 <HAL_UART_MspInit+0x100>)
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8012a4e:	4b16      	ldr	r3, [pc, #88]	; (8012aa8 <HAL_UART_MspInit+0x100>)
 8012a50:	2200      	movs	r2, #0
 8012a52:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8012a54:	4b14      	ldr	r3, [pc, #80]	; (8012aa8 <HAL_UART_MspInit+0x100>)
 8012a56:	2280      	movs	r2, #128	; 0x80
 8012a58:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8012a5a:	4b13      	ldr	r3, [pc, #76]	; (8012aa8 <HAL_UART_MspInit+0x100>)
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8012a60:	4b11      	ldr	r3, [pc, #68]	; (8012aa8 <HAL_UART_MspInit+0x100>)
 8012a62:	2200      	movs	r2, #0
 8012a64:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8012a66:	4b10      	ldr	r3, [pc, #64]	; (8012aa8 <HAL_UART_MspInit+0x100>)
 8012a68:	2220      	movs	r2, #32
 8012a6a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8012a6c:	4b0e      	ldr	r3, [pc, #56]	; (8012aa8 <HAL_UART_MspInit+0x100>)
 8012a6e:	2200      	movs	r2, #0
 8012a70:	621a      	str	r2, [r3, #32]
    HAL_DMA_Init(&hdma_usart2_rx);
 8012a72:	480d      	ldr	r0, [pc, #52]	; (8012aa8 <HAL_UART_MspInit+0x100>)
 8012a74:	f7ee fc74 	bl	8001360 <HAL_DMA_Init>

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	4a0b      	ldr	r2, [pc, #44]	; (8012aa8 <HAL_UART_MspInit+0x100>)
 8012a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8012a80:	4a09      	ldr	r2, [pc, #36]	; (8012aa8 <HAL_UART_MspInit+0x100>)
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8012a86:	2200      	movs	r2, #0
 8012a88:	2100      	movs	r1, #0
 8012a8a:	2026      	movs	r0, #38	; 0x26
 8012a8c:	f7ee fc2d 	bl	80012ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8012a90:	2026      	movs	r0, #38	; 0x26
 8012a92:	f7ee fc44 	bl	800131e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8012a96:	bf00      	nop
 8012a98:	3778      	adds	r7, #120	; 0x78
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
 8012a9e:	bf00      	nop
 8012aa0:	40004400 	.word	0x40004400
 8012aa4:	40021000 	.word	0x40021000
 8012aa8:	20007c14 	.word	0x20007c14
 8012aac:	40020008 	.word	0x40020008

08012ab0 <usbInit>:
#endif



bool usbInit(void)
{
 8012ab0:	b580      	push	{r7, lr}
 8012ab2:	b082      	sub	sp, #8
 8012ab4:	af00      	add	r7, sp, #0
  bool ret = true;
 8012ab6:	2301      	movs	r3, #1
 8012ab8:	71fb      	strb	r3, [r7, #7]


#ifdef _USE_HW_CLI
  cliAdd("usb", cliCmd);
 8012aba:	4904      	ldr	r1, [pc, #16]	; (8012acc <usbInit+0x1c>)
 8012abc:	4804      	ldr	r0, [pc, #16]	; (8012ad0 <usbInit+0x20>)
 8012abe:	f7f9 fd0f 	bl	800c4e0 <cliAdd>
#endif
  return ret;
 8012ac2:	79fb      	ldrb	r3, [r7, #7]
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3708      	adds	r7, #8
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}
 8012acc:	08012bbd 	.word	0x08012bbd
 8012ad0:	080168ec 	.word	0x080168ec

08012ad4 <usbIsOpen>:
    USBD_DeInit(&hUsbDeviceFS);
  }
}

bool usbIsOpen(void)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	af00      	add	r7, sp, #0
  return cdcIsConnect();
 8012ad8:	f7fe f858 	bl	8010b8c <cdcIsConnect>
 8012adc:	4603      	mov	r3, r0
}
 8012ade:	4618      	mov	r0, r3
 8012ae0:	bd80      	pop	{r7, pc}
	...

08012ae4 <usbIsConnect>:

bool usbIsConnect(void)
{
 8012ae4:	b480      	push	{r7}
 8012ae6:	af00      	add	r7, sp, #0
  if (hUsbDeviceFS.pClassData == NULL)
 8012ae8:	4b0c      	ldr	r3, [pc, #48]	; (8012b1c <usbIsConnect+0x38>)
 8012aea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d101      	bne.n	8012af6 <usbIsConnect+0x12>
  {
    return false;
 8012af2:	2300      	movs	r3, #0
 8012af4:	e00d      	b.n	8012b12 <usbIsConnect+0x2e>
  }
  if (hUsbDeviceFS.dev_state != USBD_STATE_CONFIGURED)
 8012af6:	4b09      	ldr	r3, [pc, #36]	; (8012b1c <usbIsConnect+0x38>)
 8012af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012afc:	2b03      	cmp	r3, #3
 8012afe:	d001      	beq.n	8012b04 <usbIsConnect+0x20>
  {
    return false;
 8012b00:	2300      	movs	r3, #0
 8012b02:	e006      	b.n	8012b12 <usbIsConnect+0x2e>
  }
  if (hUsbDeviceFS.dev_config == 0)
 8012b04:	4b05      	ldr	r3, [pc, #20]	; (8012b1c <usbIsConnect+0x38>)
 8012b06:	685b      	ldr	r3, [r3, #4]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d101      	bne.n	8012b10 <usbIsConnect+0x2c>
  {
    return false;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	e000      	b.n	8012b12 <usbIsConnect+0x2e>
  }

  return true;
 8012b10:	2301      	movs	r3, #1
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	46bd      	mov	sp, r7
 8012b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1a:	4770      	bx	lr
 8012b1c:	200085f0 	.word	0x200085f0

08012b20 <usbBegin>:
{
  return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b084      	sub	sp, #16
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	4603      	mov	r3, r0
 8012b28:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	73fb      	strb	r3, [r7, #15]


#if HW_USE_CDC == 1

  if (usb_mode == USB_CDC_MODE)
 8012b2e:	79fb      	ldrb	r3, [r7, #7]
 8012b30:	2b01      	cmp	r3, #1
 8012b32:	d12d      	bne.n	8012b90 <usbBegin+0x70>
  {
    if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 8012b34:	2200      	movs	r2, #0
 8012b36:	491a      	ldr	r1, [pc, #104]	; (8012ba0 <usbBegin+0x80>)
 8012b38:	481a      	ldr	r0, [pc, #104]	; (8012ba4 <usbBegin+0x84>)
 8012b3a:	f7fa fd89 	bl	800d650 <USBD_Init>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d001      	beq.n	8012b48 <usbBegin+0x28>
    {
      return false;
 8012b44:	2300      	movs	r3, #0
 8012b46:	e027      	b.n	8012b98 <usbBegin+0x78>
    }
    if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8012b48:	4917      	ldr	r1, [pc, #92]	; (8012ba8 <usbBegin+0x88>)
 8012b4a:	4816      	ldr	r0, [pc, #88]	; (8012ba4 <usbBegin+0x84>)
 8012b4c:	f7fa fdb0 	bl	800d6b0 <USBD_RegisterClass>
 8012b50:	4603      	mov	r3, r0
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d001      	beq.n	8012b5a <usbBegin+0x3a>
    {
      return false;
 8012b56:	2300      	movs	r3, #0
 8012b58:	e01e      	b.n	8012b98 <usbBegin+0x78>
    }
    if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8012b5a:	4914      	ldr	r1, [pc, #80]	; (8012bac <usbBegin+0x8c>)
 8012b5c:	4811      	ldr	r0, [pc, #68]	; (8012ba4 <usbBegin+0x84>)
 8012b5e:	f7fc f8e3 	bl	800ed28 <USBD_CDC_RegisterInterface>
 8012b62:	4603      	mov	r3, r0
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d001      	beq.n	8012b6c <usbBegin+0x4c>
    {
      return false;
 8012b68:	2300      	movs	r3, #0
 8012b6a:	e015      	b.n	8012b98 <usbBegin+0x78>
    }
    if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012b6c:	480d      	ldr	r0, [pc, #52]	; (8012ba4 <usbBegin+0x84>)
 8012b6e:	f7fa fdc6 	bl	800d6fe <USBD_Start>
 8012b72:	4603      	mov	r3, r0
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d001      	beq.n	8012b7c <usbBegin+0x5c>
    {
      return false;
 8012b78:	2300      	movs	r3, #0
 8012b7a:	e00d      	b.n	8012b98 <usbBegin+0x78>
    }


    cdcInit();
 8012b7c:	f7fd fff2 	bl	8010b64 <cdcInit>

    logPrintf("usbBegin     \t\t: CDC_MODE\r\n");
 8012b80:	480b      	ldr	r0, [pc, #44]	; (8012bb0 <usbBegin+0x90>)
 8012b82:	f7f9 fe6b 	bl	800c85c <logPrintf>

    is_usb_mode = USB_CDC_MODE;
 8012b86:	4b0b      	ldr	r3, [pc, #44]	; (8012bb4 <usbBegin+0x94>)
 8012b88:	2201      	movs	r2, #1
 8012b8a:	701a      	strb	r2, [r3, #0]
    ret = true;
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	73fb      	strb	r3, [r7, #15]
    ret = true;
  }
#endif


  is_init = ret;
 8012b90:	4a09      	ldr	r2, [pc, #36]	; (8012bb8 <usbBegin+0x98>)
 8012b92:	7bfb      	ldrb	r3, [r7, #15]
 8012b94:	7013      	strb	r3, [r2, #0]

  return ret;
 8012b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b98:	4618      	mov	r0, r3
 8012b9a:	3710      	adds	r7, #16
 8012b9c:	46bd      	mov	sp, r7
 8012b9e:	bd80      	pop	{r7, pc}
 8012ba0:	20000168 	.word	0x20000168
 8012ba4:	200085f0 	.word	0x200085f0
 8012ba8:	20000048 	.word	0x20000048
 8012bac:	2000014c 	.word	0x2000014c
 8012bb0:	080168f0 	.word	0x080168f0
 8012bb4:	200085ed 	.word	0x200085ed
 8012bb8:	200085ec 	.word	0x200085ec

08012bbc <cliCmd>:

#ifdef _USE_HW_CLI
void cliCmd(cli_args_t *args)
{
 8012bbc:	b580      	push	{r7, lr}
 8012bbe:	b08a      	sub	sp, #40	; 0x28
 8012bc0:	af00      	add	r7, sp, #0
 8012bc2:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8012bc4:	2300      	movs	r3, #0
 8012bc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (args->argc == 1 && args->isStr(0, "info") == true)
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	881b      	ldrh	r3, [r3, #0]
 8012bce:	2b01      	cmp	r3, #1
 8012bd0:	d129      	bne.n	8012c26 <cliCmd+0x6a>
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	695b      	ldr	r3, [r3, #20]
 8012bd6:	4959      	ldr	r1, [pc, #356]	; (8012d3c <cliCmd+0x180>)
 8012bd8:	2000      	movs	r0, #0
 8012bda:	4798      	blx	r3
 8012bdc:	4603      	mov	r3, r0
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d021      	beq.n	8012c26 <cliCmd+0x6a>
  {
    while(cliKeepLoop())
 8012be2:	e014      	b.n	8012c0e <cliCmd+0x52>
    {
      cliPrintf("USB Connect : %d\n", usbIsConnect());
 8012be4:	f7ff ff7e 	bl	8012ae4 <usbIsConnect>
 8012be8:	4603      	mov	r3, r0
 8012bea:	4619      	mov	r1, r3
 8012bec:	4854      	ldr	r0, [pc, #336]	; (8012d40 <cliCmd+0x184>)
 8012bee:	f7f9 fb67 	bl	800c2c0 <cliPrintf>
      cliPrintf("USB Open    : %d\n", usbIsOpen());
 8012bf2:	f7ff ff6f 	bl	8012ad4 <usbIsOpen>
 8012bf6:	4603      	mov	r3, r0
 8012bf8:	4619      	mov	r1, r3
 8012bfa:	4852      	ldr	r0, [pc, #328]	; (8012d44 <cliCmd+0x188>)
 8012bfc:	f7f9 fb60 	bl	800c2c0 <cliPrintf>
      cliPrintf("\x1B[%dA", 2);
 8012c00:	2102      	movs	r1, #2
 8012c02:	4851      	ldr	r0, [pc, #324]	; (8012d48 <cliCmd+0x18c>)
 8012c04:	f7f9 fb5c 	bl	800c2c0 <cliPrintf>
      delay(100);
 8012c08:	2064      	movs	r0, #100	; 0x64
 8012c0a:	f7f8 fc51 	bl	800b4b0 <delay>
    while(cliKeepLoop())
 8012c0e:	f7f9 fc51 	bl	800c4b4 <cliKeepLoop>
 8012c12:	4603      	mov	r3, r0
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d1e5      	bne.n	8012be4 <cliCmd+0x28>
    }
    cliPrintf("\x1B[%dB", 2);
 8012c18:	2102      	movs	r1, #2
 8012c1a:	484c      	ldr	r0, [pc, #304]	; (8012d4c <cliCmd+0x190>)
 8012c1c:	f7f9 fb50 	bl	800c2c0 <cliPrintf>

    ret = true;
 8012c20:	2301      	movs	r3, #1
 8012c22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (args->argc == 1 && args->isStr(0, "tx") == true)
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	881b      	ldrh	r3, [r3, #0]
 8012c2a:	2b01      	cmp	r3, #1
 8012c2c:	d130      	bne.n	8012c90 <cliCmd+0xd4>
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	695b      	ldr	r3, [r3, #20]
 8012c32:	4947      	ldr	r1, [pc, #284]	; (8012d50 <cliCmd+0x194>)
 8012c34:	2000      	movs	r0, #0
 8012c36:	4798      	blx	r3
 8012c38:	4603      	mov	r3, r0
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d028      	beq.n	8012c90 <cliCmd+0xd4>
  {
    uint32_t pre_time;
    uint32_t tx_cnt = 0;
 8012c3e:	2300      	movs	r3, #0
 8012c40:	61fb      	str	r3, [r7, #28]

    while(cliKeepLoop())
 8012c42:	e019      	b.n	8012c78 <cliCmd+0xbc>
    {
      if (millis()-pre_time >= 1000)
 8012c44:	f7f8 fc47 	bl	800b4d6 <millis>
 8012c48:	4602      	mov	r2, r0
 8012c4a:	6a3b      	ldr	r3, [r7, #32]
 8012c4c:	1ad3      	subs	r3, r2, r3
 8012c4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012c52:	d30a      	bcc.n	8012c6a <cliCmd+0xae>
      {
        pre_time = millis();
 8012c54:	f7f8 fc3f 	bl	800b4d6 <millis>
 8012c58:	6238      	str	r0, [r7, #32]
        logPrintf("tx : %d KB/s\n", tx_cnt/1024);
 8012c5a:	69fb      	ldr	r3, [r7, #28]
 8012c5c:	0a9b      	lsrs	r3, r3, #10
 8012c5e:	4619      	mov	r1, r3
 8012c60:	483c      	ldr	r0, [pc, #240]	; (8012d54 <cliCmd+0x198>)
 8012c62:	f7f9 fdfb 	bl	800c85c <logPrintf>
        tx_cnt = 0;
 8012c66:	2300      	movs	r3, #0
 8012c68:	61fb      	str	r3, [r7, #28]
      }
      cdcWrite((uint8_t *)"123456789012345678901234567890\n", 31);
 8012c6a:	211f      	movs	r1, #31
 8012c6c:	483a      	ldr	r0, [pc, #232]	; (8012d58 <cliCmd+0x19c>)
 8012c6e:	f7fd ffa2 	bl	8010bb6 <cdcWrite>
      tx_cnt += 31;
 8012c72:	69fb      	ldr	r3, [r7, #28]
 8012c74:	331f      	adds	r3, #31
 8012c76:	61fb      	str	r3, [r7, #28]
    while(cliKeepLoop())
 8012c78:	f7f9 fc1c 	bl	800c4b4 <cliKeepLoop>
 8012c7c:	4603      	mov	r3, r0
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d1e0      	bne.n	8012c44 <cliCmd+0x88>
    }
    cliPrintf("\x1B[%dB", 2);
 8012c82:	2102      	movs	r1, #2
 8012c84:	4831      	ldr	r0, [pc, #196]	; (8012d4c <cliCmd+0x190>)
 8012c86:	f7f9 fb1b 	bl	800c2c0 <cliPrintf>

    ret = true;
 8012c8a:	2301      	movs	r3, #1
 8012c8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (args->argc == 1 && args->isStr(0, "rx") == true)
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	881b      	ldrh	r3, [r3, #0]
 8012c94:	2b01      	cmp	r3, #1
 8012c96:	d13c      	bne.n	8012d12 <cliCmd+0x156>
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	695b      	ldr	r3, [r3, #20]
 8012c9c:	492f      	ldr	r1, [pc, #188]	; (8012d5c <cliCmd+0x1a0>)
 8012c9e:	2000      	movs	r0, #0
 8012ca0:	4798      	blx	r3
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d034      	beq.n	8012d12 <cliCmd+0x156>
  {
    uint32_t pre_time;
    uint32_t rx_cnt = 0;
 8012ca8:	2300      	movs	r3, #0
 8012caa:	617b      	str	r3, [r7, #20]
    uint32_t rx_len;

    while(cliKeepLoop())
 8012cac:	e025      	b.n	8012cfa <cliCmd+0x13e>
    {
      if (millis()-pre_time >= 1000)
 8012cae:	f7f8 fc12 	bl	800b4d6 <millis>
 8012cb2:	4602      	mov	r2, r0
 8012cb4:	69bb      	ldr	r3, [r7, #24]
 8012cb6:	1ad3      	subs	r3, r2, r3
 8012cb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8012cbc:	d30a      	bcc.n	8012cd4 <cliCmd+0x118>
      {
        pre_time = millis();
 8012cbe:	f7f8 fc0a 	bl	800b4d6 <millis>
 8012cc2:	61b8      	str	r0, [r7, #24]
        logPrintf("rx : %d KB/s\n", rx_cnt/1024);
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	0a9b      	lsrs	r3, r3, #10
 8012cc8:	4619      	mov	r1, r3
 8012cca:	4825      	ldr	r0, [pc, #148]	; (8012d60 <cliCmd+0x1a4>)
 8012ccc:	f7f9 fdc6 	bl	800c85c <logPrintf>
        rx_cnt = 0;
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	617b      	str	r3, [r7, #20]
      }

      rx_len = cdcAvailable();
 8012cd4:	f7fd ff61 	bl	8010b9a <cdcAvailable>
 8012cd8:	60f8      	str	r0, [r7, #12]

      for (int i=0; i<rx_len; i++)
 8012cda:	2300      	movs	r3, #0
 8012cdc:	613b      	str	r3, [r7, #16]
 8012cde:	e004      	b.n	8012cea <cliCmd+0x12e>
      {
        cdcRead();
 8012ce0:	f7fd ff62 	bl	8010ba8 <cdcRead>
      for (int i=0; i<rx_len; i++)
 8012ce4:	693b      	ldr	r3, [r7, #16]
 8012ce6:	3301      	adds	r3, #1
 8012ce8:	613b      	str	r3, [r7, #16]
 8012cea:	693b      	ldr	r3, [r7, #16]
 8012cec:	68fa      	ldr	r2, [r7, #12]
 8012cee:	429a      	cmp	r2, r3
 8012cf0:	d8f6      	bhi.n	8012ce0 <cliCmd+0x124>
      }

      rx_cnt += rx_len;
 8012cf2:	697a      	ldr	r2, [r7, #20]
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	4413      	add	r3, r2
 8012cf8:	617b      	str	r3, [r7, #20]
    while(cliKeepLoop())
 8012cfa:	f7f9 fbdb 	bl	800c4b4 <cliKeepLoop>
 8012cfe:	4603      	mov	r3, r0
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d1d4      	bne.n	8012cae <cliCmd+0xf2>
    }
    cliPrintf("\x1B[%dB", 2);
 8012d04:	2102      	movs	r1, #2
 8012d06:	4811      	ldr	r0, [pc, #68]	; (8012d4c <cliCmd+0x190>)
 8012d08:	f7f9 fada 	bl	800c2c0 <cliPrintf>

    ret = true;
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (ret == false)
 8012d12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012d16:	f083 0301 	eor.w	r3, r3, #1
 8012d1a:	b2db      	uxtb	r3, r3
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d008      	beq.n	8012d32 <cliCmd+0x176>
  {
    cliPrintf("usb info\n");
 8012d20:	4810      	ldr	r0, [pc, #64]	; (8012d64 <cliCmd+0x1a8>)
 8012d22:	f7f9 facd 	bl	800c2c0 <cliPrintf>
    cliPrintf("usb tx\n");
 8012d26:	4810      	ldr	r0, [pc, #64]	; (8012d68 <cliCmd+0x1ac>)
 8012d28:	f7f9 faca 	bl	800c2c0 <cliPrintf>
    cliPrintf("usb rx\n");
 8012d2c:	480f      	ldr	r0, [pc, #60]	; (8012d6c <cliCmd+0x1b0>)
 8012d2e:	f7f9 fac7 	bl	800c2c0 <cliPrintf>
  }
}
 8012d32:	bf00      	nop
 8012d34:	3728      	adds	r7, #40	; 0x28
 8012d36:	46bd      	mov	sp, r7
 8012d38:	bd80      	pop	{r7, pc}
 8012d3a:	bf00      	nop
 8012d3c:	0801690c 	.word	0x0801690c
 8012d40:	08016914 	.word	0x08016914
 8012d44:	08016928 	.word	0x08016928
 8012d48:	0801693c 	.word	0x0801693c
 8012d4c:	08016944 	.word	0x08016944
 8012d50:	0801694c 	.word	0x0801694c
 8012d54:	08016950 	.word	0x08016950
 8012d58:	08016960 	.word	0x08016960
 8012d5c:	08016980 	.word	0x08016980
 8012d60:	08016984 	.word	0x08016984
 8012d64:	08016994 	.word	0x08016994
 8012d68:	080169a0 	.word	0x080169a0
 8012d6c:	080169a8 	.word	0x080169a8

08012d70 <main>:
void SystemClock_Config(void);

uint32_t pre_time = 0;

int main(void)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b094      	sub	sp, #80	; 0x50
 8012d74:	af00      	add	r7, sp, #0
  HAL_Init();
 8012d76:	f7ee f96c 	bl	8001052 <HAL_Init>

  SystemClock_Config();
 8012d7a:	f000 f897 	bl	8012eac <SystemClock_Config>

  hwInit();
 8012d7e:	f000 f855 	bl	8012e2c <hwInit>

  pre_time = micros();
 8012d82:	f7f8 fbaf 	bl	800b4e4 <micros>
 8012d86:	4603      	mov	r3, r0
 8012d88:	4a24      	ldr	r2, [pc, #144]	; (8012e1c <main+0xac>)
 8012d8a:	6013      	str	r3, [r2, #0]
  can_msg_t msg;
  while (1)
  {
	  if(micros()-pre_time >= 500000)
 8012d8c:	f7f8 fbaa 	bl	800b4e4 <micros>
 8012d90:	4602      	mov	r2, r0
 8012d92:	4b22      	ldr	r3, [pc, #136]	; (8012e1c <main+0xac>)
 8012d94:	681b      	ldr	r3, [r3, #0]
 8012d96:	1ad3      	subs	r3, r2, r3
 8012d98:	4a21      	ldr	r2, [pc, #132]	; (8012e20 <main+0xb0>)
 8012d9a:	4293      	cmp	r3, r2
 8012d9c:	d929      	bls.n	8012df2 <main+0x82>
	  {
	    pre_time = micros();
 8012d9e:	f7f8 fba1 	bl	800b4e4 <micros>
 8012da2:	4603      	mov	r3, r0
 8012da4:	4a1d      	ldr	r2, [pc, #116]	; (8012e1c <main+0xac>)
 8012da6:	6013      	str	r3, [r2, #0]
		  gpioPinToggle(LED);
 8012da8:	2001      	movs	r0, #1
 8012daa:	f7fe f89d 	bl	8010ee8 <gpioPinToggle>

      msg.frame   = CAN_CLASSIC;
 8012dae:	2300      	movs	r3, #0
 8012db0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
      msg.id_type = CAN_EXT;
 8012db4:	2301      	movs	r3, #1
 8012db6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
      msg.dlc     = CAN_DLC_3;
 8012dba:	2303      	movs	r3, #3
 8012dbc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
      msg.id      = 0x314;
 8012dc0:	f44f 7345 	mov.w	r3, #788	; 0x314
 8012dc4:	607b      	str	r3, [r7, #4]
      msg.length  = 3;
 8012dc6:	2303      	movs	r3, #3
 8012dc8:	813b      	strh	r3, [r7, #8]
      msg.data[0] = 1;
 8012dca:	2301      	movs	r3, #1
 8012dcc:	72bb      	strb	r3, [r7, #10]
      msg.data[1] = 2;
 8012dce:	2302      	movs	r3, #2
 8012dd0:	72fb      	strb	r3, [r7, #11]
      msg.data[2] = 3;
 8012dd2:	2303      	movs	r3, #3
 8012dd4:	733b      	strb	r3, [r7, #12]
      canMsgWrite(_DEF_CAN2, &msg, 10);
 8012dd6:	1d3b      	adds	r3, r7, #4
 8012dd8:	220a      	movs	r2, #10
 8012dda:	4619      	mov	r1, r3
 8012ddc:	2001      	movs	r0, #1
 8012dde:	f7fd f8c3 	bl	800ff68 <canMsgWrite>

      if (canUpdate())
 8012de2:	f7fd fa0b 	bl	80101fc <canUpdate>
 8012de6:	4603      	mov	r3, r0
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d002      	beq.n	8012df2 <main+0x82>
      {
        cliPrintf("BusOff Recovery\n");
 8012dec:	480d      	ldr	r0, [pc, #52]	; (8012e24 <main+0xb4>)
 8012dee:	f7f9 fa67 	bl	800c2c0 <cliPrintf>
      }
	  }
	  if (lcdDrawAvailable() == true)
 8012df2:	f7fe ff6f 	bl	8011cd4 <lcdDrawAvailable>
 8012df6:	4603      	mov	r3, r0
 8012df8:	2b00      	cmp	r3, #0
 8012dfa:	d00b      	beq.n	8012e14 <main+0xa4>
	  {
	    lcdSetFont(LCD_FONT_HAN);
 8012dfc:	2003      	movs	r0, #3
 8012dfe:	f7ff fac7 	bl	8012390 <lcdSetFont>
	    lcdPrintf(0,16*0, green, "[CAN 통신 하자!]");
 8012e02:	4b09      	ldr	r3, [pc, #36]	; (8012e28 <main+0xb8>)
 8012e04:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8012e08:	2100      	movs	r1, #0
 8012e0a:	2000      	movs	r0, #0
 8012e0c:	f7ff f8f0 	bl	8011ff0 <lcdPrintf>
	    lcdRequestDraw();
 8012e10:	f7fe ff76 	bl	8011d00 <lcdRequestDraw>
	  }
    cliMain();
 8012e14:	f7f8 fe0a 	bl	800ba2c <cliMain>
	  if(micros()-pre_time >= 500000)
 8012e18:	e7b8      	b.n	8012d8c <main+0x1c>
 8012e1a:	bf00      	nop
 8012e1c:	200088c0 	.word	0x200088c0
 8012e20:	0007a11f 	.word	0x0007a11f
 8012e24:	080169b0 	.word	0x080169b0
 8012e28:	080169c4 	.word	0x080169c4

08012e2c <hwInit>:
  }

}

void hwInit(void)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	af02      	add	r7, sp, #8
  #endif
#ifdef _USE_HW_RESET
    resetInit();
#endif

  cliInit();
 8012e32:	f7f8 fcf7 	bl	800b824 <cliInit>

  logInit();
 8012e36:	f7f9 fc77 	bl	800c728 <logInit>
  gpioInit();
 8012e3a:	f7fd fecb 	bl	8010bd4 <gpioInit>
  i2cInit();
 8012e3e:	f7fe f941 	bl	80110c4 <i2cInit>
  lcdInit();
 8012e42:	f7fe fe8f 	bl	8011b64 <lcdInit>

  logPrintf("\r\n[ Firmware Begin... ]\r\n");
 8012e46:	4814      	ldr	r0, [pc, #80]	; (8012e98 <hwInit+0x6c>)
 8012e48:	f7f9 fd08 	bl	800c85c <logPrintf>
  logPrintf("Booting..Name \t\t: %s\r\n", _DEF_BOARD_NAME);
 8012e4c:	4913      	ldr	r1, [pc, #76]	; (8012e9c <hwInit+0x70>)
 8012e4e:	4814      	ldr	r0, [pc, #80]	; (8012ea0 <hwInit+0x74>)
 8012e50:	f7f9 fd04 	bl	800c85c <logPrintf>
  logPrintf("Booting..Ver  \t\t: %s\r\n", _DEF_FIRMWATRE_VERSION);
 8012e54:	4913      	ldr	r1, [pc, #76]	; (8012ea4 <hwInit+0x78>)
 8012e56:	4814      	ldr	r0, [pc, #80]	; (8012ea8 <hwInit+0x7c>)
 8012e58:	f7f9 fd00 	bl	800c85c <logPrintf>

  usbInit();
 8012e5c:	f7ff fe28 	bl	8012ab0 <usbInit>
  usbBegin(USB_CDC_MODE);
 8012e60:	2001      	movs	r0, #1
 8012e62:	f7ff fe5d 	bl	8012b20 <usbBegin>

  uartInit();
 8012e66:	f7ff fb4d 	bl	8012504 <uartInit>
  uartOpen(_DEF_UART2, 57600);
 8012e6a:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8012e6e:	2002      	movs	r0, #2
 8012e70:	f7ff fb72 	bl	8012558 <uartOpen>

  canInit();
 8012e74:	f7fc fe34 	bl	800fae0 <canInit>
  //canOpen(_DEF_CAN2, CAN_LOOPBACK, CAN_CLASSIC, CAN_500K, CAN_500K);
  canOpen(_DEF_CAN2, CAN_NORMAL, CAN_CLASSIC, CAN_500K, CAN_2M);
 8012e78:	2305      	movs	r3, #5
 8012e7a:	9300      	str	r3, [sp, #0]
 8012e7c:	2303      	movs	r3, #3
 8012e7e:	2200      	movs	r2, #0
 8012e80:	2100      	movs	r1, #0
 8012e82:	2001      	movs	r0, #1
 8012e84:	f7fc feb8 	bl	800fbf8 <canOpen>

  cliOpen(_DEF_USB, 57600);
 8012e88:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8012e8c:	2000      	movs	r0, #0
 8012e8e:	f7f8 fd15 	bl	800b8bc <cliOpen>
}
 8012e92:	bf00      	nop
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}
 8012e98:	080169dc 	.word	0x080169dc
 8012e9c:	080169f8 	.word	0x080169f8
 8012ea0:	08016a04 	.word	0x08016a04
 8012ea4:	08016a1c 	.word	0x08016a1c
 8012ea8:	08016a28 	.word	0x08016a28

08012eac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b094      	sub	sp, #80	; 0x50
 8012eb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012eb2:	f107 0318 	add.w	r3, r7, #24
 8012eb6:	2238      	movs	r2, #56	; 0x38
 8012eb8:	2100      	movs	r1, #0
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f001 f8b8 	bl	8014030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012ec0:	1d3b      	adds	r3, r7, #4
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	601a      	str	r2, [r3, #0]
 8012ec6:	605a      	str	r2, [r3, #4]
 8012ec8:	609a      	str	r2, [r3, #8]
 8012eca:	60da      	str	r2, [r3, #12]
 8012ecc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8012ece:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012ed2:	f7f3 fa6d 	bl	80063b0 <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8012ed6:	f7f3 fa5b 	bl	8006390 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8012eda:	4b20      	ldr	r3, [pc, #128]	; (8012f5c <SystemClock_Config+0xb0>)
 8012edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012ee0:	4a1e      	ldr	r2, [pc, #120]	; (8012f5c <SystemClock_Config+0xb0>)
 8012ee2:	f023 0318 	bic.w	r3, r3, #24
 8012ee6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8012eea:	2325      	movs	r3, #37	; 0x25
 8012eec:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8012eee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012ef2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8012ef8:	2301      	movs	r3, #1
 8012efa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012efc:	2302      	movs	r3, #2
 8012efe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8012f00:	2303      	movs	r3, #3
 8012f02:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8012f04:	2302      	movs	r3, #2
 8012f06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 75;
 8012f08:	234b      	movs	r3, #75	; 0x4b
 8012f0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8012f0c:	2302      	movs	r3, #2
 8012f0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8012f10:	2302      	movs	r3, #2
 8012f12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8012f14:	2302      	movs	r3, #2
 8012f16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012f18:	f107 0318 	add.w	r3, r7, #24
 8012f1c:	4618      	mov	r0, r3
 8012f1e:	f7f3 fafb 	bl	8006518 <HAL_RCC_OscConfig>
 8012f22:	4603      	mov	r3, r0
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d001      	beq.n	8012f2c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8012f28:	f000 f81a 	bl	8012f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012f2c:	230f      	movs	r3, #15
 8012f2e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012f30:	2303      	movs	r3, #3
 8012f32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8012f34:	2300      	movs	r3, #0
 8012f36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8012f40:	1d3b      	adds	r3, r7, #4
 8012f42:	2104      	movs	r1, #4
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7f3 fdf9 	bl	8006b3c <HAL_RCC_ClockConfig>
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d001      	beq.n	8012f54 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8012f50:	f000 f806 	bl	8012f60 <Error_Handler>
  }
}
 8012f54:	bf00      	nop
 8012f56:	3750      	adds	r7, #80	; 0x50
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}
 8012f5c:	40021000 	.word	0x40021000

08012f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8012f60:	b480      	push	{r7}
 8012f62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8012f64:	b672      	cpsid	i
}
 8012f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8012f68:	e7fe      	b.n	8012f68 <Error_Handler+0x8>

08012f6a <sulp>:
 8012f6a:	b570      	push	{r4, r5, r6, lr}
 8012f6c:	4604      	mov	r4, r0
 8012f6e:	460d      	mov	r5, r1
 8012f70:	ec45 4b10 	vmov	d0, r4, r5
 8012f74:	4616      	mov	r6, r2
 8012f76:	f002 f907 	bl	8015188 <__ulp>
 8012f7a:	ec51 0b10 	vmov	r0, r1, d0
 8012f7e:	b17e      	cbz	r6, 8012fa0 <sulp+0x36>
 8012f80:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012f84:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	dd09      	ble.n	8012fa0 <sulp+0x36>
 8012f8c:	051b      	lsls	r3, r3, #20
 8012f8e:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012f92:	2400      	movs	r4, #0
 8012f94:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012f98:	4622      	mov	r2, r4
 8012f9a:	462b      	mov	r3, r5
 8012f9c:	f7ed fb5c 	bl	8000658 <__aeabi_dmul>
 8012fa0:	bd70      	pop	{r4, r5, r6, pc}
 8012fa2:	0000      	movs	r0, r0
 8012fa4:	0000      	movs	r0, r0
	...

08012fa8 <_strtod_l>:
 8012fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012fac:	ed2d 8b02 	vpush	{d8}
 8012fb0:	b09b      	sub	sp, #108	; 0x6c
 8012fb2:	4604      	mov	r4, r0
 8012fb4:	9213      	str	r2, [sp, #76]	; 0x4c
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	9216      	str	r2, [sp, #88]	; 0x58
 8012fba:	460d      	mov	r5, r1
 8012fbc:	f04f 0800 	mov.w	r8, #0
 8012fc0:	f04f 0900 	mov.w	r9, #0
 8012fc4:	460a      	mov	r2, r1
 8012fc6:	9215      	str	r2, [sp, #84]	; 0x54
 8012fc8:	7811      	ldrb	r1, [r2, #0]
 8012fca:	292b      	cmp	r1, #43	; 0x2b
 8012fcc:	d04c      	beq.n	8013068 <_strtod_l+0xc0>
 8012fce:	d83a      	bhi.n	8013046 <_strtod_l+0x9e>
 8012fd0:	290d      	cmp	r1, #13
 8012fd2:	d834      	bhi.n	801303e <_strtod_l+0x96>
 8012fd4:	2908      	cmp	r1, #8
 8012fd6:	d834      	bhi.n	8013042 <_strtod_l+0x9a>
 8012fd8:	2900      	cmp	r1, #0
 8012fda:	d03d      	beq.n	8013058 <_strtod_l+0xb0>
 8012fdc:	2200      	movs	r2, #0
 8012fde:	920a      	str	r2, [sp, #40]	; 0x28
 8012fe0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8012fe2:	7832      	ldrb	r2, [r6, #0]
 8012fe4:	2a30      	cmp	r2, #48	; 0x30
 8012fe6:	f040 80b4 	bne.w	8013152 <_strtod_l+0x1aa>
 8012fea:	7872      	ldrb	r2, [r6, #1]
 8012fec:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8012ff0:	2a58      	cmp	r2, #88	; 0x58
 8012ff2:	d170      	bne.n	80130d6 <_strtod_l+0x12e>
 8012ff4:	9302      	str	r3, [sp, #8]
 8012ff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ff8:	9301      	str	r3, [sp, #4]
 8012ffa:	ab16      	add	r3, sp, #88	; 0x58
 8012ffc:	9300      	str	r3, [sp, #0]
 8012ffe:	4a8e      	ldr	r2, [pc, #568]	; (8013238 <_strtod_l+0x290>)
 8013000:	ab17      	add	r3, sp, #92	; 0x5c
 8013002:	a915      	add	r1, sp, #84	; 0x54
 8013004:	4620      	mov	r0, r4
 8013006:	f001 f9a5 	bl	8014354 <__gethex>
 801300a:	f010 070f 	ands.w	r7, r0, #15
 801300e:	4605      	mov	r5, r0
 8013010:	d005      	beq.n	801301e <_strtod_l+0x76>
 8013012:	2f06      	cmp	r7, #6
 8013014:	d12a      	bne.n	801306c <_strtod_l+0xc4>
 8013016:	3601      	adds	r6, #1
 8013018:	2300      	movs	r3, #0
 801301a:	9615      	str	r6, [sp, #84]	; 0x54
 801301c:	930a      	str	r3, [sp, #40]	; 0x28
 801301e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013020:	2b00      	cmp	r3, #0
 8013022:	f040 857f 	bne.w	8013b24 <_strtod_l+0xb7c>
 8013026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013028:	b1db      	cbz	r3, 8013062 <_strtod_l+0xba>
 801302a:	4642      	mov	r2, r8
 801302c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8013030:	ec43 2b10 	vmov	d0, r2, r3
 8013034:	b01b      	add	sp, #108	; 0x6c
 8013036:	ecbd 8b02 	vpop	{d8}
 801303a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801303e:	2920      	cmp	r1, #32
 8013040:	d1cc      	bne.n	8012fdc <_strtod_l+0x34>
 8013042:	3201      	adds	r2, #1
 8013044:	e7bf      	b.n	8012fc6 <_strtod_l+0x1e>
 8013046:	292d      	cmp	r1, #45	; 0x2d
 8013048:	d1c8      	bne.n	8012fdc <_strtod_l+0x34>
 801304a:	2101      	movs	r1, #1
 801304c:	910a      	str	r1, [sp, #40]	; 0x28
 801304e:	1c51      	adds	r1, r2, #1
 8013050:	9115      	str	r1, [sp, #84]	; 0x54
 8013052:	7852      	ldrb	r2, [r2, #1]
 8013054:	2a00      	cmp	r2, #0
 8013056:	d1c3      	bne.n	8012fe0 <_strtod_l+0x38>
 8013058:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801305a:	9515      	str	r5, [sp, #84]	; 0x54
 801305c:	2b00      	cmp	r3, #0
 801305e:	f040 855f 	bne.w	8013b20 <_strtod_l+0xb78>
 8013062:	4642      	mov	r2, r8
 8013064:	464b      	mov	r3, r9
 8013066:	e7e3      	b.n	8013030 <_strtod_l+0x88>
 8013068:	2100      	movs	r1, #0
 801306a:	e7ef      	b.n	801304c <_strtod_l+0xa4>
 801306c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801306e:	b13a      	cbz	r2, 8013080 <_strtod_l+0xd8>
 8013070:	2135      	movs	r1, #53	; 0x35
 8013072:	a818      	add	r0, sp, #96	; 0x60
 8013074:	f002 f985 	bl	8015382 <__copybits>
 8013078:	9916      	ldr	r1, [sp, #88]	; 0x58
 801307a:	4620      	mov	r0, r4
 801307c:	f001 fd58 	bl	8014b30 <_Bfree>
 8013080:	3f01      	subs	r7, #1
 8013082:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8013084:	2f04      	cmp	r7, #4
 8013086:	d806      	bhi.n	8013096 <_strtod_l+0xee>
 8013088:	e8df f007 	tbb	[pc, r7]
 801308c:	201d0314 	.word	0x201d0314
 8013090:	14          	.byte	0x14
 8013091:	00          	.byte	0x00
 8013092:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8013096:	05e9      	lsls	r1, r5, #23
 8013098:	bf48      	it	mi
 801309a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 801309e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80130a2:	0d1b      	lsrs	r3, r3, #20
 80130a4:	051b      	lsls	r3, r3, #20
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d1b9      	bne.n	801301e <_strtod_l+0x76>
 80130aa:	f001 f84d 	bl	8014148 <__errno>
 80130ae:	2322      	movs	r3, #34	; 0x22
 80130b0:	6003      	str	r3, [r0, #0]
 80130b2:	e7b4      	b.n	801301e <_strtod_l+0x76>
 80130b4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80130b8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80130bc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80130c0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80130c4:	e7e7      	b.n	8013096 <_strtod_l+0xee>
 80130c6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8013240 <_strtod_l+0x298>
 80130ca:	e7e4      	b.n	8013096 <_strtod_l+0xee>
 80130cc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80130d0:	f04f 38ff 	mov.w	r8, #4294967295
 80130d4:	e7df      	b.n	8013096 <_strtod_l+0xee>
 80130d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130d8:	1c5a      	adds	r2, r3, #1
 80130da:	9215      	str	r2, [sp, #84]	; 0x54
 80130dc:	785b      	ldrb	r3, [r3, #1]
 80130de:	2b30      	cmp	r3, #48	; 0x30
 80130e0:	d0f9      	beq.n	80130d6 <_strtod_l+0x12e>
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d09b      	beq.n	801301e <_strtod_l+0x76>
 80130e6:	2301      	movs	r3, #1
 80130e8:	f04f 0a00 	mov.w	sl, #0
 80130ec:	9304      	str	r3, [sp, #16]
 80130ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80130f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80130f2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80130f6:	46d3      	mov	fp, sl
 80130f8:	220a      	movs	r2, #10
 80130fa:	9815      	ldr	r0, [sp, #84]	; 0x54
 80130fc:	7806      	ldrb	r6, [r0, #0]
 80130fe:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8013102:	b2d9      	uxtb	r1, r3
 8013104:	2909      	cmp	r1, #9
 8013106:	d926      	bls.n	8013156 <_strtod_l+0x1ae>
 8013108:	494c      	ldr	r1, [pc, #304]	; (801323c <_strtod_l+0x294>)
 801310a:	2201      	movs	r2, #1
 801310c:	f000 ff98 	bl	8014040 <strncmp>
 8013110:	2800      	cmp	r0, #0
 8013112:	d030      	beq.n	8013176 <_strtod_l+0x1ce>
 8013114:	2000      	movs	r0, #0
 8013116:	4632      	mov	r2, r6
 8013118:	9005      	str	r0, [sp, #20]
 801311a:	465e      	mov	r6, fp
 801311c:	4603      	mov	r3, r0
 801311e:	2a65      	cmp	r2, #101	; 0x65
 8013120:	d001      	beq.n	8013126 <_strtod_l+0x17e>
 8013122:	2a45      	cmp	r2, #69	; 0x45
 8013124:	d113      	bne.n	801314e <_strtod_l+0x1a6>
 8013126:	b91e      	cbnz	r6, 8013130 <_strtod_l+0x188>
 8013128:	9a04      	ldr	r2, [sp, #16]
 801312a:	4302      	orrs	r2, r0
 801312c:	d094      	beq.n	8013058 <_strtod_l+0xb0>
 801312e:	2600      	movs	r6, #0
 8013130:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8013132:	1c6a      	adds	r2, r5, #1
 8013134:	9215      	str	r2, [sp, #84]	; 0x54
 8013136:	786a      	ldrb	r2, [r5, #1]
 8013138:	2a2b      	cmp	r2, #43	; 0x2b
 801313a:	d074      	beq.n	8013226 <_strtod_l+0x27e>
 801313c:	2a2d      	cmp	r2, #45	; 0x2d
 801313e:	d078      	beq.n	8013232 <_strtod_l+0x28a>
 8013140:	f04f 0c00 	mov.w	ip, #0
 8013144:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8013148:	2909      	cmp	r1, #9
 801314a:	d97f      	bls.n	801324c <_strtod_l+0x2a4>
 801314c:	9515      	str	r5, [sp, #84]	; 0x54
 801314e:	2700      	movs	r7, #0
 8013150:	e09e      	b.n	8013290 <_strtod_l+0x2e8>
 8013152:	2300      	movs	r3, #0
 8013154:	e7c8      	b.n	80130e8 <_strtod_l+0x140>
 8013156:	f1bb 0f08 	cmp.w	fp, #8
 801315a:	bfd8      	it	le
 801315c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801315e:	f100 0001 	add.w	r0, r0, #1
 8013162:	bfda      	itte	le
 8013164:	fb02 3301 	mlale	r3, r2, r1, r3
 8013168:	9309      	strle	r3, [sp, #36]	; 0x24
 801316a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 801316e:	f10b 0b01 	add.w	fp, fp, #1
 8013172:	9015      	str	r0, [sp, #84]	; 0x54
 8013174:	e7c1      	b.n	80130fa <_strtod_l+0x152>
 8013176:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013178:	1c5a      	adds	r2, r3, #1
 801317a:	9215      	str	r2, [sp, #84]	; 0x54
 801317c:	785a      	ldrb	r2, [r3, #1]
 801317e:	f1bb 0f00 	cmp.w	fp, #0
 8013182:	d037      	beq.n	80131f4 <_strtod_l+0x24c>
 8013184:	9005      	str	r0, [sp, #20]
 8013186:	465e      	mov	r6, fp
 8013188:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 801318c:	2b09      	cmp	r3, #9
 801318e:	d912      	bls.n	80131b6 <_strtod_l+0x20e>
 8013190:	2301      	movs	r3, #1
 8013192:	e7c4      	b.n	801311e <_strtod_l+0x176>
 8013194:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013196:	1c5a      	adds	r2, r3, #1
 8013198:	9215      	str	r2, [sp, #84]	; 0x54
 801319a:	785a      	ldrb	r2, [r3, #1]
 801319c:	3001      	adds	r0, #1
 801319e:	2a30      	cmp	r2, #48	; 0x30
 80131a0:	d0f8      	beq.n	8013194 <_strtod_l+0x1ec>
 80131a2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80131a6:	2b08      	cmp	r3, #8
 80131a8:	f200 84c1 	bhi.w	8013b2e <_strtod_l+0xb86>
 80131ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80131ae:	9005      	str	r0, [sp, #20]
 80131b0:	2000      	movs	r0, #0
 80131b2:	930b      	str	r3, [sp, #44]	; 0x2c
 80131b4:	4606      	mov	r6, r0
 80131b6:	3a30      	subs	r2, #48	; 0x30
 80131b8:	f100 0301 	add.w	r3, r0, #1
 80131bc:	d014      	beq.n	80131e8 <_strtod_l+0x240>
 80131be:	9905      	ldr	r1, [sp, #20]
 80131c0:	4419      	add	r1, r3
 80131c2:	9105      	str	r1, [sp, #20]
 80131c4:	4633      	mov	r3, r6
 80131c6:	eb00 0c06 	add.w	ip, r0, r6
 80131ca:	210a      	movs	r1, #10
 80131cc:	4563      	cmp	r3, ip
 80131ce:	d113      	bne.n	80131f8 <_strtod_l+0x250>
 80131d0:	1833      	adds	r3, r6, r0
 80131d2:	2b08      	cmp	r3, #8
 80131d4:	f106 0601 	add.w	r6, r6, #1
 80131d8:	4406      	add	r6, r0
 80131da:	dc1a      	bgt.n	8013212 <_strtod_l+0x26a>
 80131dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80131de:	230a      	movs	r3, #10
 80131e0:	fb03 2301 	mla	r3, r3, r1, r2
 80131e4:	9309      	str	r3, [sp, #36]	; 0x24
 80131e6:	2300      	movs	r3, #0
 80131e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80131ea:	1c51      	adds	r1, r2, #1
 80131ec:	9115      	str	r1, [sp, #84]	; 0x54
 80131ee:	7852      	ldrb	r2, [r2, #1]
 80131f0:	4618      	mov	r0, r3
 80131f2:	e7c9      	b.n	8013188 <_strtod_l+0x1e0>
 80131f4:	4658      	mov	r0, fp
 80131f6:	e7d2      	b.n	801319e <_strtod_l+0x1f6>
 80131f8:	2b08      	cmp	r3, #8
 80131fa:	f103 0301 	add.w	r3, r3, #1
 80131fe:	dc03      	bgt.n	8013208 <_strtod_l+0x260>
 8013200:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8013202:	434f      	muls	r7, r1
 8013204:	9709      	str	r7, [sp, #36]	; 0x24
 8013206:	e7e1      	b.n	80131cc <_strtod_l+0x224>
 8013208:	2b10      	cmp	r3, #16
 801320a:	bfd8      	it	le
 801320c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8013210:	e7dc      	b.n	80131cc <_strtod_l+0x224>
 8013212:	2e10      	cmp	r6, #16
 8013214:	bfdc      	itt	le
 8013216:	230a      	movle	r3, #10
 8013218:	fb03 2a0a 	mlale	sl, r3, sl, r2
 801321c:	e7e3      	b.n	80131e6 <_strtod_l+0x23e>
 801321e:	2300      	movs	r3, #0
 8013220:	9305      	str	r3, [sp, #20]
 8013222:	2301      	movs	r3, #1
 8013224:	e780      	b.n	8013128 <_strtod_l+0x180>
 8013226:	f04f 0c00 	mov.w	ip, #0
 801322a:	1caa      	adds	r2, r5, #2
 801322c:	9215      	str	r2, [sp, #84]	; 0x54
 801322e:	78aa      	ldrb	r2, [r5, #2]
 8013230:	e788      	b.n	8013144 <_strtod_l+0x19c>
 8013232:	f04f 0c01 	mov.w	ip, #1
 8013236:	e7f8      	b.n	801322a <_strtod_l+0x282>
 8013238:	08022c38 	.word	0x08022c38
 801323c:	08022c27 	.word	0x08022c27
 8013240:	7ff00000 	.word	0x7ff00000
 8013244:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013246:	1c51      	adds	r1, r2, #1
 8013248:	9115      	str	r1, [sp, #84]	; 0x54
 801324a:	7852      	ldrb	r2, [r2, #1]
 801324c:	2a30      	cmp	r2, #48	; 0x30
 801324e:	d0f9      	beq.n	8013244 <_strtod_l+0x29c>
 8013250:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8013254:	2908      	cmp	r1, #8
 8013256:	f63f af7a 	bhi.w	801314e <_strtod_l+0x1a6>
 801325a:	3a30      	subs	r2, #48	; 0x30
 801325c:	9208      	str	r2, [sp, #32]
 801325e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013260:	920c      	str	r2, [sp, #48]	; 0x30
 8013262:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8013264:	1c57      	adds	r7, r2, #1
 8013266:	9715      	str	r7, [sp, #84]	; 0x54
 8013268:	7852      	ldrb	r2, [r2, #1]
 801326a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 801326e:	f1be 0f09 	cmp.w	lr, #9
 8013272:	d938      	bls.n	80132e6 <_strtod_l+0x33e>
 8013274:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013276:	1a7f      	subs	r7, r7, r1
 8013278:	2f08      	cmp	r7, #8
 801327a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801327e:	dc03      	bgt.n	8013288 <_strtod_l+0x2e0>
 8013280:	9908      	ldr	r1, [sp, #32]
 8013282:	428f      	cmp	r7, r1
 8013284:	bfa8      	it	ge
 8013286:	460f      	movge	r7, r1
 8013288:	f1bc 0f00 	cmp.w	ip, #0
 801328c:	d000      	beq.n	8013290 <_strtod_l+0x2e8>
 801328e:	427f      	negs	r7, r7
 8013290:	2e00      	cmp	r6, #0
 8013292:	d14f      	bne.n	8013334 <_strtod_l+0x38c>
 8013294:	9904      	ldr	r1, [sp, #16]
 8013296:	4301      	orrs	r1, r0
 8013298:	f47f aec1 	bne.w	801301e <_strtod_l+0x76>
 801329c:	2b00      	cmp	r3, #0
 801329e:	f47f aedb 	bne.w	8013058 <_strtod_l+0xb0>
 80132a2:	2a69      	cmp	r2, #105	; 0x69
 80132a4:	d029      	beq.n	80132fa <_strtod_l+0x352>
 80132a6:	dc26      	bgt.n	80132f6 <_strtod_l+0x34e>
 80132a8:	2a49      	cmp	r2, #73	; 0x49
 80132aa:	d026      	beq.n	80132fa <_strtod_l+0x352>
 80132ac:	2a4e      	cmp	r2, #78	; 0x4e
 80132ae:	f47f aed3 	bne.w	8013058 <_strtod_l+0xb0>
 80132b2:	499b      	ldr	r1, [pc, #620]	; (8013520 <_strtod_l+0x578>)
 80132b4:	a815      	add	r0, sp, #84	; 0x54
 80132b6:	f001 fa8d 	bl	80147d4 <__match>
 80132ba:	2800      	cmp	r0, #0
 80132bc:	f43f aecc 	beq.w	8013058 <_strtod_l+0xb0>
 80132c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80132c2:	781b      	ldrb	r3, [r3, #0]
 80132c4:	2b28      	cmp	r3, #40	; 0x28
 80132c6:	d12f      	bne.n	8013328 <_strtod_l+0x380>
 80132c8:	4996      	ldr	r1, [pc, #600]	; (8013524 <_strtod_l+0x57c>)
 80132ca:	aa18      	add	r2, sp, #96	; 0x60
 80132cc:	a815      	add	r0, sp, #84	; 0x54
 80132ce:	f001 fa95 	bl	80147fc <__hexnan>
 80132d2:	2805      	cmp	r0, #5
 80132d4:	d128      	bne.n	8013328 <_strtod_l+0x380>
 80132d6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80132d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80132dc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80132e0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80132e4:	e69b      	b.n	801301e <_strtod_l+0x76>
 80132e6:	9f08      	ldr	r7, [sp, #32]
 80132e8:	210a      	movs	r1, #10
 80132ea:	fb01 2107 	mla	r1, r1, r7, r2
 80132ee:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80132f2:	9208      	str	r2, [sp, #32]
 80132f4:	e7b5      	b.n	8013262 <_strtod_l+0x2ba>
 80132f6:	2a6e      	cmp	r2, #110	; 0x6e
 80132f8:	e7d9      	b.n	80132ae <_strtod_l+0x306>
 80132fa:	498b      	ldr	r1, [pc, #556]	; (8013528 <_strtod_l+0x580>)
 80132fc:	a815      	add	r0, sp, #84	; 0x54
 80132fe:	f001 fa69 	bl	80147d4 <__match>
 8013302:	2800      	cmp	r0, #0
 8013304:	f43f aea8 	beq.w	8013058 <_strtod_l+0xb0>
 8013308:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801330a:	4988      	ldr	r1, [pc, #544]	; (801352c <_strtod_l+0x584>)
 801330c:	3b01      	subs	r3, #1
 801330e:	a815      	add	r0, sp, #84	; 0x54
 8013310:	9315      	str	r3, [sp, #84]	; 0x54
 8013312:	f001 fa5f 	bl	80147d4 <__match>
 8013316:	b910      	cbnz	r0, 801331e <_strtod_l+0x376>
 8013318:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801331a:	3301      	adds	r3, #1
 801331c:	9315      	str	r3, [sp, #84]	; 0x54
 801331e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 801353c <_strtod_l+0x594>
 8013322:	f04f 0800 	mov.w	r8, #0
 8013326:	e67a      	b.n	801301e <_strtod_l+0x76>
 8013328:	4881      	ldr	r0, [pc, #516]	; (8013530 <_strtod_l+0x588>)
 801332a:	f000 ff51 	bl	80141d0 <nan>
 801332e:	ec59 8b10 	vmov	r8, r9, d0
 8013332:	e674      	b.n	801301e <_strtod_l+0x76>
 8013334:	9b05      	ldr	r3, [sp, #20]
 8013336:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013338:	1afb      	subs	r3, r7, r3
 801333a:	f1bb 0f00 	cmp.w	fp, #0
 801333e:	bf08      	it	eq
 8013340:	46b3      	moveq	fp, r6
 8013342:	2e10      	cmp	r6, #16
 8013344:	9308      	str	r3, [sp, #32]
 8013346:	4635      	mov	r5, r6
 8013348:	bfa8      	it	ge
 801334a:	2510      	movge	r5, #16
 801334c:	f7ed f90a 	bl	8000564 <__aeabi_ui2d>
 8013350:	2e09      	cmp	r6, #9
 8013352:	4680      	mov	r8, r0
 8013354:	4689      	mov	r9, r1
 8013356:	dd13      	ble.n	8013380 <_strtod_l+0x3d8>
 8013358:	4b76      	ldr	r3, [pc, #472]	; (8013534 <_strtod_l+0x58c>)
 801335a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801335e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8013362:	f7ed f979 	bl	8000658 <__aeabi_dmul>
 8013366:	4680      	mov	r8, r0
 8013368:	4650      	mov	r0, sl
 801336a:	4689      	mov	r9, r1
 801336c:	f7ed f8fa 	bl	8000564 <__aeabi_ui2d>
 8013370:	4602      	mov	r2, r0
 8013372:	460b      	mov	r3, r1
 8013374:	4640      	mov	r0, r8
 8013376:	4649      	mov	r1, r9
 8013378:	f7ec ffb8 	bl	80002ec <__adddf3>
 801337c:	4680      	mov	r8, r0
 801337e:	4689      	mov	r9, r1
 8013380:	2e0f      	cmp	r6, #15
 8013382:	dc38      	bgt.n	80133f6 <_strtod_l+0x44e>
 8013384:	9b08      	ldr	r3, [sp, #32]
 8013386:	2b00      	cmp	r3, #0
 8013388:	f43f ae49 	beq.w	801301e <_strtod_l+0x76>
 801338c:	dd24      	ble.n	80133d8 <_strtod_l+0x430>
 801338e:	2b16      	cmp	r3, #22
 8013390:	dc0b      	bgt.n	80133aa <_strtod_l+0x402>
 8013392:	4968      	ldr	r1, [pc, #416]	; (8013534 <_strtod_l+0x58c>)
 8013394:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013398:	e9d1 0100 	ldrd	r0, r1, [r1]
 801339c:	4642      	mov	r2, r8
 801339e:	464b      	mov	r3, r9
 80133a0:	f7ed f95a 	bl	8000658 <__aeabi_dmul>
 80133a4:	4680      	mov	r8, r0
 80133a6:	4689      	mov	r9, r1
 80133a8:	e639      	b.n	801301e <_strtod_l+0x76>
 80133aa:	9a08      	ldr	r2, [sp, #32]
 80133ac:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 80133b0:	4293      	cmp	r3, r2
 80133b2:	db20      	blt.n	80133f6 <_strtod_l+0x44e>
 80133b4:	4c5f      	ldr	r4, [pc, #380]	; (8013534 <_strtod_l+0x58c>)
 80133b6:	f1c6 060f 	rsb	r6, r6, #15
 80133ba:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 80133be:	4642      	mov	r2, r8
 80133c0:	464b      	mov	r3, r9
 80133c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80133c6:	f7ed f947 	bl	8000658 <__aeabi_dmul>
 80133ca:	9b08      	ldr	r3, [sp, #32]
 80133cc:	1b9e      	subs	r6, r3, r6
 80133ce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 80133d2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80133d6:	e7e3      	b.n	80133a0 <_strtod_l+0x3f8>
 80133d8:	9b08      	ldr	r3, [sp, #32]
 80133da:	3316      	adds	r3, #22
 80133dc:	db0b      	blt.n	80133f6 <_strtod_l+0x44e>
 80133de:	9b05      	ldr	r3, [sp, #20]
 80133e0:	1bdf      	subs	r7, r3, r7
 80133e2:	4b54      	ldr	r3, [pc, #336]	; (8013534 <_strtod_l+0x58c>)
 80133e4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80133e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133ec:	4640      	mov	r0, r8
 80133ee:	4649      	mov	r1, r9
 80133f0:	f7ed fa5c 	bl	80008ac <__aeabi_ddiv>
 80133f4:	e7d6      	b.n	80133a4 <_strtod_l+0x3fc>
 80133f6:	9b08      	ldr	r3, [sp, #32]
 80133f8:	1b75      	subs	r5, r6, r5
 80133fa:	441d      	add	r5, r3
 80133fc:	2d00      	cmp	r5, #0
 80133fe:	dd70      	ble.n	80134e2 <_strtod_l+0x53a>
 8013400:	f015 030f 	ands.w	r3, r5, #15
 8013404:	d00a      	beq.n	801341c <_strtod_l+0x474>
 8013406:	494b      	ldr	r1, [pc, #300]	; (8013534 <_strtod_l+0x58c>)
 8013408:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801340c:	4642      	mov	r2, r8
 801340e:	464b      	mov	r3, r9
 8013410:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013414:	f7ed f920 	bl	8000658 <__aeabi_dmul>
 8013418:	4680      	mov	r8, r0
 801341a:	4689      	mov	r9, r1
 801341c:	f035 050f 	bics.w	r5, r5, #15
 8013420:	d04d      	beq.n	80134be <_strtod_l+0x516>
 8013422:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8013426:	dd22      	ble.n	801346e <_strtod_l+0x4c6>
 8013428:	2500      	movs	r5, #0
 801342a:	46ab      	mov	fp, r5
 801342c:	9509      	str	r5, [sp, #36]	; 0x24
 801342e:	9505      	str	r5, [sp, #20]
 8013430:	2322      	movs	r3, #34	; 0x22
 8013432:	f8df 9108 	ldr.w	r9, [pc, #264]	; 801353c <_strtod_l+0x594>
 8013436:	6023      	str	r3, [r4, #0]
 8013438:	f04f 0800 	mov.w	r8, #0
 801343c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801343e:	2b00      	cmp	r3, #0
 8013440:	f43f aded 	beq.w	801301e <_strtod_l+0x76>
 8013444:	9916      	ldr	r1, [sp, #88]	; 0x58
 8013446:	4620      	mov	r0, r4
 8013448:	f001 fb72 	bl	8014b30 <_Bfree>
 801344c:	9905      	ldr	r1, [sp, #20]
 801344e:	4620      	mov	r0, r4
 8013450:	f001 fb6e 	bl	8014b30 <_Bfree>
 8013454:	4659      	mov	r1, fp
 8013456:	4620      	mov	r0, r4
 8013458:	f001 fb6a 	bl	8014b30 <_Bfree>
 801345c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801345e:	4620      	mov	r0, r4
 8013460:	f001 fb66 	bl	8014b30 <_Bfree>
 8013464:	4629      	mov	r1, r5
 8013466:	4620      	mov	r0, r4
 8013468:	f001 fb62 	bl	8014b30 <_Bfree>
 801346c:	e5d7      	b.n	801301e <_strtod_l+0x76>
 801346e:	4b32      	ldr	r3, [pc, #200]	; (8013538 <_strtod_l+0x590>)
 8013470:	9304      	str	r3, [sp, #16]
 8013472:	2300      	movs	r3, #0
 8013474:	112d      	asrs	r5, r5, #4
 8013476:	4640      	mov	r0, r8
 8013478:	4649      	mov	r1, r9
 801347a:	469a      	mov	sl, r3
 801347c:	2d01      	cmp	r5, #1
 801347e:	dc21      	bgt.n	80134c4 <_strtod_l+0x51c>
 8013480:	b10b      	cbz	r3, 8013486 <_strtod_l+0x4de>
 8013482:	4680      	mov	r8, r0
 8013484:	4689      	mov	r9, r1
 8013486:	492c      	ldr	r1, [pc, #176]	; (8013538 <_strtod_l+0x590>)
 8013488:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 801348c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013490:	4642      	mov	r2, r8
 8013492:	464b      	mov	r3, r9
 8013494:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013498:	f7ed f8de 	bl	8000658 <__aeabi_dmul>
 801349c:	4b27      	ldr	r3, [pc, #156]	; (801353c <_strtod_l+0x594>)
 801349e:	460a      	mov	r2, r1
 80134a0:	400b      	ands	r3, r1
 80134a2:	4927      	ldr	r1, [pc, #156]	; (8013540 <_strtod_l+0x598>)
 80134a4:	428b      	cmp	r3, r1
 80134a6:	4680      	mov	r8, r0
 80134a8:	d8be      	bhi.n	8013428 <_strtod_l+0x480>
 80134aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80134ae:	428b      	cmp	r3, r1
 80134b0:	bf86      	itte	hi
 80134b2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8013544 <_strtod_l+0x59c>
 80134b6:	f04f 38ff 	movhi.w	r8, #4294967295
 80134ba:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80134be:	2300      	movs	r3, #0
 80134c0:	9304      	str	r3, [sp, #16]
 80134c2:	e07b      	b.n	80135bc <_strtod_l+0x614>
 80134c4:	07ea      	lsls	r2, r5, #31
 80134c6:	d505      	bpl.n	80134d4 <_strtod_l+0x52c>
 80134c8:	9b04      	ldr	r3, [sp, #16]
 80134ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134ce:	f7ed f8c3 	bl	8000658 <__aeabi_dmul>
 80134d2:	2301      	movs	r3, #1
 80134d4:	9a04      	ldr	r2, [sp, #16]
 80134d6:	3208      	adds	r2, #8
 80134d8:	f10a 0a01 	add.w	sl, sl, #1
 80134dc:	106d      	asrs	r5, r5, #1
 80134de:	9204      	str	r2, [sp, #16]
 80134e0:	e7cc      	b.n	801347c <_strtod_l+0x4d4>
 80134e2:	d0ec      	beq.n	80134be <_strtod_l+0x516>
 80134e4:	426d      	negs	r5, r5
 80134e6:	f015 020f 	ands.w	r2, r5, #15
 80134ea:	d00a      	beq.n	8013502 <_strtod_l+0x55a>
 80134ec:	4b11      	ldr	r3, [pc, #68]	; (8013534 <_strtod_l+0x58c>)
 80134ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80134f2:	4640      	mov	r0, r8
 80134f4:	4649      	mov	r1, r9
 80134f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80134fa:	f7ed f9d7 	bl	80008ac <__aeabi_ddiv>
 80134fe:	4680      	mov	r8, r0
 8013500:	4689      	mov	r9, r1
 8013502:	112d      	asrs	r5, r5, #4
 8013504:	d0db      	beq.n	80134be <_strtod_l+0x516>
 8013506:	2d1f      	cmp	r5, #31
 8013508:	dd1e      	ble.n	8013548 <_strtod_l+0x5a0>
 801350a:	2500      	movs	r5, #0
 801350c:	46ab      	mov	fp, r5
 801350e:	9509      	str	r5, [sp, #36]	; 0x24
 8013510:	9505      	str	r5, [sp, #20]
 8013512:	2322      	movs	r3, #34	; 0x22
 8013514:	f04f 0800 	mov.w	r8, #0
 8013518:	f04f 0900 	mov.w	r9, #0
 801351c:	6023      	str	r3, [r4, #0]
 801351e:	e78d      	b.n	801343c <_strtod_l+0x494>
 8013520:	08022c32 	.word	0x08022c32
 8013524:	08022c4c 	.word	0x08022c4c
 8013528:	08022c29 	.word	0x08022c29
 801352c:	08022c2c 	.word	0x08022c2c
 8013530:	08022fe2 	.word	0x08022fe2
 8013534:	08022ea0 	.word	0x08022ea0
 8013538:	08022e78 	.word	0x08022e78
 801353c:	7ff00000 	.word	0x7ff00000
 8013540:	7ca00000 	.word	0x7ca00000
 8013544:	7fefffff 	.word	0x7fefffff
 8013548:	f015 0310 	ands.w	r3, r5, #16
 801354c:	bf18      	it	ne
 801354e:	236a      	movne	r3, #106	; 0x6a
 8013550:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80138f4 <_strtod_l+0x94c>
 8013554:	9304      	str	r3, [sp, #16]
 8013556:	4640      	mov	r0, r8
 8013558:	4649      	mov	r1, r9
 801355a:	2300      	movs	r3, #0
 801355c:	07ea      	lsls	r2, r5, #31
 801355e:	d504      	bpl.n	801356a <_strtod_l+0x5c2>
 8013560:	e9da 2300 	ldrd	r2, r3, [sl]
 8013564:	f7ed f878 	bl	8000658 <__aeabi_dmul>
 8013568:	2301      	movs	r3, #1
 801356a:	106d      	asrs	r5, r5, #1
 801356c:	f10a 0a08 	add.w	sl, sl, #8
 8013570:	d1f4      	bne.n	801355c <_strtod_l+0x5b4>
 8013572:	b10b      	cbz	r3, 8013578 <_strtod_l+0x5d0>
 8013574:	4680      	mov	r8, r0
 8013576:	4689      	mov	r9, r1
 8013578:	9b04      	ldr	r3, [sp, #16]
 801357a:	b1bb      	cbz	r3, 80135ac <_strtod_l+0x604>
 801357c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8013580:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8013584:	2b00      	cmp	r3, #0
 8013586:	4649      	mov	r1, r9
 8013588:	dd10      	ble.n	80135ac <_strtod_l+0x604>
 801358a:	2b1f      	cmp	r3, #31
 801358c:	f340 811e 	ble.w	80137cc <_strtod_l+0x824>
 8013590:	2b34      	cmp	r3, #52	; 0x34
 8013592:	bfde      	ittt	le
 8013594:	f04f 33ff 	movle.w	r3, #4294967295
 8013598:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 801359c:	4093      	lslle	r3, r2
 801359e:	f04f 0800 	mov.w	r8, #0
 80135a2:	bfcc      	ite	gt
 80135a4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80135a8:	ea03 0901 	andle.w	r9, r3, r1
 80135ac:	2200      	movs	r2, #0
 80135ae:	2300      	movs	r3, #0
 80135b0:	4640      	mov	r0, r8
 80135b2:	4649      	mov	r1, r9
 80135b4:	f7ed fab8 	bl	8000b28 <__aeabi_dcmpeq>
 80135b8:	2800      	cmp	r0, #0
 80135ba:	d1a6      	bne.n	801350a <_strtod_l+0x562>
 80135bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135be:	9300      	str	r3, [sp, #0]
 80135c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80135c2:	4633      	mov	r3, r6
 80135c4:	465a      	mov	r2, fp
 80135c6:	4620      	mov	r0, r4
 80135c8:	f001 fb1a 	bl	8014c00 <__s2b>
 80135cc:	9009      	str	r0, [sp, #36]	; 0x24
 80135ce:	2800      	cmp	r0, #0
 80135d0:	f43f af2a 	beq.w	8013428 <_strtod_l+0x480>
 80135d4:	9a08      	ldr	r2, [sp, #32]
 80135d6:	9b05      	ldr	r3, [sp, #20]
 80135d8:	2a00      	cmp	r2, #0
 80135da:	eba3 0307 	sub.w	r3, r3, r7
 80135de:	bfa8      	it	ge
 80135e0:	2300      	movge	r3, #0
 80135e2:	930c      	str	r3, [sp, #48]	; 0x30
 80135e4:	2500      	movs	r5, #0
 80135e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80135ea:	9312      	str	r3, [sp, #72]	; 0x48
 80135ec:	46ab      	mov	fp, r5
 80135ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80135f0:	4620      	mov	r0, r4
 80135f2:	6859      	ldr	r1, [r3, #4]
 80135f4:	f001 fa5c 	bl	8014ab0 <_Balloc>
 80135f8:	9005      	str	r0, [sp, #20]
 80135fa:	2800      	cmp	r0, #0
 80135fc:	f43f af18 	beq.w	8013430 <_strtod_l+0x488>
 8013600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013602:	691a      	ldr	r2, [r3, #16]
 8013604:	3202      	adds	r2, #2
 8013606:	f103 010c 	add.w	r1, r3, #12
 801360a:	0092      	lsls	r2, r2, #2
 801360c:	300c      	adds	r0, #12
 801360e:	f000 fdd0 	bl	80141b2 <memcpy>
 8013612:	ec49 8b10 	vmov	d0, r8, r9
 8013616:	aa18      	add	r2, sp, #96	; 0x60
 8013618:	a917      	add	r1, sp, #92	; 0x5c
 801361a:	4620      	mov	r0, r4
 801361c:	f001 fe24 	bl	8015268 <__d2b>
 8013620:	ec49 8b18 	vmov	d8, r8, r9
 8013624:	9016      	str	r0, [sp, #88]	; 0x58
 8013626:	2800      	cmp	r0, #0
 8013628:	f43f af02 	beq.w	8013430 <_strtod_l+0x488>
 801362c:	2101      	movs	r1, #1
 801362e:	4620      	mov	r0, r4
 8013630:	f001 fb7e 	bl	8014d30 <__i2b>
 8013634:	4683      	mov	fp, r0
 8013636:	2800      	cmp	r0, #0
 8013638:	f43f aefa 	beq.w	8013430 <_strtod_l+0x488>
 801363c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 801363e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8013640:	2e00      	cmp	r6, #0
 8013642:	bfab      	itete	ge
 8013644:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8013646:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8013648:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 801364a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 801364e:	bfac      	ite	ge
 8013650:	eb06 0a03 	addge.w	sl, r6, r3
 8013654:	1b9f      	sublt	r7, r3, r6
 8013656:	9b04      	ldr	r3, [sp, #16]
 8013658:	1af6      	subs	r6, r6, r3
 801365a:	4416      	add	r6, r2
 801365c:	4ba0      	ldr	r3, [pc, #640]	; (80138e0 <_strtod_l+0x938>)
 801365e:	3e01      	subs	r6, #1
 8013660:	429e      	cmp	r6, r3
 8013662:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8013666:	f280 80c4 	bge.w	80137f2 <_strtod_l+0x84a>
 801366a:	1b9b      	subs	r3, r3, r6
 801366c:	2b1f      	cmp	r3, #31
 801366e:	eba2 0203 	sub.w	r2, r2, r3
 8013672:	f04f 0101 	mov.w	r1, #1
 8013676:	f300 80b0 	bgt.w	80137da <_strtod_l+0x832>
 801367a:	fa01 f303 	lsl.w	r3, r1, r3
 801367e:	930e      	str	r3, [sp, #56]	; 0x38
 8013680:	2300      	movs	r3, #0
 8013682:	930d      	str	r3, [sp, #52]	; 0x34
 8013684:	eb0a 0602 	add.w	r6, sl, r2
 8013688:	9b04      	ldr	r3, [sp, #16]
 801368a:	45b2      	cmp	sl, r6
 801368c:	4417      	add	r7, r2
 801368e:	441f      	add	r7, r3
 8013690:	4653      	mov	r3, sl
 8013692:	bfa8      	it	ge
 8013694:	4633      	movge	r3, r6
 8013696:	42bb      	cmp	r3, r7
 8013698:	bfa8      	it	ge
 801369a:	463b      	movge	r3, r7
 801369c:	2b00      	cmp	r3, #0
 801369e:	bfc2      	ittt	gt
 80136a0:	1af6      	subgt	r6, r6, r3
 80136a2:	1aff      	subgt	r7, r7, r3
 80136a4:	ebaa 0a03 	subgt.w	sl, sl, r3
 80136a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	dd17      	ble.n	80136de <_strtod_l+0x736>
 80136ae:	4659      	mov	r1, fp
 80136b0:	461a      	mov	r2, r3
 80136b2:	4620      	mov	r0, r4
 80136b4:	f001 fbfc 	bl	8014eb0 <__pow5mult>
 80136b8:	4683      	mov	fp, r0
 80136ba:	2800      	cmp	r0, #0
 80136bc:	f43f aeb8 	beq.w	8013430 <_strtod_l+0x488>
 80136c0:	4601      	mov	r1, r0
 80136c2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80136c4:	4620      	mov	r0, r4
 80136c6:	f001 fb49 	bl	8014d5c <__multiply>
 80136ca:	900b      	str	r0, [sp, #44]	; 0x2c
 80136cc:	2800      	cmp	r0, #0
 80136ce:	f43f aeaf 	beq.w	8013430 <_strtod_l+0x488>
 80136d2:	9916      	ldr	r1, [sp, #88]	; 0x58
 80136d4:	4620      	mov	r0, r4
 80136d6:	f001 fa2b 	bl	8014b30 <_Bfree>
 80136da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80136dc:	9316      	str	r3, [sp, #88]	; 0x58
 80136de:	2e00      	cmp	r6, #0
 80136e0:	f300 808c 	bgt.w	80137fc <_strtod_l+0x854>
 80136e4:	9b08      	ldr	r3, [sp, #32]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	dd08      	ble.n	80136fc <_strtod_l+0x754>
 80136ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80136ec:	9905      	ldr	r1, [sp, #20]
 80136ee:	4620      	mov	r0, r4
 80136f0:	f001 fbde 	bl	8014eb0 <__pow5mult>
 80136f4:	9005      	str	r0, [sp, #20]
 80136f6:	2800      	cmp	r0, #0
 80136f8:	f43f ae9a 	beq.w	8013430 <_strtod_l+0x488>
 80136fc:	2f00      	cmp	r7, #0
 80136fe:	dd08      	ble.n	8013712 <_strtod_l+0x76a>
 8013700:	9905      	ldr	r1, [sp, #20]
 8013702:	463a      	mov	r2, r7
 8013704:	4620      	mov	r0, r4
 8013706:	f001 fc2d 	bl	8014f64 <__lshift>
 801370a:	9005      	str	r0, [sp, #20]
 801370c:	2800      	cmp	r0, #0
 801370e:	f43f ae8f 	beq.w	8013430 <_strtod_l+0x488>
 8013712:	f1ba 0f00 	cmp.w	sl, #0
 8013716:	dd08      	ble.n	801372a <_strtod_l+0x782>
 8013718:	4659      	mov	r1, fp
 801371a:	4652      	mov	r2, sl
 801371c:	4620      	mov	r0, r4
 801371e:	f001 fc21 	bl	8014f64 <__lshift>
 8013722:	4683      	mov	fp, r0
 8013724:	2800      	cmp	r0, #0
 8013726:	f43f ae83 	beq.w	8013430 <_strtod_l+0x488>
 801372a:	9a05      	ldr	r2, [sp, #20]
 801372c:	9916      	ldr	r1, [sp, #88]	; 0x58
 801372e:	4620      	mov	r0, r4
 8013730:	f001 fca0 	bl	8015074 <__mdiff>
 8013734:	4605      	mov	r5, r0
 8013736:	2800      	cmp	r0, #0
 8013738:	f43f ae7a 	beq.w	8013430 <_strtod_l+0x488>
 801373c:	68c3      	ldr	r3, [r0, #12]
 801373e:	930b      	str	r3, [sp, #44]	; 0x2c
 8013740:	2300      	movs	r3, #0
 8013742:	60c3      	str	r3, [r0, #12]
 8013744:	4659      	mov	r1, fp
 8013746:	f001 fc79 	bl	801503c <__mcmp>
 801374a:	2800      	cmp	r0, #0
 801374c:	da60      	bge.n	8013810 <_strtod_l+0x868>
 801374e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013750:	ea53 0308 	orrs.w	r3, r3, r8
 8013754:	f040 8084 	bne.w	8013860 <_strtod_l+0x8b8>
 8013758:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801375c:	2b00      	cmp	r3, #0
 801375e:	d17f      	bne.n	8013860 <_strtod_l+0x8b8>
 8013760:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013764:	0d1b      	lsrs	r3, r3, #20
 8013766:	051b      	lsls	r3, r3, #20
 8013768:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801376c:	d978      	bls.n	8013860 <_strtod_l+0x8b8>
 801376e:	696b      	ldr	r3, [r5, #20]
 8013770:	b913      	cbnz	r3, 8013778 <_strtod_l+0x7d0>
 8013772:	692b      	ldr	r3, [r5, #16]
 8013774:	2b01      	cmp	r3, #1
 8013776:	dd73      	ble.n	8013860 <_strtod_l+0x8b8>
 8013778:	4629      	mov	r1, r5
 801377a:	2201      	movs	r2, #1
 801377c:	4620      	mov	r0, r4
 801377e:	f001 fbf1 	bl	8014f64 <__lshift>
 8013782:	4659      	mov	r1, fp
 8013784:	4605      	mov	r5, r0
 8013786:	f001 fc59 	bl	801503c <__mcmp>
 801378a:	2800      	cmp	r0, #0
 801378c:	dd68      	ble.n	8013860 <_strtod_l+0x8b8>
 801378e:	9904      	ldr	r1, [sp, #16]
 8013790:	4a54      	ldr	r2, [pc, #336]	; (80138e4 <_strtod_l+0x93c>)
 8013792:	464b      	mov	r3, r9
 8013794:	2900      	cmp	r1, #0
 8013796:	f000 8084 	beq.w	80138a2 <_strtod_l+0x8fa>
 801379a:	ea02 0109 	and.w	r1, r2, r9
 801379e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80137a2:	dc7e      	bgt.n	80138a2 <_strtod_l+0x8fa>
 80137a4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80137a8:	f77f aeb3 	ble.w	8013512 <_strtod_l+0x56a>
 80137ac:	4b4e      	ldr	r3, [pc, #312]	; (80138e8 <_strtod_l+0x940>)
 80137ae:	4640      	mov	r0, r8
 80137b0:	4649      	mov	r1, r9
 80137b2:	2200      	movs	r2, #0
 80137b4:	f7ec ff50 	bl	8000658 <__aeabi_dmul>
 80137b8:	4b4a      	ldr	r3, [pc, #296]	; (80138e4 <_strtod_l+0x93c>)
 80137ba:	400b      	ands	r3, r1
 80137bc:	4680      	mov	r8, r0
 80137be:	4689      	mov	r9, r1
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	f47f ae3f 	bne.w	8013444 <_strtod_l+0x49c>
 80137c6:	2322      	movs	r3, #34	; 0x22
 80137c8:	6023      	str	r3, [r4, #0]
 80137ca:	e63b      	b.n	8013444 <_strtod_l+0x49c>
 80137cc:	f04f 32ff 	mov.w	r2, #4294967295
 80137d0:	fa02 f303 	lsl.w	r3, r2, r3
 80137d4:	ea03 0808 	and.w	r8, r3, r8
 80137d8:	e6e8      	b.n	80135ac <_strtod_l+0x604>
 80137da:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80137de:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80137e2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80137e6:	36e2      	adds	r6, #226	; 0xe2
 80137e8:	fa01 f306 	lsl.w	r3, r1, r6
 80137ec:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80137f0:	e748      	b.n	8013684 <_strtod_l+0x6dc>
 80137f2:	2100      	movs	r1, #0
 80137f4:	2301      	movs	r3, #1
 80137f6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80137fa:	e743      	b.n	8013684 <_strtod_l+0x6dc>
 80137fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80137fe:	4632      	mov	r2, r6
 8013800:	4620      	mov	r0, r4
 8013802:	f001 fbaf 	bl	8014f64 <__lshift>
 8013806:	9016      	str	r0, [sp, #88]	; 0x58
 8013808:	2800      	cmp	r0, #0
 801380a:	f47f af6b 	bne.w	80136e4 <_strtod_l+0x73c>
 801380e:	e60f      	b.n	8013430 <_strtod_l+0x488>
 8013810:	46ca      	mov	sl, r9
 8013812:	d171      	bne.n	80138f8 <_strtod_l+0x950>
 8013814:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013816:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801381a:	b352      	cbz	r2, 8013872 <_strtod_l+0x8ca>
 801381c:	4a33      	ldr	r2, [pc, #204]	; (80138ec <_strtod_l+0x944>)
 801381e:	4293      	cmp	r3, r2
 8013820:	d12a      	bne.n	8013878 <_strtod_l+0x8d0>
 8013822:	9b04      	ldr	r3, [sp, #16]
 8013824:	4641      	mov	r1, r8
 8013826:	b1fb      	cbz	r3, 8013868 <_strtod_l+0x8c0>
 8013828:	4b2e      	ldr	r3, [pc, #184]	; (80138e4 <_strtod_l+0x93c>)
 801382a:	ea09 0303 	and.w	r3, r9, r3
 801382e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013832:	f04f 32ff 	mov.w	r2, #4294967295
 8013836:	d81a      	bhi.n	801386e <_strtod_l+0x8c6>
 8013838:	0d1b      	lsrs	r3, r3, #20
 801383a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801383e:	fa02 f303 	lsl.w	r3, r2, r3
 8013842:	4299      	cmp	r1, r3
 8013844:	d118      	bne.n	8013878 <_strtod_l+0x8d0>
 8013846:	4b2a      	ldr	r3, [pc, #168]	; (80138f0 <_strtod_l+0x948>)
 8013848:	459a      	cmp	sl, r3
 801384a:	d102      	bne.n	8013852 <_strtod_l+0x8aa>
 801384c:	3101      	adds	r1, #1
 801384e:	f43f adef 	beq.w	8013430 <_strtod_l+0x488>
 8013852:	4b24      	ldr	r3, [pc, #144]	; (80138e4 <_strtod_l+0x93c>)
 8013854:	ea0a 0303 	and.w	r3, sl, r3
 8013858:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 801385c:	f04f 0800 	mov.w	r8, #0
 8013860:	9b04      	ldr	r3, [sp, #16]
 8013862:	2b00      	cmp	r3, #0
 8013864:	d1a2      	bne.n	80137ac <_strtod_l+0x804>
 8013866:	e5ed      	b.n	8013444 <_strtod_l+0x49c>
 8013868:	f04f 33ff 	mov.w	r3, #4294967295
 801386c:	e7e9      	b.n	8013842 <_strtod_l+0x89a>
 801386e:	4613      	mov	r3, r2
 8013870:	e7e7      	b.n	8013842 <_strtod_l+0x89a>
 8013872:	ea53 0308 	orrs.w	r3, r3, r8
 8013876:	d08a      	beq.n	801378e <_strtod_l+0x7e6>
 8013878:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801387a:	b1e3      	cbz	r3, 80138b6 <_strtod_l+0x90e>
 801387c:	ea13 0f0a 	tst.w	r3, sl
 8013880:	d0ee      	beq.n	8013860 <_strtod_l+0x8b8>
 8013882:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013884:	9a04      	ldr	r2, [sp, #16]
 8013886:	4640      	mov	r0, r8
 8013888:	4649      	mov	r1, r9
 801388a:	b1c3      	cbz	r3, 80138be <_strtod_l+0x916>
 801388c:	f7ff fb6d 	bl	8012f6a <sulp>
 8013890:	4602      	mov	r2, r0
 8013892:	460b      	mov	r3, r1
 8013894:	ec51 0b18 	vmov	r0, r1, d8
 8013898:	f7ec fd28 	bl	80002ec <__adddf3>
 801389c:	4680      	mov	r8, r0
 801389e:	4689      	mov	r9, r1
 80138a0:	e7de      	b.n	8013860 <_strtod_l+0x8b8>
 80138a2:	4013      	ands	r3, r2
 80138a4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80138a8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80138ac:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80138b0:	f04f 38ff 	mov.w	r8, #4294967295
 80138b4:	e7d4      	b.n	8013860 <_strtod_l+0x8b8>
 80138b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80138b8:	ea13 0f08 	tst.w	r3, r8
 80138bc:	e7e0      	b.n	8013880 <_strtod_l+0x8d8>
 80138be:	f7ff fb54 	bl	8012f6a <sulp>
 80138c2:	4602      	mov	r2, r0
 80138c4:	460b      	mov	r3, r1
 80138c6:	ec51 0b18 	vmov	r0, r1, d8
 80138ca:	f7ec fd0d 	bl	80002e8 <__aeabi_dsub>
 80138ce:	2200      	movs	r2, #0
 80138d0:	2300      	movs	r3, #0
 80138d2:	4680      	mov	r8, r0
 80138d4:	4689      	mov	r9, r1
 80138d6:	f7ed f927 	bl	8000b28 <__aeabi_dcmpeq>
 80138da:	2800      	cmp	r0, #0
 80138dc:	d0c0      	beq.n	8013860 <_strtod_l+0x8b8>
 80138de:	e618      	b.n	8013512 <_strtod_l+0x56a>
 80138e0:	fffffc02 	.word	0xfffffc02
 80138e4:	7ff00000 	.word	0x7ff00000
 80138e8:	39500000 	.word	0x39500000
 80138ec:	000fffff 	.word	0x000fffff
 80138f0:	7fefffff 	.word	0x7fefffff
 80138f4:	08022c60 	.word	0x08022c60
 80138f8:	4659      	mov	r1, fp
 80138fa:	4628      	mov	r0, r5
 80138fc:	f001 fd0e 	bl	801531c <__ratio>
 8013900:	ec57 6b10 	vmov	r6, r7, d0
 8013904:	ee10 0a10 	vmov	r0, s0
 8013908:	2200      	movs	r2, #0
 801390a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801390e:	4639      	mov	r1, r7
 8013910:	f7ed f91e 	bl	8000b50 <__aeabi_dcmple>
 8013914:	2800      	cmp	r0, #0
 8013916:	d071      	beq.n	80139fc <_strtod_l+0xa54>
 8013918:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801391a:	2b00      	cmp	r3, #0
 801391c:	d17c      	bne.n	8013a18 <_strtod_l+0xa70>
 801391e:	f1b8 0f00 	cmp.w	r8, #0
 8013922:	d15a      	bne.n	80139da <_strtod_l+0xa32>
 8013924:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013928:	2b00      	cmp	r3, #0
 801392a:	d15d      	bne.n	80139e8 <_strtod_l+0xa40>
 801392c:	4b90      	ldr	r3, [pc, #576]	; (8013b70 <_strtod_l+0xbc8>)
 801392e:	2200      	movs	r2, #0
 8013930:	4630      	mov	r0, r6
 8013932:	4639      	mov	r1, r7
 8013934:	f7ed f902 	bl	8000b3c <__aeabi_dcmplt>
 8013938:	2800      	cmp	r0, #0
 801393a:	d15c      	bne.n	80139f6 <_strtod_l+0xa4e>
 801393c:	4630      	mov	r0, r6
 801393e:	4639      	mov	r1, r7
 8013940:	4b8c      	ldr	r3, [pc, #560]	; (8013b74 <_strtod_l+0xbcc>)
 8013942:	2200      	movs	r2, #0
 8013944:	f7ec fe88 	bl	8000658 <__aeabi_dmul>
 8013948:	4606      	mov	r6, r0
 801394a:	460f      	mov	r7, r1
 801394c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013950:	9606      	str	r6, [sp, #24]
 8013952:	9307      	str	r3, [sp, #28]
 8013954:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8013958:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 801395c:	4b86      	ldr	r3, [pc, #536]	; (8013b78 <_strtod_l+0xbd0>)
 801395e:	ea0a 0303 	and.w	r3, sl, r3
 8013962:	930d      	str	r3, [sp, #52]	; 0x34
 8013964:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013966:	4b85      	ldr	r3, [pc, #532]	; (8013b7c <_strtod_l+0xbd4>)
 8013968:	429a      	cmp	r2, r3
 801396a:	f040 8090 	bne.w	8013a8e <_strtod_l+0xae6>
 801396e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8013972:	ec49 8b10 	vmov	d0, r8, r9
 8013976:	f001 fc07 	bl	8015188 <__ulp>
 801397a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801397e:	ec51 0b10 	vmov	r0, r1, d0
 8013982:	f7ec fe69 	bl	8000658 <__aeabi_dmul>
 8013986:	4642      	mov	r2, r8
 8013988:	464b      	mov	r3, r9
 801398a:	f7ec fcaf 	bl	80002ec <__adddf3>
 801398e:	460b      	mov	r3, r1
 8013990:	4979      	ldr	r1, [pc, #484]	; (8013b78 <_strtod_l+0xbd0>)
 8013992:	4a7b      	ldr	r2, [pc, #492]	; (8013b80 <_strtod_l+0xbd8>)
 8013994:	4019      	ands	r1, r3
 8013996:	4291      	cmp	r1, r2
 8013998:	4680      	mov	r8, r0
 801399a:	d944      	bls.n	8013a26 <_strtod_l+0xa7e>
 801399c:	ee18 2a90 	vmov	r2, s17
 80139a0:	4b78      	ldr	r3, [pc, #480]	; (8013b84 <_strtod_l+0xbdc>)
 80139a2:	429a      	cmp	r2, r3
 80139a4:	d104      	bne.n	80139b0 <_strtod_l+0xa08>
 80139a6:	ee18 3a10 	vmov	r3, s16
 80139aa:	3301      	adds	r3, #1
 80139ac:	f43f ad40 	beq.w	8013430 <_strtod_l+0x488>
 80139b0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8013b84 <_strtod_l+0xbdc>
 80139b4:	f04f 38ff 	mov.w	r8, #4294967295
 80139b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80139ba:	4620      	mov	r0, r4
 80139bc:	f001 f8b8 	bl	8014b30 <_Bfree>
 80139c0:	9905      	ldr	r1, [sp, #20]
 80139c2:	4620      	mov	r0, r4
 80139c4:	f001 f8b4 	bl	8014b30 <_Bfree>
 80139c8:	4659      	mov	r1, fp
 80139ca:	4620      	mov	r0, r4
 80139cc:	f001 f8b0 	bl	8014b30 <_Bfree>
 80139d0:	4629      	mov	r1, r5
 80139d2:	4620      	mov	r0, r4
 80139d4:	f001 f8ac 	bl	8014b30 <_Bfree>
 80139d8:	e609      	b.n	80135ee <_strtod_l+0x646>
 80139da:	f1b8 0f01 	cmp.w	r8, #1
 80139de:	d103      	bne.n	80139e8 <_strtod_l+0xa40>
 80139e0:	f1b9 0f00 	cmp.w	r9, #0
 80139e4:	f43f ad95 	beq.w	8013512 <_strtod_l+0x56a>
 80139e8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8013b40 <_strtod_l+0xb98>
 80139ec:	4f60      	ldr	r7, [pc, #384]	; (8013b70 <_strtod_l+0xbc8>)
 80139ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80139f2:	2600      	movs	r6, #0
 80139f4:	e7ae      	b.n	8013954 <_strtod_l+0x9ac>
 80139f6:	4f5f      	ldr	r7, [pc, #380]	; (8013b74 <_strtod_l+0xbcc>)
 80139f8:	2600      	movs	r6, #0
 80139fa:	e7a7      	b.n	801394c <_strtod_l+0x9a4>
 80139fc:	4b5d      	ldr	r3, [pc, #372]	; (8013b74 <_strtod_l+0xbcc>)
 80139fe:	4630      	mov	r0, r6
 8013a00:	4639      	mov	r1, r7
 8013a02:	2200      	movs	r2, #0
 8013a04:	f7ec fe28 	bl	8000658 <__aeabi_dmul>
 8013a08:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013a0a:	4606      	mov	r6, r0
 8013a0c:	460f      	mov	r7, r1
 8013a0e:	2b00      	cmp	r3, #0
 8013a10:	d09c      	beq.n	801394c <_strtod_l+0x9a4>
 8013a12:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8013a16:	e79d      	b.n	8013954 <_strtod_l+0x9ac>
 8013a18:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8013b48 <_strtod_l+0xba0>
 8013a1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8013a20:	ec57 6b17 	vmov	r6, r7, d7
 8013a24:	e796      	b.n	8013954 <_strtod_l+0x9ac>
 8013a26:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8013a2a:	9b04      	ldr	r3, [sp, #16]
 8013a2c:	46ca      	mov	sl, r9
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d1c2      	bne.n	80139b8 <_strtod_l+0xa10>
 8013a32:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8013a36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013a38:	0d1b      	lsrs	r3, r3, #20
 8013a3a:	051b      	lsls	r3, r3, #20
 8013a3c:	429a      	cmp	r2, r3
 8013a3e:	d1bb      	bne.n	80139b8 <_strtod_l+0xa10>
 8013a40:	4630      	mov	r0, r6
 8013a42:	4639      	mov	r1, r7
 8013a44:	f7ed f940 	bl	8000cc8 <__aeabi_d2lz>
 8013a48:	f7ec fdd8 	bl	80005fc <__aeabi_l2d>
 8013a4c:	4602      	mov	r2, r0
 8013a4e:	460b      	mov	r3, r1
 8013a50:	4630      	mov	r0, r6
 8013a52:	4639      	mov	r1, r7
 8013a54:	f7ec fc48 	bl	80002e8 <__aeabi_dsub>
 8013a58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8013a5a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013a5e:	ea43 0308 	orr.w	r3, r3, r8
 8013a62:	4313      	orrs	r3, r2
 8013a64:	4606      	mov	r6, r0
 8013a66:	460f      	mov	r7, r1
 8013a68:	d054      	beq.n	8013b14 <_strtod_l+0xb6c>
 8013a6a:	a339      	add	r3, pc, #228	; (adr r3, 8013b50 <_strtod_l+0xba8>)
 8013a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a70:	f7ed f864 	bl	8000b3c <__aeabi_dcmplt>
 8013a74:	2800      	cmp	r0, #0
 8013a76:	f47f ace5 	bne.w	8013444 <_strtod_l+0x49c>
 8013a7a:	a337      	add	r3, pc, #220	; (adr r3, 8013b58 <_strtod_l+0xbb0>)
 8013a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a80:	4630      	mov	r0, r6
 8013a82:	4639      	mov	r1, r7
 8013a84:	f7ed f878 	bl	8000b78 <__aeabi_dcmpgt>
 8013a88:	2800      	cmp	r0, #0
 8013a8a:	d095      	beq.n	80139b8 <_strtod_l+0xa10>
 8013a8c:	e4da      	b.n	8013444 <_strtod_l+0x49c>
 8013a8e:	9b04      	ldr	r3, [sp, #16]
 8013a90:	b333      	cbz	r3, 8013ae0 <_strtod_l+0xb38>
 8013a92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a94:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013a98:	d822      	bhi.n	8013ae0 <_strtod_l+0xb38>
 8013a9a:	a331      	add	r3, pc, #196	; (adr r3, 8013b60 <_strtod_l+0xbb8>)
 8013a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013aa0:	4630      	mov	r0, r6
 8013aa2:	4639      	mov	r1, r7
 8013aa4:	f7ed f854 	bl	8000b50 <__aeabi_dcmple>
 8013aa8:	b1a0      	cbz	r0, 8013ad4 <_strtod_l+0xb2c>
 8013aaa:	4639      	mov	r1, r7
 8013aac:	4630      	mov	r0, r6
 8013aae:	f7ed f883 	bl	8000bb8 <__aeabi_d2uiz>
 8013ab2:	2801      	cmp	r0, #1
 8013ab4:	bf38      	it	cc
 8013ab6:	2001      	movcc	r0, #1
 8013ab8:	f7ec fd54 	bl	8000564 <__aeabi_ui2d>
 8013abc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013abe:	4606      	mov	r6, r0
 8013ac0:	460f      	mov	r7, r1
 8013ac2:	bb23      	cbnz	r3, 8013b0e <_strtod_l+0xb66>
 8013ac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013ac8:	9010      	str	r0, [sp, #64]	; 0x40
 8013aca:	9311      	str	r3, [sp, #68]	; 0x44
 8013acc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8013ad0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8013ad4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013ad6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8013ad8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8013adc:	1a9b      	subs	r3, r3, r2
 8013ade:	930f      	str	r3, [sp, #60]	; 0x3c
 8013ae0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013ae4:	eeb0 0a48 	vmov.f32	s0, s16
 8013ae8:	eef0 0a68 	vmov.f32	s1, s17
 8013aec:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8013af0:	f001 fb4a 	bl	8015188 <__ulp>
 8013af4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8013af8:	ec53 2b10 	vmov	r2, r3, d0
 8013afc:	f7ec fdac 	bl	8000658 <__aeabi_dmul>
 8013b00:	ec53 2b18 	vmov	r2, r3, d8
 8013b04:	f7ec fbf2 	bl	80002ec <__adddf3>
 8013b08:	4680      	mov	r8, r0
 8013b0a:	4689      	mov	r9, r1
 8013b0c:	e78d      	b.n	8013a2a <_strtod_l+0xa82>
 8013b0e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013b12:	e7db      	b.n	8013acc <_strtod_l+0xb24>
 8013b14:	a314      	add	r3, pc, #80	; (adr r3, 8013b68 <_strtod_l+0xbc0>)
 8013b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b1a:	f7ed f80f 	bl	8000b3c <__aeabi_dcmplt>
 8013b1e:	e7b3      	b.n	8013a88 <_strtod_l+0xae0>
 8013b20:	2300      	movs	r3, #0
 8013b22:	930a      	str	r3, [sp, #40]	; 0x28
 8013b24:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8013b26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8013b28:	6013      	str	r3, [r2, #0]
 8013b2a:	f7ff ba7c 	b.w	8013026 <_strtod_l+0x7e>
 8013b2e:	2a65      	cmp	r2, #101	; 0x65
 8013b30:	f43f ab75 	beq.w	801321e <_strtod_l+0x276>
 8013b34:	2a45      	cmp	r2, #69	; 0x45
 8013b36:	f43f ab72 	beq.w	801321e <_strtod_l+0x276>
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	f7ff bbaa 	b.w	8013294 <_strtod_l+0x2ec>
 8013b40:	00000000 	.word	0x00000000
 8013b44:	bff00000 	.word	0xbff00000
 8013b48:	00000000 	.word	0x00000000
 8013b4c:	3ff00000 	.word	0x3ff00000
 8013b50:	94a03595 	.word	0x94a03595
 8013b54:	3fdfffff 	.word	0x3fdfffff
 8013b58:	35afe535 	.word	0x35afe535
 8013b5c:	3fe00000 	.word	0x3fe00000
 8013b60:	ffc00000 	.word	0xffc00000
 8013b64:	41dfffff 	.word	0x41dfffff
 8013b68:	94a03595 	.word	0x94a03595
 8013b6c:	3fcfffff 	.word	0x3fcfffff
 8013b70:	3ff00000 	.word	0x3ff00000
 8013b74:	3fe00000 	.word	0x3fe00000
 8013b78:	7ff00000 	.word	0x7ff00000
 8013b7c:	7fe00000 	.word	0x7fe00000
 8013b80:	7c9fffff 	.word	0x7c9fffff
 8013b84:	7fefffff 	.word	0x7fefffff

08013b88 <strtof>:
 8013b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b8c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8013c50 <strtof+0xc8>
 8013b90:	4b2a      	ldr	r3, [pc, #168]	; (8013c3c <strtof+0xb4>)
 8013b92:	460a      	mov	r2, r1
 8013b94:	ed2d 8b02 	vpush	{d8}
 8013b98:	4601      	mov	r1, r0
 8013b9a:	f8d8 0000 	ldr.w	r0, [r8]
 8013b9e:	f7ff fa03 	bl	8012fa8 <_strtod_l>
 8013ba2:	ec55 4b10 	vmov	r4, r5, d0
 8013ba6:	ee10 2a10 	vmov	r2, s0
 8013baa:	ee10 0a10 	vmov	r0, s0
 8013bae:	462b      	mov	r3, r5
 8013bb0:	4629      	mov	r1, r5
 8013bb2:	f7ec ffeb 	bl	8000b8c <__aeabi_dcmpun>
 8013bb6:	b190      	cbz	r0, 8013bde <strtof+0x56>
 8013bb8:	2d00      	cmp	r5, #0
 8013bba:	4821      	ldr	r0, [pc, #132]	; (8013c40 <strtof+0xb8>)
 8013bbc:	da09      	bge.n	8013bd2 <strtof+0x4a>
 8013bbe:	f000 fb0f 	bl	80141e0 <nanf>
 8013bc2:	eeb1 8a40 	vneg.f32	s16, s0
 8013bc6:	eeb0 0a48 	vmov.f32	s0, s16
 8013bca:	ecbd 8b02 	vpop	{d8}
 8013bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013bd2:	ecbd 8b02 	vpop	{d8}
 8013bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013bda:	f000 bb01 	b.w	80141e0 <nanf>
 8013bde:	4620      	mov	r0, r4
 8013be0:	4629      	mov	r1, r5
 8013be2:	f7ed f809 	bl	8000bf8 <__aeabi_d2f>
 8013be6:	ee08 0a10 	vmov	s16, r0
 8013bea:	eddf 7a16 	vldr	s15, [pc, #88]	; 8013c44 <strtof+0xbc>
 8013bee:	eeb0 7ac8 	vabs.f32	s14, s16
 8013bf2:	eeb4 7a67 	vcmp.f32	s14, s15
 8013bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013bfa:	dd11      	ble.n	8013c20 <strtof+0x98>
 8013bfc:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8013c00:	4b11      	ldr	r3, [pc, #68]	; (8013c48 <strtof+0xc0>)
 8013c02:	f04f 32ff 	mov.w	r2, #4294967295
 8013c06:	4620      	mov	r0, r4
 8013c08:	4639      	mov	r1, r7
 8013c0a:	f7ec ffbf 	bl	8000b8c <__aeabi_dcmpun>
 8013c0e:	b980      	cbnz	r0, 8013c32 <strtof+0xaa>
 8013c10:	4b0d      	ldr	r3, [pc, #52]	; (8013c48 <strtof+0xc0>)
 8013c12:	f04f 32ff 	mov.w	r2, #4294967295
 8013c16:	4620      	mov	r0, r4
 8013c18:	4639      	mov	r1, r7
 8013c1a:	f7ec ff99 	bl	8000b50 <__aeabi_dcmple>
 8013c1e:	b940      	cbnz	r0, 8013c32 <strtof+0xaa>
 8013c20:	ee18 3a10 	vmov	r3, s16
 8013c24:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8013c28:	d1cd      	bne.n	8013bc6 <strtof+0x3e>
 8013c2a:	4b08      	ldr	r3, [pc, #32]	; (8013c4c <strtof+0xc4>)
 8013c2c:	402b      	ands	r3, r5
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d0c9      	beq.n	8013bc6 <strtof+0x3e>
 8013c32:	f8d8 3000 	ldr.w	r3, [r8]
 8013c36:	2222      	movs	r2, #34	; 0x22
 8013c38:	601a      	str	r2, [r3, #0]
 8013c3a:	e7c4      	b.n	8013bc6 <strtof+0x3e>
 8013c3c:	2000020c 	.word	0x2000020c
 8013c40:	08022fe2 	.word	0x08022fe2
 8013c44:	7f7fffff 	.word	0x7f7fffff
 8013c48:	7fefffff 	.word	0x7fefffff
 8013c4c:	7ff00000 	.word	0x7ff00000
 8013c50:	200003c4 	.word	0x200003c4

08013c54 <_strtoul_l.constprop.0>:
 8013c54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c58:	4f36      	ldr	r7, [pc, #216]	; (8013d34 <_strtoul_l.constprop.0+0xe0>)
 8013c5a:	4686      	mov	lr, r0
 8013c5c:	460d      	mov	r5, r1
 8013c5e:	4628      	mov	r0, r5
 8013c60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013c64:	5d3e      	ldrb	r6, [r7, r4]
 8013c66:	f016 0608 	ands.w	r6, r6, #8
 8013c6a:	d1f8      	bne.n	8013c5e <_strtoul_l.constprop.0+0xa>
 8013c6c:	2c2d      	cmp	r4, #45	; 0x2d
 8013c6e:	d130      	bne.n	8013cd2 <_strtoul_l.constprop.0+0x7e>
 8013c70:	782c      	ldrb	r4, [r5, #0]
 8013c72:	2601      	movs	r6, #1
 8013c74:	1c85      	adds	r5, r0, #2
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d057      	beq.n	8013d2a <_strtoul_l.constprop.0+0xd6>
 8013c7a:	2b10      	cmp	r3, #16
 8013c7c:	d109      	bne.n	8013c92 <_strtoul_l.constprop.0+0x3e>
 8013c7e:	2c30      	cmp	r4, #48	; 0x30
 8013c80:	d107      	bne.n	8013c92 <_strtoul_l.constprop.0+0x3e>
 8013c82:	7828      	ldrb	r0, [r5, #0]
 8013c84:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013c88:	2858      	cmp	r0, #88	; 0x58
 8013c8a:	d149      	bne.n	8013d20 <_strtoul_l.constprop.0+0xcc>
 8013c8c:	786c      	ldrb	r4, [r5, #1]
 8013c8e:	2310      	movs	r3, #16
 8013c90:	3502      	adds	r5, #2
 8013c92:	f04f 38ff 	mov.w	r8, #4294967295
 8013c96:	2700      	movs	r7, #0
 8013c98:	fbb8 f8f3 	udiv	r8, r8, r3
 8013c9c:	fb03 f908 	mul.w	r9, r3, r8
 8013ca0:	ea6f 0909 	mvn.w	r9, r9
 8013ca4:	4638      	mov	r0, r7
 8013ca6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013caa:	f1bc 0f09 	cmp.w	ip, #9
 8013cae:	d815      	bhi.n	8013cdc <_strtoul_l.constprop.0+0x88>
 8013cb0:	4664      	mov	r4, ip
 8013cb2:	42a3      	cmp	r3, r4
 8013cb4:	dd23      	ble.n	8013cfe <_strtoul_l.constprop.0+0xaa>
 8013cb6:	f1b7 3fff 	cmp.w	r7, #4294967295
 8013cba:	d007      	beq.n	8013ccc <_strtoul_l.constprop.0+0x78>
 8013cbc:	4580      	cmp	r8, r0
 8013cbe:	d31b      	bcc.n	8013cf8 <_strtoul_l.constprop.0+0xa4>
 8013cc0:	d101      	bne.n	8013cc6 <_strtoul_l.constprop.0+0x72>
 8013cc2:	45a1      	cmp	r9, r4
 8013cc4:	db18      	blt.n	8013cf8 <_strtoul_l.constprop.0+0xa4>
 8013cc6:	fb00 4003 	mla	r0, r0, r3, r4
 8013cca:	2701      	movs	r7, #1
 8013ccc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013cd0:	e7e9      	b.n	8013ca6 <_strtoul_l.constprop.0+0x52>
 8013cd2:	2c2b      	cmp	r4, #43	; 0x2b
 8013cd4:	bf04      	itt	eq
 8013cd6:	782c      	ldrbeq	r4, [r5, #0]
 8013cd8:	1c85      	addeq	r5, r0, #2
 8013cda:	e7cc      	b.n	8013c76 <_strtoul_l.constprop.0+0x22>
 8013cdc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8013ce0:	f1bc 0f19 	cmp.w	ip, #25
 8013ce4:	d801      	bhi.n	8013cea <_strtoul_l.constprop.0+0x96>
 8013ce6:	3c37      	subs	r4, #55	; 0x37
 8013ce8:	e7e3      	b.n	8013cb2 <_strtoul_l.constprop.0+0x5e>
 8013cea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8013cee:	f1bc 0f19 	cmp.w	ip, #25
 8013cf2:	d804      	bhi.n	8013cfe <_strtoul_l.constprop.0+0xaa>
 8013cf4:	3c57      	subs	r4, #87	; 0x57
 8013cf6:	e7dc      	b.n	8013cb2 <_strtoul_l.constprop.0+0x5e>
 8013cf8:	f04f 37ff 	mov.w	r7, #4294967295
 8013cfc:	e7e6      	b.n	8013ccc <_strtoul_l.constprop.0+0x78>
 8013cfe:	1c7b      	adds	r3, r7, #1
 8013d00:	d106      	bne.n	8013d10 <_strtoul_l.constprop.0+0xbc>
 8013d02:	2322      	movs	r3, #34	; 0x22
 8013d04:	f8ce 3000 	str.w	r3, [lr]
 8013d08:	4638      	mov	r0, r7
 8013d0a:	b932      	cbnz	r2, 8013d1a <_strtoul_l.constprop.0+0xc6>
 8013d0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d10:	b106      	cbz	r6, 8013d14 <_strtoul_l.constprop.0+0xc0>
 8013d12:	4240      	negs	r0, r0
 8013d14:	2a00      	cmp	r2, #0
 8013d16:	d0f9      	beq.n	8013d0c <_strtoul_l.constprop.0+0xb8>
 8013d18:	b107      	cbz	r7, 8013d1c <_strtoul_l.constprop.0+0xc8>
 8013d1a:	1e69      	subs	r1, r5, #1
 8013d1c:	6011      	str	r1, [r2, #0]
 8013d1e:	e7f5      	b.n	8013d0c <_strtoul_l.constprop.0+0xb8>
 8013d20:	2430      	movs	r4, #48	; 0x30
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d1b5      	bne.n	8013c92 <_strtoul_l.constprop.0+0x3e>
 8013d26:	2308      	movs	r3, #8
 8013d28:	e7b3      	b.n	8013c92 <_strtoul_l.constprop.0+0x3e>
 8013d2a:	2c30      	cmp	r4, #48	; 0x30
 8013d2c:	d0a9      	beq.n	8013c82 <_strtoul_l.constprop.0+0x2e>
 8013d2e:	230a      	movs	r3, #10
 8013d30:	e7af      	b.n	8013c92 <_strtoul_l.constprop.0+0x3e>
 8013d32:	bf00      	nop
 8013d34:	08022c89 	.word	0x08022c89

08013d38 <strtoul>:
 8013d38:	4613      	mov	r3, r2
 8013d3a:	460a      	mov	r2, r1
 8013d3c:	4601      	mov	r1, r0
 8013d3e:	4802      	ldr	r0, [pc, #8]	; (8013d48 <strtoul+0x10>)
 8013d40:	6800      	ldr	r0, [r0, #0]
 8013d42:	f7ff bf87 	b.w	8013c54 <_strtoul_l.constprop.0>
 8013d46:	bf00      	nop
 8013d48:	200003c4 	.word	0x200003c4

08013d4c <std>:
 8013d4c:	2300      	movs	r3, #0
 8013d4e:	b510      	push	{r4, lr}
 8013d50:	4604      	mov	r4, r0
 8013d52:	e9c0 3300 	strd	r3, r3, [r0]
 8013d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013d5a:	6083      	str	r3, [r0, #8]
 8013d5c:	8181      	strh	r1, [r0, #12]
 8013d5e:	6643      	str	r3, [r0, #100]	; 0x64
 8013d60:	81c2      	strh	r2, [r0, #14]
 8013d62:	6183      	str	r3, [r0, #24]
 8013d64:	4619      	mov	r1, r3
 8013d66:	2208      	movs	r2, #8
 8013d68:	305c      	adds	r0, #92	; 0x5c
 8013d6a:	f000 f961 	bl	8014030 <memset>
 8013d6e:	4b0d      	ldr	r3, [pc, #52]	; (8013da4 <std+0x58>)
 8013d70:	6263      	str	r3, [r4, #36]	; 0x24
 8013d72:	4b0d      	ldr	r3, [pc, #52]	; (8013da8 <std+0x5c>)
 8013d74:	62a3      	str	r3, [r4, #40]	; 0x28
 8013d76:	4b0d      	ldr	r3, [pc, #52]	; (8013dac <std+0x60>)
 8013d78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013d7a:	4b0d      	ldr	r3, [pc, #52]	; (8013db0 <std+0x64>)
 8013d7c:	6323      	str	r3, [r4, #48]	; 0x30
 8013d7e:	4b0d      	ldr	r3, [pc, #52]	; (8013db4 <std+0x68>)
 8013d80:	6224      	str	r4, [r4, #32]
 8013d82:	429c      	cmp	r4, r3
 8013d84:	d006      	beq.n	8013d94 <std+0x48>
 8013d86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8013d8a:	4294      	cmp	r4, r2
 8013d8c:	d002      	beq.n	8013d94 <std+0x48>
 8013d8e:	33d0      	adds	r3, #208	; 0xd0
 8013d90:	429c      	cmp	r4, r3
 8013d92:	d105      	bne.n	8013da0 <std+0x54>
 8013d94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013d9c:	f000 b9fe 	b.w	801419c <__retarget_lock_init_recursive>
 8013da0:	bd10      	pop	{r4, pc}
 8013da2:	bf00      	nop
 8013da4:	08013f39 	.word	0x08013f39
 8013da8:	08013f5b 	.word	0x08013f5b
 8013dac:	08013f93 	.word	0x08013f93
 8013db0:	08013fb7 	.word	0x08013fb7
 8013db4:	200088c4 	.word	0x200088c4

08013db8 <stdio_exit_handler>:
 8013db8:	4a02      	ldr	r2, [pc, #8]	; (8013dc4 <stdio_exit_handler+0xc>)
 8013dba:	4903      	ldr	r1, [pc, #12]	; (8013dc8 <stdio_exit_handler+0x10>)
 8013dbc:	4803      	ldr	r0, [pc, #12]	; (8013dcc <stdio_exit_handler+0x14>)
 8013dbe:	f000 b869 	b.w	8013e94 <_fwalk_sglue>
 8013dc2:	bf00      	nop
 8013dc4:	20000200 	.word	0x20000200
 8013dc8:	08015b01 	.word	0x08015b01
 8013dcc:	20000378 	.word	0x20000378

08013dd0 <cleanup_stdio>:
 8013dd0:	6841      	ldr	r1, [r0, #4]
 8013dd2:	4b0c      	ldr	r3, [pc, #48]	; (8013e04 <cleanup_stdio+0x34>)
 8013dd4:	4299      	cmp	r1, r3
 8013dd6:	b510      	push	{r4, lr}
 8013dd8:	4604      	mov	r4, r0
 8013dda:	d001      	beq.n	8013de0 <cleanup_stdio+0x10>
 8013ddc:	f001 fe90 	bl	8015b00 <_fflush_r>
 8013de0:	68a1      	ldr	r1, [r4, #8]
 8013de2:	4b09      	ldr	r3, [pc, #36]	; (8013e08 <cleanup_stdio+0x38>)
 8013de4:	4299      	cmp	r1, r3
 8013de6:	d002      	beq.n	8013dee <cleanup_stdio+0x1e>
 8013de8:	4620      	mov	r0, r4
 8013dea:	f001 fe89 	bl	8015b00 <_fflush_r>
 8013dee:	68e1      	ldr	r1, [r4, #12]
 8013df0:	4b06      	ldr	r3, [pc, #24]	; (8013e0c <cleanup_stdio+0x3c>)
 8013df2:	4299      	cmp	r1, r3
 8013df4:	d004      	beq.n	8013e00 <cleanup_stdio+0x30>
 8013df6:	4620      	mov	r0, r4
 8013df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013dfc:	f001 be80 	b.w	8015b00 <_fflush_r>
 8013e00:	bd10      	pop	{r4, pc}
 8013e02:	bf00      	nop
 8013e04:	200088c4 	.word	0x200088c4
 8013e08:	2000892c 	.word	0x2000892c
 8013e0c:	20008994 	.word	0x20008994

08013e10 <global_stdio_init.part.0>:
 8013e10:	b510      	push	{r4, lr}
 8013e12:	4b0b      	ldr	r3, [pc, #44]	; (8013e40 <global_stdio_init.part.0+0x30>)
 8013e14:	4c0b      	ldr	r4, [pc, #44]	; (8013e44 <global_stdio_init.part.0+0x34>)
 8013e16:	4a0c      	ldr	r2, [pc, #48]	; (8013e48 <global_stdio_init.part.0+0x38>)
 8013e18:	601a      	str	r2, [r3, #0]
 8013e1a:	4620      	mov	r0, r4
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	2104      	movs	r1, #4
 8013e20:	f7ff ff94 	bl	8013d4c <std>
 8013e24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8013e28:	2201      	movs	r2, #1
 8013e2a:	2109      	movs	r1, #9
 8013e2c:	f7ff ff8e 	bl	8013d4c <std>
 8013e30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8013e34:	2202      	movs	r2, #2
 8013e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e3a:	2112      	movs	r1, #18
 8013e3c:	f7ff bf86 	b.w	8013d4c <std>
 8013e40:	200089fc 	.word	0x200089fc
 8013e44:	200088c4 	.word	0x200088c4
 8013e48:	08013db9 	.word	0x08013db9

08013e4c <__sfp_lock_acquire>:
 8013e4c:	4801      	ldr	r0, [pc, #4]	; (8013e54 <__sfp_lock_acquire+0x8>)
 8013e4e:	f000 b9a6 	b.w	801419e <__retarget_lock_acquire_recursive>
 8013e52:	bf00      	nop
 8013e54:	20008a05 	.word	0x20008a05

08013e58 <__sfp_lock_release>:
 8013e58:	4801      	ldr	r0, [pc, #4]	; (8013e60 <__sfp_lock_release+0x8>)
 8013e5a:	f000 b9a1 	b.w	80141a0 <__retarget_lock_release_recursive>
 8013e5e:	bf00      	nop
 8013e60:	20008a05 	.word	0x20008a05

08013e64 <__sinit>:
 8013e64:	b510      	push	{r4, lr}
 8013e66:	4604      	mov	r4, r0
 8013e68:	f7ff fff0 	bl	8013e4c <__sfp_lock_acquire>
 8013e6c:	6a23      	ldr	r3, [r4, #32]
 8013e6e:	b11b      	cbz	r3, 8013e78 <__sinit+0x14>
 8013e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e74:	f7ff bff0 	b.w	8013e58 <__sfp_lock_release>
 8013e78:	4b04      	ldr	r3, [pc, #16]	; (8013e8c <__sinit+0x28>)
 8013e7a:	6223      	str	r3, [r4, #32]
 8013e7c:	4b04      	ldr	r3, [pc, #16]	; (8013e90 <__sinit+0x2c>)
 8013e7e:	681b      	ldr	r3, [r3, #0]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d1f5      	bne.n	8013e70 <__sinit+0xc>
 8013e84:	f7ff ffc4 	bl	8013e10 <global_stdio_init.part.0>
 8013e88:	e7f2      	b.n	8013e70 <__sinit+0xc>
 8013e8a:	bf00      	nop
 8013e8c:	08013dd1 	.word	0x08013dd1
 8013e90:	200089fc 	.word	0x200089fc

08013e94 <_fwalk_sglue>:
 8013e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e98:	4607      	mov	r7, r0
 8013e9a:	4688      	mov	r8, r1
 8013e9c:	4614      	mov	r4, r2
 8013e9e:	2600      	movs	r6, #0
 8013ea0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013ea4:	f1b9 0901 	subs.w	r9, r9, #1
 8013ea8:	d505      	bpl.n	8013eb6 <_fwalk_sglue+0x22>
 8013eaa:	6824      	ldr	r4, [r4, #0]
 8013eac:	2c00      	cmp	r4, #0
 8013eae:	d1f7      	bne.n	8013ea0 <_fwalk_sglue+0xc>
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013eb6:	89ab      	ldrh	r3, [r5, #12]
 8013eb8:	2b01      	cmp	r3, #1
 8013eba:	d907      	bls.n	8013ecc <_fwalk_sglue+0x38>
 8013ebc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	d003      	beq.n	8013ecc <_fwalk_sglue+0x38>
 8013ec4:	4629      	mov	r1, r5
 8013ec6:	4638      	mov	r0, r7
 8013ec8:	47c0      	blx	r8
 8013eca:	4306      	orrs	r6, r0
 8013ecc:	3568      	adds	r5, #104	; 0x68
 8013ece:	e7e9      	b.n	8013ea4 <_fwalk_sglue+0x10>

08013ed0 <sniprintf>:
 8013ed0:	b40c      	push	{r2, r3}
 8013ed2:	b530      	push	{r4, r5, lr}
 8013ed4:	4b17      	ldr	r3, [pc, #92]	; (8013f34 <sniprintf+0x64>)
 8013ed6:	1e0c      	subs	r4, r1, #0
 8013ed8:	681d      	ldr	r5, [r3, #0]
 8013eda:	b09d      	sub	sp, #116	; 0x74
 8013edc:	da08      	bge.n	8013ef0 <sniprintf+0x20>
 8013ede:	238b      	movs	r3, #139	; 0x8b
 8013ee0:	602b      	str	r3, [r5, #0]
 8013ee2:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee6:	b01d      	add	sp, #116	; 0x74
 8013ee8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013eec:	b002      	add	sp, #8
 8013eee:	4770      	bx	lr
 8013ef0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013ef4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8013ef8:	bf14      	ite	ne
 8013efa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013efe:	4623      	moveq	r3, r4
 8013f00:	9304      	str	r3, [sp, #16]
 8013f02:	9307      	str	r3, [sp, #28]
 8013f04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013f08:	9002      	str	r0, [sp, #8]
 8013f0a:	9006      	str	r0, [sp, #24]
 8013f0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013f10:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8013f12:	ab21      	add	r3, sp, #132	; 0x84
 8013f14:	a902      	add	r1, sp, #8
 8013f16:	4628      	mov	r0, r5
 8013f18:	9301      	str	r3, [sp, #4]
 8013f1a:	f001 fadd 	bl	80154d8 <_svfiprintf_r>
 8013f1e:	1c43      	adds	r3, r0, #1
 8013f20:	bfbc      	itt	lt
 8013f22:	238b      	movlt	r3, #139	; 0x8b
 8013f24:	602b      	strlt	r3, [r5, #0]
 8013f26:	2c00      	cmp	r4, #0
 8013f28:	d0dd      	beq.n	8013ee6 <sniprintf+0x16>
 8013f2a:	9b02      	ldr	r3, [sp, #8]
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	701a      	strb	r2, [r3, #0]
 8013f30:	e7d9      	b.n	8013ee6 <sniprintf+0x16>
 8013f32:	bf00      	nop
 8013f34:	200003c4 	.word	0x200003c4

08013f38 <__sread>:
 8013f38:	b510      	push	{r4, lr}
 8013f3a:	460c      	mov	r4, r1
 8013f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f40:	f000 f8de 	bl	8014100 <_read_r>
 8013f44:	2800      	cmp	r0, #0
 8013f46:	bfab      	itete	ge
 8013f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8013f4c:	181b      	addge	r3, r3, r0
 8013f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013f52:	bfac      	ite	ge
 8013f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8013f56:	81a3      	strhlt	r3, [r4, #12]
 8013f58:	bd10      	pop	{r4, pc}

08013f5a <__swrite>:
 8013f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f5e:	461f      	mov	r7, r3
 8013f60:	898b      	ldrh	r3, [r1, #12]
 8013f62:	05db      	lsls	r3, r3, #23
 8013f64:	4605      	mov	r5, r0
 8013f66:	460c      	mov	r4, r1
 8013f68:	4616      	mov	r6, r2
 8013f6a:	d505      	bpl.n	8013f78 <__swrite+0x1e>
 8013f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f70:	2302      	movs	r3, #2
 8013f72:	2200      	movs	r2, #0
 8013f74:	f000 f8b2 	bl	80140dc <_lseek_r>
 8013f78:	89a3      	ldrh	r3, [r4, #12]
 8013f7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013f7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013f82:	81a3      	strh	r3, [r4, #12]
 8013f84:	4632      	mov	r2, r6
 8013f86:	463b      	mov	r3, r7
 8013f88:	4628      	mov	r0, r5
 8013f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013f8e:	f000 b8c9 	b.w	8014124 <_write_r>

08013f92 <__sseek>:
 8013f92:	b510      	push	{r4, lr}
 8013f94:	460c      	mov	r4, r1
 8013f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013f9a:	f000 f89f 	bl	80140dc <_lseek_r>
 8013f9e:	1c43      	adds	r3, r0, #1
 8013fa0:	89a3      	ldrh	r3, [r4, #12]
 8013fa2:	bf15      	itete	ne
 8013fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8013fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013fae:	81a3      	strheq	r3, [r4, #12]
 8013fb0:	bf18      	it	ne
 8013fb2:	81a3      	strhne	r3, [r4, #12]
 8013fb4:	bd10      	pop	{r4, pc}

08013fb6 <__sclose>:
 8013fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013fba:	f000 b87f 	b.w	80140bc <_close_r>

08013fbe <_vsniprintf_r>:
 8013fbe:	b530      	push	{r4, r5, lr}
 8013fc0:	4614      	mov	r4, r2
 8013fc2:	2c00      	cmp	r4, #0
 8013fc4:	b09b      	sub	sp, #108	; 0x6c
 8013fc6:	4605      	mov	r5, r0
 8013fc8:	461a      	mov	r2, r3
 8013fca:	da05      	bge.n	8013fd8 <_vsniprintf_r+0x1a>
 8013fcc:	238b      	movs	r3, #139	; 0x8b
 8013fce:	6003      	str	r3, [r0, #0]
 8013fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8013fd4:	b01b      	add	sp, #108	; 0x6c
 8013fd6:	bd30      	pop	{r4, r5, pc}
 8013fd8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8013fdc:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013fe0:	bf14      	ite	ne
 8013fe2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8013fe6:	4623      	moveq	r3, r4
 8013fe8:	9302      	str	r3, [sp, #8]
 8013fea:	9305      	str	r3, [sp, #20]
 8013fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013ff0:	9100      	str	r1, [sp, #0]
 8013ff2:	9104      	str	r1, [sp, #16]
 8013ff4:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013ff8:	4669      	mov	r1, sp
 8013ffa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8013ffc:	f001 fa6c 	bl	80154d8 <_svfiprintf_r>
 8014000:	1c43      	adds	r3, r0, #1
 8014002:	bfbc      	itt	lt
 8014004:	238b      	movlt	r3, #139	; 0x8b
 8014006:	602b      	strlt	r3, [r5, #0]
 8014008:	2c00      	cmp	r4, #0
 801400a:	d0e3      	beq.n	8013fd4 <_vsniprintf_r+0x16>
 801400c:	9b00      	ldr	r3, [sp, #0]
 801400e:	2200      	movs	r2, #0
 8014010:	701a      	strb	r2, [r3, #0]
 8014012:	e7df      	b.n	8013fd4 <_vsniprintf_r+0x16>

08014014 <vsniprintf>:
 8014014:	b507      	push	{r0, r1, r2, lr}
 8014016:	9300      	str	r3, [sp, #0]
 8014018:	4613      	mov	r3, r2
 801401a:	460a      	mov	r2, r1
 801401c:	4601      	mov	r1, r0
 801401e:	4803      	ldr	r0, [pc, #12]	; (801402c <vsniprintf+0x18>)
 8014020:	6800      	ldr	r0, [r0, #0]
 8014022:	f7ff ffcc 	bl	8013fbe <_vsniprintf_r>
 8014026:	b003      	add	sp, #12
 8014028:	f85d fb04 	ldr.w	pc, [sp], #4
 801402c:	200003c4 	.word	0x200003c4

08014030 <memset>:
 8014030:	4402      	add	r2, r0
 8014032:	4603      	mov	r3, r0
 8014034:	4293      	cmp	r3, r2
 8014036:	d100      	bne.n	801403a <memset+0xa>
 8014038:	4770      	bx	lr
 801403a:	f803 1b01 	strb.w	r1, [r3], #1
 801403e:	e7f9      	b.n	8014034 <memset+0x4>

08014040 <strncmp>:
 8014040:	b510      	push	{r4, lr}
 8014042:	b16a      	cbz	r2, 8014060 <strncmp+0x20>
 8014044:	3901      	subs	r1, #1
 8014046:	1884      	adds	r4, r0, r2
 8014048:	f810 2b01 	ldrb.w	r2, [r0], #1
 801404c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014050:	429a      	cmp	r2, r3
 8014052:	d103      	bne.n	801405c <strncmp+0x1c>
 8014054:	42a0      	cmp	r0, r4
 8014056:	d001      	beq.n	801405c <strncmp+0x1c>
 8014058:	2a00      	cmp	r2, #0
 801405a:	d1f5      	bne.n	8014048 <strncmp+0x8>
 801405c:	1ad0      	subs	r0, r2, r3
 801405e:	bd10      	pop	{r4, pc}
 8014060:	4610      	mov	r0, r2
 8014062:	e7fc      	b.n	801405e <strncmp+0x1e>

08014064 <__strtok_r>:
 8014064:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014066:	b908      	cbnz	r0, 801406c <__strtok_r+0x8>
 8014068:	6810      	ldr	r0, [r2, #0]
 801406a:	b188      	cbz	r0, 8014090 <__strtok_r+0x2c>
 801406c:	4604      	mov	r4, r0
 801406e:	4620      	mov	r0, r4
 8014070:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014074:	460f      	mov	r7, r1
 8014076:	f817 6b01 	ldrb.w	r6, [r7], #1
 801407a:	b91e      	cbnz	r6, 8014084 <__strtok_r+0x20>
 801407c:	b965      	cbnz	r5, 8014098 <__strtok_r+0x34>
 801407e:	6015      	str	r5, [r2, #0]
 8014080:	4628      	mov	r0, r5
 8014082:	e005      	b.n	8014090 <__strtok_r+0x2c>
 8014084:	42b5      	cmp	r5, r6
 8014086:	d1f6      	bne.n	8014076 <__strtok_r+0x12>
 8014088:	2b00      	cmp	r3, #0
 801408a:	d1f0      	bne.n	801406e <__strtok_r+0xa>
 801408c:	6014      	str	r4, [r2, #0]
 801408e:	7003      	strb	r3, [r0, #0]
 8014090:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014092:	461c      	mov	r4, r3
 8014094:	e00c      	b.n	80140b0 <__strtok_r+0x4c>
 8014096:	b915      	cbnz	r5, 801409e <__strtok_r+0x3a>
 8014098:	f814 3b01 	ldrb.w	r3, [r4], #1
 801409c:	460e      	mov	r6, r1
 801409e:	f816 5b01 	ldrb.w	r5, [r6], #1
 80140a2:	42ab      	cmp	r3, r5
 80140a4:	d1f7      	bne.n	8014096 <__strtok_r+0x32>
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d0f3      	beq.n	8014092 <__strtok_r+0x2e>
 80140aa:	2300      	movs	r3, #0
 80140ac:	f804 3c01 	strb.w	r3, [r4, #-1]
 80140b0:	6014      	str	r4, [r2, #0]
 80140b2:	e7ed      	b.n	8014090 <__strtok_r+0x2c>

080140b4 <strtok_r>:
 80140b4:	2301      	movs	r3, #1
 80140b6:	f7ff bfd5 	b.w	8014064 <__strtok_r>
	...

080140bc <_close_r>:
 80140bc:	b538      	push	{r3, r4, r5, lr}
 80140be:	4d06      	ldr	r5, [pc, #24]	; (80140d8 <_close_r+0x1c>)
 80140c0:	2300      	movs	r3, #0
 80140c2:	4604      	mov	r4, r0
 80140c4:	4608      	mov	r0, r1
 80140c6:	602b      	str	r3, [r5, #0]
 80140c8:	f7f7 fb30 	bl	800b72c <_close>
 80140cc:	1c43      	adds	r3, r0, #1
 80140ce:	d102      	bne.n	80140d6 <_close_r+0x1a>
 80140d0:	682b      	ldr	r3, [r5, #0]
 80140d2:	b103      	cbz	r3, 80140d6 <_close_r+0x1a>
 80140d4:	6023      	str	r3, [r4, #0]
 80140d6:	bd38      	pop	{r3, r4, r5, pc}
 80140d8:	20008a00 	.word	0x20008a00

080140dc <_lseek_r>:
 80140dc:	b538      	push	{r3, r4, r5, lr}
 80140de:	4d07      	ldr	r5, [pc, #28]	; (80140fc <_lseek_r+0x20>)
 80140e0:	4604      	mov	r4, r0
 80140e2:	4608      	mov	r0, r1
 80140e4:	4611      	mov	r1, r2
 80140e6:	2200      	movs	r2, #0
 80140e8:	602a      	str	r2, [r5, #0]
 80140ea:	461a      	mov	r2, r3
 80140ec:	f7f7 fb45 	bl	800b77a <_lseek>
 80140f0:	1c43      	adds	r3, r0, #1
 80140f2:	d102      	bne.n	80140fa <_lseek_r+0x1e>
 80140f4:	682b      	ldr	r3, [r5, #0]
 80140f6:	b103      	cbz	r3, 80140fa <_lseek_r+0x1e>
 80140f8:	6023      	str	r3, [r4, #0]
 80140fa:	bd38      	pop	{r3, r4, r5, pc}
 80140fc:	20008a00 	.word	0x20008a00

08014100 <_read_r>:
 8014100:	b538      	push	{r3, r4, r5, lr}
 8014102:	4d07      	ldr	r5, [pc, #28]	; (8014120 <_read_r+0x20>)
 8014104:	4604      	mov	r4, r0
 8014106:	4608      	mov	r0, r1
 8014108:	4611      	mov	r1, r2
 801410a:	2200      	movs	r2, #0
 801410c:	602a      	str	r2, [r5, #0]
 801410e:	461a      	mov	r2, r3
 8014110:	f7f7 fad3 	bl	800b6ba <_read>
 8014114:	1c43      	adds	r3, r0, #1
 8014116:	d102      	bne.n	801411e <_read_r+0x1e>
 8014118:	682b      	ldr	r3, [r5, #0]
 801411a:	b103      	cbz	r3, 801411e <_read_r+0x1e>
 801411c:	6023      	str	r3, [r4, #0]
 801411e:	bd38      	pop	{r3, r4, r5, pc}
 8014120:	20008a00 	.word	0x20008a00

08014124 <_write_r>:
 8014124:	b538      	push	{r3, r4, r5, lr}
 8014126:	4d07      	ldr	r5, [pc, #28]	; (8014144 <_write_r+0x20>)
 8014128:	4604      	mov	r4, r0
 801412a:	4608      	mov	r0, r1
 801412c:	4611      	mov	r1, r2
 801412e:	2200      	movs	r2, #0
 8014130:	602a      	str	r2, [r5, #0]
 8014132:	461a      	mov	r2, r3
 8014134:	f7f7 fade 	bl	800b6f4 <_write>
 8014138:	1c43      	adds	r3, r0, #1
 801413a:	d102      	bne.n	8014142 <_write_r+0x1e>
 801413c:	682b      	ldr	r3, [r5, #0]
 801413e:	b103      	cbz	r3, 8014142 <_write_r+0x1e>
 8014140:	6023      	str	r3, [r4, #0]
 8014142:	bd38      	pop	{r3, r4, r5, pc}
 8014144:	20008a00 	.word	0x20008a00

08014148 <__errno>:
 8014148:	4b01      	ldr	r3, [pc, #4]	; (8014150 <__errno+0x8>)
 801414a:	6818      	ldr	r0, [r3, #0]
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop
 8014150:	200003c4 	.word	0x200003c4

08014154 <__libc_init_array>:
 8014154:	b570      	push	{r4, r5, r6, lr}
 8014156:	4d0d      	ldr	r5, [pc, #52]	; (801418c <__libc_init_array+0x38>)
 8014158:	4c0d      	ldr	r4, [pc, #52]	; (8014190 <__libc_init_array+0x3c>)
 801415a:	1b64      	subs	r4, r4, r5
 801415c:	10a4      	asrs	r4, r4, #2
 801415e:	2600      	movs	r6, #0
 8014160:	42a6      	cmp	r6, r4
 8014162:	d109      	bne.n	8014178 <__libc_init_array+0x24>
 8014164:	4d0b      	ldr	r5, [pc, #44]	; (8014194 <__libc_init_array+0x40>)
 8014166:	4c0c      	ldr	r4, [pc, #48]	; (8014198 <__libc_init_array+0x44>)
 8014168:	f002 f84a 	bl	8016200 <_init>
 801416c:	1b64      	subs	r4, r4, r5
 801416e:	10a4      	asrs	r4, r4, #2
 8014170:	2600      	movs	r6, #0
 8014172:	42a6      	cmp	r6, r4
 8014174:	d105      	bne.n	8014182 <__libc_init_array+0x2e>
 8014176:	bd70      	pop	{r4, r5, r6, pc}
 8014178:	f855 3b04 	ldr.w	r3, [r5], #4
 801417c:	4798      	blx	r3
 801417e:	3601      	adds	r6, #1
 8014180:	e7ee      	b.n	8014160 <__libc_init_array+0xc>
 8014182:	f855 3b04 	ldr.w	r3, [r5], #4
 8014186:	4798      	blx	r3
 8014188:	3601      	adds	r6, #1
 801418a:	e7f2      	b.n	8014172 <__libc_init_array+0x1e>
 801418c:	08022fec 	.word	0x08022fec
 8014190:	08022fec 	.word	0x08022fec
 8014194:	08022fec 	.word	0x08022fec
 8014198:	08022ff0 	.word	0x08022ff0

0801419c <__retarget_lock_init_recursive>:
 801419c:	4770      	bx	lr

0801419e <__retarget_lock_acquire_recursive>:
 801419e:	4770      	bx	lr

080141a0 <__retarget_lock_release_recursive>:
 80141a0:	4770      	bx	lr

080141a2 <strcpy>:
 80141a2:	4603      	mov	r3, r0
 80141a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80141a8:	f803 2b01 	strb.w	r2, [r3], #1
 80141ac:	2a00      	cmp	r2, #0
 80141ae:	d1f9      	bne.n	80141a4 <strcpy+0x2>
 80141b0:	4770      	bx	lr

080141b2 <memcpy>:
 80141b2:	440a      	add	r2, r1
 80141b4:	4291      	cmp	r1, r2
 80141b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80141ba:	d100      	bne.n	80141be <memcpy+0xc>
 80141bc:	4770      	bx	lr
 80141be:	b510      	push	{r4, lr}
 80141c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80141c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80141c8:	4291      	cmp	r1, r2
 80141ca:	d1f9      	bne.n	80141c0 <memcpy+0xe>
 80141cc:	bd10      	pop	{r4, pc}
	...

080141d0 <nan>:
 80141d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80141d8 <nan+0x8>
 80141d4:	4770      	bx	lr
 80141d6:	bf00      	nop
 80141d8:	00000000 	.word	0x00000000
 80141dc:	7ff80000 	.word	0x7ff80000

080141e0 <nanf>:
 80141e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80141e8 <nanf+0x8>
 80141e4:	4770      	bx	lr
 80141e6:	bf00      	nop
 80141e8:	7fc00000 	.word	0x7fc00000

080141ec <_free_r>:
 80141ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80141ee:	2900      	cmp	r1, #0
 80141f0:	d044      	beq.n	801427c <_free_r+0x90>
 80141f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80141f6:	9001      	str	r0, [sp, #4]
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	f1a1 0404 	sub.w	r4, r1, #4
 80141fe:	bfb8      	it	lt
 8014200:	18e4      	addlt	r4, r4, r3
 8014202:	f000 fc49 	bl	8014a98 <__malloc_lock>
 8014206:	4a1e      	ldr	r2, [pc, #120]	; (8014280 <_free_r+0x94>)
 8014208:	9801      	ldr	r0, [sp, #4]
 801420a:	6813      	ldr	r3, [r2, #0]
 801420c:	b933      	cbnz	r3, 801421c <_free_r+0x30>
 801420e:	6063      	str	r3, [r4, #4]
 8014210:	6014      	str	r4, [r2, #0]
 8014212:	b003      	add	sp, #12
 8014214:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014218:	f000 bc44 	b.w	8014aa4 <__malloc_unlock>
 801421c:	42a3      	cmp	r3, r4
 801421e:	d908      	bls.n	8014232 <_free_r+0x46>
 8014220:	6825      	ldr	r5, [r4, #0]
 8014222:	1961      	adds	r1, r4, r5
 8014224:	428b      	cmp	r3, r1
 8014226:	bf01      	itttt	eq
 8014228:	6819      	ldreq	r1, [r3, #0]
 801422a:	685b      	ldreq	r3, [r3, #4]
 801422c:	1949      	addeq	r1, r1, r5
 801422e:	6021      	streq	r1, [r4, #0]
 8014230:	e7ed      	b.n	801420e <_free_r+0x22>
 8014232:	461a      	mov	r2, r3
 8014234:	685b      	ldr	r3, [r3, #4]
 8014236:	b10b      	cbz	r3, 801423c <_free_r+0x50>
 8014238:	42a3      	cmp	r3, r4
 801423a:	d9fa      	bls.n	8014232 <_free_r+0x46>
 801423c:	6811      	ldr	r1, [r2, #0]
 801423e:	1855      	adds	r5, r2, r1
 8014240:	42a5      	cmp	r5, r4
 8014242:	d10b      	bne.n	801425c <_free_r+0x70>
 8014244:	6824      	ldr	r4, [r4, #0]
 8014246:	4421      	add	r1, r4
 8014248:	1854      	adds	r4, r2, r1
 801424a:	42a3      	cmp	r3, r4
 801424c:	6011      	str	r1, [r2, #0]
 801424e:	d1e0      	bne.n	8014212 <_free_r+0x26>
 8014250:	681c      	ldr	r4, [r3, #0]
 8014252:	685b      	ldr	r3, [r3, #4]
 8014254:	6053      	str	r3, [r2, #4]
 8014256:	440c      	add	r4, r1
 8014258:	6014      	str	r4, [r2, #0]
 801425a:	e7da      	b.n	8014212 <_free_r+0x26>
 801425c:	d902      	bls.n	8014264 <_free_r+0x78>
 801425e:	230c      	movs	r3, #12
 8014260:	6003      	str	r3, [r0, #0]
 8014262:	e7d6      	b.n	8014212 <_free_r+0x26>
 8014264:	6825      	ldr	r5, [r4, #0]
 8014266:	1961      	adds	r1, r4, r5
 8014268:	428b      	cmp	r3, r1
 801426a:	bf04      	itt	eq
 801426c:	6819      	ldreq	r1, [r3, #0]
 801426e:	685b      	ldreq	r3, [r3, #4]
 8014270:	6063      	str	r3, [r4, #4]
 8014272:	bf04      	itt	eq
 8014274:	1949      	addeq	r1, r1, r5
 8014276:	6021      	streq	r1, [r4, #0]
 8014278:	6054      	str	r4, [r2, #4]
 801427a:	e7ca      	b.n	8014212 <_free_r+0x26>
 801427c:	b003      	add	sp, #12
 801427e:	bd30      	pop	{r4, r5, pc}
 8014280:	20008a08 	.word	0x20008a08

08014284 <rshift>:
 8014284:	6903      	ldr	r3, [r0, #16]
 8014286:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801428a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801428e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8014292:	f100 0414 	add.w	r4, r0, #20
 8014296:	dd45      	ble.n	8014324 <rshift+0xa0>
 8014298:	f011 011f 	ands.w	r1, r1, #31
 801429c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80142a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80142a4:	d10c      	bne.n	80142c0 <rshift+0x3c>
 80142a6:	f100 0710 	add.w	r7, r0, #16
 80142aa:	4629      	mov	r1, r5
 80142ac:	42b1      	cmp	r1, r6
 80142ae:	d334      	bcc.n	801431a <rshift+0x96>
 80142b0:	1a9b      	subs	r3, r3, r2
 80142b2:	009b      	lsls	r3, r3, #2
 80142b4:	1eea      	subs	r2, r5, #3
 80142b6:	4296      	cmp	r6, r2
 80142b8:	bf38      	it	cc
 80142ba:	2300      	movcc	r3, #0
 80142bc:	4423      	add	r3, r4
 80142be:	e015      	b.n	80142ec <rshift+0x68>
 80142c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80142c4:	f1c1 0820 	rsb	r8, r1, #32
 80142c8:	40cf      	lsrs	r7, r1
 80142ca:	f105 0e04 	add.w	lr, r5, #4
 80142ce:	46a1      	mov	r9, r4
 80142d0:	4576      	cmp	r6, lr
 80142d2:	46f4      	mov	ip, lr
 80142d4:	d815      	bhi.n	8014302 <rshift+0x7e>
 80142d6:	1a9a      	subs	r2, r3, r2
 80142d8:	0092      	lsls	r2, r2, #2
 80142da:	3a04      	subs	r2, #4
 80142dc:	3501      	adds	r5, #1
 80142de:	42ae      	cmp	r6, r5
 80142e0:	bf38      	it	cc
 80142e2:	2200      	movcc	r2, #0
 80142e4:	18a3      	adds	r3, r4, r2
 80142e6:	50a7      	str	r7, [r4, r2]
 80142e8:	b107      	cbz	r7, 80142ec <rshift+0x68>
 80142ea:	3304      	adds	r3, #4
 80142ec:	1b1a      	subs	r2, r3, r4
 80142ee:	42a3      	cmp	r3, r4
 80142f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80142f4:	bf08      	it	eq
 80142f6:	2300      	moveq	r3, #0
 80142f8:	6102      	str	r2, [r0, #16]
 80142fa:	bf08      	it	eq
 80142fc:	6143      	streq	r3, [r0, #20]
 80142fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014302:	f8dc c000 	ldr.w	ip, [ip]
 8014306:	fa0c fc08 	lsl.w	ip, ip, r8
 801430a:	ea4c 0707 	orr.w	r7, ip, r7
 801430e:	f849 7b04 	str.w	r7, [r9], #4
 8014312:	f85e 7b04 	ldr.w	r7, [lr], #4
 8014316:	40cf      	lsrs	r7, r1
 8014318:	e7da      	b.n	80142d0 <rshift+0x4c>
 801431a:	f851 cb04 	ldr.w	ip, [r1], #4
 801431e:	f847 cf04 	str.w	ip, [r7, #4]!
 8014322:	e7c3      	b.n	80142ac <rshift+0x28>
 8014324:	4623      	mov	r3, r4
 8014326:	e7e1      	b.n	80142ec <rshift+0x68>

08014328 <__hexdig_fun>:
 8014328:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801432c:	2b09      	cmp	r3, #9
 801432e:	d802      	bhi.n	8014336 <__hexdig_fun+0xe>
 8014330:	3820      	subs	r0, #32
 8014332:	b2c0      	uxtb	r0, r0
 8014334:	4770      	bx	lr
 8014336:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801433a:	2b05      	cmp	r3, #5
 801433c:	d801      	bhi.n	8014342 <__hexdig_fun+0x1a>
 801433e:	3847      	subs	r0, #71	; 0x47
 8014340:	e7f7      	b.n	8014332 <__hexdig_fun+0xa>
 8014342:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014346:	2b05      	cmp	r3, #5
 8014348:	d801      	bhi.n	801434e <__hexdig_fun+0x26>
 801434a:	3827      	subs	r0, #39	; 0x27
 801434c:	e7f1      	b.n	8014332 <__hexdig_fun+0xa>
 801434e:	2000      	movs	r0, #0
 8014350:	4770      	bx	lr
	...

08014354 <__gethex>:
 8014354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014358:	4617      	mov	r7, r2
 801435a:	680a      	ldr	r2, [r1, #0]
 801435c:	b085      	sub	sp, #20
 801435e:	f102 0b02 	add.w	fp, r2, #2
 8014362:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8014366:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 801436a:	4681      	mov	r9, r0
 801436c:	468a      	mov	sl, r1
 801436e:	9302      	str	r3, [sp, #8]
 8014370:	32fe      	adds	r2, #254	; 0xfe
 8014372:	eb02 030b 	add.w	r3, r2, fp
 8014376:	46d8      	mov	r8, fp
 8014378:	f81b 0b01 	ldrb.w	r0, [fp], #1
 801437c:	9301      	str	r3, [sp, #4]
 801437e:	2830      	cmp	r0, #48	; 0x30
 8014380:	d0f7      	beq.n	8014372 <__gethex+0x1e>
 8014382:	f7ff ffd1 	bl	8014328 <__hexdig_fun>
 8014386:	4604      	mov	r4, r0
 8014388:	2800      	cmp	r0, #0
 801438a:	d138      	bne.n	80143fe <__gethex+0xaa>
 801438c:	49a7      	ldr	r1, [pc, #668]	; (801462c <__gethex+0x2d8>)
 801438e:	2201      	movs	r2, #1
 8014390:	4640      	mov	r0, r8
 8014392:	f7ff fe55 	bl	8014040 <strncmp>
 8014396:	4606      	mov	r6, r0
 8014398:	2800      	cmp	r0, #0
 801439a:	d169      	bne.n	8014470 <__gethex+0x11c>
 801439c:	f898 0001 	ldrb.w	r0, [r8, #1]
 80143a0:	465d      	mov	r5, fp
 80143a2:	f7ff ffc1 	bl	8014328 <__hexdig_fun>
 80143a6:	2800      	cmp	r0, #0
 80143a8:	d064      	beq.n	8014474 <__gethex+0x120>
 80143aa:	465a      	mov	r2, fp
 80143ac:	7810      	ldrb	r0, [r2, #0]
 80143ae:	2830      	cmp	r0, #48	; 0x30
 80143b0:	4690      	mov	r8, r2
 80143b2:	f102 0201 	add.w	r2, r2, #1
 80143b6:	d0f9      	beq.n	80143ac <__gethex+0x58>
 80143b8:	f7ff ffb6 	bl	8014328 <__hexdig_fun>
 80143bc:	2301      	movs	r3, #1
 80143be:	fab0 f480 	clz	r4, r0
 80143c2:	0964      	lsrs	r4, r4, #5
 80143c4:	465e      	mov	r6, fp
 80143c6:	9301      	str	r3, [sp, #4]
 80143c8:	4642      	mov	r2, r8
 80143ca:	4615      	mov	r5, r2
 80143cc:	3201      	adds	r2, #1
 80143ce:	7828      	ldrb	r0, [r5, #0]
 80143d0:	f7ff ffaa 	bl	8014328 <__hexdig_fun>
 80143d4:	2800      	cmp	r0, #0
 80143d6:	d1f8      	bne.n	80143ca <__gethex+0x76>
 80143d8:	4994      	ldr	r1, [pc, #592]	; (801462c <__gethex+0x2d8>)
 80143da:	2201      	movs	r2, #1
 80143dc:	4628      	mov	r0, r5
 80143de:	f7ff fe2f 	bl	8014040 <strncmp>
 80143e2:	b978      	cbnz	r0, 8014404 <__gethex+0xb0>
 80143e4:	b946      	cbnz	r6, 80143f8 <__gethex+0xa4>
 80143e6:	1c6e      	adds	r6, r5, #1
 80143e8:	4632      	mov	r2, r6
 80143ea:	4615      	mov	r5, r2
 80143ec:	3201      	adds	r2, #1
 80143ee:	7828      	ldrb	r0, [r5, #0]
 80143f0:	f7ff ff9a 	bl	8014328 <__hexdig_fun>
 80143f4:	2800      	cmp	r0, #0
 80143f6:	d1f8      	bne.n	80143ea <__gethex+0x96>
 80143f8:	1b73      	subs	r3, r6, r5
 80143fa:	009e      	lsls	r6, r3, #2
 80143fc:	e004      	b.n	8014408 <__gethex+0xb4>
 80143fe:	2400      	movs	r4, #0
 8014400:	4626      	mov	r6, r4
 8014402:	e7e1      	b.n	80143c8 <__gethex+0x74>
 8014404:	2e00      	cmp	r6, #0
 8014406:	d1f7      	bne.n	80143f8 <__gethex+0xa4>
 8014408:	782b      	ldrb	r3, [r5, #0]
 801440a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801440e:	2b50      	cmp	r3, #80	; 0x50
 8014410:	d13d      	bne.n	801448e <__gethex+0x13a>
 8014412:	786b      	ldrb	r3, [r5, #1]
 8014414:	2b2b      	cmp	r3, #43	; 0x2b
 8014416:	d02f      	beq.n	8014478 <__gethex+0x124>
 8014418:	2b2d      	cmp	r3, #45	; 0x2d
 801441a:	d031      	beq.n	8014480 <__gethex+0x12c>
 801441c:	1c69      	adds	r1, r5, #1
 801441e:	f04f 0b00 	mov.w	fp, #0
 8014422:	7808      	ldrb	r0, [r1, #0]
 8014424:	f7ff ff80 	bl	8014328 <__hexdig_fun>
 8014428:	1e42      	subs	r2, r0, #1
 801442a:	b2d2      	uxtb	r2, r2
 801442c:	2a18      	cmp	r2, #24
 801442e:	d82e      	bhi.n	801448e <__gethex+0x13a>
 8014430:	f1a0 0210 	sub.w	r2, r0, #16
 8014434:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014438:	f7ff ff76 	bl	8014328 <__hexdig_fun>
 801443c:	f100 3cff 	add.w	ip, r0, #4294967295
 8014440:	fa5f fc8c 	uxtb.w	ip, ip
 8014444:	f1bc 0f18 	cmp.w	ip, #24
 8014448:	d91d      	bls.n	8014486 <__gethex+0x132>
 801444a:	f1bb 0f00 	cmp.w	fp, #0
 801444e:	d000      	beq.n	8014452 <__gethex+0xfe>
 8014450:	4252      	negs	r2, r2
 8014452:	4416      	add	r6, r2
 8014454:	f8ca 1000 	str.w	r1, [sl]
 8014458:	b1dc      	cbz	r4, 8014492 <__gethex+0x13e>
 801445a:	9b01      	ldr	r3, [sp, #4]
 801445c:	2b00      	cmp	r3, #0
 801445e:	bf14      	ite	ne
 8014460:	f04f 0800 	movne.w	r8, #0
 8014464:	f04f 0806 	moveq.w	r8, #6
 8014468:	4640      	mov	r0, r8
 801446a:	b005      	add	sp, #20
 801446c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014470:	4645      	mov	r5, r8
 8014472:	4626      	mov	r6, r4
 8014474:	2401      	movs	r4, #1
 8014476:	e7c7      	b.n	8014408 <__gethex+0xb4>
 8014478:	f04f 0b00 	mov.w	fp, #0
 801447c:	1ca9      	adds	r1, r5, #2
 801447e:	e7d0      	b.n	8014422 <__gethex+0xce>
 8014480:	f04f 0b01 	mov.w	fp, #1
 8014484:	e7fa      	b.n	801447c <__gethex+0x128>
 8014486:	230a      	movs	r3, #10
 8014488:	fb03 0002 	mla	r0, r3, r2, r0
 801448c:	e7d0      	b.n	8014430 <__gethex+0xdc>
 801448e:	4629      	mov	r1, r5
 8014490:	e7e0      	b.n	8014454 <__gethex+0x100>
 8014492:	eba5 0308 	sub.w	r3, r5, r8
 8014496:	3b01      	subs	r3, #1
 8014498:	4621      	mov	r1, r4
 801449a:	2b07      	cmp	r3, #7
 801449c:	dc0a      	bgt.n	80144b4 <__gethex+0x160>
 801449e:	4648      	mov	r0, r9
 80144a0:	f000 fb06 	bl	8014ab0 <_Balloc>
 80144a4:	4604      	mov	r4, r0
 80144a6:	b940      	cbnz	r0, 80144ba <__gethex+0x166>
 80144a8:	4b61      	ldr	r3, [pc, #388]	; (8014630 <__gethex+0x2dc>)
 80144aa:	4602      	mov	r2, r0
 80144ac:	21e4      	movs	r1, #228	; 0xe4
 80144ae:	4861      	ldr	r0, [pc, #388]	; (8014634 <__gethex+0x2e0>)
 80144b0:	f001 fb78 	bl	8015ba4 <__assert_func>
 80144b4:	3101      	adds	r1, #1
 80144b6:	105b      	asrs	r3, r3, #1
 80144b8:	e7ef      	b.n	801449a <__gethex+0x146>
 80144ba:	f100 0a14 	add.w	sl, r0, #20
 80144be:	2300      	movs	r3, #0
 80144c0:	495a      	ldr	r1, [pc, #360]	; (801462c <__gethex+0x2d8>)
 80144c2:	f8cd a004 	str.w	sl, [sp, #4]
 80144c6:	469b      	mov	fp, r3
 80144c8:	45a8      	cmp	r8, r5
 80144ca:	d342      	bcc.n	8014552 <__gethex+0x1fe>
 80144cc:	9801      	ldr	r0, [sp, #4]
 80144ce:	f840 bb04 	str.w	fp, [r0], #4
 80144d2:	eba0 000a 	sub.w	r0, r0, sl
 80144d6:	1080      	asrs	r0, r0, #2
 80144d8:	6120      	str	r0, [r4, #16]
 80144da:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80144de:	4658      	mov	r0, fp
 80144e0:	f000 fbd8 	bl	8014c94 <__hi0bits>
 80144e4:	683d      	ldr	r5, [r7, #0]
 80144e6:	eba8 0000 	sub.w	r0, r8, r0
 80144ea:	42a8      	cmp	r0, r5
 80144ec:	dd59      	ble.n	80145a2 <__gethex+0x24e>
 80144ee:	eba0 0805 	sub.w	r8, r0, r5
 80144f2:	4641      	mov	r1, r8
 80144f4:	4620      	mov	r0, r4
 80144f6:	f000 ff67 	bl	80153c8 <__any_on>
 80144fa:	4683      	mov	fp, r0
 80144fc:	b1b8      	cbz	r0, 801452e <__gethex+0x1da>
 80144fe:	f108 33ff 	add.w	r3, r8, #4294967295
 8014502:	1159      	asrs	r1, r3, #5
 8014504:	f003 021f 	and.w	r2, r3, #31
 8014508:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801450c:	f04f 0b01 	mov.w	fp, #1
 8014510:	fa0b f202 	lsl.w	r2, fp, r2
 8014514:	420a      	tst	r2, r1
 8014516:	d00a      	beq.n	801452e <__gethex+0x1da>
 8014518:	455b      	cmp	r3, fp
 801451a:	dd06      	ble.n	801452a <__gethex+0x1d6>
 801451c:	f1a8 0102 	sub.w	r1, r8, #2
 8014520:	4620      	mov	r0, r4
 8014522:	f000 ff51 	bl	80153c8 <__any_on>
 8014526:	2800      	cmp	r0, #0
 8014528:	d138      	bne.n	801459c <__gethex+0x248>
 801452a:	f04f 0b02 	mov.w	fp, #2
 801452e:	4641      	mov	r1, r8
 8014530:	4620      	mov	r0, r4
 8014532:	f7ff fea7 	bl	8014284 <rshift>
 8014536:	4446      	add	r6, r8
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	42b3      	cmp	r3, r6
 801453c:	da41      	bge.n	80145c2 <__gethex+0x26e>
 801453e:	4621      	mov	r1, r4
 8014540:	4648      	mov	r0, r9
 8014542:	f000 faf5 	bl	8014b30 <_Bfree>
 8014546:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014548:	2300      	movs	r3, #0
 801454a:	6013      	str	r3, [r2, #0]
 801454c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8014550:	e78a      	b.n	8014468 <__gethex+0x114>
 8014552:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8014556:	2a2e      	cmp	r2, #46	; 0x2e
 8014558:	d014      	beq.n	8014584 <__gethex+0x230>
 801455a:	2b20      	cmp	r3, #32
 801455c:	d106      	bne.n	801456c <__gethex+0x218>
 801455e:	9b01      	ldr	r3, [sp, #4]
 8014560:	f843 bb04 	str.w	fp, [r3], #4
 8014564:	f04f 0b00 	mov.w	fp, #0
 8014568:	9301      	str	r3, [sp, #4]
 801456a:	465b      	mov	r3, fp
 801456c:	7828      	ldrb	r0, [r5, #0]
 801456e:	9303      	str	r3, [sp, #12]
 8014570:	f7ff feda 	bl	8014328 <__hexdig_fun>
 8014574:	9b03      	ldr	r3, [sp, #12]
 8014576:	f000 000f 	and.w	r0, r0, #15
 801457a:	4098      	lsls	r0, r3
 801457c:	ea4b 0b00 	orr.w	fp, fp, r0
 8014580:	3304      	adds	r3, #4
 8014582:	e7a1      	b.n	80144c8 <__gethex+0x174>
 8014584:	45a8      	cmp	r8, r5
 8014586:	d8e8      	bhi.n	801455a <__gethex+0x206>
 8014588:	2201      	movs	r2, #1
 801458a:	4628      	mov	r0, r5
 801458c:	9303      	str	r3, [sp, #12]
 801458e:	f7ff fd57 	bl	8014040 <strncmp>
 8014592:	4926      	ldr	r1, [pc, #152]	; (801462c <__gethex+0x2d8>)
 8014594:	9b03      	ldr	r3, [sp, #12]
 8014596:	2800      	cmp	r0, #0
 8014598:	d1df      	bne.n	801455a <__gethex+0x206>
 801459a:	e795      	b.n	80144c8 <__gethex+0x174>
 801459c:	f04f 0b03 	mov.w	fp, #3
 80145a0:	e7c5      	b.n	801452e <__gethex+0x1da>
 80145a2:	da0b      	bge.n	80145bc <__gethex+0x268>
 80145a4:	eba5 0800 	sub.w	r8, r5, r0
 80145a8:	4621      	mov	r1, r4
 80145aa:	4642      	mov	r2, r8
 80145ac:	4648      	mov	r0, r9
 80145ae:	f000 fcd9 	bl	8014f64 <__lshift>
 80145b2:	eba6 0608 	sub.w	r6, r6, r8
 80145b6:	4604      	mov	r4, r0
 80145b8:	f100 0a14 	add.w	sl, r0, #20
 80145bc:	f04f 0b00 	mov.w	fp, #0
 80145c0:	e7ba      	b.n	8014538 <__gethex+0x1e4>
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	42b3      	cmp	r3, r6
 80145c6:	dd73      	ble.n	80146b0 <__gethex+0x35c>
 80145c8:	1b9e      	subs	r6, r3, r6
 80145ca:	42b5      	cmp	r5, r6
 80145cc:	dc34      	bgt.n	8014638 <__gethex+0x2e4>
 80145ce:	68fb      	ldr	r3, [r7, #12]
 80145d0:	2b02      	cmp	r3, #2
 80145d2:	d023      	beq.n	801461c <__gethex+0x2c8>
 80145d4:	2b03      	cmp	r3, #3
 80145d6:	d025      	beq.n	8014624 <__gethex+0x2d0>
 80145d8:	2b01      	cmp	r3, #1
 80145da:	d115      	bne.n	8014608 <__gethex+0x2b4>
 80145dc:	42b5      	cmp	r5, r6
 80145de:	d113      	bne.n	8014608 <__gethex+0x2b4>
 80145e0:	2d01      	cmp	r5, #1
 80145e2:	d10b      	bne.n	80145fc <__gethex+0x2a8>
 80145e4:	9a02      	ldr	r2, [sp, #8]
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	6013      	str	r3, [r2, #0]
 80145ea:	2301      	movs	r3, #1
 80145ec:	6123      	str	r3, [r4, #16]
 80145ee:	f8ca 3000 	str.w	r3, [sl]
 80145f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145f4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80145f8:	601c      	str	r4, [r3, #0]
 80145fa:	e735      	b.n	8014468 <__gethex+0x114>
 80145fc:	1e69      	subs	r1, r5, #1
 80145fe:	4620      	mov	r0, r4
 8014600:	f000 fee2 	bl	80153c8 <__any_on>
 8014604:	2800      	cmp	r0, #0
 8014606:	d1ed      	bne.n	80145e4 <__gethex+0x290>
 8014608:	4621      	mov	r1, r4
 801460a:	4648      	mov	r0, r9
 801460c:	f000 fa90 	bl	8014b30 <_Bfree>
 8014610:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8014612:	2300      	movs	r3, #0
 8014614:	6013      	str	r3, [r2, #0]
 8014616:	f04f 0850 	mov.w	r8, #80	; 0x50
 801461a:	e725      	b.n	8014468 <__gethex+0x114>
 801461c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801461e:	2b00      	cmp	r3, #0
 8014620:	d1f2      	bne.n	8014608 <__gethex+0x2b4>
 8014622:	e7df      	b.n	80145e4 <__gethex+0x290>
 8014624:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8014626:	2b00      	cmp	r3, #0
 8014628:	d1dc      	bne.n	80145e4 <__gethex+0x290>
 801462a:	e7ed      	b.n	8014608 <__gethex+0x2b4>
 801462c:	08022c27 	.word	0x08022c27
 8014630:	08022d91 	.word	0x08022d91
 8014634:	08022da2 	.word	0x08022da2
 8014638:	f106 38ff 	add.w	r8, r6, #4294967295
 801463c:	f1bb 0f00 	cmp.w	fp, #0
 8014640:	d133      	bne.n	80146aa <__gethex+0x356>
 8014642:	f1b8 0f00 	cmp.w	r8, #0
 8014646:	d004      	beq.n	8014652 <__gethex+0x2fe>
 8014648:	4641      	mov	r1, r8
 801464a:	4620      	mov	r0, r4
 801464c:	f000 febc 	bl	80153c8 <__any_on>
 8014650:	4683      	mov	fp, r0
 8014652:	ea4f 1268 	mov.w	r2, r8, asr #5
 8014656:	2301      	movs	r3, #1
 8014658:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801465c:	f008 081f 	and.w	r8, r8, #31
 8014660:	fa03 f308 	lsl.w	r3, r3, r8
 8014664:	4213      	tst	r3, r2
 8014666:	4631      	mov	r1, r6
 8014668:	4620      	mov	r0, r4
 801466a:	bf18      	it	ne
 801466c:	f04b 0b02 	orrne.w	fp, fp, #2
 8014670:	1bad      	subs	r5, r5, r6
 8014672:	f7ff fe07 	bl	8014284 <rshift>
 8014676:	687e      	ldr	r6, [r7, #4]
 8014678:	f04f 0802 	mov.w	r8, #2
 801467c:	f1bb 0f00 	cmp.w	fp, #0
 8014680:	d04a      	beq.n	8014718 <__gethex+0x3c4>
 8014682:	68fb      	ldr	r3, [r7, #12]
 8014684:	2b02      	cmp	r3, #2
 8014686:	d016      	beq.n	80146b6 <__gethex+0x362>
 8014688:	2b03      	cmp	r3, #3
 801468a:	d018      	beq.n	80146be <__gethex+0x36a>
 801468c:	2b01      	cmp	r3, #1
 801468e:	d109      	bne.n	80146a4 <__gethex+0x350>
 8014690:	f01b 0f02 	tst.w	fp, #2
 8014694:	d006      	beq.n	80146a4 <__gethex+0x350>
 8014696:	f8da 3000 	ldr.w	r3, [sl]
 801469a:	ea4b 0b03 	orr.w	fp, fp, r3
 801469e:	f01b 0f01 	tst.w	fp, #1
 80146a2:	d10f      	bne.n	80146c4 <__gethex+0x370>
 80146a4:	f048 0810 	orr.w	r8, r8, #16
 80146a8:	e036      	b.n	8014718 <__gethex+0x3c4>
 80146aa:	f04f 0b01 	mov.w	fp, #1
 80146ae:	e7d0      	b.n	8014652 <__gethex+0x2fe>
 80146b0:	f04f 0801 	mov.w	r8, #1
 80146b4:	e7e2      	b.n	801467c <__gethex+0x328>
 80146b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146b8:	f1c3 0301 	rsb	r3, r3, #1
 80146bc:	930f      	str	r3, [sp, #60]	; 0x3c
 80146be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d0ef      	beq.n	80146a4 <__gethex+0x350>
 80146c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80146c8:	f104 0214 	add.w	r2, r4, #20
 80146cc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80146d0:	9301      	str	r3, [sp, #4]
 80146d2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80146d6:	2300      	movs	r3, #0
 80146d8:	4694      	mov	ip, r2
 80146da:	f852 1b04 	ldr.w	r1, [r2], #4
 80146de:	f1b1 3fff 	cmp.w	r1, #4294967295
 80146e2:	d01e      	beq.n	8014722 <__gethex+0x3ce>
 80146e4:	3101      	adds	r1, #1
 80146e6:	f8cc 1000 	str.w	r1, [ip]
 80146ea:	f1b8 0f02 	cmp.w	r8, #2
 80146ee:	f104 0214 	add.w	r2, r4, #20
 80146f2:	d13d      	bne.n	8014770 <__gethex+0x41c>
 80146f4:	683b      	ldr	r3, [r7, #0]
 80146f6:	3b01      	subs	r3, #1
 80146f8:	42ab      	cmp	r3, r5
 80146fa:	d10b      	bne.n	8014714 <__gethex+0x3c0>
 80146fc:	1169      	asrs	r1, r5, #5
 80146fe:	2301      	movs	r3, #1
 8014700:	f005 051f 	and.w	r5, r5, #31
 8014704:	fa03 f505 	lsl.w	r5, r3, r5
 8014708:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801470c:	421d      	tst	r5, r3
 801470e:	bf18      	it	ne
 8014710:	f04f 0801 	movne.w	r8, #1
 8014714:	f048 0820 	orr.w	r8, r8, #32
 8014718:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801471a:	601c      	str	r4, [r3, #0]
 801471c:	9b02      	ldr	r3, [sp, #8]
 801471e:	601e      	str	r6, [r3, #0]
 8014720:	e6a2      	b.n	8014468 <__gethex+0x114>
 8014722:	4290      	cmp	r0, r2
 8014724:	f842 3c04 	str.w	r3, [r2, #-4]
 8014728:	d8d6      	bhi.n	80146d8 <__gethex+0x384>
 801472a:	68a2      	ldr	r2, [r4, #8]
 801472c:	4593      	cmp	fp, r2
 801472e:	db17      	blt.n	8014760 <__gethex+0x40c>
 8014730:	6861      	ldr	r1, [r4, #4]
 8014732:	4648      	mov	r0, r9
 8014734:	3101      	adds	r1, #1
 8014736:	f000 f9bb 	bl	8014ab0 <_Balloc>
 801473a:	4682      	mov	sl, r0
 801473c:	b918      	cbnz	r0, 8014746 <__gethex+0x3f2>
 801473e:	4b1b      	ldr	r3, [pc, #108]	; (80147ac <__gethex+0x458>)
 8014740:	4602      	mov	r2, r0
 8014742:	2184      	movs	r1, #132	; 0x84
 8014744:	e6b3      	b.n	80144ae <__gethex+0x15a>
 8014746:	6922      	ldr	r2, [r4, #16]
 8014748:	3202      	adds	r2, #2
 801474a:	f104 010c 	add.w	r1, r4, #12
 801474e:	0092      	lsls	r2, r2, #2
 8014750:	300c      	adds	r0, #12
 8014752:	f7ff fd2e 	bl	80141b2 <memcpy>
 8014756:	4621      	mov	r1, r4
 8014758:	4648      	mov	r0, r9
 801475a:	f000 f9e9 	bl	8014b30 <_Bfree>
 801475e:	4654      	mov	r4, sl
 8014760:	6922      	ldr	r2, [r4, #16]
 8014762:	1c51      	adds	r1, r2, #1
 8014764:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8014768:	6121      	str	r1, [r4, #16]
 801476a:	2101      	movs	r1, #1
 801476c:	6151      	str	r1, [r2, #20]
 801476e:	e7bc      	b.n	80146ea <__gethex+0x396>
 8014770:	6921      	ldr	r1, [r4, #16]
 8014772:	4559      	cmp	r1, fp
 8014774:	dd0b      	ble.n	801478e <__gethex+0x43a>
 8014776:	2101      	movs	r1, #1
 8014778:	4620      	mov	r0, r4
 801477a:	f7ff fd83 	bl	8014284 <rshift>
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	3601      	adds	r6, #1
 8014782:	42b3      	cmp	r3, r6
 8014784:	f6ff aedb 	blt.w	801453e <__gethex+0x1ea>
 8014788:	f04f 0801 	mov.w	r8, #1
 801478c:	e7c2      	b.n	8014714 <__gethex+0x3c0>
 801478e:	f015 051f 	ands.w	r5, r5, #31
 8014792:	d0f9      	beq.n	8014788 <__gethex+0x434>
 8014794:	9b01      	ldr	r3, [sp, #4]
 8014796:	441a      	add	r2, r3
 8014798:	f1c5 0520 	rsb	r5, r5, #32
 801479c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 80147a0:	f000 fa78 	bl	8014c94 <__hi0bits>
 80147a4:	42a8      	cmp	r0, r5
 80147a6:	dbe6      	blt.n	8014776 <__gethex+0x422>
 80147a8:	e7ee      	b.n	8014788 <__gethex+0x434>
 80147aa:	bf00      	nop
 80147ac:	08022d91 	.word	0x08022d91

080147b0 <L_shift>:
 80147b0:	f1c2 0208 	rsb	r2, r2, #8
 80147b4:	0092      	lsls	r2, r2, #2
 80147b6:	b570      	push	{r4, r5, r6, lr}
 80147b8:	f1c2 0620 	rsb	r6, r2, #32
 80147bc:	6843      	ldr	r3, [r0, #4]
 80147be:	6804      	ldr	r4, [r0, #0]
 80147c0:	fa03 f506 	lsl.w	r5, r3, r6
 80147c4:	432c      	orrs	r4, r5
 80147c6:	40d3      	lsrs	r3, r2
 80147c8:	6004      	str	r4, [r0, #0]
 80147ca:	f840 3f04 	str.w	r3, [r0, #4]!
 80147ce:	4288      	cmp	r0, r1
 80147d0:	d3f4      	bcc.n	80147bc <L_shift+0xc>
 80147d2:	bd70      	pop	{r4, r5, r6, pc}

080147d4 <__match>:
 80147d4:	b530      	push	{r4, r5, lr}
 80147d6:	6803      	ldr	r3, [r0, #0]
 80147d8:	3301      	adds	r3, #1
 80147da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80147de:	b914      	cbnz	r4, 80147e6 <__match+0x12>
 80147e0:	6003      	str	r3, [r0, #0]
 80147e2:	2001      	movs	r0, #1
 80147e4:	bd30      	pop	{r4, r5, pc}
 80147e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80147ea:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80147ee:	2d19      	cmp	r5, #25
 80147f0:	bf98      	it	ls
 80147f2:	3220      	addls	r2, #32
 80147f4:	42a2      	cmp	r2, r4
 80147f6:	d0f0      	beq.n	80147da <__match+0x6>
 80147f8:	2000      	movs	r0, #0
 80147fa:	e7f3      	b.n	80147e4 <__match+0x10>

080147fc <__hexnan>:
 80147fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014800:	680b      	ldr	r3, [r1, #0]
 8014802:	6801      	ldr	r1, [r0, #0]
 8014804:	115e      	asrs	r6, r3, #5
 8014806:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801480a:	f013 031f 	ands.w	r3, r3, #31
 801480e:	b087      	sub	sp, #28
 8014810:	bf18      	it	ne
 8014812:	3604      	addne	r6, #4
 8014814:	2500      	movs	r5, #0
 8014816:	1f37      	subs	r7, r6, #4
 8014818:	4682      	mov	sl, r0
 801481a:	4690      	mov	r8, r2
 801481c:	9301      	str	r3, [sp, #4]
 801481e:	f846 5c04 	str.w	r5, [r6, #-4]
 8014822:	46b9      	mov	r9, r7
 8014824:	463c      	mov	r4, r7
 8014826:	9502      	str	r5, [sp, #8]
 8014828:	46ab      	mov	fp, r5
 801482a:	784a      	ldrb	r2, [r1, #1]
 801482c:	1c4b      	adds	r3, r1, #1
 801482e:	9303      	str	r3, [sp, #12]
 8014830:	b342      	cbz	r2, 8014884 <__hexnan+0x88>
 8014832:	4610      	mov	r0, r2
 8014834:	9105      	str	r1, [sp, #20]
 8014836:	9204      	str	r2, [sp, #16]
 8014838:	f7ff fd76 	bl	8014328 <__hexdig_fun>
 801483c:	2800      	cmp	r0, #0
 801483e:	d14f      	bne.n	80148e0 <__hexnan+0xe4>
 8014840:	9a04      	ldr	r2, [sp, #16]
 8014842:	9905      	ldr	r1, [sp, #20]
 8014844:	2a20      	cmp	r2, #32
 8014846:	d818      	bhi.n	801487a <__hexnan+0x7e>
 8014848:	9b02      	ldr	r3, [sp, #8]
 801484a:	459b      	cmp	fp, r3
 801484c:	dd13      	ble.n	8014876 <__hexnan+0x7a>
 801484e:	454c      	cmp	r4, r9
 8014850:	d206      	bcs.n	8014860 <__hexnan+0x64>
 8014852:	2d07      	cmp	r5, #7
 8014854:	dc04      	bgt.n	8014860 <__hexnan+0x64>
 8014856:	462a      	mov	r2, r5
 8014858:	4649      	mov	r1, r9
 801485a:	4620      	mov	r0, r4
 801485c:	f7ff ffa8 	bl	80147b0 <L_shift>
 8014860:	4544      	cmp	r4, r8
 8014862:	d950      	bls.n	8014906 <__hexnan+0x10a>
 8014864:	2300      	movs	r3, #0
 8014866:	f1a4 0904 	sub.w	r9, r4, #4
 801486a:	f844 3c04 	str.w	r3, [r4, #-4]
 801486e:	f8cd b008 	str.w	fp, [sp, #8]
 8014872:	464c      	mov	r4, r9
 8014874:	461d      	mov	r5, r3
 8014876:	9903      	ldr	r1, [sp, #12]
 8014878:	e7d7      	b.n	801482a <__hexnan+0x2e>
 801487a:	2a29      	cmp	r2, #41	; 0x29
 801487c:	d155      	bne.n	801492a <__hexnan+0x12e>
 801487e:	3102      	adds	r1, #2
 8014880:	f8ca 1000 	str.w	r1, [sl]
 8014884:	f1bb 0f00 	cmp.w	fp, #0
 8014888:	d04f      	beq.n	801492a <__hexnan+0x12e>
 801488a:	454c      	cmp	r4, r9
 801488c:	d206      	bcs.n	801489c <__hexnan+0xa0>
 801488e:	2d07      	cmp	r5, #7
 8014890:	dc04      	bgt.n	801489c <__hexnan+0xa0>
 8014892:	462a      	mov	r2, r5
 8014894:	4649      	mov	r1, r9
 8014896:	4620      	mov	r0, r4
 8014898:	f7ff ff8a 	bl	80147b0 <L_shift>
 801489c:	4544      	cmp	r4, r8
 801489e:	d934      	bls.n	801490a <__hexnan+0x10e>
 80148a0:	f1a8 0204 	sub.w	r2, r8, #4
 80148a4:	4623      	mov	r3, r4
 80148a6:	f853 1b04 	ldr.w	r1, [r3], #4
 80148aa:	f842 1f04 	str.w	r1, [r2, #4]!
 80148ae:	429f      	cmp	r7, r3
 80148b0:	d2f9      	bcs.n	80148a6 <__hexnan+0xaa>
 80148b2:	1b3b      	subs	r3, r7, r4
 80148b4:	f023 0303 	bic.w	r3, r3, #3
 80148b8:	3304      	adds	r3, #4
 80148ba:	3e03      	subs	r6, #3
 80148bc:	3401      	adds	r4, #1
 80148be:	42a6      	cmp	r6, r4
 80148c0:	bf38      	it	cc
 80148c2:	2304      	movcc	r3, #4
 80148c4:	4443      	add	r3, r8
 80148c6:	2200      	movs	r2, #0
 80148c8:	f843 2b04 	str.w	r2, [r3], #4
 80148cc:	429f      	cmp	r7, r3
 80148ce:	d2fb      	bcs.n	80148c8 <__hexnan+0xcc>
 80148d0:	683b      	ldr	r3, [r7, #0]
 80148d2:	b91b      	cbnz	r3, 80148dc <__hexnan+0xe0>
 80148d4:	4547      	cmp	r7, r8
 80148d6:	d126      	bne.n	8014926 <__hexnan+0x12a>
 80148d8:	2301      	movs	r3, #1
 80148da:	603b      	str	r3, [r7, #0]
 80148dc:	2005      	movs	r0, #5
 80148de:	e025      	b.n	801492c <__hexnan+0x130>
 80148e0:	3501      	adds	r5, #1
 80148e2:	2d08      	cmp	r5, #8
 80148e4:	f10b 0b01 	add.w	fp, fp, #1
 80148e8:	dd06      	ble.n	80148f8 <__hexnan+0xfc>
 80148ea:	4544      	cmp	r4, r8
 80148ec:	d9c3      	bls.n	8014876 <__hexnan+0x7a>
 80148ee:	2300      	movs	r3, #0
 80148f0:	f844 3c04 	str.w	r3, [r4, #-4]
 80148f4:	2501      	movs	r5, #1
 80148f6:	3c04      	subs	r4, #4
 80148f8:	6822      	ldr	r2, [r4, #0]
 80148fa:	f000 000f 	and.w	r0, r0, #15
 80148fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8014902:	6020      	str	r0, [r4, #0]
 8014904:	e7b7      	b.n	8014876 <__hexnan+0x7a>
 8014906:	2508      	movs	r5, #8
 8014908:	e7b5      	b.n	8014876 <__hexnan+0x7a>
 801490a:	9b01      	ldr	r3, [sp, #4]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d0df      	beq.n	80148d0 <__hexnan+0xd4>
 8014910:	f1c3 0320 	rsb	r3, r3, #32
 8014914:	f04f 32ff 	mov.w	r2, #4294967295
 8014918:	40da      	lsrs	r2, r3
 801491a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801491e:	4013      	ands	r3, r2
 8014920:	f846 3c04 	str.w	r3, [r6, #-4]
 8014924:	e7d4      	b.n	80148d0 <__hexnan+0xd4>
 8014926:	3f04      	subs	r7, #4
 8014928:	e7d2      	b.n	80148d0 <__hexnan+0xd4>
 801492a:	2004      	movs	r0, #4
 801492c:	b007      	add	sp, #28
 801492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08014934 <sbrk_aligned>:
 8014934:	b570      	push	{r4, r5, r6, lr}
 8014936:	4e0e      	ldr	r6, [pc, #56]	; (8014970 <sbrk_aligned+0x3c>)
 8014938:	460c      	mov	r4, r1
 801493a:	6831      	ldr	r1, [r6, #0]
 801493c:	4605      	mov	r5, r0
 801493e:	b911      	cbnz	r1, 8014946 <sbrk_aligned+0x12>
 8014940:	f001 f920 	bl	8015b84 <_sbrk_r>
 8014944:	6030      	str	r0, [r6, #0]
 8014946:	4621      	mov	r1, r4
 8014948:	4628      	mov	r0, r5
 801494a:	f001 f91b 	bl	8015b84 <_sbrk_r>
 801494e:	1c43      	adds	r3, r0, #1
 8014950:	d00a      	beq.n	8014968 <sbrk_aligned+0x34>
 8014952:	1cc4      	adds	r4, r0, #3
 8014954:	f024 0403 	bic.w	r4, r4, #3
 8014958:	42a0      	cmp	r0, r4
 801495a:	d007      	beq.n	801496c <sbrk_aligned+0x38>
 801495c:	1a21      	subs	r1, r4, r0
 801495e:	4628      	mov	r0, r5
 8014960:	f001 f910 	bl	8015b84 <_sbrk_r>
 8014964:	3001      	adds	r0, #1
 8014966:	d101      	bne.n	801496c <sbrk_aligned+0x38>
 8014968:	f04f 34ff 	mov.w	r4, #4294967295
 801496c:	4620      	mov	r0, r4
 801496e:	bd70      	pop	{r4, r5, r6, pc}
 8014970:	20008a0c 	.word	0x20008a0c

08014974 <_malloc_r>:
 8014974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014978:	1ccd      	adds	r5, r1, #3
 801497a:	f025 0503 	bic.w	r5, r5, #3
 801497e:	3508      	adds	r5, #8
 8014980:	2d0c      	cmp	r5, #12
 8014982:	bf38      	it	cc
 8014984:	250c      	movcc	r5, #12
 8014986:	2d00      	cmp	r5, #0
 8014988:	4607      	mov	r7, r0
 801498a:	db01      	blt.n	8014990 <_malloc_r+0x1c>
 801498c:	42a9      	cmp	r1, r5
 801498e:	d905      	bls.n	801499c <_malloc_r+0x28>
 8014990:	230c      	movs	r3, #12
 8014992:	603b      	str	r3, [r7, #0]
 8014994:	2600      	movs	r6, #0
 8014996:	4630      	mov	r0, r6
 8014998:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801499c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8014a70 <_malloc_r+0xfc>
 80149a0:	f000 f87a 	bl	8014a98 <__malloc_lock>
 80149a4:	f8d8 3000 	ldr.w	r3, [r8]
 80149a8:	461c      	mov	r4, r3
 80149aa:	bb5c      	cbnz	r4, 8014a04 <_malloc_r+0x90>
 80149ac:	4629      	mov	r1, r5
 80149ae:	4638      	mov	r0, r7
 80149b0:	f7ff ffc0 	bl	8014934 <sbrk_aligned>
 80149b4:	1c43      	adds	r3, r0, #1
 80149b6:	4604      	mov	r4, r0
 80149b8:	d155      	bne.n	8014a66 <_malloc_r+0xf2>
 80149ba:	f8d8 4000 	ldr.w	r4, [r8]
 80149be:	4626      	mov	r6, r4
 80149c0:	2e00      	cmp	r6, #0
 80149c2:	d145      	bne.n	8014a50 <_malloc_r+0xdc>
 80149c4:	2c00      	cmp	r4, #0
 80149c6:	d048      	beq.n	8014a5a <_malloc_r+0xe6>
 80149c8:	6823      	ldr	r3, [r4, #0]
 80149ca:	4631      	mov	r1, r6
 80149cc:	4638      	mov	r0, r7
 80149ce:	eb04 0903 	add.w	r9, r4, r3
 80149d2:	f001 f8d7 	bl	8015b84 <_sbrk_r>
 80149d6:	4581      	cmp	r9, r0
 80149d8:	d13f      	bne.n	8014a5a <_malloc_r+0xe6>
 80149da:	6821      	ldr	r1, [r4, #0]
 80149dc:	1a6d      	subs	r5, r5, r1
 80149de:	4629      	mov	r1, r5
 80149e0:	4638      	mov	r0, r7
 80149e2:	f7ff ffa7 	bl	8014934 <sbrk_aligned>
 80149e6:	3001      	adds	r0, #1
 80149e8:	d037      	beq.n	8014a5a <_malloc_r+0xe6>
 80149ea:	6823      	ldr	r3, [r4, #0]
 80149ec:	442b      	add	r3, r5
 80149ee:	6023      	str	r3, [r4, #0]
 80149f0:	f8d8 3000 	ldr.w	r3, [r8]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d038      	beq.n	8014a6a <_malloc_r+0xf6>
 80149f8:	685a      	ldr	r2, [r3, #4]
 80149fa:	42a2      	cmp	r2, r4
 80149fc:	d12b      	bne.n	8014a56 <_malloc_r+0xe2>
 80149fe:	2200      	movs	r2, #0
 8014a00:	605a      	str	r2, [r3, #4]
 8014a02:	e00f      	b.n	8014a24 <_malloc_r+0xb0>
 8014a04:	6822      	ldr	r2, [r4, #0]
 8014a06:	1b52      	subs	r2, r2, r5
 8014a08:	d41f      	bmi.n	8014a4a <_malloc_r+0xd6>
 8014a0a:	2a0b      	cmp	r2, #11
 8014a0c:	d917      	bls.n	8014a3e <_malloc_r+0xca>
 8014a0e:	1961      	adds	r1, r4, r5
 8014a10:	42a3      	cmp	r3, r4
 8014a12:	6025      	str	r5, [r4, #0]
 8014a14:	bf18      	it	ne
 8014a16:	6059      	strne	r1, [r3, #4]
 8014a18:	6863      	ldr	r3, [r4, #4]
 8014a1a:	bf08      	it	eq
 8014a1c:	f8c8 1000 	streq.w	r1, [r8]
 8014a20:	5162      	str	r2, [r4, r5]
 8014a22:	604b      	str	r3, [r1, #4]
 8014a24:	4638      	mov	r0, r7
 8014a26:	f104 060b 	add.w	r6, r4, #11
 8014a2a:	f000 f83b 	bl	8014aa4 <__malloc_unlock>
 8014a2e:	f026 0607 	bic.w	r6, r6, #7
 8014a32:	1d23      	adds	r3, r4, #4
 8014a34:	1af2      	subs	r2, r6, r3
 8014a36:	d0ae      	beq.n	8014996 <_malloc_r+0x22>
 8014a38:	1b9b      	subs	r3, r3, r6
 8014a3a:	50a3      	str	r3, [r4, r2]
 8014a3c:	e7ab      	b.n	8014996 <_malloc_r+0x22>
 8014a3e:	42a3      	cmp	r3, r4
 8014a40:	6862      	ldr	r2, [r4, #4]
 8014a42:	d1dd      	bne.n	8014a00 <_malloc_r+0x8c>
 8014a44:	f8c8 2000 	str.w	r2, [r8]
 8014a48:	e7ec      	b.n	8014a24 <_malloc_r+0xb0>
 8014a4a:	4623      	mov	r3, r4
 8014a4c:	6864      	ldr	r4, [r4, #4]
 8014a4e:	e7ac      	b.n	80149aa <_malloc_r+0x36>
 8014a50:	4634      	mov	r4, r6
 8014a52:	6876      	ldr	r6, [r6, #4]
 8014a54:	e7b4      	b.n	80149c0 <_malloc_r+0x4c>
 8014a56:	4613      	mov	r3, r2
 8014a58:	e7cc      	b.n	80149f4 <_malloc_r+0x80>
 8014a5a:	230c      	movs	r3, #12
 8014a5c:	603b      	str	r3, [r7, #0]
 8014a5e:	4638      	mov	r0, r7
 8014a60:	f000 f820 	bl	8014aa4 <__malloc_unlock>
 8014a64:	e797      	b.n	8014996 <_malloc_r+0x22>
 8014a66:	6025      	str	r5, [r4, #0]
 8014a68:	e7dc      	b.n	8014a24 <_malloc_r+0xb0>
 8014a6a:	605b      	str	r3, [r3, #4]
 8014a6c:	deff      	udf	#255	; 0xff
 8014a6e:	bf00      	nop
 8014a70:	20008a08 	.word	0x20008a08

08014a74 <__ascii_mbtowc>:
 8014a74:	b082      	sub	sp, #8
 8014a76:	b901      	cbnz	r1, 8014a7a <__ascii_mbtowc+0x6>
 8014a78:	a901      	add	r1, sp, #4
 8014a7a:	b142      	cbz	r2, 8014a8e <__ascii_mbtowc+0x1a>
 8014a7c:	b14b      	cbz	r3, 8014a92 <__ascii_mbtowc+0x1e>
 8014a7e:	7813      	ldrb	r3, [r2, #0]
 8014a80:	600b      	str	r3, [r1, #0]
 8014a82:	7812      	ldrb	r2, [r2, #0]
 8014a84:	1e10      	subs	r0, r2, #0
 8014a86:	bf18      	it	ne
 8014a88:	2001      	movne	r0, #1
 8014a8a:	b002      	add	sp, #8
 8014a8c:	4770      	bx	lr
 8014a8e:	4610      	mov	r0, r2
 8014a90:	e7fb      	b.n	8014a8a <__ascii_mbtowc+0x16>
 8014a92:	f06f 0001 	mvn.w	r0, #1
 8014a96:	e7f8      	b.n	8014a8a <__ascii_mbtowc+0x16>

08014a98 <__malloc_lock>:
 8014a98:	4801      	ldr	r0, [pc, #4]	; (8014aa0 <__malloc_lock+0x8>)
 8014a9a:	f7ff bb80 	b.w	801419e <__retarget_lock_acquire_recursive>
 8014a9e:	bf00      	nop
 8014aa0:	20008a04 	.word	0x20008a04

08014aa4 <__malloc_unlock>:
 8014aa4:	4801      	ldr	r0, [pc, #4]	; (8014aac <__malloc_unlock+0x8>)
 8014aa6:	f7ff bb7b 	b.w	80141a0 <__retarget_lock_release_recursive>
 8014aaa:	bf00      	nop
 8014aac:	20008a04 	.word	0x20008a04

08014ab0 <_Balloc>:
 8014ab0:	b570      	push	{r4, r5, r6, lr}
 8014ab2:	69c6      	ldr	r6, [r0, #28]
 8014ab4:	4604      	mov	r4, r0
 8014ab6:	460d      	mov	r5, r1
 8014ab8:	b976      	cbnz	r6, 8014ad8 <_Balloc+0x28>
 8014aba:	2010      	movs	r0, #16
 8014abc:	f001 f8a6 	bl	8015c0c <malloc>
 8014ac0:	4602      	mov	r2, r0
 8014ac2:	61e0      	str	r0, [r4, #28]
 8014ac4:	b920      	cbnz	r0, 8014ad0 <_Balloc+0x20>
 8014ac6:	4b18      	ldr	r3, [pc, #96]	; (8014b28 <_Balloc+0x78>)
 8014ac8:	4818      	ldr	r0, [pc, #96]	; (8014b2c <_Balloc+0x7c>)
 8014aca:	216b      	movs	r1, #107	; 0x6b
 8014acc:	f001 f86a 	bl	8015ba4 <__assert_func>
 8014ad0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014ad4:	6006      	str	r6, [r0, #0]
 8014ad6:	60c6      	str	r6, [r0, #12]
 8014ad8:	69e6      	ldr	r6, [r4, #28]
 8014ada:	68f3      	ldr	r3, [r6, #12]
 8014adc:	b183      	cbz	r3, 8014b00 <_Balloc+0x50>
 8014ade:	69e3      	ldr	r3, [r4, #28]
 8014ae0:	68db      	ldr	r3, [r3, #12]
 8014ae2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014ae6:	b9b8      	cbnz	r0, 8014b18 <_Balloc+0x68>
 8014ae8:	2101      	movs	r1, #1
 8014aea:	fa01 f605 	lsl.w	r6, r1, r5
 8014aee:	1d72      	adds	r2, r6, #5
 8014af0:	0092      	lsls	r2, r2, #2
 8014af2:	4620      	mov	r0, r4
 8014af4:	f001 f874 	bl	8015be0 <_calloc_r>
 8014af8:	b160      	cbz	r0, 8014b14 <_Balloc+0x64>
 8014afa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8014afe:	e00e      	b.n	8014b1e <_Balloc+0x6e>
 8014b00:	2221      	movs	r2, #33	; 0x21
 8014b02:	2104      	movs	r1, #4
 8014b04:	4620      	mov	r0, r4
 8014b06:	f001 f86b 	bl	8015be0 <_calloc_r>
 8014b0a:	69e3      	ldr	r3, [r4, #28]
 8014b0c:	60f0      	str	r0, [r6, #12]
 8014b0e:	68db      	ldr	r3, [r3, #12]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d1e4      	bne.n	8014ade <_Balloc+0x2e>
 8014b14:	2000      	movs	r0, #0
 8014b16:	bd70      	pop	{r4, r5, r6, pc}
 8014b18:	6802      	ldr	r2, [r0, #0]
 8014b1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8014b1e:	2300      	movs	r3, #0
 8014b20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014b24:	e7f7      	b.n	8014b16 <_Balloc+0x66>
 8014b26:	bf00      	nop
 8014b28:	08022e02 	.word	0x08022e02
 8014b2c:	08022e19 	.word	0x08022e19

08014b30 <_Bfree>:
 8014b30:	b570      	push	{r4, r5, r6, lr}
 8014b32:	69c6      	ldr	r6, [r0, #28]
 8014b34:	4605      	mov	r5, r0
 8014b36:	460c      	mov	r4, r1
 8014b38:	b976      	cbnz	r6, 8014b58 <_Bfree+0x28>
 8014b3a:	2010      	movs	r0, #16
 8014b3c:	f001 f866 	bl	8015c0c <malloc>
 8014b40:	4602      	mov	r2, r0
 8014b42:	61e8      	str	r0, [r5, #28]
 8014b44:	b920      	cbnz	r0, 8014b50 <_Bfree+0x20>
 8014b46:	4b09      	ldr	r3, [pc, #36]	; (8014b6c <_Bfree+0x3c>)
 8014b48:	4809      	ldr	r0, [pc, #36]	; (8014b70 <_Bfree+0x40>)
 8014b4a:	218f      	movs	r1, #143	; 0x8f
 8014b4c:	f001 f82a 	bl	8015ba4 <__assert_func>
 8014b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014b54:	6006      	str	r6, [r0, #0]
 8014b56:	60c6      	str	r6, [r0, #12]
 8014b58:	b13c      	cbz	r4, 8014b6a <_Bfree+0x3a>
 8014b5a:	69eb      	ldr	r3, [r5, #28]
 8014b5c:	6862      	ldr	r2, [r4, #4]
 8014b5e:	68db      	ldr	r3, [r3, #12]
 8014b60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014b64:	6021      	str	r1, [r4, #0]
 8014b66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014b6a:	bd70      	pop	{r4, r5, r6, pc}
 8014b6c:	08022e02 	.word	0x08022e02
 8014b70:	08022e19 	.word	0x08022e19

08014b74 <__multadd>:
 8014b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b78:	690d      	ldr	r5, [r1, #16]
 8014b7a:	4607      	mov	r7, r0
 8014b7c:	460c      	mov	r4, r1
 8014b7e:	461e      	mov	r6, r3
 8014b80:	f101 0c14 	add.w	ip, r1, #20
 8014b84:	2000      	movs	r0, #0
 8014b86:	f8dc 3000 	ldr.w	r3, [ip]
 8014b8a:	b299      	uxth	r1, r3
 8014b8c:	fb02 6101 	mla	r1, r2, r1, r6
 8014b90:	0c1e      	lsrs	r6, r3, #16
 8014b92:	0c0b      	lsrs	r3, r1, #16
 8014b94:	fb02 3306 	mla	r3, r2, r6, r3
 8014b98:	b289      	uxth	r1, r1
 8014b9a:	3001      	adds	r0, #1
 8014b9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014ba0:	4285      	cmp	r5, r0
 8014ba2:	f84c 1b04 	str.w	r1, [ip], #4
 8014ba6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014baa:	dcec      	bgt.n	8014b86 <__multadd+0x12>
 8014bac:	b30e      	cbz	r6, 8014bf2 <__multadd+0x7e>
 8014bae:	68a3      	ldr	r3, [r4, #8]
 8014bb0:	42ab      	cmp	r3, r5
 8014bb2:	dc19      	bgt.n	8014be8 <__multadd+0x74>
 8014bb4:	6861      	ldr	r1, [r4, #4]
 8014bb6:	4638      	mov	r0, r7
 8014bb8:	3101      	adds	r1, #1
 8014bba:	f7ff ff79 	bl	8014ab0 <_Balloc>
 8014bbe:	4680      	mov	r8, r0
 8014bc0:	b928      	cbnz	r0, 8014bce <__multadd+0x5a>
 8014bc2:	4602      	mov	r2, r0
 8014bc4:	4b0c      	ldr	r3, [pc, #48]	; (8014bf8 <__multadd+0x84>)
 8014bc6:	480d      	ldr	r0, [pc, #52]	; (8014bfc <__multadd+0x88>)
 8014bc8:	21ba      	movs	r1, #186	; 0xba
 8014bca:	f000 ffeb 	bl	8015ba4 <__assert_func>
 8014bce:	6922      	ldr	r2, [r4, #16]
 8014bd0:	3202      	adds	r2, #2
 8014bd2:	f104 010c 	add.w	r1, r4, #12
 8014bd6:	0092      	lsls	r2, r2, #2
 8014bd8:	300c      	adds	r0, #12
 8014bda:	f7ff faea 	bl	80141b2 <memcpy>
 8014bde:	4621      	mov	r1, r4
 8014be0:	4638      	mov	r0, r7
 8014be2:	f7ff ffa5 	bl	8014b30 <_Bfree>
 8014be6:	4644      	mov	r4, r8
 8014be8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8014bec:	3501      	adds	r5, #1
 8014bee:	615e      	str	r6, [r3, #20]
 8014bf0:	6125      	str	r5, [r4, #16]
 8014bf2:	4620      	mov	r0, r4
 8014bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bf8:	08022d91 	.word	0x08022d91
 8014bfc:	08022e19 	.word	0x08022e19

08014c00 <__s2b>:
 8014c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c04:	460c      	mov	r4, r1
 8014c06:	4615      	mov	r5, r2
 8014c08:	461f      	mov	r7, r3
 8014c0a:	2209      	movs	r2, #9
 8014c0c:	3308      	adds	r3, #8
 8014c0e:	4606      	mov	r6, r0
 8014c10:	fb93 f3f2 	sdiv	r3, r3, r2
 8014c14:	2100      	movs	r1, #0
 8014c16:	2201      	movs	r2, #1
 8014c18:	429a      	cmp	r2, r3
 8014c1a:	db09      	blt.n	8014c30 <__s2b+0x30>
 8014c1c:	4630      	mov	r0, r6
 8014c1e:	f7ff ff47 	bl	8014ab0 <_Balloc>
 8014c22:	b940      	cbnz	r0, 8014c36 <__s2b+0x36>
 8014c24:	4602      	mov	r2, r0
 8014c26:	4b19      	ldr	r3, [pc, #100]	; (8014c8c <__s2b+0x8c>)
 8014c28:	4819      	ldr	r0, [pc, #100]	; (8014c90 <__s2b+0x90>)
 8014c2a:	21d3      	movs	r1, #211	; 0xd3
 8014c2c:	f000 ffba 	bl	8015ba4 <__assert_func>
 8014c30:	0052      	lsls	r2, r2, #1
 8014c32:	3101      	adds	r1, #1
 8014c34:	e7f0      	b.n	8014c18 <__s2b+0x18>
 8014c36:	9b08      	ldr	r3, [sp, #32]
 8014c38:	6143      	str	r3, [r0, #20]
 8014c3a:	2d09      	cmp	r5, #9
 8014c3c:	f04f 0301 	mov.w	r3, #1
 8014c40:	6103      	str	r3, [r0, #16]
 8014c42:	dd16      	ble.n	8014c72 <__s2b+0x72>
 8014c44:	f104 0909 	add.w	r9, r4, #9
 8014c48:	46c8      	mov	r8, r9
 8014c4a:	442c      	add	r4, r5
 8014c4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8014c50:	4601      	mov	r1, r0
 8014c52:	3b30      	subs	r3, #48	; 0x30
 8014c54:	220a      	movs	r2, #10
 8014c56:	4630      	mov	r0, r6
 8014c58:	f7ff ff8c 	bl	8014b74 <__multadd>
 8014c5c:	45a0      	cmp	r8, r4
 8014c5e:	d1f5      	bne.n	8014c4c <__s2b+0x4c>
 8014c60:	f1a5 0408 	sub.w	r4, r5, #8
 8014c64:	444c      	add	r4, r9
 8014c66:	1b2d      	subs	r5, r5, r4
 8014c68:	1963      	adds	r3, r4, r5
 8014c6a:	42bb      	cmp	r3, r7
 8014c6c:	db04      	blt.n	8014c78 <__s2b+0x78>
 8014c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c72:	340a      	adds	r4, #10
 8014c74:	2509      	movs	r5, #9
 8014c76:	e7f6      	b.n	8014c66 <__s2b+0x66>
 8014c78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014c7c:	4601      	mov	r1, r0
 8014c7e:	3b30      	subs	r3, #48	; 0x30
 8014c80:	220a      	movs	r2, #10
 8014c82:	4630      	mov	r0, r6
 8014c84:	f7ff ff76 	bl	8014b74 <__multadd>
 8014c88:	e7ee      	b.n	8014c68 <__s2b+0x68>
 8014c8a:	bf00      	nop
 8014c8c:	08022d91 	.word	0x08022d91
 8014c90:	08022e19 	.word	0x08022e19

08014c94 <__hi0bits>:
 8014c94:	0c03      	lsrs	r3, r0, #16
 8014c96:	041b      	lsls	r3, r3, #16
 8014c98:	b9d3      	cbnz	r3, 8014cd0 <__hi0bits+0x3c>
 8014c9a:	0400      	lsls	r0, r0, #16
 8014c9c:	2310      	movs	r3, #16
 8014c9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014ca2:	bf04      	itt	eq
 8014ca4:	0200      	lsleq	r0, r0, #8
 8014ca6:	3308      	addeq	r3, #8
 8014ca8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014cac:	bf04      	itt	eq
 8014cae:	0100      	lsleq	r0, r0, #4
 8014cb0:	3304      	addeq	r3, #4
 8014cb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014cb6:	bf04      	itt	eq
 8014cb8:	0080      	lsleq	r0, r0, #2
 8014cba:	3302      	addeq	r3, #2
 8014cbc:	2800      	cmp	r0, #0
 8014cbe:	db05      	blt.n	8014ccc <__hi0bits+0x38>
 8014cc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014cc4:	f103 0301 	add.w	r3, r3, #1
 8014cc8:	bf08      	it	eq
 8014cca:	2320      	moveq	r3, #32
 8014ccc:	4618      	mov	r0, r3
 8014cce:	4770      	bx	lr
 8014cd0:	2300      	movs	r3, #0
 8014cd2:	e7e4      	b.n	8014c9e <__hi0bits+0xa>

08014cd4 <__lo0bits>:
 8014cd4:	6803      	ldr	r3, [r0, #0]
 8014cd6:	f013 0207 	ands.w	r2, r3, #7
 8014cda:	d00c      	beq.n	8014cf6 <__lo0bits+0x22>
 8014cdc:	07d9      	lsls	r1, r3, #31
 8014cde:	d422      	bmi.n	8014d26 <__lo0bits+0x52>
 8014ce0:	079a      	lsls	r2, r3, #30
 8014ce2:	bf49      	itett	mi
 8014ce4:	085b      	lsrmi	r3, r3, #1
 8014ce6:	089b      	lsrpl	r3, r3, #2
 8014ce8:	6003      	strmi	r3, [r0, #0]
 8014cea:	2201      	movmi	r2, #1
 8014cec:	bf5c      	itt	pl
 8014cee:	6003      	strpl	r3, [r0, #0]
 8014cf0:	2202      	movpl	r2, #2
 8014cf2:	4610      	mov	r0, r2
 8014cf4:	4770      	bx	lr
 8014cf6:	b299      	uxth	r1, r3
 8014cf8:	b909      	cbnz	r1, 8014cfe <__lo0bits+0x2a>
 8014cfa:	0c1b      	lsrs	r3, r3, #16
 8014cfc:	2210      	movs	r2, #16
 8014cfe:	b2d9      	uxtb	r1, r3
 8014d00:	b909      	cbnz	r1, 8014d06 <__lo0bits+0x32>
 8014d02:	3208      	adds	r2, #8
 8014d04:	0a1b      	lsrs	r3, r3, #8
 8014d06:	0719      	lsls	r1, r3, #28
 8014d08:	bf04      	itt	eq
 8014d0a:	091b      	lsreq	r3, r3, #4
 8014d0c:	3204      	addeq	r2, #4
 8014d0e:	0799      	lsls	r1, r3, #30
 8014d10:	bf04      	itt	eq
 8014d12:	089b      	lsreq	r3, r3, #2
 8014d14:	3202      	addeq	r2, #2
 8014d16:	07d9      	lsls	r1, r3, #31
 8014d18:	d403      	bmi.n	8014d22 <__lo0bits+0x4e>
 8014d1a:	085b      	lsrs	r3, r3, #1
 8014d1c:	f102 0201 	add.w	r2, r2, #1
 8014d20:	d003      	beq.n	8014d2a <__lo0bits+0x56>
 8014d22:	6003      	str	r3, [r0, #0]
 8014d24:	e7e5      	b.n	8014cf2 <__lo0bits+0x1e>
 8014d26:	2200      	movs	r2, #0
 8014d28:	e7e3      	b.n	8014cf2 <__lo0bits+0x1e>
 8014d2a:	2220      	movs	r2, #32
 8014d2c:	e7e1      	b.n	8014cf2 <__lo0bits+0x1e>
	...

08014d30 <__i2b>:
 8014d30:	b510      	push	{r4, lr}
 8014d32:	460c      	mov	r4, r1
 8014d34:	2101      	movs	r1, #1
 8014d36:	f7ff febb 	bl	8014ab0 <_Balloc>
 8014d3a:	4602      	mov	r2, r0
 8014d3c:	b928      	cbnz	r0, 8014d4a <__i2b+0x1a>
 8014d3e:	4b05      	ldr	r3, [pc, #20]	; (8014d54 <__i2b+0x24>)
 8014d40:	4805      	ldr	r0, [pc, #20]	; (8014d58 <__i2b+0x28>)
 8014d42:	f240 1145 	movw	r1, #325	; 0x145
 8014d46:	f000 ff2d 	bl	8015ba4 <__assert_func>
 8014d4a:	2301      	movs	r3, #1
 8014d4c:	6144      	str	r4, [r0, #20]
 8014d4e:	6103      	str	r3, [r0, #16]
 8014d50:	bd10      	pop	{r4, pc}
 8014d52:	bf00      	nop
 8014d54:	08022d91 	.word	0x08022d91
 8014d58:	08022e19 	.word	0x08022e19

08014d5c <__multiply>:
 8014d5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d60:	4691      	mov	r9, r2
 8014d62:	690a      	ldr	r2, [r1, #16]
 8014d64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	bfb8      	it	lt
 8014d6c:	460b      	movlt	r3, r1
 8014d6e:	460c      	mov	r4, r1
 8014d70:	bfbc      	itt	lt
 8014d72:	464c      	movlt	r4, r9
 8014d74:	4699      	movlt	r9, r3
 8014d76:	6927      	ldr	r7, [r4, #16]
 8014d78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014d7c:	68a3      	ldr	r3, [r4, #8]
 8014d7e:	6861      	ldr	r1, [r4, #4]
 8014d80:	eb07 060a 	add.w	r6, r7, sl
 8014d84:	42b3      	cmp	r3, r6
 8014d86:	b085      	sub	sp, #20
 8014d88:	bfb8      	it	lt
 8014d8a:	3101      	addlt	r1, #1
 8014d8c:	f7ff fe90 	bl	8014ab0 <_Balloc>
 8014d90:	b930      	cbnz	r0, 8014da0 <__multiply+0x44>
 8014d92:	4602      	mov	r2, r0
 8014d94:	4b44      	ldr	r3, [pc, #272]	; (8014ea8 <__multiply+0x14c>)
 8014d96:	4845      	ldr	r0, [pc, #276]	; (8014eac <__multiply+0x150>)
 8014d98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8014d9c:	f000 ff02 	bl	8015ba4 <__assert_func>
 8014da0:	f100 0514 	add.w	r5, r0, #20
 8014da4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8014da8:	462b      	mov	r3, r5
 8014daa:	2200      	movs	r2, #0
 8014dac:	4543      	cmp	r3, r8
 8014dae:	d321      	bcc.n	8014df4 <__multiply+0x98>
 8014db0:	f104 0314 	add.w	r3, r4, #20
 8014db4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014db8:	f109 0314 	add.w	r3, r9, #20
 8014dbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8014dc0:	9202      	str	r2, [sp, #8]
 8014dc2:	1b3a      	subs	r2, r7, r4
 8014dc4:	3a15      	subs	r2, #21
 8014dc6:	f022 0203 	bic.w	r2, r2, #3
 8014dca:	3204      	adds	r2, #4
 8014dcc:	f104 0115 	add.w	r1, r4, #21
 8014dd0:	428f      	cmp	r7, r1
 8014dd2:	bf38      	it	cc
 8014dd4:	2204      	movcc	r2, #4
 8014dd6:	9201      	str	r2, [sp, #4]
 8014dd8:	9a02      	ldr	r2, [sp, #8]
 8014dda:	9303      	str	r3, [sp, #12]
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d80c      	bhi.n	8014dfa <__multiply+0x9e>
 8014de0:	2e00      	cmp	r6, #0
 8014de2:	dd03      	ble.n	8014dec <__multiply+0x90>
 8014de4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d05b      	beq.n	8014ea4 <__multiply+0x148>
 8014dec:	6106      	str	r6, [r0, #16]
 8014dee:	b005      	add	sp, #20
 8014df0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014df4:	f843 2b04 	str.w	r2, [r3], #4
 8014df8:	e7d8      	b.n	8014dac <__multiply+0x50>
 8014dfa:	f8b3 a000 	ldrh.w	sl, [r3]
 8014dfe:	f1ba 0f00 	cmp.w	sl, #0
 8014e02:	d024      	beq.n	8014e4e <__multiply+0xf2>
 8014e04:	f104 0e14 	add.w	lr, r4, #20
 8014e08:	46a9      	mov	r9, r5
 8014e0a:	f04f 0c00 	mov.w	ip, #0
 8014e0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8014e12:	f8d9 1000 	ldr.w	r1, [r9]
 8014e16:	fa1f fb82 	uxth.w	fp, r2
 8014e1a:	b289      	uxth	r1, r1
 8014e1c:	fb0a 110b 	mla	r1, sl, fp, r1
 8014e20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8014e24:	f8d9 2000 	ldr.w	r2, [r9]
 8014e28:	4461      	add	r1, ip
 8014e2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014e2e:	fb0a c20b 	mla	r2, sl, fp, ip
 8014e32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8014e36:	b289      	uxth	r1, r1
 8014e38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014e3c:	4577      	cmp	r7, lr
 8014e3e:	f849 1b04 	str.w	r1, [r9], #4
 8014e42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014e46:	d8e2      	bhi.n	8014e0e <__multiply+0xb2>
 8014e48:	9a01      	ldr	r2, [sp, #4]
 8014e4a:	f845 c002 	str.w	ip, [r5, r2]
 8014e4e:	9a03      	ldr	r2, [sp, #12]
 8014e50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014e54:	3304      	adds	r3, #4
 8014e56:	f1b9 0f00 	cmp.w	r9, #0
 8014e5a:	d021      	beq.n	8014ea0 <__multiply+0x144>
 8014e5c:	6829      	ldr	r1, [r5, #0]
 8014e5e:	f104 0c14 	add.w	ip, r4, #20
 8014e62:	46ae      	mov	lr, r5
 8014e64:	f04f 0a00 	mov.w	sl, #0
 8014e68:	f8bc b000 	ldrh.w	fp, [ip]
 8014e6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8014e70:	fb09 220b 	mla	r2, r9, fp, r2
 8014e74:	4452      	add	r2, sl
 8014e76:	b289      	uxth	r1, r1
 8014e78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014e7c:	f84e 1b04 	str.w	r1, [lr], #4
 8014e80:	f85c 1b04 	ldr.w	r1, [ip], #4
 8014e84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014e88:	f8be 1000 	ldrh.w	r1, [lr]
 8014e8c:	fb09 110a 	mla	r1, r9, sl, r1
 8014e90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8014e94:	4567      	cmp	r7, ip
 8014e96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8014e9a:	d8e5      	bhi.n	8014e68 <__multiply+0x10c>
 8014e9c:	9a01      	ldr	r2, [sp, #4]
 8014e9e:	50a9      	str	r1, [r5, r2]
 8014ea0:	3504      	adds	r5, #4
 8014ea2:	e799      	b.n	8014dd8 <__multiply+0x7c>
 8014ea4:	3e01      	subs	r6, #1
 8014ea6:	e79b      	b.n	8014de0 <__multiply+0x84>
 8014ea8:	08022d91 	.word	0x08022d91
 8014eac:	08022e19 	.word	0x08022e19

08014eb0 <__pow5mult>:
 8014eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014eb4:	4615      	mov	r5, r2
 8014eb6:	f012 0203 	ands.w	r2, r2, #3
 8014eba:	4606      	mov	r6, r0
 8014ebc:	460f      	mov	r7, r1
 8014ebe:	d007      	beq.n	8014ed0 <__pow5mult+0x20>
 8014ec0:	4c25      	ldr	r4, [pc, #148]	; (8014f58 <__pow5mult+0xa8>)
 8014ec2:	3a01      	subs	r2, #1
 8014ec4:	2300      	movs	r3, #0
 8014ec6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014eca:	f7ff fe53 	bl	8014b74 <__multadd>
 8014ece:	4607      	mov	r7, r0
 8014ed0:	10ad      	asrs	r5, r5, #2
 8014ed2:	d03d      	beq.n	8014f50 <__pow5mult+0xa0>
 8014ed4:	69f4      	ldr	r4, [r6, #28]
 8014ed6:	b97c      	cbnz	r4, 8014ef8 <__pow5mult+0x48>
 8014ed8:	2010      	movs	r0, #16
 8014eda:	f000 fe97 	bl	8015c0c <malloc>
 8014ede:	4602      	mov	r2, r0
 8014ee0:	61f0      	str	r0, [r6, #28]
 8014ee2:	b928      	cbnz	r0, 8014ef0 <__pow5mult+0x40>
 8014ee4:	4b1d      	ldr	r3, [pc, #116]	; (8014f5c <__pow5mult+0xac>)
 8014ee6:	481e      	ldr	r0, [pc, #120]	; (8014f60 <__pow5mult+0xb0>)
 8014ee8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8014eec:	f000 fe5a 	bl	8015ba4 <__assert_func>
 8014ef0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014ef4:	6004      	str	r4, [r0, #0]
 8014ef6:	60c4      	str	r4, [r0, #12]
 8014ef8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8014efc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014f00:	b94c      	cbnz	r4, 8014f16 <__pow5mult+0x66>
 8014f02:	f240 2171 	movw	r1, #625	; 0x271
 8014f06:	4630      	mov	r0, r6
 8014f08:	f7ff ff12 	bl	8014d30 <__i2b>
 8014f0c:	2300      	movs	r3, #0
 8014f0e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014f12:	4604      	mov	r4, r0
 8014f14:	6003      	str	r3, [r0, #0]
 8014f16:	f04f 0900 	mov.w	r9, #0
 8014f1a:	07eb      	lsls	r3, r5, #31
 8014f1c:	d50a      	bpl.n	8014f34 <__pow5mult+0x84>
 8014f1e:	4639      	mov	r1, r7
 8014f20:	4622      	mov	r2, r4
 8014f22:	4630      	mov	r0, r6
 8014f24:	f7ff ff1a 	bl	8014d5c <__multiply>
 8014f28:	4639      	mov	r1, r7
 8014f2a:	4680      	mov	r8, r0
 8014f2c:	4630      	mov	r0, r6
 8014f2e:	f7ff fdff 	bl	8014b30 <_Bfree>
 8014f32:	4647      	mov	r7, r8
 8014f34:	106d      	asrs	r5, r5, #1
 8014f36:	d00b      	beq.n	8014f50 <__pow5mult+0xa0>
 8014f38:	6820      	ldr	r0, [r4, #0]
 8014f3a:	b938      	cbnz	r0, 8014f4c <__pow5mult+0x9c>
 8014f3c:	4622      	mov	r2, r4
 8014f3e:	4621      	mov	r1, r4
 8014f40:	4630      	mov	r0, r6
 8014f42:	f7ff ff0b 	bl	8014d5c <__multiply>
 8014f46:	6020      	str	r0, [r4, #0]
 8014f48:	f8c0 9000 	str.w	r9, [r0]
 8014f4c:	4604      	mov	r4, r0
 8014f4e:	e7e4      	b.n	8014f1a <__pow5mult+0x6a>
 8014f50:	4638      	mov	r0, r7
 8014f52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f56:	bf00      	nop
 8014f58:	08022f68 	.word	0x08022f68
 8014f5c:	08022e02 	.word	0x08022e02
 8014f60:	08022e19 	.word	0x08022e19

08014f64 <__lshift>:
 8014f64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f68:	460c      	mov	r4, r1
 8014f6a:	6849      	ldr	r1, [r1, #4]
 8014f6c:	6923      	ldr	r3, [r4, #16]
 8014f6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014f72:	68a3      	ldr	r3, [r4, #8]
 8014f74:	4607      	mov	r7, r0
 8014f76:	4691      	mov	r9, r2
 8014f78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014f7c:	f108 0601 	add.w	r6, r8, #1
 8014f80:	42b3      	cmp	r3, r6
 8014f82:	db0b      	blt.n	8014f9c <__lshift+0x38>
 8014f84:	4638      	mov	r0, r7
 8014f86:	f7ff fd93 	bl	8014ab0 <_Balloc>
 8014f8a:	4605      	mov	r5, r0
 8014f8c:	b948      	cbnz	r0, 8014fa2 <__lshift+0x3e>
 8014f8e:	4602      	mov	r2, r0
 8014f90:	4b28      	ldr	r3, [pc, #160]	; (8015034 <__lshift+0xd0>)
 8014f92:	4829      	ldr	r0, [pc, #164]	; (8015038 <__lshift+0xd4>)
 8014f94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8014f98:	f000 fe04 	bl	8015ba4 <__assert_func>
 8014f9c:	3101      	adds	r1, #1
 8014f9e:	005b      	lsls	r3, r3, #1
 8014fa0:	e7ee      	b.n	8014f80 <__lshift+0x1c>
 8014fa2:	2300      	movs	r3, #0
 8014fa4:	f100 0114 	add.w	r1, r0, #20
 8014fa8:	f100 0210 	add.w	r2, r0, #16
 8014fac:	4618      	mov	r0, r3
 8014fae:	4553      	cmp	r3, sl
 8014fb0:	db33      	blt.n	801501a <__lshift+0xb6>
 8014fb2:	6920      	ldr	r0, [r4, #16]
 8014fb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014fb8:	f104 0314 	add.w	r3, r4, #20
 8014fbc:	f019 091f 	ands.w	r9, r9, #31
 8014fc0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014fc4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014fc8:	d02b      	beq.n	8015022 <__lshift+0xbe>
 8014fca:	f1c9 0e20 	rsb	lr, r9, #32
 8014fce:	468a      	mov	sl, r1
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	6818      	ldr	r0, [r3, #0]
 8014fd4:	fa00 f009 	lsl.w	r0, r0, r9
 8014fd8:	4310      	orrs	r0, r2
 8014fda:	f84a 0b04 	str.w	r0, [sl], #4
 8014fde:	f853 2b04 	ldr.w	r2, [r3], #4
 8014fe2:	459c      	cmp	ip, r3
 8014fe4:	fa22 f20e 	lsr.w	r2, r2, lr
 8014fe8:	d8f3      	bhi.n	8014fd2 <__lshift+0x6e>
 8014fea:	ebac 0304 	sub.w	r3, ip, r4
 8014fee:	3b15      	subs	r3, #21
 8014ff0:	f023 0303 	bic.w	r3, r3, #3
 8014ff4:	3304      	adds	r3, #4
 8014ff6:	f104 0015 	add.w	r0, r4, #21
 8014ffa:	4584      	cmp	ip, r0
 8014ffc:	bf38      	it	cc
 8014ffe:	2304      	movcc	r3, #4
 8015000:	50ca      	str	r2, [r1, r3]
 8015002:	b10a      	cbz	r2, 8015008 <__lshift+0xa4>
 8015004:	f108 0602 	add.w	r6, r8, #2
 8015008:	3e01      	subs	r6, #1
 801500a:	4638      	mov	r0, r7
 801500c:	612e      	str	r6, [r5, #16]
 801500e:	4621      	mov	r1, r4
 8015010:	f7ff fd8e 	bl	8014b30 <_Bfree>
 8015014:	4628      	mov	r0, r5
 8015016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801501a:	f842 0f04 	str.w	r0, [r2, #4]!
 801501e:	3301      	adds	r3, #1
 8015020:	e7c5      	b.n	8014fae <__lshift+0x4a>
 8015022:	3904      	subs	r1, #4
 8015024:	f853 2b04 	ldr.w	r2, [r3], #4
 8015028:	f841 2f04 	str.w	r2, [r1, #4]!
 801502c:	459c      	cmp	ip, r3
 801502e:	d8f9      	bhi.n	8015024 <__lshift+0xc0>
 8015030:	e7ea      	b.n	8015008 <__lshift+0xa4>
 8015032:	bf00      	nop
 8015034:	08022d91 	.word	0x08022d91
 8015038:	08022e19 	.word	0x08022e19

0801503c <__mcmp>:
 801503c:	b530      	push	{r4, r5, lr}
 801503e:	6902      	ldr	r2, [r0, #16]
 8015040:	690c      	ldr	r4, [r1, #16]
 8015042:	1b12      	subs	r2, r2, r4
 8015044:	d10e      	bne.n	8015064 <__mcmp+0x28>
 8015046:	f100 0314 	add.w	r3, r0, #20
 801504a:	3114      	adds	r1, #20
 801504c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8015050:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8015054:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8015058:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801505c:	42a5      	cmp	r5, r4
 801505e:	d003      	beq.n	8015068 <__mcmp+0x2c>
 8015060:	d305      	bcc.n	801506e <__mcmp+0x32>
 8015062:	2201      	movs	r2, #1
 8015064:	4610      	mov	r0, r2
 8015066:	bd30      	pop	{r4, r5, pc}
 8015068:	4283      	cmp	r3, r0
 801506a:	d3f3      	bcc.n	8015054 <__mcmp+0x18>
 801506c:	e7fa      	b.n	8015064 <__mcmp+0x28>
 801506e:	f04f 32ff 	mov.w	r2, #4294967295
 8015072:	e7f7      	b.n	8015064 <__mcmp+0x28>

08015074 <__mdiff>:
 8015074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015078:	460c      	mov	r4, r1
 801507a:	4606      	mov	r6, r0
 801507c:	4611      	mov	r1, r2
 801507e:	4620      	mov	r0, r4
 8015080:	4690      	mov	r8, r2
 8015082:	f7ff ffdb 	bl	801503c <__mcmp>
 8015086:	1e05      	subs	r5, r0, #0
 8015088:	d110      	bne.n	80150ac <__mdiff+0x38>
 801508a:	4629      	mov	r1, r5
 801508c:	4630      	mov	r0, r6
 801508e:	f7ff fd0f 	bl	8014ab0 <_Balloc>
 8015092:	b930      	cbnz	r0, 80150a2 <__mdiff+0x2e>
 8015094:	4b3a      	ldr	r3, [pc, #232]	; (8015180 <__mdiff+0x10c>)
 8015096:	4602      	mov	r2, r0
 8015098:	f240 2137 	movw	r1, #567	; 0x237
 801509c:	4839      	ldr	r0, [pc, #228]	; (8015184 <__mdiff+0x110>)
 801509e:	f000 fd81 	bl	8015ba4 <__assert_func>
 80150a2:	2301      	movs	r3, #1
 80150a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80150a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80150ac:	bfa4      	itt	ge
 80150ae:	4643      	movge	r3, r8
 80150b0:	46a0      	movge	r8, r4
 80150b2:	4630      	mov	r0, r6
 80150b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80150b8:	bfa6      	itte	ge
 80150ba:	461c      	movge	r4, r3
 80150bc:	2500      	movge	r5, #0
 80150be:	2501      	movlt	r5, #1
 80150c0:	f7ff fcf6 	bl	8014ab0 <_Balloc>
 80150c4:	b920      	cbnz	r0, 80150d0 <__mdiff+0x5c>
 80150c6:	4b2e      	ldr	r3, [pc, #184]	; (8015180 <__mdiff+0x10c>)
 80150c8:	4602      	mov	r2, r0
 80150ca:	f240 2145 	movw	r1, #581	; 0x245
 80150ce:	e7e5      	b.n	801509c <__mdiff+0x28>
 80150d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80150d4:	6926      	ldr	r6, [r4, #16]
 80150d6:	60c5      	str	r5, [r0, #12]
 80150d8:	f104 0914 	add.w	r9, r4, #20
 80150dc:	f108 0514 	add.w	r5, r8, #20
 80150e0:	f100 0e14 	add.w	lr, r0, #20
 80150e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80150e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80150ec:	f108 0210 	add.w	r2, r8, #16
 80150f0:	46f2      	mov	sl, lr
 80150f2:	2100      	movs	r1, #0
 80150f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80150f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80150fc:	fa11 f88b 	uxtah	r8, r1, fp
 8015100:	b299      	uxth	r1, r3
 8015102:	0c1b      	lsrs	r3, r3, #16
 8015104:	eba8 0801 	sub.w	r8, r8, r1
 8015108:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801510c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8015110:	fa1f f888 	uxth.w	r8, r8
 8015114:	1419      	asrs	r1, r3, #16
 8015116:	454e      	cmp	r6, r9
 8015118:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801511c:	f84a 3b04 	str.w	r3, [sl], #4
 8015120:	d8e8      	bhi.n	80150f4 <__mdiff+0x80>
 8015122:	1b33      	subs	r3, r6, r4
 8015124:	3b15      	subs	r3, #21
 8015126:	f023 0303 	bic.w	r3, r3, #3
 801512a:	3304      	adds	r3, #4
 801512c:	3415      	adds	r4, #21
 801512e:	42a6      	cmp	r6, r4
 8015130:	bf38      	it	cc
 8015132:	2304      	movcc	r3, #4
 8015134:	441d      	add	r5, r3
 8015136:	4473      	add	r3, lr
 8015138:	469e      	mov	lr, r3
 801513a:	462e      	mov	r6, r5
 801513c:	4566      	cmp	r6, ip
 801513e:	d30e      	bcc.n	801515e <__mdiff+0xea>
 8015140:	f10c 0203 	add.w	r2, ip, #3
 8015144:	1b52      	subs	r2, r2, r5
 8015146:	f022 0203 	bic.w	r2, r2, #3
 801514a:	3d03      	subs	r5, #3
 801514c:	45ac      	cmp	ip, r5
 801514e:	bf38      	it	cc
 8015150:	2200      	movcc	r2, #0
 8015152:	4413      	add	r3, r2
 8015154:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8015158:	b17a      	cbz	r2, 801517a <__mdiff+0x106>
 801515a:	6107      	str	r7, [r0, #16]
 801515c:	e7a4      	b.n	80150a8 <__mdiff+0x34>
 801515e:	f856 8b04 	ldr.w	r8, [r6], #4
 8015162:	fa11 f288 	uxtah	r2, r1, r8
 8015166:	1414      	asrs	r4, r2, #16
 8015168:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801516c:	b292      	uxth	r2, r2
 801516e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8015172:	f84e 2b04 	str.w	r2, [lr], #4
 8015176:	1421      	asrs	r1, r4, #16
 8015178:	e7e0      	b.n	801513c <__mdiff+0xc8>
 801517a:	3f01      	subs	r7, #1
 801517c:	e7ea      	b.n	8015154 <__mdiff+0xe0>
 801517e:	bf00      	nop
 8015180:	08022d91 	.word	0x08022d91
 8015184:	08022e19 	.word	0x08022e19

08015188 <__ulp>:
 8015188:	b082      	sub	sp, #8
 801518a:	ed8d 0b00 	vstr	d0, [sp]
 801518e:	9a01      	ldr	r2, [sp, #4]
 8015190:	4b0f      	ldr	r3, [pc, #60]	; (80151d0 <__ulp+0x48>)
 8015192:	4013      	ands	r3, r2
 8015194:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8015198:	2b00      	cmp	r3, #0
 801519a:	dc08      	bgt.n	80151ae <__ulp+0x26>
 801519c:	425b      	negs	r3, r3
 801519e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80151a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80151a6:	da04      	bge.n	80151b2 <__ulp+0x2a>
 80151a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80151ac:	4113      	asrs	r3, r2
 80151ae:	2200      	movs	r2, #0
 80151b0:	e008      	b.n	80151c4 <__ulp+0x3c>
 80151b2:	f1a2 0314 	sub.w	r3, r2, #20
 80151b6:	2b1e      	cmp	r3, #30
 80151b8:	bfda      	itte	le
 80151ba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80151be:	40da      	lsrle	r2, r3
 80151c0:	2201      	movgt	r2, #1
 80151c2:	2300      	movs	r3, #0
 80151c4:	4619      	mov	r1, r3
 80151c6:	4610      	mov	r0, r2
 80151c8:	ec41 0b10 	vmov	d0, r0, r1
 80151cc:	b002      	add	sp, #8
 80151ce:	4770      	bx	lr
 80151d0:	7ff00000 	.word	0x7ff00000

080151d4 <__b2d>:
 80151d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151d8:	6906      	ldr	r6, [r0, #16]
 80151da:	f100 0814 	add.w	r8, r0, #20
 80151de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80151e2:	1f37      	subs	r7, r6, #4
 80151e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80151e8:	4610      	mov	r0, r2
 80151ea:	f7ff fd53 	bl	8014c94 <__hi0bits>
 80151ee:	f1c0 0320 	rsb	r3, r0, #32
 80151f2:	280a      	cmp	r0, #10
 80151f4:	600b      	str	r3, [r1, #0]
 80151f6:	491b      	ldr	r1, [pc, #108]	; (8015264 <__b2d+0x90>)
 80151f8:	dc15      	bgt.n	8015226 <__b2d+0x52>
 80151fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80151fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8015202:	45b8      	cmp	r8, r7
 8015204:	ea43 0501 	orr.w	r5, r3, r1
 8015208:	bf34      	ite	cc
 801520a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801520e:	2300      	movcs	r3, #0
 8015210:	3015      	adds	r0, #21
 8015212:	fa02 f000 	lsl.w	r0, r2, r0
 8015216:	fa23 f30c 	lsr.w	r3, r3, ip
 801521a:	4303      	orrs	r3, r0
 801521c:	461c      	mov	r4, r3
 801521e:	ec45 4b10 	vmov	d0, r4, r5
 8015222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015226:	45b8      	cmp	r8, r7
 8015228:	bf3a      	itte	cc
 801522a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801522e:	f1a6 0708 	subcc.w	r7, r6, #8
 8015232:	2300      	movcs	r3, #0
 8015234:	380b      	subs	r0, #11
 8015236:	d012      	beq.n	801525e <__b2d+0x8a>
 8015238:	f1c0 0120 	rsb	r1, r0, #32
 801523c:	fa23 f401 	lsr.w	r4, r3, r1
 8015240:	4082      	lsls	r2, r0
 8015242:	4322      	orrs	r2, r4
 8015244:	4547      	cmp	r7, r8
 8015246:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 801524a:	bf8c      	ite	hi
 801524c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8015250:	2200      	movls	r2, #0
 8015252:	4083      	lsls	r3, r0
 8015254:	40ca      	lsrs	r2, r1
 8015256:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801525a:	4313      	orrs	r3, r2
 801525c:	e7de      	b.n	801521c <__b2d+0x48>
 801525e:	ea42 0501 	orr.w	r5, r2, r1
 8015262:	e7db      	b.n	801521c <__b2d+0x48>
 8015264:	3ff00000 	.word	0x3ff00000

08015268 <__d2b>:
 8015268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801526c:	460f      	mov	r7, r1
 801526e:	2101      	movs	r1, #1
 8015270:	ec59 8b10 	vmov	r8, r9, d0
 8015274:	4616      	mov	r6, r2
 8015276:	f7ff fc1b 	bl	8014ab0 <_Balloc>
 801527a:	4604      	mov	r4, r0
 801527c:	b930      	cbnz	r0, 801528c <__d2b+0x24>
 801527e:	4602      	mov	r2, r0
 8015280:	4b24      	ldr	r3, [pc, #144]	; (8015314 <__d2b+0xac>)
 8015282:	4825      	ldr	r0, [pc, #148]	; (8015318 <__d2b+0xb0>)
 8015284:	f240 310f 	movw	r1, #783	; 0x30f
 8015288:	f000 fc8c 	bl	8015ba4 <__assert_func>
 801528c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8015290:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015294:	bb2d      	cbnz	r5, 80152e2 <__d2b+0x7a>
 8015296:	9301      	str	r3, [sp, #4]
 8015298:	f1b8 0300 	subs.w	r3, r8, #0
 801529c:	d026      	beq.n	80152ec <__d2b+0x84>
 801529e:	4668      	mov	r0, sp
 80152a0:	9300      	str	r3, [sp, #0]
 80152a2:	f7ff fd17 	bl	8014cd4 <__lo0bits>
 80152a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80152aa:	b1e8      	cbz	r0, 80152e8 <__d2b+0x80>
 80152ac:	f1c0 0320 	rsb	r3, r0, #32
 80152b0:	fa02 f303 	lsl.w	r3, r2, r3
 80152b4:	430b      	orrs	r3, r1
 80152b6:	40c2      	lsrs	r2, r0
 80152b8:	6163      	str	r3, [r4, #20]
 80152ba:	9201      	str	r2, [sp, #4]
 80152bc:	9b01      	ldr	r3, [sp, #4]
 80152be:	61a3      	str	r3, [r4, #24]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	bf14      	ite	ne
 80152c4:	2202      	movne	r2, #2
 80152c6:	2201      	moveq	r2, #1
 80152c8:	6122      	str	r2, [r4, #16]
 80152ca:	b1bd      	cbz	r5, 80152fc <__d2b+0x94>
 80152cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80152d0:	4405      	add	r5, r0
 80152d2:	603d      	str	r5, [r7, #0]
 80152d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80152d8:	6030      	str	r0, [r6, #0]
 80152da:	4620      	mov	r0, r4
 80152dc:	b003      	add	sp, #12
 80152de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80152e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80152e6:	e7d6      	b.n	8015296 <__d2b+0x2e>
 80152e8:	6161      	str	r1, [r4, #20]
 80152ea:	e7e7      	b.n	80152bc <__d2b+0x54>
 80152ec:	a801      	add	r0, sp, #4
 80152ee:	f7ff fcf1 	bl	8014cd4 <__lo0bits>
 80152f2:	9b01      	ldr	r3, [sp, #4]
 80152f4:	6163      	str	r3, [r4, #20]
 80152f6:	3020      	adds	r0, #32
 80152f8:	2201      	movs	r2, #1
 80152fa:	e7e5      	b.n	80152c8 <__d2b+0x60>
 80152fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8015300:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015304:	6038      	str	r0, [r7, #0]
 8015306:	6918      	ldr	r0, [r3, #16]
 8015308:	f7ff fcc4 	bl	8014c94 <__hi0bits>
 801530c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8015310:	e7e2      	b.n	80152d8 <__d2b+0x70>
 8015312:	bf00      	nop
 8015314:	08022d91 	.word	0x08022d91
 8015318:	08022e19 	.word	0x08022e19

0801531c <__ratio>:
 801531c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015320:	4688      	mov	r8, r1
 8015322:	4669      	mov	r1, sp
 8015324:	4681      	mov	r9, r0
 8015326:	f7ff ff55 	bl	80151d4 <__b2d>
 801532a:	a901      	add	r1, sp, #4
 801532c:	4640      	mov	r0, r8
 801532e:	ec55 4b10 	vmov	r4, r5, d0
 8015332:	f7ff ff4f 	bl	80151d4 <__b2d>
 8015336:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801533a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801533e:	eba3 0c02 	sub.w	ip, r3, r2
 8015342:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015346:	1a9b      	subs	r3, r3, r2
 8015348:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801534c:	ec51 0b10 	vmov	r0, r1, d0
 8015350:	2b00      	cmp	r3, #0
 8015352:	bfd6      	itet	le
 8015354:	460a      	movle	r2, r1
 8015356:	462a      	movgt	r2, r5
 8015358:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801535c:	468b      	mov	fp, r1
 801535e:	462f      	mov	r7, r5
 8015360:	bfd4      	ite	le
 8015362:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8015366:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801536a:	4620      	mov	r0, r4
 801536c:	ee10 2a10 	vmov	r2, s0
 8015370:	465b      	mov	r3, fp
 8015372:	4639      	mov	r1, r7
 8015374:	f7eb fa9a 	bl	80008ac <__aeabi_ddiv>
 8015378:	ec41 0b10 	vmov	d0, r0, r1
 801537c:	b003      	add	sp, #12
 801537e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015382 <__copybits>:
 8015382:	3901      	subs	r1, #1
 8015384:	b570      	push	{r4, r5, r6, lr}
 8015386:	1149      	asrs	r1, r1, #5
 8015388:	6914      	ldr	r4, [r2, #16]
 801538a:	3101      	adds	r1, #1
 801538c:	f102 0314 	add.w	r3, r2, #20
 8015390:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015394:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015398:	1f05      	subs	r5, r0, #4
 801539a:	42a3      	cmp	r3, r4
 801539c:	d30c      	bcc.n	80153b8 <__copybits+0x36>
 801539e:	1aa3      	subs	r3, r4, r2
 80153a0:	3b11      	subs	r3, #17
 80153a2:	f023 0303 	bic.w	r3, r3, #3
 80153a6:	3211      	adds	r2, #17
 80153a8:	42a2      	cmp	r2, r4
 80153aa:	bf88      	it	hi
 80153ac:	2300      	movhi	r3, #0
 80153ae:	4418      	add	r0, r3
 80153b0:	2300      	movs	r3, #0
 80153b2:	4288      	cmp	r0, r1
 80153b4:	d305      	bcc.n	80153c2 <__copybits+0x40>
 80153b6:	bd70      	pop	{r4, r5, r6, pc}
 80153b8:	f853 6b04 	ldr.w	r6, [r3], #4
 80153bc:	f845 6f04 	str.w	r6, [r5, #4]!
 80153c0:	e7eb      	b.n	801539a <__copybits+0x18>
 80153c2:	f840 3b04 	str.w	r3, [r0], #4
 80153c6:	e7f4      	b.n	80153b2 <__copybits+0x30>

080153c8 <__any_on>:
 80153c8:	f100 0214 	add.w	r2, r0, #20
 80153cc:	6900      	ldr	r0, [r0, #16]
 80153ce:	114b      	asrs	r3, r1, #5
 80153d0:	4298      	cmp	r0, r3
 80153d2:	b510      	push	{r4, lr}
 80153d4:	db11      	blt.n	80153fa <__any_on+0x32>
 80153d6:	dd0a      	ble.n	80153ee <__any_on+0x26>
 80153d8:	f011 011f 	ands.w	r1, r1, #31
 80153dc:	d007      	beq.n	80153ee <__any_on+0x26>
 80153de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80153e2:	fa24 f001 	lsr.w	r0, r4, r1
 80153e6:	fa00 f101 	lsl.w	r1, r0, r1
 80153ea:	428c      	cmp	r4, r1
 80153ec:	d10b      	bne.n	8015406 <__any_on+0x3e>
 80153ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80153f2:	4293      	cmp	r3, r2
 80153f4:	d803      	bhi.n	80153fe <__any_on+0x36>
 80153f6:	2000      	movs	r0, #0
 80153f8:	bd10      	pop	{r4, pc}
 80153fa:	4603      	mov	r3, r0
 80153fc:	e7f7      	b.n	80153ee <__any_on+0x26>
 80153fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015402:	2900      	cmp	r1, #0
 8015404:	d0f5      	beq.n	80153f2 <__any_on+0x2a>
 8015406:	2001      	movs	r0, #1
 8015408:	e7f6      	b.n	80153f8 <__any_on+0x30>

0801540a <__ascii_wctomb>:
 801540a:	b149      	cbz	r1, 8015420 <__ascii_wctomb+0x16>
 801540c:	2aff      	cmp	r2, #255	; 0xff
 801540e:	bf85      	ittet	hi
 8015410:	238a      	movhi	r3, #138	; 0x8a
 8015412:	6003      	strhi	r3, [r0, #0]
 8015414:	700a      	strbls	r2, [r1, #0]
 8015416:	f04f 30ff 	movhi.w	r0, #4294967295
 801541a:	bf98      	it	ls
 801541c:	2001      	movls	r0, #1
 801541e:	4770      	bx	lr
 8015420:	4608      	mov	r0, r1
 8015422:	4770      	bx	lr

08015424 <__ssputs_r>:
 8015424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015428:	688e      	ldr	r6, [r1, #8]
 801542a:	461f      	mov	r7, r3
 801542c:	42be      	cmp	r6, r7
 801542e:	680b      	ldr	r3, [r1, #0]
 8015430:	4682      	mov	sl, r0
 8015432:	460c      	mov	r4, r1
 8015434:	4690      	mov	r8, r2
 8015436:	d82c      	bhi.n	8015492 <__ssputs_r+0x6e>
 8015438:	898a      	ldrh	r2, [r1, #12]
 801543a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801543e:	d026      	beq.n	801548e <__ssputs_r+0x6a>
 8015440:	6965      	ldr	r5, [r4, #20]
 8015442:	6909      	ldr	r1, [r1, #16]
 8015444:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015448:	eba3 0901 	sub.w	r9, r3, r1
 801544c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8015450:	1c7b      	adds	r3, r7, #1
 8015452:	444b      	add	r3, r9
 8015454:	106d      	asrs	r5, r5, #1
 8015456:	429d      	cmp	r5, r3
 8015458:	bf38      	it	cc
 801545a:	461d      	movcc	r5, r3
 801545c:	0553      	lsls	r3, r2, #21
 801545e:	d527      	bpl.n	80154b0 <__ssputs_r+0x8c>
 8015460:	4629      	mov	r1, r5
 8015462:	f7ff fa87 	bl	8014974 <_malloc_r>
 8015466:	4606      	mov	r6, r0
 8015468:	b360      	cbz	r0, 80154c4 <__ssputs_r+0xa0>
 801546a:	6921      	ldr	r1, [r4, #16]
 801546c:	464a      	mov	r2, r9
 801546e:	f7fe fea0 	bl	80141b2 <memcpy>
 8015472:	89a3      	ldrh	r3, [r4, #12]
 8015474:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801547c:	81a3      	strh	r3, [r4, #12]
 801547e:	6126      	str	r6, [r4, #16]
 8015480:	6165      	str	r5, [r4, #20]
 8015482:	444e      	add	r6, r9
 8015484:	eba5 0509 	sub.w	r5, r5, r9
 8015488:	6026      	str	r6, [r4, #0]
 801548a:	60a5      	str	r5, [r4, #8]
 801548c:	463e      	mov	r6, r7
 801548e:	42be      	cmp	r6, r7
 8015490:	d900      	bls.n	8015494 <__ssputs_r+0x70>
 8015492:	463e      	mov	r6, r7
 8015494:	6820      	ldr	r0, [r4, #0]
 8015496:	4632      	mov	r2, r6
 8015498:	4641      	mov	r1, r8
 801549a:	f000 fb59 	bl	8015b50 <memmove>
 801549e:	68a3      	ldr	r3, [r4, #8]
 80154a0:	1b9b      	subs	r3, r3, r6
 80154a2:	60a3      	str	r3, [r4, #8]
 80154a4:	6823      	ldr	r3, [r4, #0]
 80154a6:	4433      	add	r3, r6
 80154a8:	6023      	str	r3, [r4, #0]
 80154aa:	2000      	movs	r0, #0
 80154ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80154b0:	462a      	mov	r2, r5
 80154b2:	f000 fbb3 	bl	8015c1c <_realloc_r>
 80154b6:	4606      	mov	r6, r0
 80154b8:	2800      	cmp	r0, #0
 80154ba:	d1e0      	bne.n	801547e <__ssputs_r+0x5a>
 80154bc:	6921      	ldr	r1, [r4, #16]
 80154be:	4650      	mov	r0, sl
 80154c0:	f7fe fe94 	bl	80141ec <_free_r>
 80154c4:	230c      	movs	r3, #12
 80154c6:	f8ca 3000 	str.w	r3, [sl]
 80154ca:	89a3      	ldrh	r3, [r4, #12]
 80154cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80154d0:	81a3      	strh	r3, [r4, #12]
 80154d2:	f04f 30ff 	mov.w	r0, #4294967295
 80154d6:	e7e9      	b.n	80154ac <__ssputs_r+0x88>

080154d8 <_svfiprintf_r>:
 80154d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154dc:	4698      	mov	r8, r3
 80154de:	898b      	ldrh	r3, [r1, #12]
 80154e0:	061b      	lsls	r3, r3, #24
 80154e2:	b09d      	sub	sp, #116	; 0x74
 80154e4:	4607      	mov	r7, r0
 80154e6:	460d      	mov	r5, r1
 80154e8:	4614      	mov	r4, r2
 80154ea:	d50e      	bpl.n	801550a <_svfiprintf_r+0x32>
 80154ec:	690b      	ldr	r3, [r1, #16]
 80154ee:	b963      	cbnz	r3, 801550a <_svfiprintf_r+0x32>
 80154f0:	2140      	movs	r1, #64	; 0x40
 80154f2:	f7ff fa3f 	bl	8014974 <_malloc_r>
 80154f6:	6028      	str	r0, [r5, #0]
 80154f8:	6128      	str	r0, [r5, #16]
 80154fa:	b920      	cbnz	r0, 8015506 <_svfiprintf_r+0x2e>
 80154fc:	230c      	movs	r3, #12
 80154fe:	603b      	str	r3, [r7, #0]
 8015500:	f04f 30ff 	mov.w	r0, #4294967295
 8015504:	e0d0      	b.n	80156a8 <_svfiprintf_r+0x1d0>
 8015506:	2340      	movs	r3, #64	; 0x40
 8015508:	616b      	str	r3, [r5, #20]
 801550a:	2300      	movs	r3, #0
 801550c:	9309      	str	r3, [sp, #36]	; 0x24
 801550e:	2320      	movs	r3, #32
 8015510:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015514:	f8cd 800c 	str.w	r8, [sp, #12]
 8015518:	2330      	movs	r3, #48	; 0x30
 801551a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80156c0 <_svfiprintf_r+0x1e8>
 801551e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015522:	f04f 0901 	mov.w	r9, #1
 8015526:	4623      	mov	r3, r4
 8015528:	469a      	mov	sl, r3
 801552a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801552e:	b10a      	cbz	r2, 8015534 <_svfiprintf_r+0x5c>
 8015530:	2a25      	cmp	r2, #37	; 0x25
 8015532:	d1f9      	bne.n	8015528 <_svfiprintf_r+0x50>
 8015534:	ebba 0b04 	subs.w	fp, sl, r4
 8015538:	d00b      	beq.n	8015552 <_svfiprintf_r+0x7a>
 801553a:	465b      	mov	r3, fp
 801553c:	4622      	mov	r2, r4
 801553e:	4629      	mov	r1, r5
 8015540:	4638      	mov	r0, r7
 8015542:	f7ff ff6f 	bl	8015424 <__ssputs_r>
 8015546:	3001      	adds	r0, #1
 8015548:	f000 80a9 	beq.w	801569e <_svfiprintf_r+0x1c6>
 801554c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801554e:	445a      	add	r2, fp
 8015550:	9209      	str	r2, [sp, #36]	; 0x24
 8015552:	f89a 3000 	ldrb.w	r3, [sl]
 8015556:	2b00      	cmp	r3, #0
 8015558:	f000 80a1 	beq.w	801569e <_svfiprintf_r+0x1c6>
 801555c:	2300      	movs	r3, #0
 801555e:	f04f 32ff 	mov.w	r2, #4294967295
 8015562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015566:	f10a 0a01 	add.w	sl, sl, #1
 801556a:	9304      	str	r3, [sp, #16]
 801556c:	9307      	str	r3, [sp, #28]
 801556e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015572:	931a      	str	r3, [sp, #104]	; 0x68
 8015574:	4654      	mov	r4, sl
 8015576:	2205      	movs	r2, #5
 8015578:	f814 1b01 	ldrb.w	r1, [r4], #1
 801557c:	4850      	ldr	r0, [pc, #320]	; (80156c0 <_svfiprintf_r+0x1e8>)
 801557e:	f7ea fe5f 	bl	8000240 <memchr>
 8015582:	9a04      	ldr	r2, [sp, #16]
 8015584:	b9d8      	cbnz	r0, 80155be <_svfiprintf_r+0xe6>
 8015586:	06d0      	lsls	r0, r2, #27
 8015588:	bf44      	itt	mi
 801558a:	2320      	movmi	r3, #32
 801558c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015590:	0711      	lsls	r1, r2, #28
 8015592:	bf44      	itt	mi
 8015594:	232b      	movmi	r3, #43	; 0x2b
 8015596:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801559a:	f89a 3000 	ldrb.w	r3, [sl]
 801559e:	2b2a      	cmp	r3, #42	; 0x2a
 80155a0:	d015      	beq.n	80155ce <_svfiprintf_r+0xf6>
 80155a2:	9a07      	ldr	r2, [sp, #28]
 80155a4:	4654      	mov	r4, sl
 80155a6:	2000      	movs	r0, #0
 80155a8:	f04f 0c0a 	mov.w	ip, #10
 80155ac:	4621      	mov	r1, r4
 80155ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80155b2:	3b30      	subs	r3, #48	; 0x30
 80155b4:	2b09      	cmp	r3, #9
 80155b6:	d94d      	bls.n	8015654 <_svfiprintf_r+0x17c>
 80155b8:	b1b0      	cbz	r0, 80155e8 <_svfiprintf_r+0x110>
 80155ba:	9207      	str	r2, [sp, #28]
 80155bc:	e014      	b.n	80155e8 <_svfiprintf_r+0x110>
 80155be:	eba0 0308 	sub.w	r3, r0, r8
 80155c2:	fa09 f303 	lsl.w	r3, r9, r3
 80155c6:	4313      	orrs	r3, r2
 80155c8:	9304      	str	r3, [sp, #16]
 80155ca:	46a2      	mov	sl, r4
 80155cc:	e7d2      	b.n	8015574 <_svfiprintf_r+0x9c>
 80155ce:	9b03      	ldr	r3, [sp, #12]
 80155d0:	1d19      	adds	r1, r3, #4
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	9103      	str	r1, [sp, #12]
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	bfbb      	ittet	lt
 80155da:	425b      	neglt	r3, r3
 80155dc:	f042 0202 	orrlt.w	r2, r2, #2
 80155e0:	9307      	strge	r3, [sp, #28]
 80155e2:	9307      	strlt	r3, [sp, #28]
 80155e4:	bfb8      	it	lt
 80155e6:	9204      	strlt	r2, [sp, #16]
 80155e8:	7823      	ldrb	r3, [r4, #0]
 80155ea:	2b2e      	cmp	r3, #46	; 0x2e
 80155ec:	d10c      	bne.n	8015608 <_svfiprintf_r+0x130>
 80155ee:	7863      	ldrb	r3, [r4, #1]
 80155f0:	2b2a      	cmp	r3, #42	; 0x2a
 80155f2:	d134      	bne.n	801565e <_svfiprintf_r+0x186>
 80155f4:	9b03      	ldr	r3, [sp, #12]
 80155f6:	1d1a      	adds	r2, r3, #4
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	9203      	str	r2, [sp, #12]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	bfb8      	it	lt
 8015600:	f04f 33ff 	movlt.w	r3, #4294967295
 8015604:	3402      	adds	r4, #2
 8015606:	9305      	str	r3, [sp, #20]
 8015608:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80156d0 <_svfiprintf_r+0x1f8>
 801560c:	7821      	ldrb	r1, [r4, #0]
 801560e:	2203      	movs	r2, #3
 8015610:	4650      	mov	r0, sl
 8015612:	f7ea fe15 	bl	8000240 <memchr>
 8015616:	b138      	cbz	r0, 8015628 <_svfiprintf_r+0x150>
 8015618:	9b04      	ldr	r3, [sp, #16]
 801561a:	eba0 000a 	sub.w	r0, r0, sl
 801561e:	2240      	movs	r2, #64	; 0x40
 8015620:	4082      	lsls	r2, r0
 8015622:	4313      	orrs	r3, r2
 8015624:	3401      	adds	r4, #1
 8015626:	9304      	str	r3, [sp, #16]
 8015628:	f814 1b01 	ldrb.w	r1, [r4], #1
 801562c:	4825      	ldr	r0, [pc, #148]	; (80156c4 <_svfiprintf_r+0x1ec>)
 801562e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015632:	2206      	movs	r2, #6
 8015634:	f7ea fe04 	bl	8000240 <memchr>
 8015638:	2800      	cmp	r0, #0
 801563a:	d038      	beq.n	80156ae <_svfiprintf_r+0x1d6>
 801563c:	4b22      	ldr	r3, [pc, #136]	; (80156c8 <_svfiprintf_r+0x1f0>)
 801563e:	bb1b      	cbnz	r3, 8015688 <_svfiprintf_r+0x1b0>
 8015640:	9b03      	ldr	r3, [sp, #12]
 8015642:	3307      	adds	r3, #7
 8015644:	f023 0307 	bic.w	r3, r3, #7
 8015648:	3308      	adds	r3, #8
 801564a:	9303      	str	r3, [sp, #12]
 801564c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801564e:	4433      	add	r3, r6
 8015650:	9309      	str	r3, [sp, #36]	; 0x24
 8015652:	e768      	b.n	8015526 <_svfiprintf_r+0x4e>
 8015654:	fb0c 3202 	mla	r2, ip, r2, r3
 8015658:	460c      	mov	r4, r1
 801565a:	2001      	movs	r0, #1
 801565c:	e7a6      	b.n	80155ac <_svfiprintf_r+0xd4>
 801565e:	2300      	movs	r3, #0
 8015660:	3401      	adds	r4, #1
 8015662:	9305      	str	r3, [sp, #20]
 8015664:	4619      	mov	r1, r3
 8015666:	f04f 0c0a 	mov.w	ip, #10
 801566a:	4620      	mov	r0, r4
 801566c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015670:	3a30      	subs	r2, #48	; 0x30
 8015672:	2a09      	cmp	r2, #9
 8015674:	d903      	bls.n	801567e <_svfiprintf_r+0x1a6>
 8015676:	2b00      	cmp	r3, #0
 8015678:	d0c6      	beq.n	8015608 <_svfiprintf_r+0x130>
 801567a:	9105      	str	r1, [sp, #20]
 801567c:	e7c4      	b.n	8015608 <_svfiprintf_r+0x130>
 801567e:	fb0c 2101 	mla	r1, ip, r1, r2
 8015682:	4604      	mov	r4, r0
 8015684:	2301      	movs	r3, #1
 8015686:	e7f0      	b.n	801566a <_svfiprintf_r+0x192>
 8015688:	ab03      	add	r3, sp, #12
 801568a:	9300      	str	r3, [sp, #0]
 801568c:	462a      	mov	r2, r5
 801568e:	4b0f      	ldr	r3, [pc, #60]	; (80156cc <_svfiprintf_r+0x1f4>)
 8015690:	a904      	add	r1, sp, #16
 8015692:	4638      	mov	r0, r7
 8015694:	f3af 8000 	nop.w
 8015698:	1c42      	adds	r2, r0, #1
 801569a:	4606      	mov	r6, r0
 801569c:	d1d6      	bne.n	801564c <_svfiprintf_r+0x174>
 801569e:	89ab      	ldrh	r3, [r5, #12]
 80156a0:	065b      	lsls	r3, r3, #25
 80156a2:	f53f af2d 	bmi.w	8015500 <_svfiprintf_r+0x28>
 80156a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80156a8:	b01d      	add	sp, #116	; 0x74
 80156aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80156ae:	ab03      	add	r3, sp, #12
 80156b0:	9300      	str	r3, [sp, #0]
 80156b2:	462a      	mov	r2, r5
 80156b4:	4b05      	ldr	r3, [pc, #20]	; (80156cc <_svfiprintf_r+0x1f4>)
 80156b6:	a904      	add	r1, sp, #16
 80156b8:	4638      	mov	r0, r7
 80156ba:	f000 f879 	bl	80157b0 <_printf_i>
 80156be:	e7eb      	b.n	8015698 <_svfiprintf_r+0x1c0>
 80156c0:	08022f74 	.word	0x08022f74
 80156c4:	08022f7e 	.word	0x08022f7e
 80156c8:	00000000 	.word	0x00000000
 80156cc:	08015425 	.word	0x08015425
 80156d0:	08022f7a 	.word	0x08022f7a

080156d4 <_printf_common>:
 80156d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80156d8:	4616      	mov	r6, r2
 80156da:	4699      	mov	r9, r3
 80156dc:	688a      	ldr	r2, [r1, #8]
 80156de:	690b      	ldr	r3, [r1, #16]
 80156e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80156e4:	4293      	cmp	r3, r2
 80156e6:	bfb8      	it	lt
 80156e8:	4613      	movlt	r3, r2
 80156ea:	6033      	str	r3, [r6, #0]
 80156ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80156f0:	4607      	mov	r7, r0
 80156f2:	460c      	mov	r4, r1
 80156f4:	b10a      	cbz	r2, 80156fa <_printf_common+0x26>
 80156f6:	3301      	adds	r3, #1
 80156f8:	6033      	str	r3, [r6, #0]
 80156fa:	6823      	ldr	r3, [r4, #0]
 80156fc:	0699      	lsls	r1, r3, #26
 80156fe:	bf42      	ittt	mi
 8015700:	6833      	ldrmi	r3, [r6, #0]
 8015702:	3302      	addmi	r3, #2
 8015704:	6033      	strmi	r3, [r6, #0]
 8015706:	6825      	ldr	r5, [r4, #0]
 8015708:	f015 0506 	ands.w	r5, r5, #6
 801570c:	d106      	bne.n	801571c <_printf_common+0x48>
 801570e:	f104 0a19 	add.w	sl, r4, #25
 8015712:	68e3      	ldr	r3, [r4, #12]
 8015714:	6832      	ldr	r2, [r6, #0]
 8015716:	1a9b      	subs	r3, r3, r2
 8015718:	42ab      	cmp	r3, r5
 801571a:	dc26      	bgt.n	801576a <_printf_common+0x96>
 801571c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015720:	1e13      	subs	r3, r2, #0
 8015722:	6822      	ldr	r2, [r4, #0]
 8015724:	bf18      	it	ne
 8015726:	2301      	movne	r3, #1
 8015728:	0692      	lsls	r2, r2, #26
 801572a:	d42b      	bmi.n	8015784 <_printf_common+0xb0>
 801572c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015730:	4649      	mov	r1, r9
 8015732:	4638      	mov	r0, r7
 8015734:	47c0      	blx	r8
 8015736:	3001      	adds	r0, #1
 8015738:	d01e      	beq.n	8015778 <_printf_common+0xa4>
 801573a:	6823      	ldr	r3, [r4, #0]
 801573c:	6922      	ldr	r2, [r4, #16]
 801573e:	f003 0306 	and.w	r3, r3, #6
 8015742:	2b04      	cmp	r3, #4
 8015744:	bf02      	ittt	eq
 8015746:	68e5      	ldreq	r5, [r4, #12]
 8015748:	6833      	ldreq	r3, [r6, #0]
 801574a:	1aed      	subeq	r5, r5, r3
 801574c:	68a3      	ldr	r3, [r4, #8]
 801574e:	bf0c      	ite	eq
 8015750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015754:	2500      	movne	r5, #0
 8015756:	4293      	cmp	r3, r2
 8015758:	bfc4      	itt	gt
 801575a:	1a9b      	subgt	r3, r3, r2
 801575c:	18ed      	addgt	r5, r5, r3
 801575e:	2600      	movs	r6, #0
 8015760:	341a      	adds	r4, #26
 8015762:	42b5      	cmp	r5, r6
 8015764:	d11a      	bne.n	801579c <_printf_common+0xc8>
 8015766:	2000      	movs	r0, #0
 8015768:	e008      	b.n	801577c <_printf_common+0xa8>
 801576a:	2301      	movs	r3, #1
 801576c:	4652      	mov	r2, sl
 801576e:	4649      	mov	r1, r9
 8015770:	4638      	mov	r0, r7
 8015772:	47c0      	blx	r8
 8015774:	3001      	adds	r0, #1
 8015776:	d103      	bne.n	8015780 <_printf_common+0xac>
 8015778:	f04f 30ff 	mov.w	r0, #4294967295
 801577c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015780:	3501      	adds	r5, #1
 8015782:	e7c6      	b.n	8015712 <_printf_common+0x3e>
 8015784:	18e1      	adds	r1, r4, r3
 8015786:	1c5a      	adds	r2, r3, #1
 8015788:	2030      	movs	r0, #48	; 0x30
 801578a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801578e:	4422      	add	r2, r4
 8015790:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015794:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015798:	3302      	adds	r3, #2
 801579a:	e7c7      	b.n	801572c <_printf_common+0x58>
 801579c:	2301      	movs	r3, #1
 801579e:	4622      	mov	r2, r4
 80157a0:	4649      	mov	r1, r9
 80157a2:	4638      	mov	r0, r7
 80157a4:	47c0      	blx	r8
 80157a6:	3001      	adds	r0, #1
 80157a8:	d0e6      	beq.n	8015778 <_printf_common+0xa4>
 80157aa:	3601      	adds	r6, #1
 80157ac:	e7d9      	b.n	8015762 <_printf_common+0x8e>
	...

080157b0 <_printf_i>:
 80157b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80157b4:	7e0f      	ldrb	r7, [r1, #24]
 80157b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80157b8:	2f78      	cmp	r7, #120	; 0x78
 80157ba:	4691      	mov	r9, r2
 80157bc:	4680      	mov	r8, r0
 80157be:	460c      	mov	r4, r1
 80157c0:	469a      	mov	sl, r3
 80157c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80157c6:	d807      	bhi.n	80157d8 <_printf_i+0x28>
 80157c8:	2f62      	cmp	r7, #98	; 0x62
 80157ca:	d80a      	bhi.n	80157e2 <_printf_i+0x32>
 80157cc:	2f00      	cmp	r7, #0
 80157ce:	f000 80d4 	beq.w	801597a <_printf_i+0x1ca>
 80157d2:	2f58      	cmp	r7, #88	; 0x58
 80157d4:	f000 80c0 	beq.w	8015958 <_printf_i+0x1a8>
 80157d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80157dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80157e0:	e03a      	b.n	8015858 <_printf_i+0xa8>
 80157e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80157e6:	2b15      	cmp	r3, #21
 80157e8:	d8f6      	bhi.n	80157d8 <_printf_i+0x28>
 80157ea:	a101      	add	r1, pc, #4	; (adr r1, 80157f0 <_printf_i+0x40>)
 80157ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80157f0:	08015849 	.word	0x08015849
 80157f4:	0801585d 	.word	0x0801585d
 80157f8:	080157d9 	.word	0x080157d9
 80157fc:	080157d9 	.word	0x080157d9
 8015800:	080157d9 	.word	0x080157d9
 8015804:	080157d9 	.word	0x080157d9
 8015808:	0801585d 	.word	0x0801585d
 801580c:	080157d9 	.word	0x080157d9
 8015810:	080157d9 	.word	0x080157d9
 8015814:	080157d9 	.word	0x080157d9
 8015818:	080157d9 	.word	0x080157d9
 801581c:	08015961 	.word	0x08015961
 8015820:	08015889 	.word	0x08015889
 8015824:	0801591b 	.word	0x0801591b
 8015828:	080157d9 	.word	0x080157d9
 801582c:	080157d9 	.word	0x080157d9
 8015830:	08015983 	.word	0x08015983
 8015834:	080157d9 	.word	0x080157d9
 8015838:	08015889 	.word	0x08015889
 801583c:	080157d9 	.word	0x080157d9
 8015840:	080157d9 	.word	0x080157d9
 8015844:	08015923 	.word	0x08015923
 8015848:	682b      	ldr	r3, [r5, #0]
 801584a:	1d1a      	adds	r2, r3, #4
 801584c:	681b      	ldr	r3, [r3, #0]
 801584e:	602a      	str	r2, [r5, #0]
 8015850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015854:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015858:	2301      	movs	r3, #1
 801585a:	e09f      	b.n	801599c <_printf_i+0x1ec>
 801585c:	6820      	ldr	r0, [r4, #0]
 801585e:	682b      	ldr	r3, [r5, #0]
 8015860:	0607      	lsls	r7, r0, #24
 8015862:	f103 0104 	add.w	r1, r3, #4
 8015866:	6029      	str	r1, [r5, #0]
 8015868:	d501      	bpl.n	801586e <_printf_i+0xbe>
 801586a:	681e      	ldr	r6, [r3, #0]
 801586c:	e003      	b.n	8015876 <_printf_i+0xc6>
 801586e:	0646      	lsls	r6, r0, #25
 8015870:	d5fb      	bpl.n	801586a <_printf_i+0xba>
 8015872:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015876:	2e00      	cmp	r6, #0
 8015878:	da03      	bge.n	8015882 <_printf_i+0xd2>
 801587a:	232d      	movs	r3, #45	; 0x2d
 801587c:	4276      	negs	r6, r6
 801587e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015882:	485a      	ldr	r0, [pc, #360]	; (80159ec <_printf_i+0x23c>)
 8015884:	230a      	movs	r3, #10
 8015886:	e012      	b.n	80158ae <_printf_i+0xfe>
 8015888:	682b      	ldr	r3, [r5, #0]
 801588a:	6820      	ldr	r0, [r4, #0]
 801588c:	1d19      	adds	r1, r3, #4
 801588e:	6029      	str	r1, [r5, #0]
 8015890:	0605      	lsls	r5, r0, #24
 8015892:	d501      	bpl.n	8015898 <_printf_i+0xe8>
 8015894:	681e      	ldr	r6, [r3, #0]
 8015896:	e002      	b.n	801589e <_printf_i+0xee>
 8015898:	0641      	lsls	r1, r0, #25
 801589a:	d5fb      	bpl.n	8015894 <_printf_i+0xe4>
 801589c:	881e      	ldrh	r6, [r3, #0]
 801589e:	4853      	ldr	r0, [pc, #332]	; (80159ec <_printf_i+0x23c>)
 80158a0:	2f6f      	cmp	r7, #111	; 0x6f
 80158a2:	bf0c      	ite	eq
 80158a4:	2308      	moveq	r3, #8
 80158a6:	230a      	movne	r3, #10
 80158a8:	2100      	movs	r1, #0
 80158aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80158ae:	6865      	ldr	r5, [r4, #4]
 80158b0:	60a5      	str	r5, [r4, #8]
 80158b2:	2d00      	cmp	r5, #0
 80158b4:	bfa2      	ittt	ge
 80158b6:	6821      	ldrge	r1, [r4, #0]
 80158b8:	f021 0104 	bicge.w	r1, r1, #4
 80158bc:	6021      	strge	r1, [r4, #0]
 80158be:	b90e      	cbnz	r6, 80158c4 <_printf_i+0x114>
 80158c0:	2d00      	cmp	r5, #0
 80158c2:	d04b      	beq.n	801595c <_printf_i+0x1ac>
 80158c4:	4615      	mov	r5, r2
 80158c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80158ca:	fb03 6711 	mls	r7, r3, r1, r6
 80158ce:	5dc7      	ldrb	r7, [r0, r7]
 80158d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80158d4:	4637      	mov	r7, r6
 80158d6:	42bb      	cmp	r3, r7
 80158d8:	460e      	mov	r6, r1
 80158da:	d9f4      	bls.n	80158c6 <_printf_i+0x116>
 80158dc:	2b08      	cmp	r3, #8
 80158de:	d10b      	bne.n	80158f8 <_printf_i+0x148>
 80158e0:	6823      	ldr	r3, [r4, #0]
 80158e2:	07de      	lsls	r6, r3, #31
 80158e4:	d508      	bpl.n	80158f8 <_printf_i+0x148>
 80158e6:	6923      	ldr	r3, [r4, #16]
 80158e8:	6861      	ldr	r1, [r4, #4]
 80158ea:	4299      	cmp	r1, r3
 80158ec:	bfde      	ittt	le
 80158ee:	2330      	movle	r3, #48	; 0x30
 80158f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80158f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80158f8:	1b52      	subs	r2, r2, r5
 80158fa:	6122      	str	r2, [r4, #16]
 80158fc:	f8cd a000 	str.w	sl, [sp]
 8015900:	464b      	mov	r3, r9
 8015902:	aa03      	add	r2, sp, #12
 8015904:	4621      	mov	r1, r4
 8015906:	4640      	mov	r0, r8
 8015908:	f7ff fee4 	bl	80156d4 <_printf_common>
 801590c:	3001      	adds	r0, #1
 801590e:	d14a      	bne.n	80159a6 <_printf_i+0x1f6>
 8015910:	f04f 30ff 	mov.w	r0, #4294967295
 8015914:	b004      	add	sp, #16
 8015916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801591a:	6823      	ldr	r3, [r4, #0]
 801591c:	f043 0320 	orr.w	r3, r3, #32
 8015920:	6023      	str	r3, [r4, #0]
 8015922:	4833      	ldr	r0, [pc, #204]	; (80159f0 <_printf_i+0x240>)
 8015924:	2778      	movs	r7, #120	; 0x78
 8015926:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801592a:	6823      	ldr	r3, [r4, #0]
 801592c:	6829      	ldr	r1, [r5, #0]
 801592e:	061f      	lsls	r7, r3, #24
 8015930:	f851 6b04 	ldr.w	r6, [r1], #4
 8015934:	d402      	bmi.n	801593c <_printf_i+0x18c>
 8015936:	065f      	lsls	r7, r3, #25
 8015938:	bf48      	it	mi
 801593a:	b2b6      	uxthmi	r6, r6
 801593c:	07df      	lsls	r7, r3, #31
 801593e:	bf48      	it	mi
 8015940:	f043 0320 	orrmi.w	r3, r3, #32
 8015944:	6029      	str	r1, [r5, #0]
 8015946:	bf48      	it	mi
 8015948:	6023      	strmi	r3, [r4, #0]
 801594a:	b91e      	cbnz	r6, 8015954 <_printf_i+0x1a4>
 801594c:	6823      	ldr	r3, [r4, #0]
 801594e:	f023 0320 	bic.w	r3, r3, #32
 8015952:	6023      	str	r3, [r4, #0]
 8015954:	2310      	movs	r3, #16
 8015956:	e7a7      	b.n	80158a8 <_printf_i+0xf8>
 8015958:	4824      	ldr	r0, [pc, #144]	; (80159ec <_printf_i+0x23c>)
 801595a:	e7e4      	b.n	8015926 <_printf_i+0x176>
 801595c:	4615      	mov	r5, r2
 801595e:	e7bd      	b.n	80158dc <_printf_i+0x12c>
 8015960:	682b      	ldr	r3, [r5, #0]
 8015962:	6826      	ldr	r6, [r4, #0]
 8015964:	6961      	ldr	r1, [r4, #20]
 8015966:	1d18      	adds	r0, r3, #4
 8015968:	6028      	str	r0, [r5, #0]
 801596a:	0635      	lsls	r5, r6, #24
 801596c:	681b      	ldr	r3, [r3, #0]
 801596e:	d501      	bpl.n	8015974 <_printf_i+0x1c4>
 8015970:	6019      	str	r1, [r3, #0]
 8015972:	e002      	b.n	801597a <_printf_i+0x1ca>
 8015974:	0670      	lsls	r0, r6, #25
 8015976:	d5fb      	bpl.n	8015970 <_printf_i+0x1c0>
 8015978:	8019      	strh	r1, [r3, #0]
 801597a:	2300      	movs	r3, #0
 801597c:	6123      	str	r3, [r4, #16]
 801597e:	4615      	mov	r5, r2
 8015980:	e7bc      	b.n	80158fc <_printf_i+0x14c>
 8015982:	682b      	ldr	r3, [r5, #0]
 8015984:	1d1a      	adds	r2, r3, #4
 8015986:	602a      	str	r2, [r5, #0]
 8015988:	681d      	ldr	r5, [r3, #0]
 801598a:	6862      	ldr	r2, [r4, #4]
 801598c:	2100      	movs	r1, #0
 801598e:	4628      	mov	r0, r5
 8015990:	f7ea fc56 	bl	8000240 <memchr>
 8015994:	b108      	cbz	r0, 801599a <_printf_i+0x1ea>
 8015996:	1b40      	subs	r0, r0, r5
 8015998:	6060      	str	r0, [r4, #4]
 801599a:	6863      	ldr	r3, [r4, #4]
 801599c:	6123      	str	r3, [r4, #16]
 801599e:	2300      	movs	r3, #0
 80159a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80159a4:	e7aa      	b.n	80158fc <_printf_i+0x14c>
 80159a6:	6923      	ldr	r3, [r4, #16]
 80159a8:	462a      	mov	r2, r5
 80159aa:	4649      	mov	r1, r9
 80159ac:	4640      	mov	r0, r8
 80159ae:	47d0      	blx	sl
 80159b0:	3001      	adds	r0, #1
 80159b2:	d0ad      	beq.n	8015910 <_printf_i+0x160>
 80159b4:	6823      	ldr	r3, [r4, #0]
 80159b6:	079b      	lsls	r3, r3, #30
 80159b8:	d413      	bmi.n	80159e2 <_printf_i+0x232>
 80159ba:	68e0      	ldr	r0, [r4, #12]
 80159bc:	9b03      	ldr	r3, [sp, #12]
 80159be:	4298      	cmp	r0, r3
 80159c0:	bfb8      	it	lt
 80159c2:	4618      	movlt	r0, r3
 80159c4:	e7a6      	b.n	8015914 <_printf_i+0x164>
 80159c6:	2301      	movs	r3, #1
 80159c8:	4632      	mov	r2, r6
 80159ca:	4649      	mov	r1, r9
 80159cc:	4640      	mov	r0, r8
 80159ce:	47d0      	blx	sl
 80159d0:	3001      	adds	r0, #1
 80159d2:	d09d      	beq.n	8015910 <_printf_i+0x160>
 80159d4:	3501      	adds	r5, #1
 80159d6:	68e3      	ldr	r3, [r4, #12]
 80159d8:	9903      	ldr	r1, [sp, #12]
 80159da:	1a5b      	subs	r3, r3, r1
 80159dc:	42ab      	cmp	r3, r5
 80159de:	dcf2      	bgt.n	80159c6 <_printf_i+0x216>
 80159e0:	e7eb      	b.n	80159ba <_printf_i+0x20a>
 80159e2:	2500      	movs	r5, #0
 80159e4:	f104 0619 	add.w	r6, r4, #25
 80159e8:	e7f5      	b.n	80159d6 <_printf_i+0x226>
 80159ea:	bf00      	nop
 80159ec:	08022f85 	.word	0x08022f85
 80159f0:	08022f96 	.word	0x08022f96

080159f4 <__sflush_r>:
 80159f4:	898a      	ldrh	r2, [r1, #12]
 80159f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159fa:	4605      	mov	r5, r0
 80159fc:	0710      	lsls	r0, r2, #28
 80159fe:	460c      	mov	r4, r1
 8015a00:	d458      	bmi.n	8015ab4 <__sflush_r+0xc0>
 8015a02:	684b      	ldr	r3, [r1, #4]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	dc05      	bgt.n	8015a14 <__sflush_r+0x20>
 8015a08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	dc02      	bgt.n	8015a14 <__sflush_r+0x20>
 8015a0e:	2000      	movs	r0, #0
 8015a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015a16:	2e00      	cmp	r6, #0
 8015a18:	d0f9      	beq.n	8015a0e <__sflush_r+0x1a>
 8015a1a:	2300      	movs	r3, #0
 8015a1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015a20:	682f      	ldr	r7, [r5, #0]
 8015a22:	6a21      	ldr	r1, [r4, #32]
 8015a24:	602b      	str	r3, [r5, #0]
 8015a26:	d032      	beq.n	8015a8e <__sflush_r+0x9a>
 8015a28:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015a2a:	89a3      	ldrh	r3, [r4, #12]
 8015a2c:	075a      	lsls	r2, r3, #29
 8015a2e:	d505      	bpl.n	8015a3c <__sflush_r+0x48>
 8015a30:	6863      	ldr	r3, [r4, #4]
 8015a32:	1ac0      	subs	r0, r0, r3
 8015a34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015a36:	b10b      	cbz	r3, 8015a3c <__sflush_r+0x48>
 8015a38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015a3a:	1ac0      	subs	r0, r0, r3
 8015a3c:	2300      	movs	r3, #0
 8015a3e:	4602      	mov	r2, r0
 8015a40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015a42:	6a21      	ldr	r1, [r4, #32]
 8015a44:	4628      	mov	r0, r5
 8015a46:	47b0      	blx	r6
 8015a48:	1c43      	adds	r3, r0, #1
 8015a4a:	89a3      	ldrh	r3, [r4, #12]
 8015a4c:	d106      	bne.n	8015a5c <__sflush_r+0x68>
 8015a4e:	6829      	ldr	r1, [r5, #0]
 8015a50:	291d      	cmp	r1, #29
 8015a52:	d82b      	bhi.n	8015aac <__sflush_r+0xb8>
 8015a54:	4a29      	ldr	r2, [pc, #164]	; (8015afc <__sflush_r+0x108>)
 8015a56:	410a      	asrs	r2, r1
 8015a58:	07d6      	lsls	r6, r2, #31
 8015a5a:	d427      	bmi.n	8015aac <__sflush_r+0xb8>
 8015a5c:	2200      	movs	r2, #0
 8015a5e:	6062      	str	r2, [r4, #4]
 8015a60:	04d9      	lsls	r1, r3, #19
 8015a62:	6922      	ldr	r2, [r4, #16]
 8015a64:	6022      	str	r2, [r4, #0]
 8015a66:	d504      	bpl.n	8015a72 <__sflush_r+0x7e>
 8015a68:	1c42      	adds	r2, r0, #1
 8015a6a:	d101      	bne.n	8015a70 <__sflush_r+0x7c>
 8015a6c:	682b      	ldr	r3, [r5, #0]
 8015a6e:	b903      	cbnz	r3, 8015a72 <__sflush_r+0x7e>
 8015a70:	6560      	str	r0, [r4, #84]	; 0x54
 8015a72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015a74:	602f      	str	r7, [r5, #0]
 8015a76:	2900      	cmp	r1, #0
 8015a78:	d0c9      	beq.n	8015a0e <__sflush_r+0x1a>
 8015a7a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015a7e:	4299      	cmp	r1, r3
 8015a80:	d002      	beq.n	8015a88 <__sflush_r+0x94>
 8015a82:	4628      	mov	r0, r5
 8015a84:	f7fe fbb2 	bl	80141ec <_free_r>
 8015a88:	2000      	movs	r0, #0
 8015a8a:	6360      	str	r0, [r4, #52]	; 0x34
 8015a8c:	e7c0      	b.n	8015a10 <__sflush_r+0x1c>
 8015a8e:	2301      	movs	r3, #1
 8015a90:	4628      	mov	r0, r5
 8015a92:	47b0      	blx	r6
 8015a94:	1c41      	adds	r1, r0, #1
 8015a96:	d1c8      	bne.n	8015a2a <__sflush_r+0x36>
 8015a98:	682b      	ldr	r3, [r5, #0]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d0c5      	beq.n	8015a2a <__sflush_r+0x36>
 8015a9e:	2b1d      	cmp	r3, #29
 8015aa0:	d001      	beq.n	8015aa6 <__sflush_r+0xb2>
 8015aa2:	2b16      	cmp	r3, #22
 8015aa4:	d101      	bne.n	8015aaa <__sflush_r+0xb6>
 8015aa6:	602f      	str	r7, [r5, #0]
 8015aa8:	e7b1      	b.n	8015a0e <__sflush_r+0x1a>
 8015aaa:	89a3      	ldrh	r3, [r4, #12]
 8015aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ab0:	81a3      	strh	r3, [r4, #12]
 8015ab2:	e7ad      	b.n	8015a10 <__sflush_r+0x1c>
 8015ab4:	690f      	ldr	r7, [r1, #16]
 8015ab6:	2f00      	cmp	r7, #0
 8015ab8:	d0a9      	beq.n	8015a0e <__sflush_r+0x1a>
 8015aba:	0793      	lsls	r3, r2, #30
 8015abc:	680e      	ldr	r6, [r1, #0]
 8015abe:	bf08      	it	eq
 8015ac0:	694b      	ldreq	r3, [r1, #20]
 8015ac2:	600f      	str	r7, [r1, #0]
 8015ac4:	bf18      	it	ne
 8015ac6:	2300      	movne	r3, #0
 8015ac8:	eba6 0807 	sub.w	r8, r6, r7
 8015acc:	608b      	str	r3, [r1, #8]
 8015ace:	f1b8 0f00 	cmp.w	r8, #0
 8015ad2:	dd9c      	ble.n	8015a0e <__sflush_r+0x1a>
 8015ad4:	6a21      	ldr	r1, [r4, #32]
 8015ad6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015ad8:	4643      	mov	r3, r8
 8015ada:	463a      	mov	r2, r7
 8015adc:	4628      	mov	r0, r5
 8015ade:	47b0      	blx	r6
 8015ae0:	2800      	cmp	r0, #0
 8015ae2:	dc06      	bgt.n	8015af2 <__sflush_r+0xfe>
 8015ae4:	89a3      	ldrh	r3, [r4, #12]
 8015ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015aea:	81a3      	strh	r3, [r4, #12]
 8015aec:	f04f 30ff 	mov.w	r0, #4294967295
 8015af0:	e78e      	b.n	8015a10 <__sflush_r+0x1c>
 8015af2:	4407      	add	r7, r0
 8015af4:	eba8 0800 	sub.w	r8, r8, r0
 8015af8:	e7e9      	b.n	8015ace <__sflush_r+0xda>
 8015afa:	bf00      	nop
 8015afc:	dfbffffe 	.word	0xdfbffffe

08015b00 <_fflush_r>:
 8015b00:	b538      	push	{r3, r4, r5, lr}
 8015b02:	690b      	ldr	r3, [r1, #16]
 8015b04:	4605      	mov	r5, r0
 8015b06:	460c      	mov	r4, r1
 8015b08:	b913      	cbnz	r3, 8015b10 <_fflush_r+0x10>
 8015b0a:	2500      	movs	r5, #0
 8015b0c:	4628      	mov	r0, r5
 8015b0e:	bd38      	pop	{r3, r4, r5, pc}
 8015b10:	b118      	cbz	r0, 8015b1a <_fflush_r+0x1a>
 8015b12:	6a03      	ldr	r3, [r0, #32]
 8015b14:	b90b      	cbnz	r3, 8015b1a <_fflush_r+0x1a>
 8015b16:	f7fe f9a5 	bl	8013e64 <__sinit>
 8015b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015b1e:	2b00      	cmp	r3, #0
 8015b20:	d0f3      	beq.n	8015b0a <_fflush_r+0xa>
 8015b22:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015b24:	07d0      	lsls	r0, r2, #31
 8015b26:	d404      	bmi.n	8015b32 <_fflush_r+0x32>
 8015b28:	0599      	lsls	r1, r3, #22
 8015b2a:	d402      	bmi.n	8015b32 <_fflush_r+0x32>
 8015b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b2e:	f7fe fb36 	bl	801419e <__retarget_lock_acquire_recursive>
 8015b32:	4628      	mov	r0, r5
 8015b34:	4621      	mov	r1, r4
 8015b36:	f7ff ff5d 	bl	80159f4 <__sflush_r>
 8015b3a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015b3c:	07da      	lsls	r2, r3, #31
 8015b3e:	4605      	mov	r5, r0
 8015b40:	d4e4      	bmi.n	8015b0c <_fflush_r+0xc>
 8015b42:	89a3      	ldrh	r3, [r4, #12]
 8015b44:	059b      	lsls	r3, r3, #22
 8015b46:	d4e1      	bmi.n	8015b0c <_fflush_r+0xc>
 8015b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015b4a:	f7fe fb29 	bl	80141a0 <__retarget_lock_release_recursive>
 8015b4e:	e7dd      	b.n	8015b0c <_fflush_r+0xc>

08015b50 <memmove>:
 8015b50:	4288      	cmp	r0, r1
 8015b52:	b510      	push	{r4, lr}
 8015b54:	eb01 0402 	add.w	r4, r1, r2
 8015b58:	d902      	bls.n	8015b60 <memmove+0x10>
 8015b5a:	4284      	cmp	r4, r0
 8015b5c:	4623      	mov	r3, r4
 8015b5e:	d807      	bhi.n	8015b70 <memmove+0x20>
 8015b60:	1e43      	subs	r3, r0, #1
 8015b62:	42a1      	cmp	r1, r4
 8015b64:	d008      	beq.n	8015b78 <memmove+0x28>
 8015b66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015b6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015b6e:	e7f8      	b.n	8015b62 <memmove+0x12>
 8015b70:	4402      	add	r2, r0
 8015b72:	4601      	mov	r1, r0
 8015b74:	428a      	cmp	r2, r1
 8015b76:	d100      	bne.n	8015b7a <memmove+0x2a>
 8015b78:	bd10      	pop	{r4, pc}
 8015b7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015b7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015b82:	e7f7      	b.n	8015b74 <memmove+0x24>

08015b84 <_sbrk_r>:
 8015b84:	b538      	push	{r3, r4, r5, lr}
 8015b86:	4d06      	ldr	r5, [pc, #24]	; (8015ba0 <_sbrk_r+0x1c>)
 8015b88:	2300      	movs	r3, #0
 8015b8a:	4604      	mov	r4, r0
 8015b8c:	4608      	mov	r0, r1
 8015b8e:	602b      	str	r3, [r5, #0]
 8015b90:	f7f5 fe00 	bl	800b794 <_sbrk>
 8015b94:	1c43      	adds	r3, r0, #1
 8015b96:	d102      	bne.n	8015b9e <_sbrk_r+0x1a>
 8015b98:	682b      	ldr	r3, [r5, #0]
 8015b9a:	b103      	cbz	r3, 8015b9e <_sbrk_r+0x1a>
 8015b9c:	6023      	str	r3, [r4, #0]
 8015b9e:	bd38      	pop	{r3, r4, r5, pc}
 8015ba0:	20008a00 	.word	0x20008a00

08015ba4 <__assert_func>:
 8015ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015ba6:	4614      	mov	r4, r2
 8015ba8:	461a      	mov	r2, r3
 8015baa:	4b09      	ldr	r3, [pc, #36]	; (8015bd0 <__assert_func+0x2c>)
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	4605      	mov	r5, r0
 8015bb0:	68d8      	ldr	r0, [r3, #12]
 8015bb2:	b14c      	cbz	r4, 8015bc8 <__assert_func+0x24>
 8015bb4:	4b07      	ldr	r3, [pc, #28]	; (8015bd4 <__assert_func+0x30>)
 8015bb6:	9100      	str	r1, [sp, #0]
 8015bb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015bbc:	4906      	ldr	r1, [pc, #24]	; (8015bd8 <__assert_func+0x34>)
 8015bbe:	462b      	mov	r3, r5
 8015bc0:	f000 f85c 	bl	8015c7c <fiprintf>
 8015bc4:	f000 f86c 	bl	8015ca0 <abort>
 8015bc8:	4b04      	ldr	r3, [pc, #16]	; (8015bdc <__assert_func+0x38>)
 8015bca:	461c      	mov	r4, r3
 8015bcc:	e7f3      	b.n	8015bb6 <__assert_func+0x12>
 8015bce:	bf00      	nop
 8015bd0:	200003c4 	.word	0x200003c4
 8015bd4:	08022fa7 	.word	0x08022fa7
 8015bd8:	08022fb4 	.word	0x08022fb4
 8015bdc:	08022fe2 	.word	0x08022fe2

08015be0 <_calloc_r>:
 8015be0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015be2:	fba1 2402 	umull	r2, r4, r1, r2
 8015be6:	b94c      	cbnz	r4, 8015bfc <_calloc_r+0x1c>
 8015be8:	4611      	mov	r1, r2
 8015bea:	9201      	str	r2, [sp, #4]
 8015bec:	f7fe fec2 	bl	8014974 <_malloc_r>
 8015bf0:	9a01      	ldr	r2, [sp, #4]
 8015bf2:	4605      	mov	r5, r0
 8015bf4:	b930      	cbnz	r0, 8015c04 <_calloc_r+0x24>
 8015bf6:	4628      	mov	r0, r5
 8015bf8:	b003      	add	sp, #12
 8015bfa:	bd30      	pop	{r4, r5, pc}
 8015bfc:	220c      	movs	r2, #12
 8015bfe:	6002      	str	r2, [r0, #0]
 8015c00:	2500      	movs	r5, #0
 8015c02:	e7f8      	b.n	8015bf6 <_calloc_r+0x16>
 8015c04:	4621      	mov	r1, r4
 8015c06:	f7fe fa13 	bl	8014030 <memset>
 8015c0a:	e7f4      	b.n	8015bf6 <_calloc_r+0x16>

08015c0c <malloc>:
 8015c0c:	4b02      	ldr	r3, [pc, #8]	; (8015c18 <malloc+0xc>)
 8015c0e:	4601      	mov	r1, r0
 8015c10:	6818      	ldr	r0, [r3, #0]
 8015c12:	f7fe beaf 	b.w	8014974 <_malloc_r>
 8015c16:	bf00      	nop
 8015c18:	200003c4 	.word	0x200003c4

08015c1c <_realloc_r>:
 8015c1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c20:	4680      	mov	r8, r0
 8015c22:	4614      	mov	r4, r2
 8015c24:	460e      	mov	r6, r1
 8015c26:	b921      	cbnz	r1, 8015c32 <_realloc_r+0x16>
 8015c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015c2c:	4611      	mov	r1, r2
 8015c2e:	f7fe bea1 	b.w	8014974 <_malloc_r>
 8015c32:	b92a      	cbnz	r2, 8015c40 <_realloc_r+0x24>
 8015c34:	f7fe fada 	bl	80141ec <_free_r>
 8015c38:	4625      	mov	r5, r4
 8015c3a:	4628      	mov	r0, r5
 8015c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c40:	f000 f835 	bl	8015cae <_malloc_usable_size_r>
 8015c44:	4284      	cmp	r4, r0
 8015c46:	4607      	mov	r7, r0
 8015c48:	d802      	bhi.n	8015c50 <_realloc_r+0x34>
 8015c4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015c4e:	d812      	bhi.n	8015c76 <_realloc_r+0x5a>
 8015c50:	4621      	mov	r1, r4
 8015c52:	4640      	mov	r0, r8
 8015c54:	f7fe fe8e 	bl	8014974 <_malloc_r>
 8015c58:	4605      	mov	r5, r0
 8015c5a:	2800      	cmp	r0, #0
 8015c5c:	d0ed      	beq.n	8015c3a <_realloc_r+0x1e>
 8015c5e:	42bc      	cmp	r4, r7
 8015c60:	4622      	mov	r2, r4
 8015c62:	4631      	mov	r1, r6
 8015c64:	bf28      	it	cs
 8015c66:	463a      	movcs	r2, r7
 8015c68:	f7fe faa3 	bl	80141b2 <memcpy>
 8015c6c:	4631      	mov	r1, r6
 8015c6e:	4640      	mov	r0, r8
 8015c70:	f7fe fabc 	bl	80141ec <_free_r>
 8015c74:	e7e1      	b.n	8015c3a <_realloc_r+0x1e>
 8015c76:	4635      	mov	r5, r6
 8015c78:	e7df      	b.n	8015c3a <_realloc_r+0x1e>
	...

08015c7c <fiprintf>:
 8015c7c:	b40e      	push	{r1, r2, r3}
 8015c7e:	b503      	push	{r0, r1, lr}
 8015c80:	4601      	mov	r1, r0
 8015c82:	ab03      	add	r3, sp, #12
 8015c84:	4805      	ldr	r0, [pc, #20]	; (8015c9c <fiprintf+0x20>)
 8015c86:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c8a:	6800      	ldr	r0, [r0, #0]
 8015c8c:	9301      	str	r3, [sp, #4]
 8015c8e:	f000 f83f 	bl	8015d10 <_vfiprintf_r>
 8015c92:	b002      	add	sp, #8
 8015c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8015c98:	b003      	add	sp, #12
 8015c9a:	4770      	bx	lr
 8015c9c:	200003c4 	.word	0x200003c4

08015ca0 <abort>:
 8015ca0:	b508      	push	{r3, lr}
 8015ca2:	2006      	movs	r0, #6
 8015ca4:	f000 fa0c 	bl	80160c0 <raise>
 8015ca8:	2001      	movs	r0, #1
 8015caa:	f7f5 fcfc 	bl	800b6a6 <_exit>

08015cae <_malloc_usable_size_r>:
 8015cae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015cb2:	1f18      	subs	r0, r3, #4
 8015cb4:	2b00      	cmp	r3, #0
 8015cb6:	bfbc      	itt	lt
 8015cb8:	580b      	ldrlt	r3, [r1, r0]
 8015cba:	18c0      	addlt	r0, r0, r3
 8015cbc:	4770      	bx	lr

08015cbe <__sfputc_r>:
 8015cbe:	6893      	ldr	r3, [r2, #8]
 8015cc0:	3b01      	subs	r3, #1
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	b410      	push	{r4}
 8015cc6:	6093      	str	r3, [r2, #8]
 8015cc8:	da08      	bge.n	8015cdc <__sfputc_r+0x1e>
 8015cca:	6994      	ldr	r4, [r2, #24]
 8015ccc:	42a3      	cmp	r3, r4
 8015cce:	db01      	blt.n	8015cd4 <__sfputc_r+0x16>
 8015cd0:	290a      	cmp	r1, #10
 8015cd2:	d103      	bne.n	8015cdc <__sfputc_r+0x1e>
 8015cd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cd8:	f000 b934 	b.w	8015f44 <__swbuf_r>
 8015cdc:	6813      	ldr	r3, [r2, #0]
 8015cde:	1c58      	adds	r0, r3, #1
 8015ce0:	6010      	str	r0, [r2, #0]
 8015ce2:	7019      	strb	r1, [r3, #0]
 8015ce4:	4608      	mov	r0, r1
 8015ce6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015cea:	4770      	bx	lr

08015cec <__sfputs_r>:
 8015cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015cee:	4606      	mov	r6, r0
 8015cf0:	460f      	mov	r7, r1
 8015cf2:	4614      	mov	r4, r2
 8015cf4:	18d5      	adds	r5, r2, r3
 8015cf6:	42ac      	cmp	r4, r5
 8015cf8:	d101      	bne.n	8015cfe <__sfputs_r+0x12>
 8015cfa:	2000      	movs	r0, #0
 8015cfc:	e007      	b.n	8015d0e <__sfputs_r+0x22>
 8015cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015d02:	463a      	mov	r2, r7
 8015d04:	4630      	mov	r0, r6
 8015d06:	f7ff ffda 	bl	8015cbe <__sfputc_r>
 8015d0a:	1c43      	adds	r3, r0, #1
 8015d0c:	d1f3      	bne.n	8015cf6 <__sfputs_r+0xa>
 8015d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08015d10 <_vfiprintf_r>:
 8015d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d14:	460d      	mov	r5, r1
 8015d16:	b09d      	sub	sp, #116	; 0x74
 8015d18:	4614      	mov	r4, r2
 8015d1a:	4698      	mov	r8, r3
 8015d1c:	4606      	mov	r6, r0
 8015d1e:	b118      	cbz	r0, 8015d28 <_vfiprintf_r+0x18>
 8015d20:	6a03      	ldr	r3, [r0, #32]
 8015d22:	b90b      	cbnz	r3, 8015d28 <_vfiprintf_r+0x18>
 8015d24:	f7fe f89e 	bl	8013e64 <__sinit>
 8015d28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d2a:	07d9      	lsls	r1, r3, #31
 8015d2c:	d405      	bmi.n	8015d3a <_vfiprintf_r+0x2a>
 8015d2e:	89ab      	ldrh	r3, [r5, #12]
 8015d30:	059a      	lsls	r2, r3, #22
 8015d32:	d402      	bmi.n	8015d3a <_vfiprintf_r+0x2a>
 8015d34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d36:	f7fe fa32 	bl	801419e <__retarget_lock_acquire_recursive>
 8015d3a:	89ab      	ldrh	r3, [r5, #12]
 8015d3c:	071b      	lsls	r3, r3, #28
 8015d3e:	d501      	bpl.n	8015d44 <_vfiprintf_r+0x34>
 8015d40:	692b      	ldr	r3, [r5, #16]
 8015d42:	b99b      	cbnz	r3, 8015d6c <_vfiprintf_r+0x5c>
 8015d44:	4629      	mov	r1, r5
 8015d46:	4630      	mov	r0, r6
 8015d48:	f000 f93a 	bl	8015fc0 <__swsetup_r>
 8015d4c:	b170      	cbz	r0, 8015d6c <_vfiprintf_r+0x5c>
 8015d4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015d50:	07dc      	lsls	r4, r3, #31
 8015d52:	d504      	bpl.n	8015d5e <_vfiprintf_r+0x4e>
 8015d54:	f04f 30ff 	mov.w	r0, #4294967295
 8015d58:	b01d      	add	sp, #116	; 0x74
 8015d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015d5e:	89ab      	ldrh	r3, [r5, #12]
 8015d60:	0598      	lsls	r0, r3, #22
 8015d62:	d4f7      	bmi.n	8015d54 <_vfiprintf_r+0x44>
 8015d64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015d66:	f7fe fa1b 	bl	80141a0 <__retarget_lock_release_recursive>
 8015d6a:	e7f3      	b.n	8015d54 <_vfiprintf_r+0x44>
 8015d6c:	2300      	movs	r3, #0
 8015d6e:	9309      	str	r3, [sp, #36]	; 0x24
 8015d70:	2320      	movs	r3, #32
 8015d72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015d76:	f8cd 800c 	str.w	r8, [sp, #12]
 8015d7a:	2330      	movs	r3, #48	; 0x30
 8015d7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8015f30 <_vfiprintf_r+0x220>
 8015d80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015d84:	f04f 0901 	mov.w	r9, #1
 8015d88:	4623      	mov	r3, r4
 8015d8a:	469a      	mov	sl, r3
 8015d8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015d90:	b10a      	cbz	r2, 8015d96 <_vfiprintf_r+0x86>
 8015d92:	2a25      	cmp	r2, #37	; 0x25
 8015d94:	d1f9      	bne.n	8015d8a <_vfiprintf_r+0x7a>
 8015d96:	ebba 0b04 	subs.w	fp, sl, r4
 8015d9a:	d00b      	beq.n	8015db4 <_vfiprintf_r+0xa4>
 8015d9c:	465b      	mov	r3, fp
 8015d9e:	4622      	mov	r2, r4
 8015da0:	4629      	mov	r1, r5
 8015da2:	4630      	mov	r0, r6
 8015da4:	f7ff ffa2 	bl	8015cec <__sfputs_r>
 8015da8:	3001      	adds	r0, #1
 8015daa:	f000 80a9 	beq.w	8015f00 <_vfiprintf_r+0x1f0>
 8015dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015db0:	445a      	add	r2, fp
 8015db2:	9209      	str	r2, [sp, #36]	; 0x24
 8015db4:	f89a 3000 	ldrb.w	r3, [sl]
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	f000 80a1 	beq.w	8015f00 <_vfiprintf_r+0x1f0>
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8015dc4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015dc8:	f10a 0a01 	add.w	sl, sl, #1
 8015dcc:	9304      	str	r3, [sp, #16]
 8015dce:	9307      	str	r3, [sp, #28]
 8015dd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015dd4:	931a      	str	r3, [sp, #104]	; 0x68
 8015dd6:	4654      	mov	r4, sl
 8015dd8:	2205      	movs	r2, #5
 8015dda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015dde:	4854      	ldr	r0, [pc, #336]	; (8015f30 <_vfiprintf_r+0x220>)
 8015de0:	f7ea fa2e 	bl	8000240 <memchr>
 8015de4:	9a04      	ldr	r2, [sp, #16]
 8015de6:	b9d8      	cbnz	r0, 8015e20 <_vfiprintf_r+0x110>
 8015de8:	06d1      	lsls	r1, r2, #27
 8015dea:	bf44      	itt	mi
 8015dec:	2320      	movmi	r3, #32
 8015dee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015df2:	0713      	lsls	r3, r2, #28
 8015df4:	bf44      	itt	mi
 8015df6:	232b      	movmi	r3, #43	; 0x2b
 8015df8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8015e00:	2b2a      	cmp	r3, #42	; 0x2a
 8015e02:	d015      	beq.n	8015e30 <_vfiprintf_r+0x120>
 8015e04:	9a07      	ldr	r2, [sp, #28]
 8015e06:	4654      	mov	r4, sl
 8015e08:	2000      	movs	r0, #0
 8015e0a:	f04f 0c0a 	mov.w	ip, #10
 8015e0e:	4621      	mov	r1, r4
 8015e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015e14:	3b30      	subs	r3, #48	; 0x30
 8015e16:	2b09      	cmp	r3, #9
 8015e18:	d94d      	bls.n	8015eb6 <_vfiprintf_r+0x1a6>
 8015e1a:	b1b0      	cbz	r0, 8015e4a <_vfiprintf_r+0x13a>
 8015e1c:	9207      	str	r2, [sp, #28]
 8015e1e:	e014      	b.n	8015e4a <_vfiprintf_r+0x13a>
 8015e20:	eba0 0308 	sub.w	r3, r0, r8
 8015e24:	fa09 f303 	lsl.w	r3, r9, r3
 8015e28:	4313      	orrs	r3, r2
 8015e2a:	9304      	str	r3, [sp, #16]
 8015e2c:	46a2      	mov	sl, r4
 8015e2e:	e7d2      	b.n	8015dd6 <_vfiprintf_r+0xc6>
 8015e30:	9b03      	ldr	r3, [sp, #12]
 8015e32:	1d19      	adds	r1, r3, #4
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	9103      	str	r1, [sp, #12]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	bfbb      	ittet	lt
 8015e3c:	425b      	neglt	r3, r3
 8015e3e:	f042 0202 	orrlt.w	r2, r2, #2
 8015e42:	9307      	strge	r3, [sp, #28]
 8015e44:	9307      	strlt	r3, [sp, #28]
 8015e46:	bfb8      	it	lt
 8015e48:	9204      	strlt	r2, [sp, #16]
 8015e4a:	7823      	ldrb	r3, [r4, #0]
 8015e4c:	2b2e      	cmp	r3, #46	; 0x2e
 8015e4e:	d10c      	bne.n	8015e6a <_vfiprintf_r+0x15a>
 8015e50:	7863      	ldrb	r3, [r4, #1]
 8015e52:	2b2a      	cmp	r3, #42	; 0x2a
 8015e54:	d134      	bne.n	8015ec0 <_vfiprintf_r+0x1b0>
 8015e56:	9b03      	ldr	r3, [sp, #12]
 8015e58:	1d1a      	adds	r2, r3, #4
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	9203      	str	r2, [sp, #12]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	bfb8      	it	lt
 8015e62:	f04f 33ff 	movlt.w	r3, #4294967295
 8015e66:	3402      	adds	r4, #2
 8015e68:	9305      	str	r3, [sp, #20]
 8015e6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8015f40 <_vfiprintf_r+0x230>
 8015e6e:	7821      	ldrb	r1, [r4, #0]
 8015e70:	2203      	movs	r2, #3
 8015e72:	4650      	mov	r0, sl
 8015e74:	f7ea f9e4 	bl	8000240 <memchr>
 8015e78:	b138      	cbz	r0, 8015e8a <_vfiprintf_r+0x17a>
 8015e7a:	9b04      	ldr	r3, [sp, #16]
 8015e7c:	eba0 000a 	sub.w	r0, r0, sl
 8015e80:	2240      	movs	r2, #64	; 0x40
 8015e82:	4082      	lsls	r2, r0
 8015e84:	4313      	orrs	r3, r2
 8015e86:	3401      	adds	r4, #1
 8015e88:	9304      	str	r3, [sp, #16]
 8015e8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015e8e:	4829      	ldr	r0, [pc, #164]	; (8015f34 <_vfiprintf_r+0x224>)
 8015e90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015e94:	2206      	movs	r2, #6
 8015e96:	f7ea f9d3 	bl	8000240 <memchr>
 8015e9a:	2800      	cmp	r0, #0
 8015e9c:	d03f      	beq.n	8015f1e <_vfiprintf_r+0x20e>
 8015e9e:	4b26      	ldr	r3, [pc, #152]	; (8015f38 <_vfiprintf_r+0x228>)
 8015ea0:	bb1b      	cbnz	r3, 8015eea <_vfiprintf_r+0x1da>
 8015ea2:	9b03      	ldr	r3, [sp, #12]
 8015ea4:	3307      	adds	r3, #7
 8015ea6:	f023 0307 	bic.w	r3, r3, #7
 8015eaa:	3308      	adds	r3, #8
 8015eac:	9303      	str	r3, [sp, #12]
 8015eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015eb0:	443b      	add	r3, r7
 8015eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8015eb4:	e768      	b.n	8015d88 <_vfiprintf_r+0x78>
 8015eb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8015eba:	460c      	mov	r4, r1
 8015ebc:	2001      	movs	r0, #1
 8015ebe:	e7a6      	b.n	8015e0e <_vfiprintf_r+0xfe>
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	3401      	adds	r4, #1
 8015ec4:	9305      	str	r3, [sp, #20]
 8015ec6:	4619      	mov	r1, r3
 8015ec8:	f04f 0c0a 	mov.w	ip, #10
 8015ecc:	4620      	mov	r0, r4
 8015ece:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015ed2:	3a30      	subs	r2, #48	; 0x30
 8015ed4:	2a09      	cmp	r2, #9
 8015ed6:	d903      	bls.n	8015ee0 <_vfiprintf_r+0x1d0>
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d0c6      	beq.n	8015e6a <_vfiprintf_r+0x15a>
 8015edc:	9105      	str	r1, [sp, #20]
 8015ede:	e7c4      	b.n	8015e6a <_vfiprintf_r+0x15a>
 8015ee0:	fb0c 2101 	mla	r1, ip, r1, r2
 8015ee4:	4604      	mov	r4, r0
 8015ee6:	2301      	movs	r3, #1
 8015ee8:	e7f0      	b.n	8015ecc <_vfiprintf_r+0x1bc>
 8015eea:	ab03      	add	r3, sp, #12
 8015eec:	9300      	str	r3, [sp, #0]
 8015eee:	462a      	mov	r2, r5
 8015ef0:	4b12      	ldr	r3, [pc, #72]	; (8015f3c <_vfiprintf_r+0x22c>)
 8015ef2:	a904      	add	r1, sp, #16
 8015ef4:	4630      	mov	r0, r6
 8015ef6:	f3af 8000 	nop.w
 8015efa:	4607      	mov	r7, r0
 8015efc:	1c78      	adds	r0, r7, #1
 8015efe:	d1d6      	bne.n	8015eae <_vfiprintf_r+0x19e>
 8015f00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015f02:	07d9      	lsls	r1, r3, #31
 8015f04:	d405      	bmi.n	8015f12 <_vfiprintf_r+0x202>
 8015f06:	89ab      	ldrh	r3, [r5, #12]
 8015f08:	059a      	lsls	r2, r3, #22
 8015f0a:	d402      	bmi.n	8015f12 <_vfiprintf_r+0x202>
 8015f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015f0e:	f7fe f947 	bl	80141a0 <__retarget_lock_release_recursive>
 8015f12:	89ab      	ldrh	r3, [r5, #12]
 8015f14:	065b      	lsls	r3, r3, #25
 8015f16:	f53f af1d 	bmi.w	8015d54 <_vfiprintf_r+0x44>
 8015f1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015f1c:	e71c      	b.n	8015d58 <_vfiprintf_r+0x48>
 8015f1e:	ab03      	add	r3, sp, #12
 8015f20:	9300      	str	r3, [sp, #0]
 8015f22:	462a      	mov	r2, r5
 8015f24:	4b05      	ldr	r3, [pc, #20]	; (8015f3c <_vfiprintf_r+0x22c>)
 8015f26:	a904      	add	r1, sp, #16
 8015f28:	4630      	mov	r0, r6
 8015f2a:	f7ff fc41 	bl	80157b0 <_printf_i>
 8015f2e:	e7e4      	b.n	8015efa <_vfiprintf_r+0x1ea>
 8015f30:	08022f74 	.word	0x08022f74
 8015f34:	08022f7e 	.word	0x08022f7e
 8015f38:	00000000 	.word	0x00000000
 8015f3c:	08015ced 	.word	0x08015ced
 8015f40:	08022f7a 	.word	0x08022f7a

08015f44 <__swbuf_r>:
 8015f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f46:	460e      	mov	r6, r1
 8015f48:	4614      	mov	r4, r2
 8015f4a:	4605      	mov	r5, r0
 8015f4c:	b118      	cbz	r0, 8015f56 <__swbuf_r+0x12>
 8015f4e:	6a03      	ldr	r3, [r0, #32]
 8015f50:	b90b      	cbnz	r3, 8015f56 <__swbuf_r+0x12>
 8015f52:	f7fd ff87 	bl	8013e64 <__sinit>
 8015f56:	69a3      	ldr	r3, [r4, #24]
 8015f58:	60a3      	str	r3, [r4, #8]
 8015f5a:	89a3      	ldrh	r3, [r4, #12]
 8015f5c:	071a      	lsls	r2, r3, #28
 8015f5e:	d525      	bpl.n	8015fac <__swbuf_r+0x68>
 8015f60:	6923      	ldr	r3, [r4, #16]
 8015f62:	b31b      	cbz	r3, 8015fac <__swbuf_r+0x68>
 8015f64:	6823      	ldr	r3, [r4, #0]
 8015f66:	6922      	ldr	r2, [r4, #16]
 8015f68:	1a98      	subs	r0, r3, r2
 8015f6a:	6963      	ldr	r3, [r4, #20]
 8015f6c:	b2f6      	uxtb	r6, r6
 8015f6e:	4283      	cmp	r3, r0
 8015f70:	4637      	mov	r7, r6
 8015f72:	dc04      	bgt.n	8015f7e <__swbuf_r+0x3a>
 8015f74:	4621      	mov	r1, r4
 8015f76:	4628      	mov	r0, r5
 8015f78:	f7ff fdc2 	bl	8015b00 <_fflush_r>
 8015f7c:	b9e0      	cbnz	r0, 8015fb8 <__swbuf_r+0x74>
 8015f7e:	68a3      	ldr	r3, [r4, #8]
 8015f80:	3b01      	subs	r3, #1
 8015f82:	60a3      	str	r3, [r4, #8]
 8015f84:	6823      	ldr	r3, [r4, #0]
 8015f86:	1c5a      	adds	r2, r3, #1
 8015f88:	6022      	str	r2, [r4, #0]
 8015f8a:	701e      	strb	r6, [r3, #0]
 8015f8c:	6962      	ldr	r2, [r4, #20]
 8015f8e:	1c43      	adds	r3, r0, #1
 8015f90:	429a      	cmp	r2, r3
 8015f92:	d004      	beq.n	8015f9e <__swbuf_r+0x5a>
 8015f94:	89a3      	ldrh	r3, [r4, #12]
 8015f96:	07db      	lsls	r3, r3, #31
 8015f98:	d506      	bpl.n	8015fa8 <__swbuf_r+0x64>
 8015f9a:	2e0a      	cmp	r6, #10
 8015f9c:	d104      	bne.n	8015fa8 <__swbuf_r+0x64>
 8015f9e:	4621      	mov	r1, r4
 8015fa0:	4628      	mov	r0, r5
 8015fa2:	f7ff fdad 	bl	8015b00 <_fflush_r>
 8015fa6:	b938      	cbnz	r0, 8015fb8 <__swbuf_r+0x74>
 8015fa8:	4638      	mov	r0, r7
 8015faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015fac:	4621      	mov	r1, r4
 8015fae:	4628      	mov	r0, r5
 8015fb0:	f000 f806 	bl	8015fc0 <__swsetup_r>
 8015fb4:	2800      	cmp	r0, #0
 8015fb6:	d0d5      	beq.n	8015f64 <__swbuf_r+0x20>
 8015fb8:	f04f 37ff 	mov.w	r7, #4294967295
 8015fbc:	e7f4      	b.n	8015fa8 <__swbuf_r+0x64>
	...

08015fc0 <__swsetup_r>:
 8015fc0:	b538      	push	{r3, r4, r5, lr}
 8015fc2:	4b2a      	ldr	r3, [pc, #168]	; (801606c <__swsetup_r+0xac>)
 8015fc4:	4605      	mov	r5, r0
 8015fc6:	6818      	ldr	r0, [r3, #0]
 8015fc8:	460c      	mov	r4, r1
 8015fca:	b118      	cbz	r0, 8015fd4 <__swsetup_r+0x14>
 8015fcc:	6a03      	ldr	r3, [r0, #32]
 8015fce:	b90b      	cbnz	r3, 8015fd4 <__swsetup_r+0x14>
 8015fd0:	f7fd ff48 	bl	8013e64 <__sinit>
 8015fd4:	89a3      	ldrh	r3, [r4, #12]
 8015fd6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015fda:	0718      	lsls	r0, r3, #28
 8015fdc:	d422      	bmi.n	8016024 <__swsetup_r+0x64>
 8015fde:	06d9      	lsls	r1, r3, #27
 8015fe0:	d407      	bmi.n	8015ff2 <__swsetup_r+0x32>
 8015fe2:	2309      	movs	r3, #9
 8015fe4:	602b      	str	r3, [r5, #0]
 8015fe6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015fea:	81a3      	strh	r3, [r4, #12]
 8015fec:	f04f 30ff 	mov.w	r0, #4294967295
 8015ff0:	e034      	b.n	801605c <__swsetup_r+0x9c>
 8015ff2:	0758      	lsls	r0, r3, #29
 8015ff4:	d512      	bpl.n	801601c <__swsetup_r+0x5c>
 8015ff6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015ff8:	b141      	cbz	r1, 801600c <__swsetup_r+0x4c>
 8015ffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015ffe:	4299      	cmp	r1, r3
 8016000:	d002      	beq.n	8016008 <__swsetup_r+0x48>
 8016002:	4628      	mov	r0, r5
 8016004:	f7fe f8f2 	bl	80141ec <_free_r>
 8016008:	2300      	movs	r3, #0
 801600a:	6363      	str	r3, [r4, #52]	; 0x34
 801600c:	89a3      	ldrh	r3, [r4, #12]
 801600e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8016012:	81a3      	strh	r3, [r4, #12]
 8016014:	2300      	movs	r3, #0
 8016016:	6063      	str	r3, [r4, #4]
 8016018:	6923      	ldr	r3, [r4, #16]
 801601a:	6023      	str	r3, [r4, #0]
 801601c:	89a3      	ldrh	r3, [r4, #12]
 801601e:	f043 0308 	orr.w	r3, r3, #8
 8016022:	81a3      	strh	r3, [r4, #12]
 8016024:	6923      	ldr	r3, [r4, #16]
 8016026:	b94b      	cbnz	r3, 801603c <__swsetup_r+0x7c>
 8016028:	89a3      	ldrh	r3, [r4, #12]
 801602a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801602e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016032:	d003      	beq.n	801603c <__swsetup_r+0x7c>
 8016034:	4621      	mov	r1, r4
 8016036:	4628      	mov	r0, r5
 8016038:	f000 f884 	bl	8016144 <__smakebuf_r>
 801603c:	89a0      	ldrh	r0, [r4, #12]
 801603e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016042:	f010 0301 	ands.w	r3, r0, #1
 8016046:	d00a      	beq.n	801605e <__swsetup_r+0x9e>
 8016048:	2300      	movs	r3, #0
 801604a:	60a3      	str	r3, [r4, #8]
 801604c:	6963      	ldr	r3, [r4, #20]
 801604e:	425b      	negs	r3, r3
 8016050:	61a3      	str	r3, [r4, #24]
 8016052:	6923      	ldr	r3, [r4, #16]
 8016054:	b943      	cbnz	r3, 8016068 <__swsetup_r+0xa8>
 8016056:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801605a:	d1c4      	bne.n	8015fe6 <__swsetup_r+0x26>
 801605c:	bd38      	pop	{r3, r4, r5, pc}
 801605e:	0781      	lsls	r1, r0, #30
 8016060:	bf58      	it	pl
 8016062:	6963      	ldrpl	r3, [r4, #20]
 8016064:	60a3      	str	r3, [r4, #8]
 8016066:	e7f4      	b.n	8016052 <__swsetup_r+0x92>
 8016068:	2000      	movs	r0, #0
 801606a:	e7f7      	b.n	801605c <__swsetup_r+0x9c>
 801606c:	200003c4 	.word	0x200003c4

08016070 <_raise_r>:
 8016070:	291f      	cmp	r1, #31
 8016072:	b538      	push	{r3, r4, r5, lr}
 8016074:	4604      	mov	r4, r0
 8016076:	460d      	mov	r5, r1
 8016078:	d904      	bls.n	8016084 <_raise_r+0x14>
 801607a:	2316      	movs	r3, #22
 801607c:	6003      	str	r3, [r0, #0]
 801607e:	f04f 30ff 	mov.w	r0, #4294967295
 8016082:	bd38      	pop	{r3, r4, r5, pc}
 8016084:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016086:	b112      	cbz	r2, 801608e <_raise_r+0x1e>
 8016088:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801608c:	b94b      	cbnz	r3, 80160a2 <_raise_r+0x32>
 801608e:	4620      	mov	r0, r4
 8016090:	f000 f830 	bl	80160f4 <_getpid_r>
 8016094:	462a      	mov	r2, r5
 8016096:	4601      	mov	r1, r0
 8016098:	4620      	mov	r0, r4
 801609a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801609e:	f000 b817 	b.w	80160d0 <_kill_r>
 80160a2:	2b01      	cmp	r3, #1
 80160a4:	d00a      	beq.n	80160bc <_raise_r+0x4c>
 80160a6:	1c59      	adds	r1, r3, #1
 80160a8:	d103      	bne.n	80160b2 <_raise_r+0x42>
 80160aa:	2316      	movs	r3, #22
 80160ac:	6003      	str	r3, [r0, #0]
 80160ae:	2001      	movs	r0, #1
 80160b0:	e7e7      	b.n	8016082 <_raise_r+0x12>
 80160b2:	2400      	movs	r4, #0
 80160b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80160b8:	4628      	mov	r0, r5
 80160ba:	4798      	blx	r3
 80160bc:	2000      	movs	r0, #0
 80160be:	e7e0      	b.n	8016082 <_raise_r+0x12>

080160c0 <raise>:
 80160c0:	4b02      	ldr	r3, [pc, #8]	; (80160cc <raise+0xc>)
 80160c2:	4601      	mov	r1, r0
 80160c4:	6818      	ldr	r0, [r3, #0]
 80160c6:	f7ff bfd3 	b.w	8016070 <_raise_r>
 80160ca:	bf00      	nop
 80160cc:	200003c4 	.word	0x200003c4

080160d0 <_kill_r>:
 80160d0:	b538      	push	{r3, r4, r5, lr}
 80160d2:	4d07      	ldr	r5, [pc, #28]	; (80160f0 <_kill_r+0x20>)
 80160d4:	2300      	movs	r3, #0
 80160d6:	4604      	mov	r4, r0
 80160d8:	4608      	mov	r0, r1
 80160da:	4611      	mov	r1, r2
 80160dc:	602b      	str	r3, [r5, #0]
 80160de:	f7f5 fad2 	bl	800b686 <_kill>
 80160e2:	1c43      	adds	r3, r0, #1
 80160e4:	d102      	bne.n	80160ec <_kill_r+0x1c>
 80160e6:	682b      	ldr	r3, [r5, #0]
 80160e8:	b103      	cbz	r3, 80160ec <_kill_r+0x1c>
 80160ea:	6023      	str	r3, [r4, #0]
 80160ec:	bd38      	pop	{r3, r4, r5, pc}
 80160ee:	bf00      	nop
 80160f0:	20008a00 	.word	0x20008a00

080160f4 <_getpid_r>:
 80160f4:	f7f5 babf 	b.w	800b676 <_getpid>

080160f8 <__swhatbuf_r>:
 80160f8:	b570      	push	{r4, r5, r6, lr}
 80160fa:	460c      	mov	r4, r1
 80160fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016100:	2900      	cmp	r1, #0
 8016102:	b096      	sub	sp, #88	; 0x58
 8016104:	4615      	mov	r5, r2
 8016106:	461e      	mov	r6, r3
 8016108:	da0d      	bge.n	8016126 <__swhatbuf_r+0x2e>
 801610a:	89a3      	ldrh	r3, [r4, #12]
 801610c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8016110:	f04f 0100 	mov.w	r1, #0
 8016114:	bf0c      	ite	eq
 8016116:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801611a:	2340      	movne	r3, #64	; 0x40
 801611c:	2000      	movs	r0, #0
 801611e:	6031      	str	r1, [r6, #0]
 8016120:	602b      	str	r3, [r5, #0]
 8016122:	b016      	add	sp, #88	; 0x58
 8016124:	bd70      	pop	{r4, r5, r6, pc}
 8016126:	466a      	mov	r2, sp
 8016128:	f000 f848 	bl	80161bc <_fstat_r>
 801612c:	2800      	cmp	r0, #0
 801612e:	dbec      	blt.n	801610a <__swhatbuf_r+0x12>
 8016130:	9901      	ldr	r1, [sp, #4]
 8016132:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016136:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801613a:	4259      	negs	r1, r3
 801613c:	4159      	adcs	r1, r3
 801613e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016142:	e7eb      	b.n	801611c <__swhatbuf_r+0x24>

08016144 <__smakebuf_r>:
 8016144:	898b      	ldrh	r3, [r1, #12]
 8016146:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016148:	079d      	lsls	r5, r3, #30
 801614a:	4606      	mov	r6, r0
 801614c:	460c      	mov	r4, r1
 801614e:	d507      	bpl.n	8016160 <__smakebuf_r+0x1c>
 8016150:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016154:	6023      	str	r3, [r4, #0]
 8016156:	6123      	str	r3, [r4, #16]
 8016158:	2301      	movs	r3, #1
 801615a:	6163      	str	r3, [r4, #20]
 801615c:	b002      	add	sp, #8
 801615e:	bd70      	pop	{r4, r5, r6, pc}
 8016160:	ab01      	add	r3, sp, #4
 8016162:	466a      	mov	r2, sp
 8016164:	f7ff ffc8 	bl	80160f8 <__swhatbuf_r>
 8016168:	9900      	ldr	r1, [sp, #0]
 801616a:	4605      	mov	r5, r0
 801616c:	4630      	mov	r0, r6
 801616e:	f7fe fc01 	bl	8014974 <_malloc_r>
 8016172:	b948      	cbnz	r0, 8016188 <__smakebuf_r+0x44>
 8016174:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016178:	059a      	lsls	r2, r3, #22
 801617a:	d4ef      	bmi.n	801615c <__smakebuf_r+0x18>
 801617c:	f023 0303 	bic.w	r3, r3, #3
 8016180:	f043 0302 	orr.w	r3, r3, #2
 8016184:	81a3      	strh	r3, [r4, #12]
 8016186:	e7e3      	b.n	8016150 <__smakebuf_r+0xc>
 8016188:	89a3      	ldrh	r3, [r4, #12]
 801618a:	6020      	str	r0, [r4, #0]
 801618c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016190:	81a3      	strh	r3, [r4, #12]
 8016192:	9b00      	ldr	r3, [sp, #0]
 8016194:	6163      	str	r3, [r4, #20]
 8016196:	9b01      	ldr	r3, [sp, #4]
 8016198:	6120      	str	r0, [r4, #16]
 801619a:	b15b      	cbz	r3, 80161b4 <__smakebuf_r+0x70>
 801619c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80161a0:	4630      	mov	r0, r6
 80161a2:	f000 f81d 	bl	80161e0 <_isatty_r>
 80161a6:	b128      	cbz	r0, 80161b4 <__smakebuf_r+0x70>
 80161a8:	89a3      	ldrh	r3, [r4, #12]
 80161aa:	f023 0303 	bic.w	r3, r3, #3
 80161ae:	f043 0301 	orr.w	r3, r3, #1
 80161b2:	81a3      	strh	r3, [r4, #12]
 80161b4:	89a3      	ldrh	r3, [r4, #12]
 80161b6:	431d      	orrs	r5, r3
 80161b8:	81a5      	strh	r5, [r4, #12]
 80161ba:	e7cf      	b.n	801615c <__smakebuf_r+0x18>

080161bc <_fstat_r>:
 80161bc:	b538      	push	{r3, r4, r5, lr}
 80161be:	4d07      	ldr	r5, [pc, #28]	; (80161dc <_fstat_r+0x20>)
 80161c0:	2300      	movs	r3, #0
 80161c2:	4604      	mov	r4, r0
 80161c4:	4608      	mov	r0, r1
 80161c6:	4611      	mov	r1, r2
 80161c8:	602b      	str	r3, [r5, #0]
 80161ca:	f7f5 fabb 	bl	800b744 <_fstat>
 80161ce:	1c43      	adds	r3, r0, #1
 80161d0:	d102      	bne.n	80161d8 <_fstat_r+0x1c>
 80161d2:	682b      	ldr	r3, [r5, #0]
 80161d4:	b103      	cbz	r3, 80161d8 <_fstat_r+0x1c>
 80161d6:	6023      	str	r3, [r4, #0]
 80161d8:	bd38      	pop	{r3, r4, r5, pc}
 80161da:	bf00      	nop
 80161dc:	20008a00 	.word	0x20008a00

080161e0 <_isatty_r>:
 80161e0:	b538      	push	{r3, r4, r5, lr}
 80161e2:	4d06      	ldr	r5, [pc, #24]	; (80161fc <_isatty_r+0x1c>)
 80161e4:	2300      	movs	r3, #0
 80161e6:	4604      	mov	r4, r0
 80161e8:	4608      	mov	r0, r1
 80161ea:	602b      	str	r3, [r5, #0]
 80161ec:	f7f5 faba 	bl	800b764 <_isatty>
 80161f0:	1c43      	adds	r3, r0, #1
 80161f2:	d102      	bne.n	80161fa <_isatty_r+0x1a>
 80161f4:	682b      	ldr	r3, [r5, #0]
 80161f6:	b103      	cbz	r3, 80161fa <_isatty_r+0x1a>
 80161f8:	6023      	str	r3, [r4, #0]
 80161fa:	bd38      	pop	{r3, r4, r5, pc}
 80161fc:	20008a00 	.word	0x20008a00

08016200 <_init>:
 8016200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016202:	bf00      	nop
 8016204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016206:	bc08      	pop	{r3}
 8016208:	469e      	mov	lr, r3
 801620a:	4770      	bx	lr

0801620c <_fini>:
 801620c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801620e:	bf00      	nop
 8016210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016212:	bc08      	pop	{r3}
 8016214:	469e      	mov	lr, r3
 8016216:	4770      	bx	lr
